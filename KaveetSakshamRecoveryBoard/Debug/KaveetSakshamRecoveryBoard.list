
KaveetSakshamRecoveryBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f6b4  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000598  0800f8f0  0800f8f0  0001f8f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800fe88  0800fe88  0001fe88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800fe90  0800fe90  0001fe90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0800fe94  0800fe94  0001fe94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  0800fe98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000063ac  20000074  0800ff0c  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006420  0800ff0c  00026420  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002ecaf  00000000  00000000  000200aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006bd4  00000000  00000000  0004ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00001f78  00000000  00000000  00055930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001be0  00000000  00000000  000578a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00039751  00000000  00000000  00059488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002e7f8  00000000  00000000  00092bd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00155fbc  00000000  00000000  000c13d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0021738d  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008ac8  00000000  00000000  002173e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000074 	.word	0x20000074
 8000254:	00000000 	.word	0x00000000
 8000258:	0800f8d4 	.word	0x0800f8d4

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000078 	.word	0x20000078
 8000274:	0800f8d4 	.word	0x0800f8d4

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4913      	ldr	r1, [pc, #76]	; (80002e0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	f641 713f 	movw	r1, #7999	; 0x1f3f
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002a0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002aa:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ae:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b8:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002c0:	f7ff bffe 	b.w	80002c0 <__tx_BadHandler>

080002c4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002cc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ce:	f000 f89d 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d6:	4770      	bx	lr

080002d8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_NMIHandler>

080002dc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002dc:	f7ff bffe 	b.w	80002dc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002e0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e8:	20005e00 	.word	0x20005e00
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00c fe54 	bl	800d040 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00c fe78 	bl	800d090 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20005e9c 	.word	0x20005e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20005e04 	.word	0x20005e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20005e08 	.word	0x20005e08
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20006408 	.word	0x20006408

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00c f8c6 	bl	800c5f4 <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00b ff87 	bl	800c380 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20005ea8 	.word	0x20005ea8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20006408 	.word	0x20006408
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20005eac 	.word	0x20005eac
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	20005f38 	.word	0x20005f38
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	20005f3c 	.word	0x20005f3c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	20005f34 	.word	0x20005f34
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20005f30 	.word	0x20005f30
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20005e9c 	.word	0x20005e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20005e04 	.word	0x20005e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20005e08 	.word	0x20005e08
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strlen>:
 80004c4:	4603      	mov	r3, r0
 80004c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004ca:	2a00      	cmp	r2, #0
 80004cc:	d1fb      	bne.n	80004c6 <strlen+0x2>
 80004ce:	1a18      	subs	r0, r3, r0
 80004d0:	3801      	subs	r0, #1
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_drsub>:
 80004d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004d8:	e002      	b.n	80004e0 <__adddf3>
 80004da:	bf00      	nop

080004dc <__aeabi_dsub>:
 80004dc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004e0 <__adddf3>:
 80004e0:	b530      	push	{r4, r5, lr}
 80004e2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004e6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004ea:	ea94 0f05 	teq	r4, r5
 80004ee:	bf08      	it	eq
 80004f0:	ea90 0f02 	teqeq	r0, r2
 80004f4:	bf1f      	itttt	ne
 80004f6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004fa:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004fe:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000502:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000506:	f000 80e2 	beq.w	80006ce <__adddf3+0x1ee>
 800050a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800050e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000512:	bfb8      	it	lt
 8000514:	426d      	neglt	r5, r5
 8000516:	dd0c      	ble.n	8000532 <__adddf3+0x52>
 8000518:	442c      	add	r4, r5
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	ea82 0000 	eor.w	r0, r2, r0
 8000526:	ea83 0101 	eor.w	r1, r3, r1
 800052a:	ea80 0202 	eor.w	r2, r0, r2
 800052e:	ea81 0303 	eor.w	r3, r1, r3
 8000532:	2d36      	cmp	r5, #54	; 0x36
 8000534:	bf88      	it	hi
 8000536:	bd30      	pophi	{r4, r5, pc}
 8000538:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800053c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000540:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000544:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000548:	d002      	beq.n	8000550 <__adddf3+0x70>
 800054a:	4240      	negs	r0, r0
 800054c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000550:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000554:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000558:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x84>
 800055e:	4252      	negs	r2, r2
 8000560:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000564:	ea94 0f05 	teq	r4, r5
 8000568:	f000 80a7 	beq.w	80006ba <__adddf3+0x1da>
 800056c:	f1a4 0401 	sub.w	r4, r4, #1
 8000570:	f1d5 0e20 	rsbs	lr, r5, #32
 8000574:	db0d      	blt.n	8000592 <__adddf3+0xb2>
 8000576:	fa02 fc0e 	lsl.w	ip, r2, lr
 800057a:	fa22 f205 	lsr.w	r2, r2, r5
 800057e:	1880      	adds	r0, r0, r2
 8000580:	f141 0100 	adc.w	r1, r1, #0
 8000584:	fa03 f20e 	lsl.w	r2, r3, lr
 8000588:	1880      	adds	r0, r0, r2
 800058a:	fa43 f305 	asr.w	r3, r3, r5
 800058e:	4159      	adcs	r1, r3
 8000590:	e00e      	b.n	80005b0 <__adddf3+0xd0>
 8000592:	f1a5 0520 	sub.w	r5, r5, #32
 8000596:	f10e 0e20 	add.w	lr, lr, #32
 800059a:	2a01      	cmp	r2, #1
 800059c:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005a0:	bf28      	it	cs
 80005a2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005a6:	fa43 f305 	asr.w	r3, r3, r5
 80005aa:	18c0      	adds	r0, r0, r3
 80005ac:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	d507      	bpl.n	80005c6 <__adddf3+0xe6>
 80005b6:	f04f 0e00 	mov.w	lr, #0
 80005ba:	f1dc 0c00 	rsbs	ip, ip, #0
 80005be:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005c2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005c6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ca:	d31b      	bcc.n	8000604 <__adddf3+0x124>
 80005cc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005d0:	d30c      	bcc.n	80005ec <__adddf3+0x10c>
 80005d2:	0849      	lsrs	r1, r1, #1
 80005d4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005d8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005dc:	f104 0401 	add.w	r4, r4, #1
 80005e0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005e4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005e8:	f080 809a 	bcs.w	8000720 <__adddf3+0x240>
 80005ec:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005f0:	bf08      	it	eq
 80005f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005f6:	f150 0000 	adcs.w	r0, r0, #0
 80005fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005fe:	ea41 0105 	orr.w	r1, r1, r5
 8000602:	bd30      	pop	{r4, r5, pc}
 8000604:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000608:	4140      	adcs	r0, r0
 800060a:	eb41 0101 	adc.w	r1, r1, r1
 800060e:	3c01      	subs	r4, #1
 8000610:	bf28      	it	cs
 8000612:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000616:	d2e9      	bcs.n	80005ec <__adddf3+0x10c>
 8000618:	f091 0f00 	teq	r1, #0
 800061c:	bf04      	itt	eq
 800061e:	4601      	moveq	r1, r0
 8000620:	2000      	moveq	r0, #0
 8000622:	fab1 f381 	clz	r3, r1
 8000626:	bf08      	it	eq
 8000628:	3320      	addeq	r3, #32
 800062a:	f1a3 030b 	sub.w	r3, r3, #11
 800062e:	f1b3 0220 	subs.w	r2, r3, #32
 8000632:	da0c      	bge.n	800064e <__adddf3+0x16e>
 8000634:	320c      	adds	r2, #12
 8000636:	dd08      	ble.n	800064a <__adddf3+0x16a>
 8000638:	f102 0c14 	add.w	ip, r2, #20
 800063c:	f1c2 020c 	rsb	r2, r2, #12
 8000640:	fa01 f00c 	lsl.w	r0, r1, ip
 8000644:	fa21 f102 	lsr.w	r1, r1, r2
 8000648:	e00c      	b.n	8000664 <__adddf3+0x184>
 800064a:	f102 0214 	add.w	r2, r2, #20
 800064e:	bfd8      	it	le
 8000650:	f1c2 0c20 	rsble	ip, r2, #32
 8000654:	fa01 f102 	lsl.w	r1, r1, r2
 8000658:	fa20 fc0c 	lsr.w	ip, r0, ip
 800065c:	bfdc      	itt	le
 800065e:	ea41 010c 	orrle.w	r1, r1, ip
 8000662:	4090      	lslle	r0, r2
 8000664:	1ae4      	subs	r4, r4, r3
 8000666:	bfa2      	ittt	ge
 8000668:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800066c:	4329      	orrge	r1, r5
 800066e:	bd30      	popge	{r4, r5, pc}
 8000670:	ea6f 0404 	mvn.w	r4, r4
 8000674:	3c1f      	subs	r4, #31
 8000676:	da1c      	bge.n	80006b2 <__adddf3+0x1d2>
 8000678:	340c      	adds	r4, #12
 800067a:	dc0e      	bgt.n	800069a <__adddf3+0x1ba>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0220 	rsb	r2, r4, #32
 8000684:	fa20 f004 	lsr.w	r0, r0, r4
 8000688:	fa01 f302 	lsl.w	r3, r1, r2
 800068c:	ea40 0003 	orr.w	r0, r0, r3
 8000690:	fa21 f304 	lsr.w	r3, r1, r4
 8000694:	ea45 0103 	orr.w	r1, r5, r3
 8000698:	bd30      	pop	{r4, r5, pc}
 800069a:	f1c4 040c 	rsb	r4, r4, #12
 800069e:	f1c4 0220 	rsb	r2, r4, #32
 80006a2:	fa20 f002 	lsr.w	r0, r0, r2
 80006a6:	fa01 f304 	lsl.w	r3, r1, r4
 80006aa:	ea40 0003 	orr.w	r0, r0, r3
 80006ae:	4629      	mov	r1, r5
 80006b0:	bd30      	pop	{r4, r5, pc}
 80006b2:	fa21 f004 	lsr.w	r0, r1, r4
 80006b6:	4629      	mov	r1, r5
 80006b8:	bd30      	pop	{r4, r5, pc}
 80006ba:	f094 0f00 	teq	r4, #0
 80006be:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006c2:	bf06      	itte	eq
 80006c4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006c8:	3401      	addeq	r4, #1
 80006ca:	3d01      	subne	r5, #1
 80006cc:	e74e      	b.n	800056c <__adddf3+0x8c>
 80006ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006d2:	bf18      	it	ne
 80006d4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006d8:	d029      	beq.n	800072e <__adddf3+0x24e>
 80006da:	ea94 0f05 	teq	r4, r5
 80006de:	bf08      	it	eq
 80006e0:	ea90 0f02 	teqeq	r0, r2
 80006e4:	d005      	beq.n	80006f2 <__adddf3+0x212>
 80006e6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006ea:	bf04      	itt	eq
 80006ec:	4619      	moveq	r1, r3
 80006ee:	4610      	moveq	r0, r2
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	ea91 0f03 	teq	r1, r3
 80006f6:	bf1e      	ittt	ne
 80006f8:	2100      	movne	r1, #0
 80006fa:	2000      	movne	r0, #0
 80006fc:	bd30      	popne	{r4, r5, pc}
 80006fe:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000702:	d105      	bne.n	8000710 <__adddf3+0x230>
 8000704:	0040      	lsls	r0, r0, #1
 8000706:	4149      	adcs	r1, r1
 8000708:	bf28      	it	cs
 800070a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800070e:	bd30      	pop	{r4, r5, pc}
 8000710:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000714:	bf3c      	itt	cc
 8000716:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800071a:	bd30      	popcc	{r4, r5, pc}
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000724:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000728:	f04f 0000 	mov.w	r0, #0
 800072c:	bd30      	pop	{r4, r5, pc}
 800072e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000732:	bf1a      	itte	ne
 8000734:	4619      	movne	r1, r3
 8000736:	4610      	movne	r0, r2
 8000738:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800073c:	bf1c      	itt	ne
 800073e:	460b      	movne	r3, r1
 8000740:	4602      	movne	r2, r0
 8000742:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000746:	bf06      	itte	eq
 8000748:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800074c:	ea91 0f03 	teqeq	r1, r3
 8000750:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000754:	bd30      	pop	{r4, r5, pc}
 8000756:	bf00      	nop

08000758 <__aeabi_ui2d>:
 8000758:	f090 0f00 	teq	r0, #0
 800075c:	bf04      	itt	eq
 800075e:	2100      	moveq	r1, #0
 8000760:	4770      	bxeq	lr
 8000762:	b530      	push	{r4, r5, lr}
 8000764:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000768:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800076c:	f04f 0500 	mov.w	r5, #0
 8000770:	f04f 0100 	mov.w	r1, #0
 8000774:	e750      	b.n	8000618 <__adddf3+0x138>
 8000776:	bf00      	nop

08000778 <__aeabi_i2d>:
 8000778:	f090 0f00 	teq	r0, #0
 800077c:	bf04      	itt	eq
 800077e:	2100      	moveq	r1, #0
 8000780:	4770      	bxeq	lr
 8000782:	b530      	push	{r4, r5, lr}
 8000784:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000788:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800078c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000790:	bf48      	it	mi
 8000792:	4240      	negmi	r0, r0
 8000794:	f04f 0100 	mov.w	r1, #0
 8000798:	e73e      	b.n	8000618 <__adddf3+0x138>
 800079a:	bf00      	nop

0800079c <__aeabi_f2d>:
 800079c:	0042      	lsls	r2, r0, #1
 800079e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007a2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007a6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007aa:	bf1f      	itttt	ne
 80007ac:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007b0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007b4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007b8:	4770      	bxne	lr
 80007ba:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007be:	bf08      	it	eq
 80007c0:	4770      	bxeq	lr
 80007c2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007c6:	bf04      	itt	eq
 80007c8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007cc:	4770      	bxeq	lr
 80007ce:	b530      	push	{r4, r5, lr}
 80007d0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	e71c      	b.n	8000618 <__adddf3+0x138>
 80007de:	bf00      	nop

080007e0 <__aeabi_ul2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f04f 0500 	mov.w	r5, #0
 80007ee:	e00a      	b.n	8000806 <__aeabi_l2d+0x16>

080007f0 <__aeabi_l2d>:
 80007f0:	ea50 0201 	orrs.w	r2, r0, r1
 80007f4:	bf08      	it	eq
 80007f6:	4770      	bxeq	lr
 80007f8:	b530      	push	{r4, r5, lr}
 80007fa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007fe:	d502      	bpl.n	8000806 <__aeabi_l2d+0x16>
 8000800:	4240      	negs	r0, r0
 8000802:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000806:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800080a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800080e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000812:	f43f aed8 	beq.w	80005c6 <__adddf3+0xe6>
 8000816:	f04f 0203 	mov.w	r2, #3
 800081a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800081e:	bf18      	it	ne
 8000820:	3203      	addne	r2, #3
 8000822:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000826:	bf18      	it	ne
 8000828:	3203      	addne	r2, #3
 800082a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800082e:	f1c2 0320 	rsb	r3, r2, #32
 8000832:	fa00 fc03 	lsl.w	ip, r0, r3
 8000836:	fa20 f002 	lsr.w	r0, r0, r2
 800083a:	fa01 fe03 	lsl.w	lr, r1, r3
 800083e:	ea40 000e 	orr.w	r0, r0, lr
 8000842:	fa21 f102 	lsr.w	r1, r1, r2
 8000846:	4414      	add	r4, r2
 8000848:	e6bd      	b.n	80005c6 <__adddf3+0xe6>
 800084a:	bf00      	nop

0800084c <__aeabi_dmul>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8de 	bleq	8000a28 <__aeabi_dmul+0x1dc>
 800086c:	442c      	add	r4, r5
 800086e:	ea81 0603 	eor.w	r6, r1, r3
 8000872:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000876:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800087a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800087e:	bf18      	it	ne
 8000880:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000884:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000888:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800088c:	d038      	beq.n	8000900 <__aeabi_dmul+0xb4>
 800088e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000892:	f04f 0500 	mov.w	r5, #0
 8000896:	fbe1 e502 	umlal	lr, r5, r1, r2
 800089a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800089e:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008a2:	f04f 0600 	mov.w	r6, #0
 80008a6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008aa:	f09c 0f00 	teq	ip, #0
 80008ae:	bf18      	it	ne
 80008b0:	f04e 0e01 	orrne.w	lr, lr, #1
 80008b4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008b8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008bc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008c0:	d204      	bcs.n	80008cc <__aeabi_dmul+0x80>
 80008c2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008c6:	416d      	adcs	r5, r5
 80008c8:	eb46 0606 	adc.w	r6, r6, r6
 80008cc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008d0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008d4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008d8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008dc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008e0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008e4:	bf88      	it	hi
 80008e6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008ea:	d81e      	bhi.n	800092a <__aeabi_dmul+0xde>
 80008ec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80008f0:	bf08      	it	eq
 80008f2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000904:	ea46 0101 	orr.w	r1, r6, r1
 8000908:	ea40 0002 	orr.w	r0, r0, r2
 800090c:	ea81 0103 	eor.w	r1, r1, r3
 8000910:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000914:	bfc2      	ittt	gt
 8000916:	ebd4 050c 	rsbsgt	r5, r4, ip
 800091a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800091e:	bd70      	popgt	{r4, r5, r6, pc}
 8000920:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000924:	f04f 0e00 	mov.w	lr, #0
 8000928:	3c01      	subs	r4, #1
 800092a:	f300 80ab 	bgt.w	8000a84 <__aeabi_dmul+0x238>
 800092e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000932:	bfde      	ittt	le
 8000934:	2000      	movle	r0, #0
 8000936:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800093a:	bd70      	pople	{r4, r5, r6, pc}
 800093c:	f1c4 0400 	rsb	r4, r4, #0
 8000940:	3c20      	subs	r4, #32
 8000942:	da35      	bge.n	80009b0 <__aeabi_dmul+0x164>
 8000944:	340c      	adds	r4, #12
 8000946:	dc1b      	bgt.n	8000980 <__aeabi_dmul+0x134>
 8000948:	f104 0414 	add.w	r4, r4, #20
 800094c:	f1c4 0520 	rsb	r5, r4, #32
 8000950:	fa00 f305 	lsl.w	r3, r0, r5
 8000954:	fa20 f004 	lsr.w	r0, r0, r4
 8000958:	fa01 f205 	lsl.w	r2, r1, r5
 800095c:	ea40 0002 	orr.w	r0, r0, r2
 8000960:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000964:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000968:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800096c:	fa21 f604 	lsr.w	r6, r1, r4
 8000970:	eb42 0106 	adc.w	r1, r2, r6
 8000974:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000978:	bf08      	it	eq
 800097a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f1c4 040c 	rsb	r4, r4, #12
 8000984:	f1c4 0520 	rsb	r5, r4, #32
 8000988:	fa00 f304 	lsl.w	r3, r0, r4
 800098c:	fa20 f005 	lsr.w	r0, r0, r5
 8000990:	fa01 f204 	lsl.w	r2, r1, r4
 8000994:	ea40 0002 	orr.w	r0, r0, r2
 8000998:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800099c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009a0:	f141 0100 	adc.w	r1, r1, #0
 80009a4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009a8:	bf08      	it	eq
 80009aa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f1c4 0520 	rsb	r5, r4, #32
 80009b4:	fa00 f205 	lsl.w	r2, r0, r5
 80009b8:	ea4e 0e02 	orr.w	lr, lr, r2
 80009bc:	fa20 f304 	lsr.w	r3, r0, r4
 80009c0:	fa01 f205 	lsl.w	r2, r1, r5
 80009c4:	ea43 0302 	orr.w	r3, r3, r2
 80009c8:	fa21 f004 	lsr.w	r0, r1, r4
 80009cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009d0:	fa21 f204 	lsr.w	r2, r1, r4
 80009d4:	ea20 0002 	bic.w	r0, r0, r2
 80009d8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009dc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009e0:	bf08      	it	eq
 80009e2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009e6:	bd70      	pop	{r4, r5, r6, pc}
 80009e8:	f094 0f00 	teq	r4, #0
 80009ec:	d10f      	bne.n	8000a0e <__aeabi_dmul+0x1c2>
 80009ee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80009f2:	0040      	lsls	r0, r0, #1
 80009f4:	eb41 0101 	adc.w	r1, r1, r1
 80009f8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009fc:	bf08      	it	eq
 80009fe:	3c01      	subeq	r4, #1
 8000a00:	d0f7      	beq.n	80009f2 <__aeabi_dmul+0x1a6>
 8000a02:	ea41 0106 	orr.w	r1, r1, r6
 8000a06:	f095 0f00 	teq	r5, #0
 8000a0a:	bf18      	it	ne
 8000a0c:	4770      	bxne	lr
 8000a0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a12:	0052      	lsls	r2, r2, #1
 8000a14:	eb43 0303 	adc.w	r3, r3, r3
 8000a18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a1c:	bf08      	it	eq
 8000a1e:	3d01      	subeq	r5, #1
 8000a20:	d0f7      	beq.n	8000a12 <__aeabi_dmul+0x1c6>
 8000a22:	ea43 0306 	orr.w	r3, r3, r6
 8000a26:	4770      	bx	lr
 8000a28:	ea94 0f0c 	teq	r4, ip
 8000a2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a30:	bf18      	it	ne
 8000a32:	ea95 0f0c 	teqne	r5, ip
 8000a36:	d00c      	beq.n	8000a52 <__aeabi_dmul+0x206>
 8000a38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a3c:	bf18      	it	ne
 8000a3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a42:	d1d1      	bne.n	80009e8 <__aeabi_dmul+0x19c>
 8000a44:	ea81 0103 	eor.w	r1, r1, r3
 8000a48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	bd70      	pop	{r4, r5, r6, pc}
 8000a52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a56:	bf06      	itte	eq
 8000a58:	4610      	moveq	r0, r2
 8000a5a:	4619      	moveq	r1, r3
 8000a5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a60:	d019      	beq.n	8000a96 <__aeabi_dmul+0x24a>
 8000a62:	ea94 0f0c 	teq	r4, ip
 8000a66:	d102      	bne.n	8000a6e <__aeabi_dmul+0x222>
 8000a68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a6c:	d113      	bne.n	8000a96 <__aeabi_dmul+0x24a>
 8000a6e:	ea95 0f0c 	teq	r5, ip
 8000a72:	d105      	bne.n	8000a80 <__aeabi_dmul+0x234>
 8000a74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a78:	bf1c      	itt	ne
 8000a7a:	4610      	movne	r0, r2
 8000a7c:	4619      	movne	r1, r3
 8000a7e:	d10a      	bne.n	8000a96 <__aeabi_dmul+0x24a>
 8000a80:	ea81 0103 	eor.w	r1, r1, r3
 8000a84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a90:	f04f 0000 	mov.w	r0, #0
 8000a94:	bd70      	pop	{r4, r5, r6, pc}
 8000a96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000a9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000a9e:	bd70      	pop	{r4, r5, r6, pc}

08000aa0 <__aeabi_ddiv>:
 8000aa0:	b570      	push	{r4, r5, r6, lr}
 8000aa2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aa6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000aaa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000aae:	bf1d      	ittte	ne
 8000ab0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ab4:	ea94 0f0c 	teqne	r4, ip
 8000ab8:	ea95 0f0c 	teqne	r5, ip
 8000abc:	f000 f8a7 	bleq	8000c0e <__aeabi_ddiv+0x16e>
 8000ac0:	eba4 0405 	sub.w	r4, r4, r5
 8000ac4:	ea81 0e03 	eor.w	lr, r1, r3
 8000ac8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000acc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ad0:	f000 8088 	beq.w	8000be4 <__aeabi_ddiv+0x144>
 8000ad4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000ad8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000adc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000ae0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000ae4:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000ae8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000aec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000af0:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000af4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000af8:	429d      	cmp	r5, r3
 8000afa:	bf08      	it	eq
 8000afc:	4296      	cmpeq	r6, r2
 8000afe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b02:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b06:	d202      	bcs.n	8000b0e <__aeabi_ddiv+0x6e>
 8000b08:	085b      	lsrs	r3, r3, #1
 8000b0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b0e:	1ab6      	subs	r6, r6, r2
 8000b10:	eb65 0503 	sbc.w	r5, r5, r3
 8000b14:	085b      	lsrs	r3, r3, #1
 8000b16:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b22:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b26:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b2a:	bf22      	ittt	cs
 8000b2c:	1ab6      	subcs	r6, r6, r2
 8000b2e:	4675      	movcs	r5, lr
 8000b30:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b34:	085b      	lsrs	r3, r3, #1
 8000b36:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b3a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b3e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b42:	bf22      	ittt	cs
 8000b44:	1ab6      	subcs	r6, r6, r2
 8000b46:	4675      	movcs	r5, lr
 8000b48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b4c:	085b      	lsrs	r3, r3, #1
 8000b4e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b52:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b56:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b5a:	bf22      	ittt	cs
 8000b5c:	1ab6      	subcs	r6, r6, r2
 8000b5e:	4675      	movcs	r5, lr
 8000b60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b64:	085b      	lsrs	r3, r3, #1
 8000b66:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b6a:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b72:	bf22      	ittt	cs
 8000b74:	1ab6      	subcs	r6, r6, r2
 8000b76:	4675      	movcs	r5, lr
 8000b78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b7c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b80:	d018      	beq.n	8000bb4 <__aeabi_ddiv+0x114>
 8000b82:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000b8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000b92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000b96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000b9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000b9e:	d1c0      	bne.n	8000b22 <__aeabi_ddiv+0x82>
 8000ba0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000ba4:	d10b      	bne.n	8000bbe <__aeabi_ddiv+0x11e>
 8000ba6:	ea41 0100 	orr.w	r1, r1, r0
 8000baa:	f04f 0000 	mov.w	r0, #0
 8000bae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bb2:	e7b6      	b.n	8000b22 <__aeabi_ddiv+0x82>
 8000bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb8:	bf04      	itt	eq
 8000bba:	4301      	orreq	r1, r0
 8000bbc:	2000      	moveq	r0, #0
 8000bbe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bc2:	bf88      	it	hi
 8000bc4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bc8:	f63f aeaf 	bhi.w	800092a <__aeabi_dmul+0xde>
 8000bcc:	ebb5 0c03 	subs.w	ip, r5, r3
 8000bd0:	bf04      	itt	eq
 8000bd2:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bd6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bda:	f150 0000 	adcs.w	r0, r0, #0
 8000bde:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000be2:	bd70      	pop	{r4, r5, r6, pc}
 8000be4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000be8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000bec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000bf0:	bfc2      	ittt	gt
 8000bf2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000bf6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000bfa:	bd70      	popgt	{r4, r5, r6, pc}
 8000bfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c00:	f04f 0e00 	mov.w	lr, #0
 8000c04:	3c01      	subs	r4, #1
 8000c06:	e690      	b.n	800092a <__aeabi_dmul+0xde>
 8000c08:	ea45 0e06 	orr.w	lr, r5, r6
 8000c0c:	e68d      	b.n	800092a <__aeabi_dmul+0xde>
 8000c0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c12:	ea94 0f0c 	teq	r4, ip
 8000c16:	bf08      	it	eq
 8000c18:	ea95 0f0c 	teqeq	r5, ip
 8000c1c:	f43f af3b 	beq.w	8000a96 <__aeabi_dmul+0x24a>
 8000c20:	ea94 0f0c 	teq	r4, ip
 8000c24:	d10a      	bne.n	8000c3c <__aeabi_ddiv+0x19c>
 8000c26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c2a:	f47f af34 	bne.w	8000a96 <__aeabi_dmul+0x24a>
 8000c2e:	ea95 0f0c 	teq	r5, ip
 8000c32:	f47f af25 	bne.w	8000a80 <__aeabi_dmul+0x234>
 8000c36:	4610      	mov	r0, r2
 8000c38:	4619      	mov	r1, r3
 8000c3a:	e72c      	b.n	8000a96 <__aeabi_dmul+0x24a>
 8000c3c:	ea95 0f0c 	teq	r5, ip
 8000c40:	d106      	bne.n	8000c50 <__aeabi_ddiv+0x1b0>
 8000c42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c46:	f43f aefd 	beq.w	8000a44 <__aeabi_dmul+0x1f8>
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	e722      	b.n	8000a96 <__aeabi_dmul+0x24a>
 8000c50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c54:	bf18      	it	ne
 8000c56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c5a:	f47f aec5 	bne.w	80009e8 <__aeabi_dmul+0x19c>
 8000c5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c62:	f47f af0d 	bne.w	8000a80 <__aeabi_dmul+0x234>
 8000c66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c6a:	f47f aeeb 	bne.w	8000a44 <__aeabi_dmul+0x1f8>
 8000c6e:	e712      	b.n	8000a96 <__aeabi_dmul+0x24a>

08000c70 <__gedf2>:
 8000c70:	f04f 3cff 	mov.w	ip, #4294967295
 8000c74:	e006      	b.n	8000c84 <__cmpdf2+0x4>
 8000c76:	bf00      	nop

08000c78 <__ledf2>:
 8000c78:	f04f 0c01 	mov.w	ip, #1
 8000c7c:	e002      	b.n	8000c84 <__cmpdf2+0x4>
 8000c7e:	bf00      	nop

08000c80 <__cmpdf2>:
 8000c80:	f04f 0c01 	mov.w	ip, #1
 8000c84:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000c8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000c90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000c94:	bf18      	it	ne
 8000c96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000c9a:	d01b      	beq.n	8000cd4 <__cmpdf2+0x54>
 8000c9c:	b001      	add	sp, #4
 8000c9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000ca2:	bf0c      	ite	eq
 8000ca4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ca8:	ea91 0f03 	teqne	r1, r3
 8000cac:	bf02      	ittt	eq
 8000cae:	ea90 0f02 	teqeq	r0, r2
 8000cb2:	2000      	moveq	r0, #0
 8000cb4:	4770      	bxeq	lr
 8000cb6:	f110 0f00 	cmn.w	r0, #0
 8000cba:	ea91 0f03 	teq	r1, r3
 8000cbe:	bf58      	it	pl
 8000cc0:	4299      	cmppl	r1, r3
 8000cc2:	bf08      	it	eq
 8000cc4:	4290      	cmpeq	r0, r2
 8000cc6:	bf2c      	ite	cs
 8000cc8:	17d8      	asrcs	r0, r3, #31
 8000cca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000cce:	f040 0001 	orr.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cdc:	d102      	bne.n	8000ce4 <__cmpdf2+0x64>
 8000cde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ce2:	d107      	bne.n	8000cf4 <__cmpdf2+0x74>
 8000ce4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ce8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cec:	d1d6      	bne.n	8000c9c <__cmpdf2+0x1c>
 8000cee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000cf2:	d0d3      	beq.n	8000c9c <__cmpdf2+0x1c>
 8000cf4:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <__aeabi_cdrcmple>:
 8000cfc:	4684      	mov	ip, r0
 8000cfe:	4610      	mov	r0, r2
 8000d00:	4662      	mov	r2, ip
 8000d02:	468c      	mov	ip, r1
 8000d04:	4619      	mov	r1, r3
 8000d06:	4663      	mov	r3, ip
 8000d08:	e000      	b.n	8000d0c <__aeabi_cdcmpeq>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_cdcmpeq>:
 8000d0c:	b501      	push	{r0, lr}
 8000d0e:	f7ff ffb7 	bl	8000c80 <__cmpdf2>
 8000d12:	2800      	cmp	r0, #0
 8000d14:	bf48      	it	mi
 8000d16:	f110 0f00 	cmnmi.w	r0, #0
 8000d1a:	bd01      	pop	{r0, pc}

08000d1c <__aeabi_dcmpeq>:
 8000d1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d20:	f7ff fff4 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d24:	bf0c      	ite	eq
 8000d26:	2001      	moveq	r0, #1
 8000d28:	2000      	movne	r0, #0
 8000d2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d2e:	bf00      	nop

08000d30 <__aeabi_dcmplt>:
 8000d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d34:	f7ff ffea 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d38:	bf34      	ite	cc
 8000d3a:	2001      	movcc	r0, #1
 8000d3c:	2000      	movcs	r0, #0
 8000d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d42:	bf00      	nop

08000d44 <__aeabi_dcmple>:
 8000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d48:	f7ff ffe0 	bl	8000d0c <__aeabi_cdcmpeq>
 8000d4c:	bf94      	ite	ls
 8000d4e:	2001      	movls	r0, #1
 8000d50:	2000      	movhi	r0, #0
 8000d52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d56:	bf00      	nop

08000d58 <__aeabi_dcmpge>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff ffce 	bl	8000cfc <__aeabi_cdrcmple>
 8000d60:	bf94      	ite	ls
 8000d62:	2001      	movls	r0, #1
 8000d64:	2000      	movhi	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmpgt>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffc4 	bl	8000cfc <__aeabi_cdrcmple>
 8000d74:	bf34      	ite	cc
 8000d76:	2001      	movcc	r0, #1
 8000d78:	2000      	movcs	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_d2iz>:
 8000d80:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d84:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d88:	d215      	bcs.n	8000db6 <__aeabi_d2iz+0x36>
 8000d8a:	d511      	bpl.n	8000db0 <__aeabi_d2iz+0x30>
 8000d8c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000d90:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000d94:	d912      	bls.n	8000dbc <__aeabi_d2iz+0x3c>
 8000d96:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000d9a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000d9e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000da2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000da6:	fa23 f002 	lsr.w	r0, r3, r2
 8000daa:	bf18      	it	ne
 8000dac:	4240      	negne	r0, r0
 8000dae:	4770      	bx	lr
 8000db0:	f04f 0000 	mov.w	r0, #0
 8000db4:	4770      	bx	lr
 8000db6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dba:	d105      	bne.n	8000dc8 <__aeabi_d2iz+0x48>
 8000dbc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dc0:	bf08      	it	eq
 8000dc2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dc6:	4770      	bx	lr
 8000dc8:	f04f 0000 	mov.w	r0, #0
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop

08000dd0 <__aeabi_d2uiz>:
 8000dd0:	004a      	lsls	r2, r1, #1
 8000dd2:	d211      	bcs.n	8000df8 <__aeabi_d2uiz+0x28>
 8000dd4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dd8:	d211      	bcs.n	8000dfe <__aeabi_d2uiz+0x2e>
 8000dda:	d50d      	bpl.n	8000df8 <__aeabi_d2uiz+0x28>
 8000ddc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000de0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000de4:	d40e      	bmi.n	8000e04 <__aeabi_d2uiz+0x34>
 8000de6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000dee:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000df2:	fa23 f002 	lsr.w	r0, r3, r2
 8000df6:	4770      	bx	lr
 8000df8:	f04f 0000 	mov.w	r0, #0
 8000dfc:	4770      	bx	lr
 8000dfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e02:	d102      	bne.n	8000e0a <__aeabi_d2uiz+0x3a>
 8000e04:	f04f 30ff 	mov.w	r0, #4294967295
 8000e08:	4770      	bx	lr
 8000e0a:	f04f 0000 	mov.w	r0, #0
 8000e0e:	4770      	bx	lr

08000e10 <__aeabi_uldivmod>:
 8000e10:	b953      	cbnz	r3, 8000e28 <__aeabi_uldivmod+0x18>
 8000e12:	b94a      	cbnz	r2, 8000e28 <__aeabi_uldivmod+0x18>
 8000e14:	2900      	cmp	r1, #0
 8000e16:	bf08      	it	eq
 8000e18:	2800      	cmpeq	r0, #0
 8000e1a:	bf1c      	itt	ne
 8000e1c:	f04f 31ff 	movne.w	r1, #4294967295
 8000e20:	f04f 30ff 	movne.w	r0, #4294967295
 8000e24:	f000 b982 	b.w	800112c <__aeabi_idiv0>
 8000e28:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e2c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e30:	f000 f806 	bl	8000e40 <__udivmoddi4>
 8000e34:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e38:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e3c:	b004      	add	sp, #16
 8000e3e:	4770      	bx	lr

08000e40 <__udivmoddi4>:
 8000e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e44:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000e46:	4604      	mov	r4, r0
 8000e48:	460f      	mov	r7, r1
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d148      	bne.n	8000ee0 <__udivmoddi4+0xa0>
 8000e4e:	428a      	cmp	r2, r1
 8000e50:	4694      	mov	ip, r2
 8000e52:	d961      	bls.n	8000f18 <__udivmoddi4+0xd8>
 8000e54:	fab2 f382 	clz	r3, r2
 8000e58:	b143      	cbz	r3, 8000e6c <__udivmoddi4+0x2c>
 8000e5a:	f1c3 0120 	rsb	r1, r3, #32
 8000e5e:	409f      	lsls	r7, r3
 8000e60:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e64:	409c      	lsls	r4, r3
 8000e66:	fa20 f101 	lsr.w	r1, r0, r1
 8000e6a:	430f      	orrs	r7, r1
 8000e6c:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	0c22      	lsrs	r2, r4, #16
 8000e76:	fbb7 f6f1 	udiv	r6, r7, r1
 8000e7a:	fb01 7716 	mls	r7, r1, r6, r7
 8000e7e:	fb06 f00e 	mul.w	r0, r6, lr
 8000e82:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e86:	4290      	cmp	r0, r2
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x5c>
 8000e8a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e8e:	f106 37ff 	add.w	r7, r6, #4294967295
 8000e92:	d202      	bcs.n	8000e9a <__udivmoddi4+0x5a>
 8000e94:	4290      	cmp	r0, r2
 8000e96:	f200 8137 	bhi.w	8001108 <__udivmoddi4+0x2c8>
 8000e9a:	463e      	mov	r6, r7
 8000e9c:	1a12      	subs	r2, r2, r0
 8000e9e:	b2a4      	uxth	r4, r4
 8000ea0:	fbb2 f0f1 	udiv	r0, r2, r1
 8000ea4:	fb01 2210 	mls	r2, r1, r0, r2
 8000ea8:	fb00 fe0e 	mul.w	lr, r0, lr
 8000eac:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb0:	45a6      	cmp	lr, r4
 8000eb2:	d908      	bls.n	8000ec6 <__udivmoddi4+0x86>
 8000eb4:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb8:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ebc:	d202      	bcs.n	8000ec4 <__udivmoddi4+0x84>
 8000ebe:	45a6      	cmp	lr, r4
 8000ec0:	f200 811c 	bhi.w	80010fc <__udivmoddi4+0x2bc>
 8000ec4:	4610      	mov	r0, r2
 8000ec6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	2600      	movs	r6, #0
 8000ed0:	b11d      	cbz	r5, 8000eda <__udivmoddi4+0x9a>
 8000ed2:	40dc      	lsrs	r4, r3
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	e9c5 4300 	strd	r4, r3, [r5]
 8000eda:	4631      	mov	r1, r6
 8000edc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d909      	bls.n	8000ef8 <__udivmoddi4+0xb8>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	f000 80fd 	beq.w	80010e4 <__udivmoddi4+0x2a4>
 8000eea:	2600      	movs	r6, #0
 8000eec:	e9c5 0100 	strd	r0, r1, [r5]
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	4631      	mov	r1, r6
 8000ef4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef8:	fab3 f683 	clz	r6, r3
 8000efc:	2e00      	cmp	r6, #0
 8000efe:	d14b      	bne.n	8000f98 <__udivmoddi4+0x158>
 8000f00:	428b      	cmp	r3, r1
 8000f02:	f0c0 80f2 	bcc.w	80010ea <__udivmoddi4+0x2aa>
 8000f06:	4282      	cmp	r2, r0
 8000f08:	f240 80ef 	bls.w	80010ea <__udivmoddi4+0x2aa>
 8000f0c:	4630      	mov	r0, r6
 8000f0e:	2d00      	cmp	r5, #0
 8000f10:	d0e3      	beq.n	8000eda <__udivmoddi4+0x9a>
 8000f12:	e9c5 4700 	strd	r4, r7, [r5]
 8000f16:	e7e0      	b.n	8000eda <__udivmoddi4+0x9a>
 8000f18:	b902      	cbnz	r2, 8000f1c <__udivmoddi4+0xdc>
 8000f1a:	deff      	udf	#255	; 0xff
 8000f1c:	fab2 f382 	clz	r3, r2
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	f040 809d 	bne.w	8001060 <__udivmoddi4+0x220>
 8000f26:	1a89      	subs	r1, r1, r2
 8000f28:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000f2c:	b297      	uxth	r7, r2
 8000f2e:	2601      	movs	r6, #1
 8000f30:	0c20      	lsrs	r0, r4, #16
 8000f32:	fbb1 f2fe 	udiv	r2, r1, lr
 8000f36:	fb0e 1112 	mls	r1, lr, r2, r1
 8000f3a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f3e:	fb07 f002 	mul.w	r0, r7, r2
 8000f42:	4288      	cmp	r0, r1
 8000f44:	d90f      	bls.n	8000f66 <__udivmoddi4+0x126>
 8000f46:	eb1c 0101 	adds.w	r1, ip, r1
 8000f4a:	f102 38ff 	add.w	r8, r2, #4294967295
 8000f4e:	bf2c      	ite	cs
 8000f50:	f04f 0901 	movcs.w	r9, #1
 8000f54:	f04f 0900 	movcc.w	r9, #0
 8000f58:	4288      	cmp	r0, r1
 8000f5a:	d903      	bls.n	8000f64 <__udivmoddi4+0x124>
 8000f5c:	f1b9 0f00 	cmp.w	r9, #0
 8000f60:	f000 80cf 	beq.w	8001102 <__udivmoddi4+0x2c2>
 8000f64:	4642      	mov	r2, r8
 8000f66:	1a09      	subs	r1, r1, r0
 8000f68:	b2a4      	uxth	r4, r4
 8000f6a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f6e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f72:	fb00 f707 	mul.w	r7, r0, r7
 8000f76:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f7a:	42a7      	cmp	r7, r4
 8000f7c:	d908      	bls.n	8000f90 <__udivmoddi4+0x150>
 8000f7e:	eb1c 0404 	adds.w	r4, ip, r4
 8000f82:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f86:	d202      	bcs.n	8000f8e <__udivmoddi4+0x14e>
 8000f88:	42a7      	cmp	r7, r4
 8000f8a:	f200 80b4 	bhi.w	80010f6 <__udivmoddi4+0x2b6>
 8000f8e:	4608      	mov	r0, r1
 8000f90:	1be4      	subs	r4, r4, r7
 8000f92:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000f96:	e79b      	b.n	8000ed0 <__udivmoddi4+0x90>
 8000f98:	f1c6 0720 	rsb	r7, r6, #32
 8000f9c:	40b3      	lsls	r3, r6
 8000f9e:	fa01 f406 	lsl.w	r4, r1, r6
 8000fa2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fa6:	40f9      	lsrs	r1, r7
 8000fa8:	40b2      	lsls	r2, r6
 8000faa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fae:	fa20 f307 	lsr.w	r3, r0, r7
 8000fb2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fb6:	431c      	orrs	r4, r3
 8000fb8:	fa1f fe8c 	uxth.w	lr, ip
 8000fbc:	fa00 f306 	lsl.w	r3, r0, r6
 8000fc0:	0c20      	lsrs	r0, r4, #16
 8000fc2:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fc6:	fb09 1118 	mls	r1, r9, r8, r1
 8000fca:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fce:	fb08 f00e 	mul.w	r0, r8, lr
 8000fd2:	4288      	cmp	r0, r1
 8000fd4:	d90f      	bls.n	8000ff6 <__udivmoddi4+0x1b6>
 8000fd6:	eb1c 0101 	adds.w	r1, ip, r1
 8000fda:	f108 3aff 	add.w	sl, r8, #4294967295
 8000fde:	bf2c      	ite	cs
 8000fe0:	f04f 0b01 	movcs.w	fp, #1
 8000fe4:	f04f 0b00 	movcc.w	fp, #0
 8000fe8:	4288      	cmp	r0, r1
 8000fea:	d903      	bls.n	8000ff4 <__udivmoddi4+0x1b4>
 8000fec:	f1bb 0f00 	cmp.w	fp, #0
 8000ff0:	f000 808d 	beq.w	800110e <__udivmoddi4+0x2ce>
 8000ff4:	46d0      	mov	r8, sl
 8000ff6:	1a09      	subs	r1, r1, r0
 8000ff8:	b2a4      	uxth	r4, r4
 8000ffa:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ffe:	fb09 1110 	mls	r1, r9, r0, r1
 8001002:	fb00 fe0e 	mul.w	lr, r0, lr
 8001006:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800100a:	458e      	cmp	lr, r1
 800100c:	d907      	bls.n	800101e <__udivmoddi4+0x1de>
 800100e:	eb1c 0101 	adds.w	r1, ip, r1
 8001012:	f100 34ff 	add.w	r4, r0, #4294967295
 8001016:	d201      	bcs.n	800101c <__udivmoddi4+0x1dc>
 8001018:	458e      	cmp	lr, r1
 800101a:	d87f      	bhi.n	800111c <__udivmoddi4+0x2dc>
 800101c:	4620      	mov	r0, r4
 800101e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001022:	eba1 010e 	sub.w	r1, r1, lr
 8001026:	fba0 9802 	umull	r9, r8, r0, r2
 800102a:	4541      	cmp	r1, r8
 800102c:	464c      	mov	r4, r9
 800102e:	46c6      	mov	lr, r8
 8001030:	d302      	bcc.n	8001038 <__udivmoddi4+0x1f8>
 8001032:	d106      	bne.n	8001042 <__udivmoddi4+0x202>
 8001034:	454b      	cmp	r3, r9
 8001036:	d204      	bcs.n	8001042 <__udivmoddi4+0x202>
 8001038:	3801      	subs	r0, #1
 800103a:	ebb9 0402 	subs.w	r4, r9, r2
 800103e:	eb68 0e0c 	sbc.w	lr, r8, ip
 8001042:	2d00      	cmp	r5, #0
 8001044:	d070      	beq.n	8001128 <__udivmoddi4+0x2e8>
 8001046:	1b1a      	subs	r2, r3, r4
 8001048:	eb61 010e 	sbc.w	r1, r1, lr
 800104c:	fa22 f306 	lsr.w	r3, r2, r6
 8001050:	fa01 f707 	lsl.w	r7, r1, r7
 8001054:	40f1      	lsrs	r1, r6
 8001056:	2600      	movs	r6, #0
 8001058:	431f      	orrs	r7, r3
 800105a:	e9c5 7100 	strd	r7, r1, [r5]
 800105e:	e73c      	b.n	8000eda <__udivmoddi4+0x9a>
 8001060:	fa02 fc03 	lsl.w	ip, r2, r3
 8001064:	f1c3 0020 	rsb	r0, r3, #32
 8001068:	fa01 f203 	lsl.w	r2, r1, r3
 800106c:	fa21 f600 	lsr.w	r6, r1, r0
 8001070:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001074:	fa24 f100 	lsr.w	r1, r4, r0
 8001078:	fa1f f78c 	uxth.w	r7, ip
 800107c:	409c      	lsls	r4, r3
 800107e:	4311      	orrs	r1, r2
 8001080:	fbb6 f0fe 	udiv	r0, r6, lr
 8001084:	0c0a      	lsrs	r2, r1, #16
 8001086:	fb0e 6610 	mls	r6, lr, r0, r6
 800108a:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 800108e:	fb00 f607 	mul.w	r6, r0, r7
 8001092:	4296      	cmp	r6, r2
 8001094:	d90e      	bls.n	80010b4 <__udivmoddi4+0x274>
 8001096:	eb1c 0202 	adds.w	r2, ip, r2
 800109a:	f100 38ff 	add.w	r8, r0, #4294967295
 800109e:	bf2c      	ite	cs
 80010a0:	f04f 0901 	movcs.w	r9, #1
 80010a4:	f04f 0900 	movcc.w	r9, #0
 80010a8:	4296      	cmp	r6, r2
 80010aa:	d902      	bls.n	80010b2 <__udivmoddi4+0x272>
 80010ac:	f1b9 0f00 	cmp.w	r9, #0
 80010b0:	d031      	beq.n	8001116 <__udivmoddi4+0x2d6>
 80010b2:	4640      	mov	r0, r8
 80010b4:	1b92      	subs	r2, r2, r6
 80010b6:	b289      	uxth	r1, r1
 80010b8:	fbb2 f6fe 	udiv	r6, r2, lr
 80010bc:	fb0e 2216 	mls	r2, lr, r6, r2
 80010c0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80010c4:	fb06 f207 	mul.w	r2, r6, r7
 80010c8:	428a      	cmp	r2, r1
 80010ca:	d907      	bls.n	80010dc <__udivmoddi4+0x29c>
 80010cc:	eb1c 0101 	adds.w	r1, ip, r1
 80010d0:	f106 38ff 	add.w	r8, r6, #4294967295
 80010d4:	d201      	bcs.n	80010da <__udivmoddi4+0x29a>
 80010d6:	428a      	cmp	r2, r1
 80010d8:	d823      	bhi.n	8001122 <__udivmoddi4+0x2e2>
 80010da:	4646      	mov	r6, r8
 80010dc:	1a89      	subs	r1, r1, r2
 80010de:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010e2:	e725      	b.n	8000f30 <__udivmoddi4+0xf0>
 80010e4:	462e      	mov	r6, r5
 80010e6:	4628      	mov	r0, r5
 80010e8:	e6f7      	b.n	8000eda <__udivmoddi4+0x9a>
 80010ea:	1a84      	subs	r4, r0, r2
 80010ec:	eb61 0303 	sbc.w	r3, r1, r3
 80010f0:	2001      	movs	r0, #1
 80010f2:	461f      	mov	r7, r3
 80010f4:	e70b      	b.n	8000f0e <__udivmoddi4+0xce>
 80010f6:	4464      	add	r4, ip
 80010f8:	3802      	subs	r0, #2
 80010fa:	e749      	b.n	8000f90 <__udivmoddi4+0x150>
 80010fc:	4464      	add	r4, ip
 80010fe:	3802      	subs	r0, #2
 8001100:	e6e1      	b.n	8000ec6 <__udivmoddi4+0x86>
 8001102:	3a02      	subs	r2, #2
 8001104:	4461      	add	r1, ip
 8001106:	e72e      	b.n	8000f66 <__udivmoddi4+0x126>
 8001108:	3e02      	subs	r6, #2
 800110a:	4462      	add	r2, ip
 800110c:	e6c6      	b.n	8000e9c <__udivmoddi4+0x5c>
 800110e:	f1a8 0802 	sub.w	r8, r8, #2
 8001112:	4461      	add	r1, ip
 8001114:	e76f      	b.n	8000ff6 <__udivmoddi4+0x1b6>
 8001116:	3802      	subs	r0, #2
 8001118:	4462      	add	r2, ip
 800111a:	e7cb      	b.n	80010b4 <__udivmoddi4+0x274>
 800111c:	3802      	subs	r0, #2
 800111e:	4461      	add	r1, ip
 8001120:	e77d      	b.n	800101e <__udivmoddi4+0x1de>
 8001122:	3e02      	subs	r6, #2
 8001124:	4461      	add	r1, ip
 8001126:	e7d9      	b.n	80010dc <__udivmoddi4+0x29c>
 8001128:	462e      	mov	r6, r5
 800112a:	e6d6      	b.n	8000eda <__udivmoddi4+0x9a>

0800112c <__aeabi_idiv0>:
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop

08001130 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af02      	add	r7, sp, #8
 8001136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 8001138:	2300      	movs	r3, #0
 800113a:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 800113c:	2334      	movs	r3, #52	; 0x34
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001144:	4a0a      	ldr	r2, [pc, #40]	; (8001170 <tx_application_define+0x40>)
 8001146:	490b      	ldr	r1, [pc, #44]	; (8001174 <tx_application_define+0x44>)
 8001148:	480b      	ldr	r0, [pc, #44]	; (8001178 <tx_application_define+0x48>)
 800114a:	f00b fcfd 	bl	800cb48 <_txe_byte_pool_create>
 800114e:	4603      	mov	r3, r0
 8001150:	2b00      	cmp	r3, #0
 8001152:	d109      	bne.n	8001168 <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001154:	4b08      	ldr	r3, [pc, #32]	; (8001178 <tx_application_define+0x48>)
 8001156:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 8001158:	68b8      	ldr	r0, [r7, #8]
 800115a:	f000 fe8b 	bl	8001e74 <App_ThreadX_Init>
 800115e:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d000      	beq.n	8001168 <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 8001166:	e7fe      	b.n	8001166 <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 8001168:	bf00      	nop
 800116a:	3710      	adds	r7, #16
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}
 8001170:	20000090 	.word	0x20000090
 8001174:	0800f8f0 	.word	0x0800f8f0
 8001178:	20005090 	.word	0x20005090

0800117c <aprs_thread_entry>:
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart3;

static bool toggle_freq(bool is_gps_dominica, bool is_currently_dominica);

void aprs_thread_entry(ULONG aprs_thread_input){
 800117c:	b590      	push	{r4, r7, lr}
 800117e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8001182:	af24      	add	r7, sp, #144	; 0x90
 8001184:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001188:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800118c:	6018      	str	r0, [r3, #0]

	//buffer for packet data
	uint8_t packetBuffer[APRS_PACKET_MAX_LENGTH] = {0};
 800118e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001192:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001196:	2200      	movs	r2, #0
 8001198:	601a      	str	r2, [r3, #0]
 800119a:	3304      	adds	r3, #4
 800119c:	22fb      	movs	r2, #251	; 0xfb
 800119e:	2100      	movs	r1, #0
 80011a0:	4618      	mov	r0, r3
 80011a2:	f00c f8e2 	bl	800d36a <memset>

	//Create the GPS handler and configure it
	GPS_HandleTypeDef gps;
	initialize_gps(&huart3, &gps);
 80011a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011aa:	4619      	mov	r1, r3
 80011ac:	4847      	ldr	r0, [pc, #284]	; (80012cc <aprs_thread_entry+0x150>)
 80011ae:	f000 fc29 	bl	8001a04 <initialize_gps>

	//Initialize VHF module for transmission. Turn transmission off so we don't hog the frequency
	initialize_vhf(huart4, false, TX_FREQ, RX_FREQ);
 80011b2:	4c47      	ldr	r4, [pc, #284]	; (80012d0 <aprs_thread_entry+0x154>)
 80011b4:	4b47      	ldr	r3, [pc, #284]	; (80012d4 <aprs_thread_entry+0x158>)
 80011b6:	9323      	str	r3, [sp, #140]	; 0x8c
 80011b8:	4b46      	ldr	r3, [pc, #280]	; (80012d4 <aprs_thread_entry+0x158>)
 80011ba:	9322      	str	r3, [sp, #136]	; 0x88
 80011bc:	2300      	movs	r3, #0
 80011be:	9321      	str	r3, [sp, #132]	; 0x84
 80011c0:	4668      	mov	r0, sp
 80011c2:	f104 0310 	add.w	r3, r4, #16
 80011c6:	2284      	movs	r2, #132	; 0x84
 80011c8:	4619      	mov	r1, r3
 80011ca:	f00c f8c1 	bl	800d350 <memcpy>
 80011ce:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80011d2:	f000 fd15 	bl	8001c00 <initialize_vhf>
	set_ptt(false);
 80011d6:	2000      	movs	r0, #0
 80011d8:	f000 fe1c 	bl	8001e14 <set_ptt>

	//We arent in dominica by default
	bool is_in_dominica = false;
 80011dc:	2300      	movs	r3, #0
 80011de:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

		//GPS data struct
		GPS_Data gps_data;

		//Attempt to get a GPS lock
		bool is_locked = get_gps_lock(&gps, &gps_data);
 80011e2:	f107 020c 	add.w	r2, r7, #12
 80011e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ea:	4611      	mov	r1, r2
 80011ec:	4618      	mov	r0, r3
 80011ee:	f000 fc7b 	bl	8001ae8 <get_gps_lock>
 80011f2:	4603      	mov	r3, r0
 80011f4:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e

		//The time we will eventually put this task to sleep for. We assign this assuming the GPS lock has failed (only sleep for a shorter, fixed period of time).
		//If we did get a GPS lock, the sleep_period will correct itself by the end of the task (be appropriately assigned after succesful APRS transmission)
		uint32_t sleep_period = GPS_SLEEP_LENGTH;
 80011f8:	4b37      	ldr	r3, [pc, #220]	; (80012d8 <aprs_thread_entry+0x15c>)
 80011fa:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

		//If we've locked onto a position, we can start creating an APRS packet.
		if (is_locked){
 80011fe:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8001202:	2b00      	cmp	r3, #0
 8001204:	d05c      	beq.n	80012c0 <aprs_thread_entry+0x144>

			aprs_generate_packet(packetBuffer, gps_data.latitude, gps_data.longitude);
 8001206:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 800120a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800120e:	edd3 7a00 	vldr	s15, [r3]
 8001212:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001216:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800121a:	ed93 7a01 	vldr	s14, [r3, #4]
 800121e:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001222:	eef0 0a47 	vmov.f32	s1, s14
 8001226:	eeb0 0a67 	vmov.f32	s0, s15
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f8a8 	bl	8001380 <aprs_generate_packet>

			//We first initialized the VHF module with our default frequencies. If we are in Dominica, re-initialize the VHF module to use the dominica frequencies.
			//
			//The function also handles switching back to the default frequency if we leave dominica
			is_in_dominica = toggle_freq(gps_data.is_dominica, is_in_dominica);
 8001230:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001234:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001238:	7c9b      	ldrb	r3, [r3, #18]
 800123a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 800123e:	4611      	mov	r1, r2
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f84f 	bl	80012e4 <toggle_freq>
 8001246:	4603      	mov	r3, r0
 8001248:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

			//Start transmission
			set_ptt(true);
 800124c:	2001      	movs	r0, #1
 800124e:	f000 fde1 	bl	8001e14 <set_ptt>

			//Now, transmit the signal through the VHF module. Transmit a few times just for safety.
			for (uint8_t transmits = 0; transmits < NUM_TX_ATTEMPTS; transmits++){
 8001252:	2300      	movs	r3, #0
 8001254:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001258:	e00a      	b.n	8001270 <aprs_thread_entry+0xf4>
				aprs_transmit_send_data(packetBuffer, APRS_PACKET_LENGTH);
 800125a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800125e:	21e0      	movs	r1, #224	; 0xe0
 8001260:	4618      	mov	r0, r3
 8001262:	f000 faa1 	bl	80017a8 <aprs_transmit_send_data>
			for (uint8_t transmits = 0; transmits < NUM_TX_ATTEMPTS; transmits++){
 8001266:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 800126a:	3301      	adds	r3, #1
 800126c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001270:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001274:	2b02      	cmp	r3, #2
 8001276:	d9f0      	bls.n	800125a <aprs_thread_entry+0xde>
			}

			//end transmission
			set_ptt(false);
 8001278:	2000      	movs	r0, #0
 800127a:	f000 fdcb 	bl	8001e14 <set_ptt>

			//Set the sleep period for a successful APRS transmission
			sleep_period = APRS_BASE_SLEEP_LENGTH;
 800127e:	4b17      	ldr	r3, [pc, #92]	; (80012dc <aprs_thread_entry+0x160>)
 8001280:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

			//Add a random component to it so that we dont transmit at the same interval each time (to prevent bad timing drowning out other transmissions)
			uint8_t random_num = rand() % 30;
 8001284:	f00c f87a 	bl	800d37c <rand>
 8001288:	4602      	mov	r2, r0
 800128a:	4b15      	ldr	r3, [pc, #84]	; (80012e0 <aprs_thread_entry+0x164>)
 800128c:	fb83 1302 	smull	r1, r3, r3, r2
 8001290:	4413      	add	r3, r2
 8001292:	1119      	asrs	r1, r3, #4
 8001294:	17d3      	asrs	r3, r2, #31
 8001296:	1ac9      	subs	r1, r1, r3
 8001298:	460b      	mov	r3, r1
 800129a:	011b      	lsls	r3, r3, #4
 800129c:	1a5b      	subs	r3, r3, r1
 800129e:	005b      	lsls	r3, r3, #1
 80012a0:	1ad1      	subs	r1, r2, r3
 80012a2:	460b      	mov	r3, r1
 80012a4:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d

			//Add a random amount of seconds to the sleep, from 0 to 29
			sleep_period += tx_s_to_ticks(random_num);
 80012a8:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 80012ac:	f644 6220 	movw	r2, #20000	; 0x4e20
 80012b0:	fb02 f303 	mul.w	r3, r2, r3
 80012b4:	461a      	mov	r2, r3
 80012b6:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80012ba:	4413      	add	r3, r2
 80012bc:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		}

		//Go to sleep now
		tx_thread_sleep(sleep_period);
 80012c0:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 80012c4:	f00a fd8a 	bl	800bddc <_tx_thread_sleep>
	while(1){
 80012c8:	e78b      	b.n	80011e2 <aprs_thread_entry+0x66>
 80012ca:	bf00      	nop
 80012cc:	20005ce4 	.word	0x20005ce4
 80012d0:	20005c50 	.word	0x20005c50
 80012d4:	0800f904 	.word	0x0800f904
 80012d8:	00030d40 	.word	0x00030d40
 80012dc:	00124f80 	.word	0x00124f80
 80012e0:	88888889 	.word	0x88888889

080012e4 <toggle_freq>:
 * is_gps_dominica: whether or not the current gps data is in dominica
 * is_currently_dominica: whether or not our VHF module is configured to the dominica frequency
 *
 * Returns: the current state of our configuration (whether or not VHF is configured for dominica
 */
static bool toggle_freq(bool is_gps_dominica, bool is_currently_dominica){
 80012e4:	b590      	push	{r4, r7, lr}
 80012e6:	b0a7      	sub	sp, #156	; 0x9c
 80012e8:	af24      	add	r7, sp, #144	; 0x90
 80012ea:	4603      	mov	r3, r0
 80012ec:	460a      	mov	r2, r1
 80012ee:	71fb      	strb	r3, [r7, #7]
 80012f0:	4613      	mov	r3, r2
 80012f2:	71bb      	strb	r3, [r7, #6]

	//If the GPS is in dominica, but we are not configured for it, switch to dominica
	if (is_gps_dominica && !is_currently_dominica){
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d019      	beq.n	800132e <toggle_freq+0x4a>
 80012fa:	79bb      	ldrb	r3, [r7, #6]
 80012fc:	f083 0301 	eor.w	r3, r3, #1
 8001300:	b2db      	uxtb	r3, r3
 8001302:	2b00      	cmp	r3, #0
 8001304:	d013      	beq.n	800132e <toggle_freq+0x4a>

		//Re-initialize for dominica frequencies
		initialize_vhf(huart4, false, DOMINICA_TX_FREQ, DOMINICA_RX_FREQ);
 8001306:	4c1b      	ldr	r4, [pc, #108]	; (8001374 <toggle_freq+0x90>)
 8001308:	4b1b      	ldr	r3, [pc, #108]	; (8001378 <toggle_freq+0x94>)
 800130a:	9323      	str	r3, [sp, #140]	; 0x8c
 800130c:	4b1a      	ldr	r3, [pc, #104]	; (8001378 <toggle_freq+0x94>)
 800130e:	9322      	str	r3, [sp, #136]	; 0x88
 8001310:	2300      	movs	r3, #0
 8001312:	9321      	str	r3, [sp, #132]	; 0x84
 8001314:	4668      	mov	r0, sp
 8001316:	f104 0310 	add.w	r3, r4, #16
 800131a:	2284      	movs	r2, #132	; 0x84
 800131c:	4619      	mov	r1, r3
 800131e:	f00c f817 	bl	800d350 <memcpy>
 8001322:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001326:	f000 fc6b 	bl	8001c00 <initialize_vhf>

		//Now configured for dominica, return to indicate that
		return true;
 800132a:	2301      	movs	r3, #1
 800132c:	e01d      	b.n	800136a <toggle_freq+0x86>
	}
	//elseif, we are not in dominica, but we are configured for dominica. Switch back to the regular frequencies
	else if (!is_gps_dominica && is_currently_dominica){
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	f083 0301 	eor.w	r3, r3, #1
 8001334:	b2db      	uxtb	r3, r3
 8001336:	2b00      	cmp	r3, #0
 8001338:	d016      	beq.n	8001368 <toggle_freq+0x84>
 800133a:	79bb      	ldrb	r3, [r7, #6]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d013      	beq.n	8001368 <toggle_freq+0x84>

		//Re-initialize for default frequencies
		initialize_vhf(huart4, false, TX_FREQ, RX_FREQ);
 8001340:	4c0c      	ldr	r4, [pc, #48]	; (8001374 <toggle_freq+0x90>)
 8001342:	4b0e      	ldr	r3, [pc, #56]	; (800137c <toggle_freq+0x98>)
 8001344:	9323      	str	r3, [sp, #140]	; 0x8c
 8001346:	4b0d      	ldr	r3, [pc, #52]	; (800137c <toggle_freq+0x98>)
 8001348:	9322      	str	r3, [sp, #136]	; 0x88
 800134a:	2300      	movs	r3, #0
 800134c:	9321      	str	r3, [sp, #132]	; 0x84
 800134e:	4668      	mov	r0, sp
 8001350:	f104 0310 	add.w	r3, r4, #16
 8001354:	2284      	movs	r2, #132	; 0x84
 8001356:	4619      	mov	r1, r3
 8001358:	f00b fffa 	bl	800d350 <memcpy>
 800135c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001360:	f000 fc4e 	bl	8001c00 <initialize_vhf>

		//No longer on dominica freq, return to indicate that
		return false;
 8001364:	2300      	movs	r3, #0
 8001366:	e000      	b.n	800136a <toggle_freq+0x86>
	}

	//else: do nothing
	return is_currently_dominica;
 8001368:	79bb      	ldrb	r3, [r7, #6]
}
 800136a:	4618      	mov	r0, r3
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	bd90      	pop	{r4, r7, pc}
 8001372:	bf00      	nop
 8001374:	20005c50 	.word	0x20005c50
 8001378:	0800f910 	.word	0x0800f910
 800137c:	0800f904 	.word	0x0800f904

08001380 <aprs_generate_packet>:
static void append_callsign(uint8_t * buffer, char * callsign, uint8_t ssid);
static void append_gps_data(uint8_t * buffer, float lat, float lon);
static void append_other_data(uint8_t * buffer, uint16_t course, uint16_t speed, char * comment);
static void append_frame_check(uint8_t * buffer, uint8_t buffer_length);

void aprs_generate_packet(uint8_t * buffer, float lat, float lon){
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	ed87 0a02 	vstr	s0, [r7, #8]
 800138c:	edc7 0a01 	vstr	s1, [r7, #4]

	append_flag(buffer, 150);
 8001390:	2196      	movs	r1, #150	; 0x96
 8001392:	68f8      	ldr	r0, [r7, #12]
 8001394:	f000 f854 	bl	8001440 <append_flag>

	append_callsign(&buffer[150], APRS_DESTINATION_CALLSIGN, APRS_DESTINATION_SSID);
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	3396      	adds	r3, #150	; 0x96
 800139c:	2200      	movs	r2, #0
 800139e:	4922      	ldr	r1, [pc, #136]	; (8001428 <aprs_generate_packet+0xa8>)
 80013a0:	4618      	mov	r0, r3
 80013a2:	f000 f869 	bl	8001478 <append_callsign>

	append_callsign(&buffer[157], APRS_SOURCE_CALLSIGN, APRS_SOURCE_SSID);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	339d      	adds	r3, #157	; 0x9d
 80013aa:	2201      	movs	r2, #1
 80013ac:	491f      	ldr	r1, [pc, #124]	; (800142c <aprs_generate_packet+0xac>)
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 f862 	bl	8001478 <append_callsign>

	//We can also treat the digipeter as a callsign since it has the same format
	append_callsign(&buffer[164], APRS_DIGI_PATH, APRS_DIGI_SSID);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	33a4      	adds	r3, #164	; 0xa4
 80013b8:	2202      	movs	r2, #2
 80013ba:	491d      	ldr	r1, [pc, #116]	; (8001430 <aprs_generate_packet+0xb0>)
 80013bc:	4618      	mov	r0, r3
 80013be:	f000 f85b 	bl	8001478 <append_callsign>
	buffer[170] += 1;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	33aa      	adds	r3, #170	; 0xaa
 80013c6:	781a      	ldrb	r2, [r3, #0]
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	33aa      	adds	r3, #170	; 0xaa
 80013cc:	3201      	adds	r2, #1
 80013ce:	b2d2      	uxtb	r2, r2
 80013d0:	701a      	strb	r2, [r3, #0]

	//Add the control ID and protocol ID
	buffer[171] = APRS_CONTROL_FIELD;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	33ab      	adds	r3, #171	; 0xab
 80013d6:	2203      	movs	r2, #3
 80013d8:	701a      	strb	r2, [r3, #0]
	buffer[172] = APRS_PROTOCOL_ID;
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	33ac      	adds	r3, #172	; 0xac
 80013de:	22f0      	movs	r2, #240	; 0xf0
 80013e0:	701a      	strb	r2, [r3, #0]

	//Attach the payload (including other control characters)
	//TODO: Replace with real GPS data.
	append_gps_data(&buffer[173], 42.3636, -71.1259);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	33ad      	adds	r3, #173	; 0xad
 80013e6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8001434 <aprs_generate_packet+0xb4>
 80013ea:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8001438 <aprs_generate_packet+0xb8>
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f880 	bl	80014f4 <append_gps_data>

	//Attach other information (course, speed and the comment)
	append_other_data(&buffer[193], 360, 0, APRS_COMMENT);
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f103 00c1 	add.w	r0, r3, #193	; 0xc1
 80013fa:	4b10      	ldr	r3, [pc, #64]	; (800143c <aprs_generate_packet+0xbc>)
 80013fc:	2200      	movs	r2, #0
 80013fe:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001402:	f000 f953 	bl	80016ac <append_other_data>

	append_frame_check(buffer, 219);
 8001406:	21db      	movs	r1, #219	; 0xdb
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 f971 	bl	80016f0 <append_frame_check>

	append_flag(&buffer[221], 3);
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	33dd      	adds	r3, #221	; 0xdd
 8001412:	2103      	movs	r1, #3
 8001414:	4618      	mov	r0, r3
 8001416:	f000 f813 	bl	8001440 <append_flag>

	HAL_Delay(100);
 800141a:	2064      	movs	r0, #100	; 0x64
 800141c:	f001 fd46 	bl	8002eac <HAL_Delay>
}
 8001420:	bf00      	nop
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	0800f91c 	.word	0x0800f91c
 800142c:	0800f924 	.word	0x0800f924
 8001430:	0800f92c 	.word	0x0800f92c
 8001434:	c28e4076 	.word	0xc28e4076
 8001438:	42297454 	.word	0x42297454
 800143c:	0800f934 	.word	0x0800f934

08001440 <append_flag>:

//Appends the flag character (0x7E) to the buffer 'numFlags' times.
static void append_flag(uint8_t * buffer, uint8_t numFlags){
 8001440:	b480      	push	{r7}
 8001442:	b085      	sub	sp, #20
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	460b      	mov	r3, r1
 800144a:	70fb      	strb	r3, [r7, #3]

	//Add numFlags flag characters to the buffer
	for (uint8_t index = 0; index < numFlags; index++){
 800144c:	2300      	movs	r3, #0
 800144e:	73fb      	strb	r3, [r7, #15]
 8001450:	e007      	b.n	8001462 <append_flag+0x22>
		buffer[index] = APRS_FLAG;
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	4413      	add	r3, r2
 8001458:	227e      	movs	r2, #126	; 0x7e
 800145a:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 0; index < numFlags; index++){
 800145c:	7bfb      	ldrb	r3, [r7, #15]
 800145e:	3301      	adds	r3, #1
 8001460:	73fb      	strb	r3, [r7, #15]
 8001462:	7bfa      	ldrb	r2, [r7, #15]
 8001464:	78fb      	ldrb	r3, [r7, #3]
 8001466:	429a      	cmp	r2, r3
 8001468:	d3f3      	bcc.n	8001452 <append_flag+0x12>
	}
}
 800146a:	bf00      	nop
 800146c:	bf00      	nop
 800146e:	3714      	adds	r7, #20
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr

08001478 <append_callsign>:

//Appends a callsign to the buffer with its SSID.
static void append_callsign(uint8_t * buffer, char * callsign, uint8_t ssid){
 8001478:	b580      	push	{r7, lr}
 800147a:	b086      	sub	sp, #24
 800147c:	af00      	add	r7, sp, #0
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	71fb      	strb	r3, [r7, #7]

	//Determine the length of the callsign
	uint8_t length  = strlen(callsign);
 8001486:	68b8      	ldr	r0, [r7, #8]
 8001488:	f7ff f81c 	bl	80004c4 <strlen>
 800148c:	4603      	mov	r3, r0
 800148e:	757b      	strb	r3, [r7, #21]

	//Append the callsign to the buffer. Note that ASCII characters must be left shifted by 1 bit as per APRS101 standard
	for (uint8_t index = 0; index < length; index++){
 8001490:	2300      	movs	r3, #0
 8001492:	75fb      	strb	r3, [r7, #23]
 8001494:	e00c      	b.n	80014b0 <append_callsign+0x38>
		buffer[index] = (callsign[index] << 1);
 8001496:	7dfb      	ldrb	r3, [r7, #23]
 8001498:	68ba      	ldr	r2, [r7, #8]
 800149a:	4413      	add	r3, r2
 800149c:	781a      	ldrb	r2, [r3, #0]
 800149e:	7dfb      	ldrb	r3, [r7, #23]
 80014a0:	68f9      	ldr	r1, [r7, #12]
 80014a2:	440b      	add	r3, r1
 80014a4:	0052      	lsls	r2, r2, #1
 80014a6:	b2d2      	uxtb	r2, r2
 80014a8:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 0; index < length; index++){
 80014aa:	7dfb      	ldrb	r3, [r7, #23]
 80014ac:	3301      	adds	r3, #1
 80014ae:	75fb      	strb	r3, [r7, #23]
 80014b0:	7dfa      	ldrb	r2, [r7, #23]
 80014b2:	7d7b      	ldrb	r3, [r7, #21]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d3ee      	bcc.n	8001496 <append_callsign+0x1e>
	}

	//The callsign field must be atleast 6 characters long, so fill any missing spots with blanks
	if (length < APRS_CALLSIGN_LENGTH){
 80014b8:	7d7b      	ldrb	r3, [r7, #21]
 80014ba:	2b05      	cmp	r3, #5
 80014bc:	d80d      	bhi.n	80014da <append_callsign+0x62>
		for (uint8_t index = length; index < APRS_CALLSIGN_LENGTH; index++){
 80014be:	7d7b      	ldrb	r3, [r7, #21]
 80014c0:	75bb      	strb	r3, [r7, #22]
 80014c2:	e007      	b.n	80014d4 <append_callsign+0x5c>
			//We still need to shift left by 1 bit
			buffer[index] = (' ' << 1);
 80014c4:	7dbb      	ldrb	r3, [r7, #22]
 80014c6:	68fa      	ldr	r2, [r7, #12]
 80014c8:	4413      	add	r3, r2
 80014ca:	2240      	movs	r2, #64	; 0x40
 80014cc:	701a      	strb	r2, [r3, #0]
		for (uint8_t index = length; index < APRS_CALLSIGN_LENGTH; index++){
 80014ce:	7dbb      	ldrb	r3, [r7, #22]
 80014d0:	3301      	adds	r3, #1
 80014d2:	75bb      	strb	r3, [r7, #22]
 80014d4:	7dbb      	ldrb	r3, [r7, #22]
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d9f4      	bls.n	80014c4 <append_callsign+0x4c>
		}
	}

	//Now, we've filled the first 6 bytes with the callsign (index 0-5), so the SSID must be in the 6th index.
	//We can find its ASCII character by adding the integer value to the ascii value of '0'. Still need to shift left by 1 bit.
	buffer[APRS_CALLSIGN_LENGTH] = (ssid + '0') << 1;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3330      	adds	r3, #48	; 0x30
 80014de:	b2da      	uxtb	r2, r3
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	3306      	adds	r3, #6
 80014e4:	0052      	lsls	r2, r2, #1
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	701a      	strb	r2, [r3, #0]
}
 80014ea:	bf00      	nop
 80014ec:	3718      	adds	r7, #24
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bd80      	pop	{r7, pc}
	...

080014f4 <append_gps_data>:

//Appends the GPS data (latitude and longitude) to the buffer
static void append_gps_data(uint8_t * buffer, float lat, float lon){
 80014f4:	b590      	push	{r4, r7, lr}
 80014f6:	b08f      	sub	sp, #60	; 0x3c
 80014f8:	af04      	add	r7, sp, #16
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	ed87 0a02 	vstr	s0, [r7, #8]
 8001500:	edc7 0a01 	vstr	s1, [r7, #4]

	//indicate start of real-time transmission
	buffer[0] = APRS_DT_POS_CHARACTER;
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	2221      	movs	r2, #33	; 0x21
 8001508:	701a      	strb	r2, [r3, #0]

	//First, create the string containing the latitude and longitude data, then save it into our buffer
	bool is_north = true;
 800150a:	2301      	movs	r3, #1
 800150c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//If we have a negative value, then the location is in the southern hemisphere.
	//Recognize this and then just use the magnitude of the latitude for future calculations.
	if (lat < 0){
 8001510:	edd7 7a02 	vldr	s15, [r7, #8]
 8001514:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001518:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800151c:	d50a      	bpl.n	8001534 <append_gps_data+0x40>
		is_north = false;
 800151e:	2300      	movs	r3, #0
 8001520:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		is_north *= -1;
 8001524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001528:	2b00      	cmp	r3, #0
 800152a:	bf14      	ite	ne
 800152c:	2301      	movne	r3, #1
 800152e:	2300      	moveq	r3, #0
 8001530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//The coordinates we get from the GPS are in degrees and fractional degrees
	//We need to extract the whole degrees from this, then the whole minutes and finally the fractional minutes

	//The degrees are just the rounded-down integer
	uint8_t lat_deg_whole = (uint8_t) lat;
 8001534:	edd7 7a02 	vldr	s15, [r7, #8]
 8001538:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800153c:	edc7 7a00 	vstr	s15, [r7]
 8001540:	783b      	ldrb	r3, [r7, #0]
 8001542:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//Find the remainder (fractional degrees) and multiply it by 60 to get the minutes (fractional and whole)
	float lat_minutes = (lat - lat_deg_whole) * 60;
 8001546:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800154a:	ee07 3a90 	vmov	s15, r3
 800154e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001552:	ed97 7a02 	vldr	s14, [r7, #8]
 8001556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800155a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800169c <append_gps_data+0x1a8>
 800155e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001562:	edc7 7a08 	vstr	s15, [r7, #32]

	//Whole number minutes is just the fractional component.
	uint8_t lat_minutes_whole = (uint8_t) lat_minutes;
 8001566:	edd7 7a08 	vldr	s15, [r7, #32]
 800156a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800156e:	edc7 7a00 	vstr	s15, [r7]
 8001572:	783b      	ldrb	r3, [r7, #0]
 8001574:	77fb      	strb	r3, [r7, #31]

	//Find the remainder (fractional component) and save it to two decimal points (multiply by 100 and cast to int)
	uint8_t lat_minutes_frac = (lat_minutes - lat_minutes_whole) * 100;
 8001576:	7ffb      	ldrb	r3, [r7, #31]
 8001578:	ee07 3a90 	vmov	s15, r3
 800157c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001580:	ed97 7a08 	vldr	s14, [r7, #32]
 8001584:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001588:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80016a0 <append_gps_data+0x1ac>
 800158c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001590:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001594:	edc7 7a00 	vstr	s15, [r7]
 8001598:	783b      	ldrb	r3, [r7, #0]
 800159a:	77bb      	strb	r3, [r7, #30]

	//Find our direction indicator (N for North of S for south)
	char lat_direction = (is_north) ? 'N' : 'S';
 800159c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <append_gps_data+0xb4>
 80015a4:	234e      	movs	r3, #78	; 0x4e
 80015a6:	e000      	b.n	80015aa <append_gps_data+0xb6>
 80015a8:	2353      	movs	r3, #83	; 0x53
 80015aa:	777b      	strb	r3, [r7, #29]

	//Create our string. We use the format ddmm.hh(N/S), where "d" is degrees, "m" is minutes and "h" is fractional minutes.
	//Store this in our buffer.
	snprintf(&buffer[1], APRS_LATITUDE_LENGTH, "%02d%02d.%02d%c", lat_deg_whole, lat_minutes_whole, lat_minutes_frac, lat_direction);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	1c58      	adds	r0, r3, #1
 80015b0:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 80015b4:	7ffb      	ldrb	r3, [r7, #31]
 80015b6:	7fba      	ldrb	r2, [r7, #30]
 80015b8:	7f79      	ldrb	r1, [r7, #29]
 80015ba:	9102      	str	r1, [sp, #8]
 80015bc:	9201      	str	r2, [sp, #4]
 80015be:	9300      	str	r3, [sp, #0]
 80015c0:	4623      	mov	r3, r4
 80015c2:	4a38      	ldr	r2, [pc, #224]	; (80016a4 <append_gps_data+0x1b0>)
 80015c4:	2109      	movs	r1, #9
 80015c6:	f00b ff17 	bl	800d3f8 <sniprintf>


	//Right now we have the null-terminating character in the buffer "\0". Replace this with our latitude and longitude seperating symbol "1".
	buffer[APRS_LATITUDE_LENGTH] = APRS_SYM_TABLE_CHAR;
 80015ca:	68fb      	ldr	r3, [r7, #12]
 80015cc:	3309      	adds	r3, #9
 80015ce:	2231      	movs	r2, #49	; 0x31
 80015d0:	701a      	strb	r2, [r3, #0]

	//Now, repeat the process for longitude.
	bool is_east = true;
 80015d2:	2301      	movs	r3, #1
 80015d4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//If its less than 0, remember it as West, and then take the magnitude
	if (lon < 0){
 80015d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	d508      	bpl.n	80015f8 <append_gps_data+0x104>
		is_east = false;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lon *= -1;
 80015ec:	edd7 7a01 	vldr	s15, [r7, #4]
 80015f0:	eef1 7a67 	vneg.f32	s15, s15
 80015f4:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	//Find whole number degrees
	uint8_t lon_deg_whole = (uint8_t) lon;
 80015f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80015fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001600:	edc7 7a00 	vstr	s15, [r7]
 8001604:	783b      	ldrb	r3, [r7, #0]
 8001606:	773b      	strb	r3, [r7, #28]

	//Find remainder (fractional degrees), convert to minutes
	float lon_minutes = (lon - lon_deg_whole) * 60;
 8001608:	7f3b      	ldrb	r3, [r7, #28]
 800160a:	ee07 3a90 	vmov	s15, r3
 800160e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001612:	ed97 7a01 	vldr	s14, [r7, #4]
 8001616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161a:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800169c <append_gps_data+0x1a8>
 800161e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001622:	edc7 7a06 	vstr	s15, [r7, #24]

	//Find whole number and fractional minutes. Take two decimal places for the fractional minutes, just like before
	uint8_t lon_minutes_whole = (uint8_t) lon_minutes;
 8001626:	edd7 7a06 	vldr	s15, [r7, #24]
 800162a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800162e:	edc7 7a00 	vstr	s15, [r7]
 8001632:	783b      	ldrb	r3, [r7, #0]
 8001634:	75fb      	strb	r3, [r7, #23]
	uint8_t lon_minutes_fractional = (lon_minutes - lon_minutes_whole) * 100;
 8001636:	7dfb      	ldrb	r3, [r7, #23]
 8001638:	ee07 3a90 	vmov	s15, r3
 800163c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001640:	ed97 7a06 	vldr	s14, [r7, #24]
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	ed9f 7a15 	vldr	s14, [pc, #84]	; 80016a0 <append_gps_data+0x1ac>
 800164c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001650:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001654:	edc7 7a00 	vstr	s15, [r7]
 8001658:	783b      	ldrb	r3, [r7, #0]
 800165a:	75bb      	strb	r3, [r7, #22]

	//Find direction character
	char lon_direction = (is_east) ? 'E' : 'W';
 800165c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <append_gps_data+0x174>
 8001664:	2345      	movs	r3, #69	; 0x45
 8001666:	e000      	b.n	800166a <append_gps_data+0x176>
 8001668:	2357      	movs	r3, #87	; 0x57
 800166a:	757b      	strb	r3, [r7, #21]

	//Store this in the buffer, in the format dddmm.hh(E/W)
	snprintf(&buffer[APRS_LATITUDE_LENGTH + 1], APRS_LONGITUDE_LENGTH, "%03d%02d.%02d%c", lon_deg_whole, lon_minutes_whole, lon_minutes_fractional, lon_direction);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	f103 000a 	add.w	r0, r3, #10
 8001672:	7f3c      	ldrb	r4, [r7, #28]
 8001674:	7dfb      	ldrb	r3, [r7, #23]
 8001676:	7dba      	ldrb	r2, [r7, #22]
 8001678:	7d79      	ldrb	r1, [r7, #21]
 800167a:	9102      	str	r1, [sp, #8]
 800167c:	9201      	str	r2, [sp, #4]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4623      	mov	r3, r4
 8001682:	4a09      	ldr	r2, [pc, #36]	; (80016a8 <append_gps_data+0x1b4>)
 8001684:	210a      	movs	r1, #10
 8001686:	f00b feb7 	bl	800d3f8 <sniprintf>

	//Appending payload character indicating the APRS symbol (using boat symbol). Replace the null-terminating character with it.
	buffer[APRS_LATITUDE_LENGTH + APRS_LONGITUDE_LENGTH] = APRS_SYM_CODE_CHAR;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	3313      	adds	r3, #19
 800168e:	2273      	movs	r2, #115	; 0x73
 8001690:	701a      	strb	r2, [r3, #0]
}
 8001692:	bf00      	nop
 8001694:	372c      	adds	r7, #44	; 0x2c
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	42700000 	.word	0x42700000
 80016a0:	42c80000 	.word	0x42c80000
 80016a4:	0800f948 	.word	0x0800f948
 80016a8:	0800f958 	.word	0x0800f958

080016ac <append_other_data>:

//Appends other extra data (course, speed and the comment)
static void append_other_data(uint8_t * buffer, uint16_t course, uint16_t speed, char * comment){
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b088      	sub	sp, #32
 80016b0:	af02      	add	r7, sp, #8
 80016b2:	60f8      	str	r0, [r7, #12]
 80016b4:	607b      	str	r3, [r7, #4]
 80016b6:	460b      	mov	r3, r1
 80016b8:	817b      	strh	r3, [r7, #10]
 80016ba:	4613      	mov	r3, r2
 80016bc:	813b      	strh	r3, [r7, #8]

	//Append the course and speed of the tag (course is the heading 0->360 degrees
	uint8_t length = 8 + strlen(comment);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f7fe ff00 	bl	80004c4 <strlen>
 80016c4:	4603      	mov	r3, r0
 80016c6:	b2db      	uxtb	r3, r3
 80016c8:	3308      	adds	r3, #8
 80016ca:	75fb      	strb	r3, [r7, #23]
	snprintf(buffer, length, "%03d/%03d%s", course, speed, comment);
 80016cc:	7df9      	ldrb	r1, [r7, #23]
 80016ce:	8978      	ldrh	r0, [r7, #10]
 80016d0:	893b      	ldrh	r3, [r7, #8]
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	9201      	str	r2, [sp, #4]
 80016d6:	9300      	str	r3, [sp, #0]
 80016d8:	4603      	mov	r3, r0
 80016da:	4a04      	ldr	r2, [pc, #16]	; (80016ec <append_other_data+0x40>)
 80016dc:	68f8      	ldr	r0, [r7, #12]
 80016de:	f00b fe8b 	bl	800d3f8 <sniprintf>
}
 80016e2:	bf00      	nop
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	0800f968 	.word	0x0800f968

080016f0 <append_frame_check>:

//Calculates and appends the CRC frame checker. Follows the CRC-16 CCITT standard.
static void append_frame_check(uint8_t * buffer, uint8_t buffer_length){
 80016f0:	b480      	push	{r7}
 80016f2:	b087      	sub	sp, #28
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	460b      	mov	r3, r1
 80016fa:	70fb      	strb	r3, [r7, #3]

	uint16_t crc = 0xFFFF;
 80016fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001700:	82fb      	strh	r3, [r7, #22]

	//Loop through each *bit* in the buffer. Only start after the starting flags.
	for (uint8_t index = 150; index < buffer_length; index++){
 8001702:	2396      	movs	r3, #150	; 0x96
 8001704:	757b      	strb	r3, [r7, #21]
 8001706:	e02f      	b.n	8001768 <append_frame_check+0x78>

		uint8_t byte = buffer[index];
 8001708:	7d7b      	ldrb	r3, [r7, #21]
 800170a:	687a      	ldr	r2, [r7, #4]
 800170c:	4413      	add	r3, r2
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	747b      	strb	r3, [r7, #17]

		for (uint8_t bit_index = 0; bit_index < 8; bit_index++){
 8001712:	2300      	movs	r3, #0
 8001714:	753b      	strb	r3, [r7, #20]
 8001716:	e021      	b.n	800175c <append_frame_check+0x6c>

			bool bit = (byte >> bit_index) & 0x01;
 8001718:	7c7a      	ldrb	r2, [r7, #17]
 800171a:	7d3b      	ldrb	r3, [r7, #20]
 800171c:	fa42 f303 	asr.w	r3, r2, r3
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	2b00      	cmp	r3, #0
 8001726:	bf14      	ite	ne
 8001728:	2301      	movne	r3, #1
 800172a:	2300      	moveq	r3, #0
 800172c:	743b      	strb	r3, [r7, #16]

			//Bit magic for the CRC
			unsigned short xorIn;
			xorIn = crc ^ bit;
 800172e:	7c3b      	ldrb	r3, [r7, #16]
 8001730:	b29a      	uxth	r2, r3
 8001732:	8afb      	ldrh	r3, [r7, #22]
 8001734:	4053      	eors	r3, r2
 8001736:	81fb      	strh	r3, [r7, #14]

			crc >>= 1;
 8001738:	8afb      	ldrh	r3, [r7, #22]
 800173a:	085b      	lsrs	r3, r3, #1
 800173c:	82fb      	strh	r3, [r7, #22]

			if (xorIn & 0x01) crc ^= 0x8408;
 800173e:	89fb      	ldrh	r3, [r7, #14]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d006      	beq.n	8001756 <append_frame_check+0x66>
 8001748:	8afb      	ldrh	r3, [r7, #22]
 800174a:	f483 43f7 	eor.w	r3, r3, #31616	; 0x7b80
 800174e:	f083 0377 	eor.w	r3, r3, #119	; 0x77
 8001752:	43db      	mvns	r3, r3
 8001754:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit_index = 0; bit_index < 8; bit_index++){
 8001756:	7d3b      	ldrb	r3, [r7, #20]
 8001758:	3301      	adds	r3, #1
 800175a:	753b      	strb	r3, [r7, #20]
 800175c:	7d3b      	ldrb	r3, [r7, #20]
 800175e:	2b07      	cmp	r3, #7
 8001760:	d9da      	bls.n	8001718 <append_frame_check+0x28>
	for (uint8_t index = 150; index < buffer_length; index++){
 8001762:	7d7b      	ldrb	r3, [r7, #21]
 8001764:	3301      	adds	r3, #1
 8001766:	757b      	strb	r3, [r7, #21]
 8001768:	7d7a      	ldrb	r2, [r7, #21]
 800176a:	78fb      	ldrb	r3, [r7, #3]
 800176c:	429a      	cmp	r2, r3
 800176e:	d3cb      	bcc.n	8001708 <append_frame_check+0x18>

		}
	}

	uint8_t crc_lo = (crc & 0xFF) ^ 0xFF;
 8001770:	8afb      	ldrh	r3, [r7, #22]
 8001772:	b2db      	uxtb	r3, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	74fb      	strb	r3, [r7, #19]
	uint8_t crc_hi = (crc >> 8) ^ 0xFF;
 8001778:	8afb      	ldrh	r3, [r7, #22]
 800177a:	0a1b      	lsrs	r3, r3, #8
 800177c:	b29b      	uxth	r3, r3
 800177e:	b2db      	uxtb	r3, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	74bb      	strb	r3, [r7, #18]

	buffer[buffer_length] = crc_lo;
 8001784:	78fb      	ldrb	r3, [r7, #3]
 8001786:	687a      	ldr	r2, [r7, #4]
 8001788:	4413      	add	r3, r2
 800178a:	7cfa      	ldrb	r2, [r7, #19]
 800178c:	701a      	strb	r2, [r3, #0]
	buffer[buffer_length + 1] = crc_hi;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	3301      	adds	r3, #1
 8001792:	687a      	ldr	r2, [r7, #4]
 8001794:	4413      	add	r3, r2
 8001796:	7cba      	ldrb	r2, [r7, #18]
 8001798:	701a      	strb	r2, [r3, #0]
}
 800179a:	bf00      	nop
 800179c:	371c      	adds	r7, #28
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
	...

080017a8 <aprs_transmit_send_data>:
extern DAC_HandleTypeDef hdac1;
extern TIM_HandleTypeDef htim2;

uint32_t dac_input[APRS_TRANSMIT_NUM_SINE_SAMPLES];

bool aprs_transmit_send_data(uint8_t * packet_data, uint16_t packet_length){
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b092      	sub	sp, #72	; 0x48
 80017ac:	af04      	add	r7, sp, #16
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	460b      	mov	r3, r1
 80017b2:	807b      	strh	r3, [r7, #2]

	calcSineValues();
 80017b4:	f000 f8c4 	bl	8001940 <calcSineValues>

	//Timer variables for transmitting bits
	TX_TIMER bit_timer;

	//Start our DAC and our timer to trigger the conversion edges
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_input, APRS_TRANSMIT_NUM_SINE_SAMPLES, DAC_ALIGN_8B_R);
 80017b8:	2308      	movs	r3, #8
 80017ba:	9300      	str	r3, [sp, #0]
 80017bc:	2364      	movs	r3, #100	; 0x64
 80017be:	4a24      	ldr	r2, [pc, #144]	; (8001850 <aprs_transmit_send_data+0xa8>)
 80017c0:	2100      	movs	r1, #0
 80017c2:	4824      	ldr	r0, [pc, #144]	; (8001854 <aprs_transmit_send_data+0xac>)
 80017c4:	f001 fce4 	bl	8003190 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 80017c8:	4823      	ldr	r0, [pc, #140]	; (8001858 <aprs_transmit_send_data+0xb0>)
 80017ca:	f008 f909 	bl	80099e0 <HAL_TIM_Base_Start>

	//Loop through each byte
	for (int byte_index = 0; byte_index < packet_length; byte_index++){
 80017ce:	2300      	movs	r3, #0
 80017d0:	637b      	str	r3, [r7, #52]	; 0x34
 80017d2:	e026      	b.n	8001822 <aprs_transmit_send_data+0x7a>

		//Set complete flag to false so we can poll it later
		byte_complete_flag = false;
 80017d4:	4b21      	ldr	r3, [pc, #132]	; (800185c <aprs_transmit_send_data+0xb4>)
 80017d6:	2200      	movs	r2, #0
 80017d8:	701a      	strb	r2, [r3, #0]

		//Create a timer to control the transmission of each bit. We pass in the current byte as an input to the timer so it can iterate over it bit by bit.
		tx_timer_create(&bit_timer, "APRS Transmit Bit Timer", aprs_transmit_bit_timer_entry, packet_data[byte_index], APRS_TRANSMIT_BIT_TIME, APRS_TRANSMIT_BIT_TIME, TX_AUTO_ACTIVATE);
 80017da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80017dc:	687a      	ldr	r2, [r7, #4]
 80017de:	4413      	add	r3, r2
 80017e0:	781b      	ldrb	r3, [r3, #0]
 80017e2:	461a      	mov	r2, r3
 80017e4:	f107 0008 	add.w	r0, r7, #8
 80017e8:	232c      	movs	r3, #44	; 0x2c
 80017ea:	9303      	str	r3, [sp, #12]
 80017ec:	2301      	movs	r3, #1
 80017ee:	9302      	str	r3, [sp, #8]
 80017f0:	2311      	movs	r3, #17
 80017f2:	9301      	str	r3, [sp, #4]
 80017f4:	2311      	movs	r3, #17
 80017f6:	9300      	str	r3, [sp, #0]
 80017f8:	4613      	mov	r3, r2
 80017fa:	4a19      	ldr	r2, [pc, #100]	; (8001860 <aprs_transmit_send_data+0xb8>)
 80017fc:	4919      	ldr	r1, [pc, #100]	; (8001864 <aprs_transmit_send_data+0xbc>)
 80017fe:	f00b fb35 	bl	800ce6c <_txe_timer_create>

		//Poll for completion of the byte
		while (!byte_complete_flag);
 8001802:	bf00      	nop
 8001804:	4b15      	ldr	r3, [pc, #84]	; (800185c <aprs_transmit_send_data+0xb4>)
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f083 0301 	eor.w	r3, r3, #1
 800180c:	b2db      	uxtb	r3, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	d1f8      	bne.n	8001804 <aprs_transmit_send_data+0x5c>


		//Delete the timer so we can recreate it later with the next byte as an input
		tx_timer_delete(&bit_timer);
 8001812:	f107 0308 	add.w	r3, r7, #8
 8001816:	4618      	mov	r0, r3
 8001818:	f00b fbd4 	bl	800cfc4 <_txe_timer_delete>
	for (int byte_index = 0; byte_index < packet_length; byte_index++){
 800181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800181e:	3301      	adds	r3, #1
 8001820:	637b      	str	r3, [r7, #52]	; 0x34
 8001822:	887b      	ldrh	r3, [r7, #2]
 8001824:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001826:	429a      	cmp	r2, r3
 8001828:	dbd4      	blt.n	80017d4 <aprs_transmit_send_data+0x2c>
	}

	//Stop DAC and timer
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 800182a:	2100      	movs	r1, #0
 800182c:	4809      	ldr	r0, [pc, #36]	; (8001854 <aprs_transmit_send_data+0xac>)
 800182e:	f001 fe65 	bl	80034fc <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim2);
 8001832:	4809      	ldr	r0, [pc, #36]	; (8001858 <aprs_transmit_send_data+0xb0>)
 8001834:	f008 f96c 	bl	8009b10 <HAL_TIM_Base_Stop>

	//Reset the timer period for the next transmission
	MX_TIM2_Fake_Init(APRS_TRANSMIT_PERIOD_2400HZ);
 8001838:	202d      	movs	r0, #45	; 0x2d
 800183a:	f000 fe13 	bl	8002464 <MX_TIM2_Fake_Init>
	is_1200_hz = false;
 800183e:	4b0a      	ldr	r3, [pc, #40]	; (8001868 <aprs_transmit_send_data+0xc0>)
 8001840:	2200      	movs	r2, #0
 8001842:	701a      	strb	r2, [r3, #0]

	return true;
 8001844:	2301      	movs	r3, #1
}
 8001846:	4618      	mov	r0, r3
 8001848:	3738      	adds	r7, #56	; 0x38
 800184a:	46bd      	mov	sp, r7
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	200050c8 	.word	0x200050c8
 8001854:	20005b0c 	.word	0x20005b0c
 8001858:	20005c04 	.word	0x20005c04
 800185c:	200050c4 	.word	0x200050c4
 8001860:	0800186d 	.word	0x0800186d
 8001864:	0800f974 	.word	0x0800f974
 8001868:	200050c5 	.word	0x200050c5

0800186c <aprs_transmit_bit_timer_entry>:

void aprs_transmit_bit_timer_entry(ULONG bit_timer_input){
 800186c:	b580      	push	{r7, lr}
 800186e:	b084      	sub	sp, #16
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	static uint8_t bit_index = 0;
	static uint8_t bit_stuff_counter = 0;
	static bool is_stuffed_bit = false;

	//Current byte we will iterate over
	uint8_t current_byte = (uint8_t) bit_timer_input;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	73fb      	strb	r3, [r7, #15]

	if (bit_stuff_counter >= 5){
 8001878:	4b2c      	ldr	r3, [pc, #176]	; (800192c <aprs_transmit_bit_timer_entry+0xc0>)
 800187a:	781b      	ldrb	r3, [r3, #0]
 800187c:	2b04      	cmp	r3, #4
 800187e:	d902      	bls.n	8001886 <aprs_transmit_bit_timer_entry+0x1a>
		is_stuffed_bit = true;
 8001880:	4b2b      	ldr	r3, [pc, #172]	; (8001930 <aprs_transmit_bit_timer_entry+0xc4>)
 8001882:	2201      	movs	r2, #1
 8001884:	701a      	strb	r2, [r3, #0]
	}

	//Check if the current bit is 0
	if (!aprs_transmit_read_bit(current_byte, bit_index) || is_stuffed_bit){
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <aprs_transmit_bit_timer_entry+0xc8>)
 800188a:	7812      	ldrb	r2, [r2, #0]
 800188c:	4113      	asrs	r3, r2
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d003      	beq.n	800189e <aprs_transmit_bit_timer_entry+0x32>
 8001896:	4b26      	ldr	r3, [pc, #152]	; (8001930 <aprs_transmit_bit_timer_entry+0xc4>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	2b00      	cmp	r3, #0
 800189c:	d01e      	beq.n	80018dc <aprs_transmit_bit_timer_entry+0x70>

		//Since the bit is 0, switch the frequency
		uint8_t newPeriod = (is_1200_hz) ? (APRS_TRANSMIT_PERIOD_2400HZ) : (APRS_TRANSMIT_PERIOD_1200HZ);
 800189e:	4b26      	ldr	r3, [pc, #152]	; (8001938 <aprs_transmit_bit_timer_entry+0xcc>)
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d001      	beq.n	80018aa <aprs_transmit_bit_timer_entry+0x3e>
 80018a6:	232d      	movs	r3, #45	; 0x2d
 80018a8:	e000      	b.n	80018ac <aprs_transmit_bit_timer_entry+0x40>
 80018aa:	2354      	movs	r3, #84	; 0x54
 80018ac:	73bb      	strb	r3, [r7, #14]
		is_1200_hz = !is_1200_hz;
 80018ae:	4b22      	ldr	r3, [pc, #136]	; (8001938 <aprs_transmit_bit_timer_entry+0xcc>)
 80018b0:	781b      	ldrb	r3, [r3, #0]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	bf14      	ite	ne
 80018b6:	2301      	movne	r3, #1
 80018b8:	2300      	moveq	r3, #0
 80018ba:	b2db      	uxtb	r3, r3
 80018bc:	f083 0301 	eor.w	r3, r3, #1
 80018c0:	b2db      	uxtb	r3, r3
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	b2da      	uxtb	r2, r3
 80018c8:	4b1b      	ldr	r3, [pc, #108]	; (8001938 <aprs_transmit_bit_timer_entry+0xcc>)
 80018ca:	701a      	strb	r2, [r3, #0]

		//Use fake init function to re-initialize the timer with a new period
		MX_TIM2_Fake_Init(newPeriod);
 80018cc:	7bbb      	ldrb	r3, [r7, #14]
 80018ce:	4618      	mov	r0, r3
 80018d0:	f000 fdc8 	bl	8002464 <MX_TIM2_Fake_Init>
		bit_stuff_counter = 0;
 80018d4:	4b15      	ldr	r3, [pc, #84]	; (800192c <aprs_transmit_bit_timer_entry+0xc0>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	701a      	strb	r2, [r3, #0]
	if (!aprs_transmit_read_bit(current_byte, bit_index) || is_stuffed_bit){
 80018da:	e008      	b.n	80018ee <aprs_transmit_bit_timer_entry+0x82>

	} else if (current_byte != 0x7E){
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b7e      	cmp	r3, #126	; 0x7e
 80018e0:	d005      	beq.n	80018ee <aprs_transmit_bit_timer_entry+0x82>
		bit_stuff_counter++;
 80018e2:	4b12      	ldr	r3, [pc, #72]	; (800192c <aprs_transmit_bit_timer_entry+0xc0>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	3301      	adds	r3, #1
 80018e8:	b2da      	uxtb	r2, r3
 80018ea:	4b10      	ldr	r3, [pc, #64]	; (800192c <aprs_transmit_bit_timer_entry+0xc0>)
 80018ec:	701a      	strb	r2, [r3, #0]
	}


	if (!is_stuffed_bit){
 80018ee:	4b10      	ldr	r3, [pc, #64]	; (8001930 <aprs_transmit_bit_timer_entry+0xc4>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	f083 0301 	eor.w	r3, r3, #1
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d006      	beq.n	800190a <aprs_transmit_bit_timer_entry+0x9e>
		//increment bit index
		bit_index++;
 80018fc:	4b0d      	ldr	r3, [pc, #52]	; (8001934 <aprs_transmit_bit_timer_entry+0xc8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	3301      	adds	r3, #1
 8001902:	b2da      	uxtb	r2, r3
 8001904:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <aprs_transmit_bit_timer_entry+0xc8>)
 8001906:	701a      	strb	r2, [r3, #0]
 8001908:	e002      	b.n	8001910 <aprs_transmit_bit_timer_entry+0xa4>
	}else {
		is_stuffed_bit = false;
 800190a:	4b09      	ldr	r3, [pc, #36]	; (8001930 <aprs_transmit_bit_timer_entry+0xc4>)
 800190c:	2200      	movs	r2, #0
 800190e:	701a      	strb	r2, [r3, #0]
	}

	//If we've iterated through all bits, set flag and reset index counter
	if (bit_index >= BITS_PER_BYTE){
 8001910:	4b08      	ldr	r3, [pc, #32]	; (8001934 <aprs_transmit_bit_timer_entry+0xc8>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b07      	cmp	r3, #7
 8001916:	d905      	bls.n	8001924 <aprs_transmit_bit_timer_entry+0xb8>
		byte_complete_flag = true;
 8001918:	4b08      	ldr	r3, [pc, #32]	; (800193c <aprs_transmit_bit_timer_entry+0xd0>)
 800191a:	2201      	movs	r2, #1
 800191c:	701a      	strb	r2, [r3, #0]
		bit_index = 0;
 800191e:	4b05      	ldr	r3, [pc, #20]	; (8001934 <aprs_transmit_bit_timer_entry+0xc8>)
 8001920:	2200      	movs	r2, #0
 8001922:	701a      	strb	r2, [r3, #0]
	}
}
 8001924:	bf00      	nop
 8001926:	3710      	adds	r7, #16
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	20005258 	.word	0x20005258
 8001930:	20005259 	.word	0x20005259
 8001934:	2000525a 	.word	0x2000525a
 8001938:	200050c5 	.word	0x200050c5
 800193c:	200050c4 	.word	0x200050c4

08001940 <calcSineValues>:

//Calculates an array of digital values to pass into the DAC in order to generate a sine wave.
static void calcSineValues(){
 8001940:	b590      	push	{r4, r7, lr}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APRS_TRANSMIT_NUM_SINE_SAMPLES; i++){
 8001946:	2300      	movs	r3, #0
 8001948:	71fb      	strb	r3, [r7, #7]
 800194a:	e043      	b.n	80019d4 <calcSineValues+0x94>

		//Formula taken from STM32 documentation online on sine wave generation.
		//Generates a sine wave with a min of 0V and a max of the reference voltage.
		dac_input[i] = ((sin(i * 2 * PI/APRS_TRANSMIT_NUM_SINE_SAMPLES) + 1) * (43)) + 170;
 800194c:	79fb      	ldrb	r3, [r7, #7]
 800194e:	005b      	lsls	r3, r3, #1
 8001950:	4618      	mov	r0, r3
 8001952:	f7fe ff11 	bl	8000778 <__aeabi_i2d>
 8001956:	a329      	add	r3, pc, #164	; (adr r3, 80019fc <calcSineValues+0xbc>)
 8001958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800195c:	f7fe ff76 	bl	800084c <__aeabi_dmul>
 8001960:	4602      	mov	r2, r0
 8001962:	460b      	mov	r3, r1
 8001964:	4610      	mov	r0, r2
 8001966:	4619      	mov	r1, r3
 8001968:	f04f 0200 	mov.w	r2, #0
 800196c:	4b1e      	ldr	r3, [pc, #120]	; (80019e8 <calcSineValues+0xa8>)
 800196e:	f7ff f897 	bl	8000aa0 <__aeabi_ddiv>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	ec43 2b17 	vmov	d7, r2, r3
 800197a:	eeb0 0a47 	vmov.f32	s0, s14
 800197e:	eef0 0a67 	vmov.f32	s1, s15
 8001982:	f00c ff59 	bl	800e838 <sin>
 8001986:	ec51 0b10 	vmov	r0, r1, d0
 800198a:	f04f 0200 	mov.w	r2, #0
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <calcSineValues+0xac>)
 8001990:	f7fe fda6 	bl	80004e0 <__adddf3>
 8001994:	4602      	mov	r2, r0
 8001996:	460b      	mov	r3, r1
 8001998:	4610      	mov	r0, r2
 800199a:	4619      	mov	r1, r3
 800199c:	f04f 0200 	mov.w	r2, #0
 80019a0:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <calcSineValues+0xb0>)
 80019a2:	f7fe ff53 	bl	800084c <__aeabi_dmul>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	4610      	mov	r0, r2
 80019ac:	4619      	mov	r1, r3
 80019ae:	f04f 0200 	mov.w	r2, #0
 80019b2:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <calcSineValues+0xb4>)
 80019b4:	f7fe fd94 	bl	80004e0 <__adddf3>
 80019b8:	4602      	mov	r2, r0
 80019ba:	460b      	mov	r3, r1
 80019bc:	79fc      	ldrb	r4, [r7, #7]
 80019be:	4610      	mov	r0, r2
 80019c0:	4619      	mov	r1, r3
 80019c2:	f7ff fa05 	bl	8000dd0 <__aeabi_d2uiz>
 80019c6:	4603      	mov	r3, r0
 80019c8:	4a0b      	ldr	r2, [pc, #44]	; (80019f8 <calcSineValues+0xb8>)
 80019ca:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < APRS_TRANSMIT_NUM_SINE_SAMPLES; i++){
 80019ce:	79fb      	ldrb	r3, [r7, #7]
 80019d0:	3301      	adds	r3, #1
 80019d2:	71fb      	strb	r3, [r7, #7]
 80019d4:	79fb      	ldrb	r3, [r7, #7]
 80019d6:	2b63      	cmp	r3, #99	; 0x63
 80019d8:	d9b8      	bls.n	800194c <calcSineValues+0xc>
	}
}
 80019da:	bf00      	nop
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd90      	pop	{r4, r7, pc}
 80019e4:	f3af 8000 	nop.w
 80019e8:	40590000 	.word	0x40590000
 80019ec:	3ff00000 	.word	0x3ff00000
 80019f0:	40458000 	.word	0x40458000
 80019f4:	40654000 	.word	0x40654000
 80019f8:	200050c8 	.word	0x200050c8
 80019fc:	fc8b007a 	.word	0xfc8b007a
 8001a00:	400921fa 	.word	0x400921fa

08001a04 <initialize_gps>:
#include <string.h>

//For parsing GPS outputs
static void parse_gps_output(GPS_HandleTypeDef* gps, uint8_t* buffer, uint8_t buffer_length);

HAL_StatusTypeDef initialize_gps(UART_HandleTypeDef* huart, GPS_HandleTypeDef* gps){
 8001a04:	b480      	push	{r7}
 8001a06:	b083      	sub	sp, #12
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]

	gps->huart = huart;
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	687a      	ldr	r2, [r7, #4]
 8001a12:	601a      	str	r2, [r3, #0]

	//TODO: Other initialization like configuring GPS output types or other parameter setting.

	return HAL_OK;
 8001a14:	2300      	movs	r3, #0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <read_gps_data>:


bool read_gps_data(GPS_HandleTypeDef* gps){
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b0c2      	sub	sp, #264	; 0x108
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a32:	6018      	str	r0, [r3, #0]

	uint8_t receive_buffer[256] = {0};
 8001a34:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a38:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	3304      	adds	r3, #4
 8001a42:	22fc      	movs	r2, #252	; 0xfc
 8001a44:	2100      	movs	r1, #0
 8001a46:	4618      	mov	r0, r3
 8001a48:	f00b fc8f 	bl	800d36a <memset>

	if (GPS_SIMULATION){

		gps->data[GPS_SIM].is_valid_data = true;
 8001a4c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a50:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	2201      	movs	r2, #1
 8001a58:	76da      	strb	r2, [r3, #27]
		gps->data[GPS_SIM].latitude = GPS_SIM_LAT;
 8001a5a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a5e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a1c      	ldr	r2, [pc, #112]	; (8001ad8 <read_gps_data+0xb4>)
 8001a66:	609a      	str	r2, [r3, #8]
		gps->data[GPS_SIM].longitude = GPS_SIM_LON;
 8001a68:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a6c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a1a      	ldr	r2, [pc, #104]	; (8001adc <read_gps_data+0xb8>)
 8001a74:	60da      	str	r2, [r3, #12]
		gps->data[GPS_SIM].is_dominica = is_in_dominica(GPS_SIM_LAT, GPS_SIM_LON);
 8001a76:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8001ae0 <read_gps_data+0xbc>
 8001a7a:	ed9f 0a1a 	vldr	s0, [pc, #104]	; 8001ae4 <read_gps_data+0xc0>
 8001a7e:	f000 f89f 	bl	8001bc0 <is_in_dominica>
 8001a82:	4603      	mov	r3, r0
 8001a84:	461a      	mov	r2, r3
 8001a86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a8a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	769a      	strb	r2, [r3, #26]
		gps->data[GPS_SIM].timestamp[0] = 0;
 8001a92:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001a96:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	829a      	strh	r2, [r3, #20]
		gps->data[GPS_SIM].timestamp[1] = 0;
 8001aa0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001aa4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	82da      	strh	r2, [r3, #22]
		gps->data[GPS_SIM].timestamp[2] = 0;
 8001aae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ab2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	831a      	strh	r2, [r3, #24]

		gps->is_pos_locked = true;
 8001abc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8001ac0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	2201      	movs	r2, #1
 8001ac8:	711a      	strb	r2, [r3, #4]

		return true;
 8001aca:	2301      	movs	r3, #1

		return true;
	}

	return false;
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	422973fa 	.word	0x422973fa
 8001adc:	c28e40c5 	.word	0xc28e40c5
 8001ae0:	c28e40c5 	.word	0xc28e40c5
 8001ae4:	422973fa 	.word	0x422973fa

08001ae8 <get_gps_lock>:

		break;
	}
}

bool get_gps_lock(GPS_HandleTypeDef* gps, GPS_Data* gps_data){
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b086      	sub	sp, #24
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
 8001af0:	6039      	str	r1, [r7, #0]

	gps->is_pos_locked = false;
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	2200      	movs	r2, #0
 8001af6:	711a      	strb	r2, [r3, #4]

	//ensure all valid data flags are false
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8001af8:	2300      	movs	r3, #0
 8001afa:	75fb      	strb	r3, [r7, #23]
 8001afc:	e00d      	b.n	8001b1a <get_gps_lock+0x32>
		gps->data[msg_type].is_valid_data = false;
 8001afe:	7dfb      	ldrb	r3, [r7, #23]
 8001b00:	6879      	ldr	r1, [r7, #4]
 8001b02:	1c5a      	adds	r2, r3, #1
 8001b04:	4613      	mov	r3, r2
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	4413      	add	r3, r2
 8001b0a:	00db      	lsls	r3, r3, #3
 8001b0c:	440b      	add	r3, r1
 8001b0e:	3303      	adds	r3, #3
 8001b10:	2200      	movs	r2, #0
 8001b12:	701a      	strb	r2, [r3, #0]
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8001b14:	7dfb      	ldrb	r3, [r7, #23]
 8001b16:	3301      	adds	r3, #1
 8001b18:	75fb      	strb	r3, [r7, #23]
 8001b1a:	7dfb      	ldrb	r3, [r7, #23]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d9ee      	bls.n	8001afe <get_gps_lock+0x16>
	}

	//time trackers for any possible timeouts
	uint32_t start_time = HAL_GetTick();
 8001b20:	f001 f9b8 	bl	8002e94 <HAL_GetTick>
 8001b24:	60b8      	str	r0, [r7, #8]
	uint32_t current_time = start_time;
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	613b      	str	r3, [r7, #16]

	//Keep trying to read the GPS data until we get a lock, or we timeout
	while (!gps->is_pos_locked && ((current_time - start_time) < GPS_TRY_LOCK_TIMEOUT)){
 8001b2a:	e005      	b.n	8001b38 <get_gps_lock+0x50>
		read_gps_data(gps);
 8001b2c:	6878      	ldr	r0, [r7, #4]
 8001b2e:	f7ff ff79 	bl	8001a24 <read_gps_data>
		current_time = HAL_GetTick();
 8001b32:	f001 f9af 	bl	8002e94 <HAL_GetTick>
 8001b36:	6138      	str	r0, [r7, #16]
	while (!gps->is_pos_locked && ((current_time - start_time) < GPS_TRY_LOCK_TIMEOUT)){
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	791b      	ldrb	r3, [r3, #4]
 8001b3c:	f083 0301 	eor.w	r3, r3, #1
 8001b40:	b2db      	uxtb	r3, r3
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d006      	beq.n	8001b54 <get_gps_lock+0x6c>
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	f241 3287 	movw	r2, #4999	; 0x1387
 8001b50:	4293      	cmp	r3, r2
 8001b52:	d9eb      	bls.n	8001b2c <get_gps_lock+0x44>
	}

	//Populate the GPS data struct that we are officially returning to the caller. Prioritize message types in the order they appear in the enum definiton
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8001b54:	2300      	movs	r3, #0
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	e028      	b.n	8001bac <get_gps_lock+0xc4>
		if (gps->data[msg_type].is_valid_data){
 8001b5a:	7bfb      	ldrb	r3, [r7, #15]
 8001b5c:	6879      	ldr	r1, [r7, #4]
 8001b5e:	1c5a      	adds	r2, r3, #1
 8001b60:	4613      	mov	r3, r2
 8001b62:	005b      	lsls	r3, r3, #1
 8001b64:	4413      	add	r3, r2
 8001b66:	00db      	lsls	r3, r3, #3
 8001b68:	440b      	add	r3, r1
 8001b6a:	3303      	adds	r3, #3
 8001b6c:	781b      	ldrb	r3, [r3, #0]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d019      	beq.n	8001ba6 <get_gps_lock+0xbe>

			//Set the message type
			gps->data[msg_type].msg_type = msg_type;
 8001b72:	7bfb      	ldrb	r3, [r7, #15]
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	1c5a      	adds	r2, r3, #1
 8001b78:	4613      	mov	r3, r2
 8001b7a:	005b      	lsls	r3, r3, #1
 8001b7c:	4413      	add	r3, r2
 8001b7e:	00db      	lsls	r3, r3, #3
 8001b80:	440b      	add	r3, r1
 8001b82:	3304      	adds	r3, #4
 8001b84:	7bfa      	ldrb	r2, [r7, #15]
 8001b86:	701a      	strb	r2, [r3, #0]

			//Copy into the struct that returns back to the user
			memcpy(gps_data, &gps->data[msg_type], sizeof(GPS_Data));
 8001b88:	7bfa      	ldrb	r2, [r7, #15]
 8001b8a:	4613      	mov	r3, r2
 8001b8c:	005b      	lsls	r3, r3, #1
 8001b8e:	4413      	add	r3, r2
 8001b90:	00db      	lsls	r3, r3, #3
 8001b92:	3308      	adds	r3, #8
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	2218      	movs	r2, #24
 8001b9a:	4619      	mov	r1, r3
 8001b9c:	6838      	ldr	r0, [r7, #0]
 8001b9e:	f00b fbd7 	bl	800d350 <memcpy>

			return true;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e006      	b.n	8001bb4 <get_gps_lock+0xcc>
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8001ba6:	7bfb      	ldrb	r3, [r7, #15]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	7bfb      	ldrb	r3, [r7, #15]
 8001bae:	2b03      	cmp	r3, #3
 8001bb0:	d9d3      	bls.n	8001b5a <get_gps_lock+0x72>
		}
	}

	return false;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3718      	adds	r7, #24
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	0000      	movs	r0, r0
	...

08001bc0 <is_in_dominica>:

bool is_in_dominica(float latitude, float longitude){
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	ed87 0a01 	vstr	s0, [r7, #4]
 8001bca:	edc7 0a00 	vstr	s1, [r7]
	return (latitude < DOMINICA_LAT_BOUNDARY);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7fe fde4 	bl	800079c <__aeabi_f2d>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	461c      	mov	r4, r3
 8001bd8:	a307      	add	r3, pc, #28	; (adr r3, 8001bf8 <is_in_dominica+0x38>)
 8001bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bde:	f7ff f8a7 	bl	8000d30 <__aeabi_dcmplt>
 8001be2:	4603      	mov	r3, r0
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d101      	bne.n	8001bec <is_in_dominica+0x2c>
 8001be8:	2300      	movs	r3, #0
 8001bea:	461c      	mov	r4, r3
 8001bec:	b2e3      	uxtb	r3, r4
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	370c      	adds	r7, #12
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd90      	pop	{r4, r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	44bb1af4 	.word	0x44bb1af4
 8001bfc:	4031b6f5 	.word	0x4031b6f5

08001c00 <initialize_vhf>:

#include "Recovery Inc/VHF.h"
#include <stdio.h>
#include <string.h>

HAL_StatusTypeDef initialize_vhf(UART_HandleTypeDef huart, bool is_high, char * tx_freq, char * rx_freq){
 8001c00:	b084      	sub	sp, #16
 8001c02:	b580      	push	{r7, lr}
 8001c04:	b0a6      	sub	sp, #152	; 0x98
 8001c06:	af26      	add	r7, sp, #152	; 0x98
 8001c08:	f107 0c08 	add.w	ip, r7, #8
 8001c0c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Set the modes of the GPIO pins attached to the vhf module.
	//Leave PTT floating, set appropriate power level and wake chip
	HAL_Delay(1000);
 8001c10:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c14:	f001 f94a 	bl	8002eac <HAL_Delay>
	set_ptt(true);
 8001c18:	2001      	movs	r0, #1
 8001c1a:	f000 f8fb 	bl	8001e14 <set_ptt>
	set_power_level(is_high);
 8001c1e:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 f908 	bl	8001e38 <set_power_level>
	wake_vhf();
 8001c28:	f000 f918 	bl	8001e5c <wake_vhf>
	HAL_Delay(1000);
 8001c2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c30:	f001 f93c 	bl	8002eac <HAL_Delay>

	return configure_dra818v(huart, false, false, false, tx_freq, rx_freq);
 8001c34:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001c38:	9325      	str	r3, [sp, #148]	; 0x94
 8001c3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8001c3e:	9324      	str	r3, [sp, #144]	; 0x90
 8001c40:	2300      	movs	r3, #0
 8001c42:	9323      	str	r3, [sp, #140]	; 0x8c
 8001c44:	2300      	movs	r3, #0
 8001c46:	9322      	str	r3, [sp, #136]	; 0x88
 8001c48:	2300      	movs	r3, #0
 8001c4a:	9321      	str	r3, [sp, #132]	; 0x84
 8001c4c:	4668      	mov	r0, sp
 8001c4e:	f107 0318 	add.w	r3, r7, #24
 8001c52:	2284      	movs	r2, #132	; 0x84
 8001c54:	4619      	mov	r1, r3
 8001c56:	f00b fb7b 	bl	800d350 <memcpy>
 8001c5a:	f107 0308 	add.w	r3, r7, #8
 8001c5e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001c60:	f000 f808 	bl	8001c74 <configure_dra818v>
 8001c64:	4603      	mov	r3, r0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001c6e:	b004      	add	sp, #16
 8001c70:	4770      	bx	lr
	...

08001c74 <configure_dra818v>:

HAL_StatusTypeDef configure_dra818v(UART_HandleTypeDef huart, bool emphasis, bool lpf, bool hpf, char * tx_freq, char * rx_freq){
 8001c74:	b084      	sub	sp, #16
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b0b6      	sub	sp, #216	; 0xd8
 8001c7a:	af02      	add	r7, sp, #8
 8001c7c:	f107 0cd8 	add.w	ip, r7, #216	; 0xd8
 8001c80:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Note: variable tracks failure so that false (0) maps to HAL_OK (also 0)
	bool failed_config = false;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	//Data buffer to hold transmissions and responses
	char transmit_data[100];
	char response_data[100];

	HAL_Delay(1000);
 8001c8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c8e:	f001 f90d 	bl	8002eac <HAL_Delay>

	//Start with the VHF handshake to confirm module is setup correctly
	sprintf(transmit_data, "AT+DMOCONNECT \r\n");
 8001c92:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001c96:	4957      	ldr	r1, [pc, #348]	; (8001df4 <configure_dra818v+0x180>)
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f00b fbe1 	bl	800d460 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, HANDSHAKE_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8001c9e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001ca2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ca6:	2210      	movs	r2, #16
 8001ca8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001cac:	f008 fd90 	bl	800a7d0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, HANDSHAKE_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8001cb0:	1d39      	adds	r1, r7, #4
 8001cb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001cb6:	220f      	movs	r2, #15
 8001cb8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001cbc:	f008 fe26 	bl	800a90c <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_HANDSHAKE_EXPECTED_RESPONSE, HANDSHAKE_RESPONSE_LENGTH) != 0)
 8001cc0:	1d3b      	adds	r3, r7, #4
 8001cc2:	220f      	movs	r2, #15
 8001cc4:	494c      	ldr	r1, [pc, #304]	; (8001df8 <configure_dra818v+0x184>)
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f00b fbea 	bl	800d4a0 <strncmp>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d002      	beq.n	8001cd8 <configure_dra818v+0x64>
		failed_config = true;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8001cd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001cdc:	f001 f8e6 	bl	8002eac <HAL_Delay>

	//Now, set the parameters of the module
	sprintf(transmit_data, "AT+DMOSETGROUP=0,%s,%s,0000,0,0000\r\n", tx_freq, rx_freq);
 8001ce0:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001ce4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8001ce8:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001cec:	4943      	ldr	r1, [pc, #268]	; (8001dfc <configure_dra818v+0x188>)
 8001cee:	f00b fbb7 	bl	800d460 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_PARAMETERS_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8001cf2:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001cf6:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfa:	2230      	movs	r2, #48	; 0x30
 8001cfc:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001d00:	f008 fd66 	bl	800a7d0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_PARAMETERS_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8001d04:	1d39      	adds	r1, r7, #4
 8001d06:	f04f 33ff 	mov.w	r3, #4294967295
 8001d0a:	2210      	movs	r2, #16
 8001d0c:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001d10:	f008 fdfc 	bl	800a90c <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_PARAMETERS_EXPECTED_RESPONSE, SET_PARAMETERS_RESPONSE_LENGTH) != 0)
 8001d14:	1d3b      	adds	r3, r7, #4
 8001d16:	2210      	movs	r2, #16
 8001d18:	4939      	ldr	r1, [pc, #228]	; (8001e00 <configure_dra818v+0x18c>)
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f00b fbc0 	bl	800d4a0 <strncmp>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d002      	beq.n	8001d2c <configure_dra818v+0xb8>
		failed_config = true;
 8001d26:	2301      	movs	r3, #1
 8001d28:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8001d2c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d30:	f001 f8bc 	bl	8002eac <HAL_Delay>

	//Set the volume of the transmissions
	sprintf(transmit_data, "AT+DMOSETVOLUME=%d\r\n", VHF_VOLUME_LEVEL);
 8001d34:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001d38:	2204      	movs	r2, #4
 8001d3a:	4932      	ldr	r1, [pc, #200]	; (8001e04 <configure_dra818v+0x190>)
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f00b fb8f 	bl	800d460 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_VOLUME_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8001d42:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	2213      	movs	r2, #19
 8001d4c:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001d50:	f008 fd3e 	bl	800a7d0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_VOLUME_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8001d54:	1d39      	adds	r1, r7, #4
 8001d56:	f04f 33ff 	mov.w	r3, #4294967295
 8001d5a:	2211      	movs	r2, #17
 8001d5c:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001d60:	f008 fdd4 	bl	800a90c <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_VOLUME_EXPECTED_RESPONSE, SET_VOLUME_RESPONSE_LENGTH) != 0)
 8001d64:	1d3b      	adds	r3, r7, #4
 8001d66:	2211      	movs	r2, #17
 8001d68:	4927      	ldr	r1, [pc, #156]	; (8001e08 <configure_dra818v+0x194>)
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f00b fb98 	bl	800d4a0 <strncmp>
 8001d70:	4603      	mov	r3, r0
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d002      	beq.n	8001d7c <configure_dra818v+0x108>
		failed_config = true;
 8001d76:	2301      	movs	r3, #1
 8001d78:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8001d7c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d80:	f001 f894 	bl	8002eac <HAL_Delay>

	//Set the filter parameters
	//Invert all the bools passed in since the VHF module treats "0" as true
	sprintf(transmit_data, "AT+SETFILTER=%d,%d,%d\r\n", emphasis, hpf, lpf);
 8001d84:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8001d88:	f897 1174 	ldrb.w	r1, [r7, #372]	; 0x174
 8001d8c:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 8001d90:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8001d94:	9300      	str	r3, [sp, #0]
 8001d96:	460b      	mov	r3, r1
 8001d98:	491c      	ldr	r1, [pc, #112]	; (8001e0c <configure_dra818v+0x198>)
 8001d9a:	f00b fb61 	bl	800d460 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_FILTER_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8001d9e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001da2:	f04f 33ff 	mov.w	r3, #4294967295
 8001da6:	2214      	movs	r2, #20
 8001da8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001dac:	f008 fd10 	bl	800a7d0 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_FILTER_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8001db0:	1d39      	adds	r1, r7, #4
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	2211      	movs	r2, #17
 8001db8:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8001dbc:	f008 fda6 	bl	800a90c <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_FILTER_EXPECTED_RESPONSE, SET_FILTER_RESPONSE_LENGTH) != 0)
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2211      	movs	r2, #17
 8001dc4:	4912      	ldr	r1, [pc, #72]	; (8001e10 <configure_dra818v+0x19c>)
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f00b fb6a 	bl	800d4a0 <strncmp>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d002      	beq.n	8001dd8 <configure_dra818v+0x164>
		failed_config = true;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8001dd8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ddc:	f001 f866 	bl	8002eac <HAL_Delay>

	return failed_config;
 8001de0:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	37d0      	adds	r7, #208	; 0xd0
 8001de8:	46bd      	mov	sp, r7
 8001dea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001dee:	b004      	add	sp, #16
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	0800f98c 	.word	0x0800f98c
 8001df8:	0800f9a0 	.word	0x0800f9a0
 8001dfc:	0800f9b0 	.word	0x0800f9b0
 8001e00:	0800f9d8 	.word	0x0800f9d8
 8001e04:	0800f9ec 	.word	0x0800f9ec
 8001e08:	0800fa04 	.word	0x0800fa04
 8001e0c:	0800fa18 	.word	0x0800fa18
 8001e10:	0800fa30 	.word	0x0800fa30

08001e14 <set_ptt>:


void set_ptt(bool is_tx){
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	71fb      	strb	r3, [r7, #7]

	//isTx determines if the GPIO is high or low, and thus if we are transmitting or not
	HAL_GPIO_WritePin(VHF_PTT_GPIO_Port, VHF_PTT_Pin, is_tx);
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2104      	movs	r1, #4
 8001e24:	4803      	ldr	r0, [pc, #12]	; (8001e34 <set_ptt+0x20>)
 8001e26:	f003 fb4d 	bl	80054c4 <HAL_GPIO_WritePin>

}
 8001e2a:	bf00      	nop
 8001e2c:	3708      	adds	r7, #8
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	42020000 	.word	0x42020000

08001e38 <set_power_level>:

void set_power_level(bool is_high){
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	4603      	mov	r3, r0
 8001e40:	71fb      	strb	r3, [r7, #7]

	//isHigh determines if we should use high power (1W) or low (0.5W)
	HAL_GPIO_WritePin(APRS_H_L_GPIO_Port, APRS_H_L_Pin, is_high);
 8001e42:	79fb      	ldrb	r3, [r7, #7]
 8001e44:	461a      	mov	r2, r3
 8001e46:	2140      	movs	r1, #64	; 0x40
 8001e48:	4803      	ldr	r0, [pc, #12]	; (8001e58 <set_power_level+0x20>)
 8001e4a:	f003 fb3b 	bl	80054c4 <HAL_GPIO_WritePin>

}
 8001e4e:	bf00      	nop
 8001e50:	3708      	adds	r7, #8
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	42020000 	.word	0x42020000

08001e5c <wake_vhf>:

	//Set the PD pin on the module to low to make the module sleep
	HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_RESET);
}

void wake_vhf(){
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	af00      	add	r7, sp, #0

	//Set the PD pin on the module to high to wake the module
	HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_SET);
 8001e60:	2201      	movs	r2, #1
 8001e62:	2120      	movs	r1, #32
 8001e64:	4802      	ldr	r0, [pc, #8]	; (8001e70 <wake_vhf+0x14>)
 8001e66:	f003 fb2d 	bl	80054c4 <HAL_GPIO_WritePin>

}
 8001e6a:	bf00      	nop
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	42020000 	.word	0x42020000

08001e74 <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08e      	sub	sp, #56	; 0x38
 8001e78:	af08      	add	r7, sp, #32
 8001e7a:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  VOID * pointer = aprs_stack;
 8001e80:	4b13      	ldr	r3, [pc, #76]	; (8001ed0 <App_ThreadX_Init+0x5c>)
 8001e82:	60fb      	str	r3, [r7, #12]

  TX_BYTE_POOL* byte_pool = (TX_BYTE_POOL*) memory_ptr;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	613b      	str	r3, [r7, #16]
  ret = tx_byte_allocate(byte_pool, &pointer, APRS_STACK_SIZE, TX_NO_WAIT);
 8001e88:	f107 010c 	add.w	r1, r7, #12
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001e92:	6938      	ldr	r0, [r7, #16]
 8001e94:	f00a fde4 	bl	800ca60 <_txe_byte_allocate>
 8001e98:	6178      	str	r0, [r7, #20]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  tx_thread_create(&aprs_thread, "APRS Thread", aprs_thread_entry, 0x1234, pointer, APRS_STACK_SIZE, 1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	22b0      	movs	r2, #176	; 0xb0
 8001e9e:	9206      	str	r2, [sp, #24]
 8001ea0:	2201      	movs	r2, #1
 8001ea2:	9205      	str	r2, [sp, #20]
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	9204      	str	r2, [sp, #16]
 8001ea8:	2201      	movs	r2, #1
 8001eaa:	9203      	str	r2, [sp, #12]
 8001eac:	2201      	movs	r2, #1
 8001eae:	9202      	str	r2, [sp, #8]
 8001eb0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001eb4:	9201      	str	r2, [sp, #4]
 8001eb6:	9300      	str	r3, [sp, #0]
 8001eb8:	f241 2334 	movw	r3, #4660	; 0x1234
 8001ebc:	4a05      	ldr	r2, [pc, #20]	; (8001ed4 <App_ThreadX_Init+0x60>)
 8001ebe:	4906      	ldr	r1, [pc, #24]	; (8001ed8 <App_ThreadX_Init+0x64>)
 8001ec0:	4806      	ldr	r0, [pc, #24]	; (8001edc <App_ThreadX_Init+0x68>)
 8001ec2:	f00a fee1 	bl	800cc88 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8001ec6:	697b      	ldr	r3, [r7, #20]
}
 8001ec8:	4618      	mov	r0, r3
 8001eca:	3718      	adds	r7, #24
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	2000525c 	.word	0x2000525c
 8001ed4:	0800117d 	.word	0x0800117d
 8001ed8:	0800fa44 	.word	0x0800fa44
 8001edc:	20005a5c 	.word	0x20005a5c

08001ee0 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8001ee4:	f009 fdd2 	bl	800ba8c <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8001ee8:	bf00      	nop
 8001eea:	bd80      	pop	{r7, pc}

08001eec <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8001eec:	b480      	push	{r7}
 8001eee:	b083      	sub	sp, #12
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8001ef4:	bf00      	nop
 8001ef6:	370c      	adds	r7, #12
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8001f04:	bf00      	nop
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr

08001f0e <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8001f0e:	b480      	push	{r7}
 8001f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8001f12:	bf00      	nop
 8001f14:	46bd      	mov	sp, r7
 8001f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1a:	4770      	bx	lr

08001f1c <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
  return 0;
 8001f20:	2300      	movs	r3, #0
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8001f22:	4618      	mov	r0, r3
 8001f24:	46bd      	mov	sp, r7
 8001f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2a:	4770      	bx	lr

08001f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001f30:	f000 ff6e 	bl	8002e10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001f34:	f000 f811 	bl	8001f5a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001f38:	f000 fa1c 	bl	8002374 <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8001f3c:	f000 f8bc 	bl	80020b8 <MX_GPDMA1_Init>
  MX_DAC1_Init();
 8001f40:	f000 f872 	bl	8002028 <MX_DAC1_Init>
  MX_TIM2_Init();
 8001f44:	f000 f92e 	bl	80021a4 <MX_TIM2_Init>
  MX_RTC_Init();
 8001f48:	f000 f8d6 	bl	80020f8 <MX_RTC_Init>
  MX_UART4_Init();
 8001f4c:	f000 f976 	bl	800223c <MX_UART4_Init>
  MX_USART3_UART_Init();
 8001f50:	f000 f9c4 	bl	80022dc <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8001f54:	f7ff ffc4 	bl	8001ee0 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001f58:	e7fe      	b.n	8001f58 <main+0x2c>

08001f5a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f5a:	b580      	push	{r7, lr}
 8001f5c:	b09e      	sub	sp, #120	; 0x78
 8001f5e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f60:	f107 0318 	add.w	r3, r7, #24
 8001f64:	2260      	movs	r2, #96	; 0x60
 8001f66:	2100      	movs	r1, #0
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f00b f9fe 	bl	800d36a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f6e:	463b      	mov	r3, r7
 8001f70:	2200      	movs	r2, #0
 8001f72:	601a      	str	r2, [r3, #0]
 8001f74:	605a      	str	r2, [r3, #4]
 8001f76:	609a      	str	r2, [r3, #8]
 8001f78:	60da      	str	r2, [r3, #12]
 8001f7a:	611a      	str	r2, [r3, #16]
 8001f7c:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8001f7e:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8001f82:	f003 fab7 	bl	80054f4 <HAL_PWREx_ControlVoltageScaling>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d001      	beq.n	8001f90 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8001f8c:	f000 face 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001f90:	231a      	movs	r3, #26
 8001f92:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f94:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f98:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f9a:	2310      	movs	r3, #16
 8001f9c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8001fa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8001fa8:	2310      	movs	r3, #16
 8001faa:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8001fac:	2300      	movs	r3, #0
 8001fae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001fb4:	2302      	movs	r3, #2
 8001fb6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8001fbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fc0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8001fc2:	2303      	movs	r3, #3
 8001fc4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8001fc6:	230a      	movs	r3, #10
 8001fc8:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001fca:	2302      	movs	r3, #2
 8001fcc:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8001fd6:	230c      	movs	r3, #12
 8001fd8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001fde:	f107 0318 	add.w	r3, r7, #24
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f003 fb12 	bl	800560c <HAL_RCC_OscConfig>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001fee:	f000 fa9d 	bl	800252c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ff2:	231f      	movs	r3, #31
 8001ff4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ffa:	2300      	movs	r3, #0
 8001ffc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ffe:	2300      	movs	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002002:	2300      	movs	r3, #0
 8002004:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 8002006:	2300      	movs	r3, #0
 8002008:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800200a:	463b      	mov	r3, r7
 800200c:	2104      	movs	r1, #4
 800200e:	4618      	mov	r0, r3
 8002010:	f004 f9d8 	bl	80063c4 <HAL_RCC_ClockConfig>
 8002014:	4603      	mov	r3, r0
 8002016:	2b00      	cmp	r3, #0
 8002018:	d001      	beq.n	800201e <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800201a:	f000 fa87 	bl	800252c <Error_Handler>
  }
}
 800201e:	bf00      	nop
 8002020:	3778      	adds	r7, #120	; 0x78
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
	...

08002028 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b08e      	sub	sp, #56	; 0x38
 800202c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800202e:	f107 0308 	add.w	r3, r7, #8
 8002032:	2230      	movs	r2, #48	; 0x30
 8002034:	2100      	movs	r1, #0
 8002036:	4618      	mov	r0, r3
 8002038:	f00b f997 	bl	800d36a <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 800203c:	2300      	movs	r3, #0
 800203e:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002040:	4b1b      	ldr	r3, [pc, #108]	; (80020b0 <MX_DAC1_Init+0x88>)
 8002042:	4a1c      	ldr	r2, [pc, #112]	; (80020b4 <MX_DAC1_Init+0x8c>)
 8002044:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002046:	481a      	ldr	r0, [pc, #104]	; (80020b0 <MX_DAC1_Init+0x88>)
 8002048:	f001 f880 	bl	800314c <HAL_DAC_Init>
 800204c:	4603      	mov	r3, r0
 800204e:	2b00      	cmp	r3, #0
 8002050:	d001      	beq.n	8002056 <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 8002052:	f000 fa6b 	bl	800252c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8002056:	2300      	movs	r3, #0
 8002058:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 800205a:	2300      	movs	r3, #0
 800205c:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 800205e:	2300      	movs	r3, #0
 8002060:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002062:	2300      	movs	r3, #0
 8002064:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002066:	230a      	movs	r3, #10
 8002068:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800206a:	2300      	movs	r3, #0
 800206c:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 800206e:	2301      	movs	r3, #1
 8002070:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002072:	2300      	movs	r3, #0
 8002074:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	2200      	movs	r2, #0
 800207c:	4619      	mov	r1, r3
 800207e:	480c      	ldr	r0, [pc, #48]	; (80020b0 <MX_DAC1_Init+0x88>)
 8002080:	f001 faa2 	bl	80035c8 <HAL_DAC_ConfigChannel>
 8002084:	4603      	mov	r3, r0
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 800208a:	f000 fa4f 	bl	800252c <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 800208e:	2300      	movs	r3, #0
 8002090:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 8002092:	1d3b      	adds	r3, r7, #4
 8002094:	4619      	mov	r1, r3
 8002096:	4806      	ldr	r0, [pc, #24]	; (80020b0 <MX_DAC1_Init+0x88>)
 8002098:	f001 fc80 	bl	800399c <HAL_DACEx_SetConfigAutonomousMode>
 800209c:	4603      	mov	r3, r0
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d001      	beq.n	80020a6 <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80020a2:	f000 fa43 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80020a6:	bf00      	nop
 80020a8:	3738      	adds	r7, #56	; 0x38
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	20005b0c 	.word	0x20005b0c
 80020b4:	46021800 	.word	0x46021800

080020b8 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80020be:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <MX_GPDMA1_Init+0x3c>)
 80020c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020c4:	4a0b      	ldr	r2, [pc, #44]	; (80020f4 <MX_GPDMA1_Init+0x3c>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80020ce:	4b09      	ldr	r3, [pc, #36]	; (80020f4 <MX_GPDMA1_Init+0x3c>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	607b      	str	r3, [r7, #4]
 80020da:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 80020dc:	2200      	movs	r2, #0
 80020de:	2100      	movs	r1, #0
 80020e0:	201e      	movs	r0, #30
 80020e2:	f001 f80b 	bl	80030fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 80020e6:	201e      	movs	r0, #30
 80020e8:	f001 f822 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 80020ec:	bf00      	nop
 80020ee:	3708      	adds	r7, #8
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}
 80020f4:	46020c00 	.word	0x46020c00

080020f8 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b088      	sub	sp, #32
 80020fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
 8002104:	605a      	str	r2, [r3, #4]
 8002106:	609a      	str	r2, [r3, #8]
 8002108:	60da      	str	r2, [r3, #12]
 800210a:	611a      	str	r2, [r3, #16]
 800210c:	615a      	str	r2, [r3, #20]
 800210e:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8002110:	4b22      	ldr	r3, [pc, #136]	; (800219c <MX_RTC_Init+0xa4>)
 8002112:	4a23      	ldr	r2, [pc, #140]	; (80021a0 <MX_RTC_Init+0xa8>)
 8002114:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8002116:	4b21      	ldr	r3, [pc, #132]	; (800219c <MX_RTC_Init+0xa4>)
 8002118:	2200      	movs	r2, #0
 800211a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800211c:	4b1f      	ldr	r3, [pc, #124]	; (800219c <MX_RTC_Init+0xa4>)
 800211e:	227f      	movs	r2, #127	; 0x7f
 8002120:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8002122:	4b1e      	ldr	r3, [pc, #120]	; (800219c <MX_RTC_Init+0xa4>)
 8002124:	22ff      	movs	r2, #255	; 0xff
 8002126:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8002128:	4b1c      	ldr	r3, [pc, #112]	; (800219c <MX_RTC_Init+0xa4>)
 800212a:	2200      	movs	r2, #0
 800212c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800212e:	4b1b      	ldr	r3, [pc, #108]	; (800219c <MX_RTC_Init+0xa4>)
 8002130:	2200      	movs	r2, #0
 8002132:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8002134:	4b19      	ldr	r3, [pc, #100]	; (800219c <MX_RTC_Init+0xa4>)
 8002136:	2200      	movs	r2, #0
 8002138:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800213a:	4b18      	ldr	r3, [pc, #96]	; (800219c <MX_RTC_Init+0xa4>)
 800213c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002140:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8002142:	4b16      	ldr	r3, [pc, #88]	; (800219c <MX_RTC_Init+0xa4>)
 8002144:	2200      	movs	r2, #0
 8002146:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8002148:	4b14      	ldr	r3, [pc, #80]	; (800219c <MX_RTC_Init+0xa4>)
 800214a:	2200      	movs	r2, #0
 800214c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800214e:	4813      	ldr	r0, [pc, #76]	; (800219c <MX_RTC_Init+0xa4>)
 8002150:	f007 fa50 	bl	80095f4 <HAL_RTC_Init>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d001      	beq.n	800215e <MX_RTC_Init+0x66>
  {
    Error_Handler();
 800215a:	f000 f9e7 	bl	800252c <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 8002162:	2300      	movs	r3, #0
 8002164:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 8002166:	2300      	movs	r3, #0
 8002168:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 800216a:	2300      	movs	r3, #0
 800216c:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 800216e:	1d3b      	adds	r3, r7, #4
 8002170:	4619      	mov	r1, r3
 8002172:	480a      	ldr	r0, [pc, #40]	; (800219c <MX_RTC_Init+0xa4>)
 8002174:	f007 fbae 	bl	80098d4 <HAL_RTCEx_PrivilegeModeSet>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 800217e:	f000 f9d5 	bl	800252c <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 8002182:	4806      	ldr	r0, [pc, #24]	; (800219c <MX_RTC_Init+0xa4>)
 8002184:	f007 fb64 	bl	8009850 <HAL_RTCEx_SetRefClock>
 8002188:	4603      	mov	r3, r0
 800218a:	2b00      	cmp	r3, #0
 800218c:	d001      	beq.n	8002192 <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800218e:	f000 f9cd 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8002192:	bf00      	nop
 8002194:	3720      	adds	r7, #32
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20005bd4 	.word	0x20005bd4
 80021a0:	46007800 	.word	0x46007800

080021a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b088      	sub	sp, #32
 80021a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80021aa:	f107 0310 	add.w	r3, r7, #16
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]
 80021b2:	605a      	str	r2, [r3, #4]
 80021b4:	609a      	str	r2, [r3, #8]
 80021b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80021b8:	1d3b      	adds	r3, r7, #4
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]
 80021be:	605a      	str	r2, [r3, #4]
 80021c0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80021c2:	4b1d      	ldr	r3, [pc, #116]	; (8002238 <MX_TIM2_Init+0x94>)
 80021c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80021c8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80021ca:	4b1b      	ldr	r3, [pc, #108]	; (8002238 <MX_TIM2_Init+0x94>)
 80021cc:	220f      	movs	r2, #15
 80021ce:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021d0:	4b19      	ldr	r3, [pc, #100]	; (8002238 <MX_TIM2_Init+0x94>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45;
 80021d6:	4b18      	ldr	r3, [pc, #96]	; (8002238 <MX_TIM2_Init+0x94>)
 80021d8:	222d      	movs	r2, #45	; 0x2d
 80021da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021dc:	4b16      	ldr	r3, [pc, #88]	; (8002238 <MX_TIM2_Init+0x94>)
 80021de:	2200      	movs	r2, #0
 80021e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021e2:	4b15      	ldr	r3, [pc, #84]	; (8002238 <MX_TIM2_Init+0x94>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80021e8:	4813      	ldr	r0, [pc, #76]	; (8002238 <MX_TIM2_Init+0x94>)
 80021ea:	f007 fba1 	bl	8009930 <HAL_TIM_Base_Init>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80021f4:	f000 f99a 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80021fe:	f107 0310 	add.w	r3, r7, #16
 8002202:	4619      	mov	r1, r3
 8002204:	480c      	ldr	r0, [pc, #48]	; (8002238 <MX_TIM2_Init+0x94>)
 8002206:	f007 fecb 	bl	8009fa0 <HAL_TIM_ConfigClockSource>
 800220a:	4603      	mov	r3, r0
 800220c:	2b00      	cmp	r3, #0
 800220e:	d001      	beq.n	8002214 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002210:	f000 f98c 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002214:	2320      	movs	r3, #32
 8002216:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002218:	2300      	movs	r3, #0
 800221a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800221c:	1d3b      	adds	r3, r7, #4
 800221e:	4619      	mov	r1, r3
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <MX_TIM2_Init+0x94>)
 8002222:	f008 f97d 	bl	800a520 <HAL_TIMEx_MasterConfigSynchronization>
 8002226:	4603      	mov	r3, r0
 8002228:	2b00      	cmp	r3, #0
 800222a:	d001      	beq.n	8002230 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800222c:	f000 f97e 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002230:	bf00      	nop
 8002232:	3720      	adds	r7, #32
 8002234:	46bd      	mov	sp, r7
 8002236:	bd80      	pop	{r7, pc}
 8002238:	20005c04 	.word	0x20005c04

0800223c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002240:	4b24      	ldr	r3, [pc, #144]	; (80022d4 <MX_UART4_Init+0x98>)
 8002242:	4a25      	ldr	r2, [pc, #148]	; (80022d8 <MX_UART4_Init+0x9c>)
 8002244:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 8002246:	4b23      	ldr	r3, [pc, #140]	; (80022d4 <MX_UART4_Init+0x98>)
 8002248:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800224c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800224e:	4b21      	ldr	r3, [pc, #132]	; (80022d4 <MX_UART4_Init+0x98>)
 8002250:	2200      	movs	r2, #0
 8002252:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8002254:	4b1f      	ldr	r3, [pc, #124]	; (80022d4 <MX_UART4_Init+0x98>)
 8002256:	2200      	movs	r2, #0
 8002258:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800225a:	4b1e      	ldr	r3, [pc, #120]	; (80022d4 <MX_UART4_Init+0x98>)
 800225c:	2200      	movs	r2, #0
 800225e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002260:	4b1c      	ldr	r3, [pc, #112]	; (80022d4 <MX_UART4_Init+0x98>)
 8002262:	220c      	movs	r2, #12
 8002264:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002266:	4b1b      	ldr	r3, [pc, #108]	; (80022d4 <MX_UART4_Init+0x98>)
 8002268:	2200      	movs	r2, #0
 800226a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800226c:	4b19      	ldr	r3, [pc, #100]	; (80022d4 <MX_UART4_Init+0x98>)
 800226e:	2200      	movs	r2, #0
 8002270:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002272:	4b18      	ldr	r3, [pc, #96]	; (80022d4 <MX_UART4_Init+0x98>)
 8002274:	2200      	movs	r2, #0
 8002276:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002278:	4b16      	ldr	r3, [pc, #88]	; (80022d4 <MX_UART4_Init+0x98>)
 800227a:	2200      	movs	r2, #0
 800227c:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800227e:	4b15      	ldr	r3, [pc, #84]	; (80022d4 <MX_UART4_Init+0x98>)
 8002280:	2210      	movs	r2, #16
 8002282:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <MX_UART4_Init+0x98>)
 8002286:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800228a:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800228c:	4811      	ldr	r0, [pc, #68]	; (80022d4 <MX_UART4_Init+0x98>)
 800228e:	f008 fa4f 	bl	800a730 <HAL_UART_Init>
 8002292:	4603      	mov	r3, r0
 8002294:	2b00      	cmp	r3, #0
 8002296:	d001      	beq.n	800229c <MX_UART4_Init+0x60>
  {
    Error_Handler();
 8002298:	f000 f948 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229c:	2100      	movs	r1, #0
 800229e:	480d      	ldr	r0, [pc, #52]	; (80022d4 <MX_UART4_Init+0x98>)
 80022a0:	f009 f800 	bl	800b2a4 <HAL_UARTEx_SetTxFifoThreshold>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d001      	beq.n	80022ae <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80022aa:	f000 f93f 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ae:	2100      	movs	r1, #0
 80022b0:	4808      	ldr	r0, [pc, #32]	; (80022d4 <MX_UART4_Init+0x98>)
 80022b2:	f009 f835 	bl	800b320 <HAL_UARTEx_SetRxFifoThreshold>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d001      	beq.n	80022c0 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 80022bc:	f000 f936 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80022c0:	4804      	ldr	r0, [pc, #16]	; (80022d4 <MX_UART4_Init+0x98>)
 80022c2:	f008 ffb6 	bl	800b232 <HAL_UARTEx_DisableFifoMode>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d001      	beq.n	80022d0 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 80022cc:	f000 f92e 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80022d0:	bf00      	nop
 80022d2:	bd80      	pop	{r7, pc}
 80022d4:	20005c50 	.word	0x20005c50
 80022d8:	40004c00 	.word	0x40004c00

080022dc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80022e0:	4b22      	ldr	r3, [pc, #136]	; (800236c <MX_USART3_UART_Init+0x90>)
 80022e2:	4a23      	ldr	r2, [pc, #140]	; (8002370 <MX_USART3_UART_Init+0x94>)
 80022e4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 80022e6:	4b21      	ldr	r3, [pc, #132]	; (800236c <MX_USART3_UART_Init+0x90>)
 80022e8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80022ec:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80022ee:	4b1f      	ldr	r3, [pc, #124]	; (800236c <MX_USART3_UART_Init+0x90>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80022f4:	4b1d      	ldr	r3, [pc, #116]	; (800236c <MX_USART3_UART_Init+0x90>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80022fa:	4b1c      	ldr	r3, [pc, #112]	; (800236c <MX_USART3_UART_Init+0x90>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002300:	4b1a      	ldr	r3, [pc, #104]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002302:	220c      	movs	r2, #12
 8002304:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002306:	4b19      	ldr	r3, [pc, #100]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002308:	2200      	movs	r2, #0
 800230a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <MX_USART3_UART_Init+0x90>)
 800230e:	2200      	movs	r2, #0
 8002310:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002312:	4b16      	ldr	r3, [pc, #88]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002314:	2200      	movs	r2, #0
 8002316:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002318:	4b14      	ldr	r3, [pc, #80]	; (800236c <MX_USART3_UART_Init+0x90>)
 800231a:	2200      	movs	r2, #0
 800231c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002320:	2200      	movs	r2, #0
 8002322:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002324:	4811      	ldr	r0, [pc, #68]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002326:	f008 fa03 	bl	800a730 <HAL_UART_Init>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d001      	beq.n	8002334 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8002330:	f000 f8fc 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002334:	2100      	movs	r1, #0
 8002336:	480d      	ldr	r0, [pc, #52]	; (800236c <MX_USART3_UART_Init+0x90>)
 8002338:	f008 ffb4 	bl	800b2a4 <HAL_UARTEx_SetTxFifoThreshold>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8002342:	f000 f8f3 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002346:	2100      	movs	r1, #0
 8002348:	4808      	ldr	r0, [pc, #32]	; (800236c <MX_USART3_UART_Init+0x90>)
 800234a:	f008 ffe9 	bl	800b320 <HAL_UARTEx_SetRxFifoThreshold>
 800234e:	4603      	mov	r3, r0
 8002350:	2b00      	cmp	r3, #0
 8002352:	d001      	beq.n	8002358 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002354:	f000 f8ea 	bl	800252c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002358:	4804      	ldr	r0, [pc, #16]	; (800236c <MX_USART3_UART_Init+0x90>)
 800235a:	f008 ff6a 	bl	800b232 <HAL_UARTEx_DisableFifoMode>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d001      	beq.n	8002368 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002364:	f000 f8e2 	bl	800252c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002368:	bf00      	nop
 800236a:	bd80      	pop	{r7, pc}
 800236c:	20005ce4 	.word	0x20005ce4
 8002370:	40004800 	.word	0x40004800

08002374 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b08a      	sub	sp, #40	; 0x28
 8002378:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800237a:	f107 0314 	add.w	r3, r7, #20
 800237e:	2200      	movs	r2, #0
 8002380:	601a      	str	r2, [r3, #0]
 8002382:	605a      	str	r2, [r3, #4]
 8002384:	609a      	str	r2, [r3, #8]
 8002386:	60da      	str	r2, [r3, #12]
 8002388:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800238a:	4b32      	ldr	r3, [pc, #200]	; (8002454 <MX_GPIO_Init+0xe0>)
 800238c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002390:	4a30      	ldr	r2, [pc, #192]	; (8002454 <MX_GPIO_Init+0xe0>)
 8002392:	f043 0304 	orr.w	r3, r3, #4
 8002396:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800239a:	4b2e      	ldr	r3, [pc, #184]	; (8002454 <MX_GPIO_Init+0xe0>)
 800239c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023a0:	f003 0304 	and.w	r3, r3, #4
 80023a4:	613b      	str	r3, [r7, #16]
 80023a6:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023a8:	4b2a      	ldr	r3, [pc, #168]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ae:	4a29      	ldr	r2, [pc, #164]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b4:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023b8:	4b26      	ldr	r3, [pc, #152]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c6:	4b23      	ldr	r3, [pc, #140]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023cc:	4a21      	ldr	r2, [pc, #132]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023ce:	f043 0301 	orr.w	r3, r3, #1
 80023d2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023d6:	4b1f      	ldr	r3, [pc, #124]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023dc:	f003 0301 	and.w	r3, r3, #1
 80023e0:	60bb      	str	r3, [r7, #8]
 80023e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023e6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023ea:	4a1a      	ldr	r2, [pc, #104]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80023f4:	4b17      	ldr	r3, [pc, #92]	; (8002454 <MX_GPIO_Init+0xe0>)
 80023f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	607b      	str	r3, [r7, #4]
 8002400:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VHF_PTT_Pin|APRS_H_L_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2144      	movs	r1, #68	; 0x44
 8002406:	4814      	ldr	r0, [pc, #80]	; (8002458 <MX_GPIO_Init+0xe4>)
 8002408:	f003 f85c 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_SET);
 800240c:	2201      	movs	r2, #1
 800240e:	2120      	movs	r1, #32
 8002410:	4811      	ldr	r0, [pc, #68]	; (8002458 <MX_GPIO_Init+0xe4>)
 8002412:	f003 f857 	bl	80054c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VHF_PTT_Pin APRS_PD_Pin APRS_H_L_Pin */
  GPIO_InitStruct.Pin = VHF_PTT_Pin|APRS_PD_Pin|APRS_H_L_Pin;
 8002416:	2364      	movs	r3, #100	; 0x64
 8002418:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800241a:	2301      	movs	r3, #1
 800241c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241e:	2300      	movs	r3, #0
 8002420:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002422:	2300      	movs	r3, #0
 8002424:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002426:	f107 0314 	add.w	r3, r7, #20
 800242a:	4619      	mov	r1, r3
 800242c:	480a      	ldr	r0, [pc, #40]	; (8002458 <MX_GPIO_Init+0xe4>)
 800242e:	f002 fe71 	bl	8005114 <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_EXTINT_Pin */
  GPIO_InitStruct.Pin = GPS_EXTINT_Pin;
 8002432:	2301      	movs	r3, #1
 8002434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002436:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_GPIO_Init+0xe8>)
 8002438:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_EXTINT_GPIO_Port, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	4806      	ldr	r0, [pc, #24]	; (8002460 <MX_GPIO_Init+0xec>)
 8002446:	f002 fe65 	bl	8005114 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800244a:	bf00      	nop
 800244c:	3728      	adds	r7, #40	; 0x28
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	46020c00 	.word	0x46020c00
 8002458:	42020000 	.word	0x42020000
 800245c:	10110000 	.word	0x10110000
 8002460:	42020400 	.word	0x42020400

08002464 <MX_TIM2_Fake_Init>:

/* USER CODE BEGIN 4 */
//Fake timer 2 init function so we can change the period value during runtime
void MX_TIM2_Fake_Init(uint8_t newPeriod){
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	4603      	mov	r3, r0
 800246c:	71fb      	strb	r3, [r7, #7]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800246e:	f107 0318 	add.w	r3, r7, #24
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]
 8002476:	605a      	str	r2, [r3, #4]
 8002478:	609a      	str	r2, [r3, #8]
 800247a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800247c:	f107 030c 	add.w	r3, r7, #12
 8002480:	2200      	movs	r2, #0
 8002482:	601a      	str	r2, [r3, #0]
 8002484:	605a      	str	r2, [r3, #4]
 8002486:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002488:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 800248a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800248e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16 - 1;
 8002490:	4b1c      	ldr	r3, [pc, #112]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 8002492:	220f      	movs	r2, #15
 8002494:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002496:	4b1b      	ldr	r3, [pc, #108]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 8002498:	2200      	movs	r2, #0
 800249a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = newPeriod - 1;
 800249c:	79fb      	ldrb	r3, [r7, #7]
 800249e:	3b01      	subs	r3, #1
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b18      	ldr	r3, [pc, #96]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80024a6:	4b17      	ldr	r3, [pc, #92]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80024ac:	4b15      	ldr	r3, [pc, #84]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80024b2:	4814      	ldr	r0, [pc, #80]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024b4:	f007 fa3c 	bl	8009930 <HAL_TIM_Base_Init>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d001      	beq.n	80024c2 <MX_TIM2_Fake_Init+0x5e>
  {
	Error_Handler();
 80024be:	f000 f835 	bl	800252c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80024c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024c6:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80024c8:	f107 0318 	add.w	r3, r7, #24
 80024cc:	4619      	mov	r1, r3
 80024ce:	480d      	ldr	r0, [pc, #52]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024d0:	f007 fd66 	bl	8009fa0 <HAL_TIM_ConfigClockSource>
 80024d4:	4603      	mov	r3, r0
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d001      	beq.n	80024de <MX_TIM2_Fake_Init+0x7a>
  {
	Error_Handler();
 80024da:	f000 f827 	bl	800252c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80024de:	2320      	movs	r3, #32
 80024e0:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80024e2:	2300      	movs	r3, #0
 80024e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80024e6:	f107 030c 	add.w	r3, r7, #12
 80024ea:	4619      	mov	r1, r3
 80024ec:	4805      	ldr	r0, [pc, #20]	; (8002504 <MX_TIM2_Fake_Init+0xa0>)
 80024ee:	f008 f817 	bl	800a520 <HAL_TIMEx_MasterConfigSynchronization>
 80024f2:	4603      	mov	r3, r0
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d001      	beq.n	80024fc <MX_TIM2_Fake_Init+0x98>
  {
	Error_Handler();
 80024f8:	f000 f818 	bl	800252c <Error_Handler>
  }
}
 80024fc:	bf00      	nop
 80024fe:	3728      	adds	r7, #40	; 0x28
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	20005c04 	.word	0x20005c04

08002508 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a04      	ldr	r2, [pc, #16]	; (8002528 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d101      	bne.n	800251e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800251a:	f000 fca7 	bl	8002e6c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800251e:	bf00      	nop
 8002520:	3708      	adds	r7, #8
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40001000 	.word	0x40001000

0800252c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002530:	b672      	cpsid	i
}
 8002532:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002534:	e7fe      	b.n	8002534 <Error_Handler+0x8>
	...

08002538 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b15      	ldr	r3, [pc, #84]	; (8002594 <HAL_MspInit+0x5c>)
 8002540:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002544:	4a13      	ldr	r2, [pc, #76]	; (8002594 <HAL_MspInit+0x5c>)
 8002546:	f043 0304 	orr.w	r3, r3, #4
 800254a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800254e:	4b11      	ldr	r3, [pc, #68]	; (8002594 <HAL_MspInit+0x5c>)
 8002550:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002554:	f003 0304 	and.w	r3, r3, #4
 8002558:	607b      	str	r3, [r7, #4]
 800255a:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 800255c:	4b0d      	ldr	r3, [pc, #52]	; (8002594 <HAL_MspInit+0x5c>)
 800255e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002562:	4a0c      	ldr	r2, [pc, #48]	; (8002594 <HAL_MspInit+0x5c>)
 8002564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002568:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800256c:	4b09      	ldr	r3, [pc, #36]	; (8002594 <HAL_MspInit+0x5c>)
 800256e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002576:	603b      	str	r3, [r7, #0]
 8002578:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE3);
 800257a:	2030      	movs	r0, #48	; 0x30
 800257c:	f000 fcba 	bl	8002ef4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 8002580:	f000 fce0 	bl	8002f44 <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 8002584:	2000      	movs	r0, #0
 8002586:	f000 fcc9 	bl	8002f1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}
 8002592:	bf00      	nop
 8002594:	46020c00 	.word	0x46020c00

08002598 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b0d6      	sub	sp, #344	; 0x158
 800259c:	af00      	add	r7, sp, #0
 800259e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025a2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025a6:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a8:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]
 80025b0:	605a      	str	r2, [r3, #4]
 80025b2:	609a      	str	r2, [r3, #8]
 80025b4:	60da      	str	r2, [r3, #12]
 80025b6:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80025b8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025bc:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025c0:	4618      	mov	r0, r3
 80025c2:	23c8      	movs	r3, #200	; 0xc8
 80025c4:	461a      	mov	r2, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	f00a fecf 	bl	800d36a <memset>
  if(hdac->Instance==DAC1)
 80025cc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025d0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a78      	ldr	r2, [pc, #480]	; (80027bc <HAL_DAC_MspInit+0x224>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	f040 80e9 	bne.w	80027b2 <HAL_DAC_MspInit+0x21a>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 80025e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025e4:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 80025e8:	4a75      	ldr	r2, [pc, #468]	; (80027c0 <HAL_DAC_MspInit+0x228>)
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 80025f2:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80025f6:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80025fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80025fe:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 8002602:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002606:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800260a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800260e:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002612:	f107 0310 	add.w	r3, r7, #16
 8002616:	4618      	mov	r0, r3
 8002618:	f004 fae2 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_DAC_MspInit+0x8e>
    {
      Error_Handler();
 8002622:	f7ff ff83 	bl	800252c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002626:	4b67      	ldr	r3, [pc, #412]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 8002628:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800262c:	4a65      	ldr	r2, [pc, #404]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 800262e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002632:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8002636:	4b63      	ldr	r3, [pc, #396]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 8002638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800263c:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8002640:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002644:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800264e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8002652:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002654:	4b5b      	ldr	r3, [pc, #364]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 8002656:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800265a:	4a5a      	ldr	r2, [pc, #360]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 800265c:	f043 0301 	orr.w	r3, r3, #1
 8002660:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002664:	4b57      	ldr	r3, [pc, #348]	; (80027c4 <HAL_DAC_MspInit+0x22c>)
 8002666:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800266a:	f003 0201 	and.w	r2, r3, #1
 800266e:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002672:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800267c:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 8002680:	681b      	ldr	r3, [r3, #0]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002682:	2310      	movs	r3, #16
 8002684:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002688:	2303      	movs	r3, #3
 800268a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268e:	2300      	movs	r3, #0
 8002690:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002694:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 8002698:	4619      	mov	r1, r3
 800269a:	484b      	ldr	r0, [pc, #300]	; (80027c8 <HAL_DAC_MspInit+0x230>)
 800269c:	f002 fd3a 	bl	8005114 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* GPDMA1_REQUEST_DAC1_CH1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80026a0:	2321      	movs	r3, #33	; 0x21
 80026a2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 80026a6:	2302      	movs	r3, #2
 80026a8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80026b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80026b6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80026ba:	2308      	movs	r3, #8
 80026bc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80026c0:	2300      	movs	r3, #0
 80026c2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80026c6:	2302      	movs	r3, #2
 80026c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80026cc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80026d0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 80026d4:	2301      	movs	r3, #1
 80026d6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 80026da:	2301      	movs	r3, #1
 80026dc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 80026e0:	2300      	movs	r3, #0
 80026e2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 80026e6:	2300      	movs	r3, #0
 80026e8:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 80026ec:	2300      	movs	r3, #0
 80026ee:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 80026f2:	2300      	movs	r3, #0
 80026f4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 80026f8:	2300      	movs	r3, #0
 80026fa:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 80026fe:	2300      	movs	r3, #0
 8002700:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 8002704:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002708:	4930      	ldr	r1, [pc, #192]	; (80027cc <HAL_DAC_MspInit+0x234>)
 800270a:	4618      	mov	r0, r3
 800270c:	f001 fe26 	bl	800435c <HAL_DMAEx_List_BuildNode>
 8002710:	4603      	mov	r3, r0
 8002712:	2b00      	cmp	r3, #0
 8002714:	d001      	beq.n	800271a <HAL_DAC_MspInit+0x182>
    {
      Error_Handler();
 8002716:	f7ff ff09 	bl	800252c <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 800271a:	4a2c      	ldr	r2, [pc, #176]	; (80027cc <HAL_DAC_MspInit+0x234>)
 800271c:	2100      	movs	r1, #0
 800271e:	482c      	ldr	r0, [pc, #176]	; (80027d0 <HAL_DAC_MspInit+0x238>)
 8002720:	f001 fe48 	bl	80043b4 <HAL_DMAEx_List_InsertNode>
 8002724:	4603      	mov	r3, r0
 8002726:	2b00      	cmp	r3, #0
 8002728:	d001      	beq.n	800272e <HAL_DAC_MspInit+0x196>
    {
      Error_Handler();
 800272a:	f7ff feff 	bl	800252c <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 800272e:	4828      	ldr	r0, [pc, #160]	; (80027d0 <HAL_DAC_MspInit+0x238>)
 8002730:	f001 ff09 	bl	8004546 <HAL_DMAEx_List_SetCircularMode>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d001      	beq.n	800273e <HAL_DAC_MspInit+0x1a6>
    {
      Error_Handler();
 800273a:	f7ff fef7 	bl	800252c <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 800273e:	4b25      	ldr	r3, [pc, #148]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002740:	4a25      	ldr	r2, [pc, #148]	; (80027d8 <HAL_DAC_MspInit+0x240>)
 8002742:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 8002744:	4b23      	ldr	r3, [pc, #140]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002746:	2200      	movs	r2, #0
 8002748:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 800274a:	4b22      	ldr	r3, [pc, #136]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 800274c:	2200      	movs	r2, #0
 800274e:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8002750:	4b20      	ldr	r3, [pc, #128]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002752:	2200      	movs	r2, #0
 8002754:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 8002756:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002758:	2200      	movs	r2, #0
 800275a:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 800275c:	4b1d      	ldr	r3, [pc, #116]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 800275e:	2281      	movs	r2, #129	; 0x81
 8002760:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 8002762:	481c      	ldr	r0, [pc, #112]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002764:	f001 fc38 	bl	8003fd8 <HAL_DMAEx_List_Init>
 8002768:	4603      	mov	r3, r0
 800276a:	2b00      	cmp	r3, #0
 800276c:	d001      	beq.n	8002772 <HAL_DAC_MspInit+0x1da>
    {
      Error_Handler();
 800276e:	f7ff fedd 	bl	800252c <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 8002772:	4917      	ldr	r1, [pc, #92]	; (80027d0 <HAL_DAC_MspInit+0x238>)
 8002774:	4817      	ldr	r0, [pc, #92]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002776:	f001 ff47 	bl	8004608 <HAL_DMAEx_List_LinkQ>
 800277a:	4603      	mov	r3, r0
 800277c:	2b00      	cmp	r3, #0
 800277e:	d001      	beq.n	8002784 <HAL_DAC_MspInit+0x1ec>
    {
      Error_Handler();
 8002780:	f7ff fed4 	bl	800252c <Error_Handler>
    }

    __HAL_LINKDMA(hdac, DMA_Handle1, handle_GPDMA1_Channel1);
 8002784:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002788:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a11      	ldr	r2, [pc, #68]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002790:	609a      	str	r2, [r3, #8]
 8002792:	4a10      	ldr	r2, [pc, #64]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 8002794:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8002798:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80027a0:	2110      	movs	r1, #16
 80027a2:	480c      	ldr	r0, [pc, #48]	; (80027d4 <HAL_DAC_MspInit+0x23c>)
 80027a4:	f001 fbb6 	bl	8003f14 <HAL_DMA_ConfigChannelAttributes>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <HAL_DAC_MspInit+0x21a>
    {
      Error_Handler();
 80027ae:	f7ff febd 	bl	800252c <Error_Handler>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80027b2:	bf00      	nop
 80027b4:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80027b8:	46bd      	mov	sp, r7
 80027ba:	bd80      	pop	{r7, pc}
 80027bc:	46021800 	.word	0x46021800
 80027c0:	10008000 	.word	0x10008000
 80027c4:	46020c00 	.word	0x46020c00
 80027c8:	42020000 	.word	0x42020000
 80027cc:	20005b20 	.word	0x20005b20
 80027d0:	20005b44 	.word	0x20005b44
 80027d4:	20005b5c 	.word	0x20005b5c
 80027d8:	400200d0 	.word	0x400200d0

080027dc <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b0bc      	sub	sp, #240	; 0xf0
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027e8:	2200      	movs	r2, #0
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	605a      	str	r2, [r3, #4]
 80027ee:	609a      	str	r2, [r3, #8]
 80027f0:	60da      	str	r2, [r3, #12]
 80027f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80027f4:	f107 0310 	add.w	r3, r7, #16
 80027f8:	22c8      	movs	r2, #200	; 0xc8
 80027fa:	2100      	movs	r1, #0
 80027fc:	4618      	mov	r0, r3
 80027fe:	f00a fdb4 	bl	800d36a <memset>
  if(hrtc->Instance==RTC)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a2b      	ldr	r2, [pc, #172]	; (80028b4 <HAL_RTC_MspInit+0xd8>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d14f      	bne.n	80028ac <HAL_RTC_MspInit+0xd0>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800280c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8002810:	f04f 0300 	mov.w	r3, #0
 8002814:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8002818:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002820:	f107 0310 	add.w	r3, r7, #16
 8002824:	4618      	mov	r0, r3
 8002826:	f004 f9db 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d001      	beq.n	8002834 <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8002830:	f7ff fe7c 	bl	800252c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8002834:	4b20      	ldr	r3, [pc, #128]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 8002836:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800283a:	4a1f      	ldr	r2, [pc, #124]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 800283c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002840:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8002844:	4b1c      	ldr	r3, [pc, #112]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 8002846:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800284a:	4a1b      	ldr	r2, [pc, #108]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 800284c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002850:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8002854:	4b18      	ldr	r3, [pc, #96]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 8002856:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800285a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800285e:	60fb      	str	r3, [r7, #12]
 8002860:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002862:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 8002864:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002868:	4a13      	ldr	r2, [pc, #76]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002872:	4b11      	ldr	r3, [pc, #68]	; (80028b8 <HAL_RTC_MspInit+0xdc>)
 8002874:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002878:	f003 0302 	and.w	r3, r3, #2
 800287c:	60bb      	str	r3, [r7, #8]
 800287e:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002884:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002888:	2302      	movs	r3, #2
 800288a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288e:	2300      	movs	r3, #0
 8002890:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002894:	2300      	movs	r3, #0
 8002896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 800289a:	2300      	movs	r3, #0
 800289c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028a0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028a4:	4619      	mov	r1, r3
 80028a6:	4805      	ldr	r0, [pc, #20]	; (80028bc <HAL_RTC_MspInit+0xe0>)
 80028a8:	f002 fc34 	bl	8005114 <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80028ac:	bf00      	nop
 80028ae:	37f0      	adds	r7, #240	; 0xf0
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	46007800 	.word	0x46007800
 80028b8:	46020c00 	.word	0x46020c00
 80028bc:	42020400 	.word	0x42020400

080028c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b084      	sub	sp, #16
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028d0:	d116      	bne.n	8002900 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80028d2:	4b0d      	ldr	r3, [pc, #52]	; (8002908 <HAL_TIM_Base_MspInit+0x48>)
 80028d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028d8:	4a0b      	ldr	r2, [pc, #44]	; (8002908 <HAL_TIM_Base_MspInit+0x48>)
 80028da:	f043 0301 	orr.w	r3, r3, #1
 80028de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_TIM_Base_MspInit+0x48>)
 80028e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028e8:	f003 0301 	and.w	r3, r3, #1
 80028ec:	60fb      	str	r3, [r7, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80028f0:	2200      	movs	r2, #0
 80028f2:	2100      	movs	r1, #0
 80028f4:	202d      	movs	r0, #45	; 0x2d
 80028f6:	f000 fc01 	bl	80030fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028fa:	202d      	movs	r0, #45	; 0x2d
 80028fc:	f000 fc18 	bl	8003130 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002900:	bf00      	nop
 8002902:	3710      	adds	r7, #16
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}
 8002908:	46020c00 	.word	0x46020c00

0800290c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b0be      	sub	sp, #248	; 0xf8
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002914:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
 800291c:	605a      	str	r2, [r3, #4]
 800291e:	609a      	str	r2, [r3, #8]
 8002920:	60da      	str	r2, [r3, #12]
 8002922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002924:	f107 0318 	add.w	r3, r7, #24
 8002928:	22c8      	movs	r2, #200	; 0xc8
 800292a:	2100      	movs	r1, #0
 800292c:	4618      	mov	r0, r3
 800292e:	f00a fd1c 	bl	800d36a <memset>
  if(huart->Instance==UART4)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a4b      	ldr	r2, [pc, #300]	; (8002a64 <HAL_UART_MspInit+0x158>)
 8002938:	4293      	cmp	r3, r2
 800293a:	d145      	bne.n	80029c8 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800293c:	f04f 0208 	mov.w	r2, #8
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8002948:	2300      	movs	r3, #0
 800294a:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800294c:	f107 0318 	add.w	r3, r7, #24
 8002950:	4618      	mov	r0, r3
 8002952:	f004 f945 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 800295c:	f7ff fde6 	bl	800252c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002960:	4b41      	ldr	r3, [pc, #260]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002962:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002966:	4a40      	ldr	r2, [pc, #256]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002968:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800296c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002970:	4b3d      	ldr	r3, [pc, #244]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002972:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002976:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800297a:	617b      	str	r3, [r7, #20]
 800297c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297e:	4b3a      	ldr	r3, [pc, #232]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002980:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002984:	4a38      	ldr	r2, [pc, #224]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800298e:	4b36      	ldr	r3, [pc, #216]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002994:	f003 0301 	and.w	r3, r3, #1
 8002998:	613b      	str	r3, [r7, #16]
 800299a:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800299c:	2303      	movs	r3, #3
 800299e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a2:	2302      	movs	r3, #2
 80029a4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a8:	2300      	movs	r3, #0
 80029aa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029ae:	2300      	movs	r3, #0
 80029b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80029b4:	2308      	movs	r3, #8
 80029b6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ba:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029be:	4619      	mov	r1, r3
 80029c0:	482a      	ldr	r0, [pc, #168]	; (8002a6c <HAL_UART_MspInit+0x160>)
 80029c2:	f002 fba7 	bl	8005114 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80029c6:	e049      	b.n	8002a5c <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a28      	ldr	r2, [pc, #160]	; (8002a70 <HAL_UART_MspInit+0x164>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d144      	bne.n	8002a5c <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80029d2:	f04f 0204 	mov.w	r2, #4
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80029de:	2300      	movs	r3, #0
 80029e0:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80029e2:	f107 0318 	add.w	r3, r7, #24
 80029e6:	4618      	mov	r0, r3
 80029e8:	f004 f8fa 	bl	8006be0 <HAL_RCCEx_PeriphCLKConfig>
 80029ec:	4603      	mov	r3, r0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d001      	beq.n	80029f6 <HAL_UART_MspInit+0xea>
      Error_Handler();
 80029f2:	f7ff fd9b 	bl	800252c <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80029f6:	4b1c      	ldr	r3, [pc, #112]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 80029f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80029fc:	4a1a      	ldr	r2, [pc, #104]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 80029fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002a02:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a06:	4b18      	ldr	r3, [pc, #96]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a0c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a10:	60fb      	str	r3, [r7, #12]
 8002a12:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a14:	4b14      	ldr	r3, [pc, #80]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002a16:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a1a:	4a13      	ldr	r2, [pc, #76]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002a1c:	f043 0304 	orr.w	r3, r3, #4
 8002a20:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002a24:	4b10      	ldr	r3, [pc, #64]	; (8002a68 <HAL_UART_MspInit+0x15c>)
 8002a26:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002a32:	2330      	movs	r3, #48	; 0x30
 8002a34:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a38:	2302      	movs	r3, #2
 8002a3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a44:	2300      	movs	r3, #0
 8002a46:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002a4a:	2307      	movs	r3, #7
 8002a4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a50:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a54:	4619      	mov	r1, r3
 8002a56:	4807      	ldr	r0, [pc, #28]	; (8002a74 <HAL_UART_MspInit+0x168>)
 8002a58:	f002 fb5c 	bl	8005114 <HAL_GPIO_Init>
}
 8002a5c:	bf00      	nop
 8002a5e:	37f8      	adds	r7, #248	; 0xf8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	40004c00 	.word	0x40004c00
 8002a68:	46020c00 	.word	0x46020c00
 8002a6c:	42020000 	.word	0x42020000
 8002a70:	40004800 	.word	0x40004800
 8002a74:	42020800 	.word	0x42020800

08002a78 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b08e      	sub	sp, #56	; 0x38
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002a80:	2300      	movs	r3, #0
 8002a82:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8002a84:	2300      	movs	r3, #0
 8002a86:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8002a88:	4b2e      	ldr	r3, [pc, #184]	; (8002b44 <HAL_InitTick+0xcc>)
 8002a8a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a8e:	4a2d      	ldr	r2, [pc, #180]	; (8002b44 <HAL_InitTick+0xcc>)
 8002a90:	f043 0310 	orr.w	r3, r3, #16
 8002a94:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8002a98:	4b2a      	ldr	r3, [pc, #168]	; (8002b44 <HAL_InitTick+0xcc>)
 8002a9a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002aa6:	f107 0210 	add.w	r2, r7, #16
 8002aaa:	f107 0314 	add.w	r3, r7, #20
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f003 ffd7 	bl	8006a64 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002ab6:	f003 ff99 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8002aba:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002abe:	4a22      	ldr	r2, [pc, #136]	; (8002b48 <HAL_InitTick+0xd0>)
 8002ac0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac4:	0c9b      	lsrs	r3, r3, #18
 8002ac6:	3b01      	subs	r3, #1
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8002aca:	4b20      	ldr	r3, [pc, #128]	; (8002b4c <HAL_InitTick+0xd4>)
 8002acc:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_InitTick+0xd8>)
 8002ace:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8002ad0:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_InitTick+0xd4>)
 8002ad2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ad6:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8002ad8:	4a1c      	ldr	r2, [pc, #112]	; (8002b4c <HAL_InitTick+0xd4>)
 8002ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002adc:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8002ade:	4b1b      	ldr	r3, [pc, #108]	; (8002b4c <HAL_InitTick+0xd4>)
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ae4:	4b19      	ldr	r3, [pc, #100]	; (8002b4c <HAL_InitTick+0xd4>)
 8002ae6:	2200      	movs	r2, #0
 8002ae8:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8002aea:	4818      	ldr	r0, [pc, #96]	; (8002b4c <HAL_InitTick+0xd4>)
 8002aec:	f006 ff20 	bl	8009930 <HAL_TIM_Base_Init>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8002af6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d118      	bne.n	8002b30 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8002afe:	4813      	ldr	r0, [pc, #76]	; (8002b4c <HAL_InitTick+0xd4>)
 8002b00:	f007 f82e 	bl	8009b60 <HAL_TIM_Base_Start_IT>
 8002b04:	4603      	mov	r3, r0
 8002b06:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8002b0a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d10e      	bne.n	8002b30 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2b0f      	cmp	r3, #15
 8002b16:	d808      	bhi.n	8002b2a <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8002b18:	2200      	movs	r2, #0
 8002b1a:	6879      	ldr	r1, [r7, #4]
 8002b1c:	2031      	movs	r0, #49	; 0x31
 8002b1e:	f000 faed 	bl	80030fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002b22:	4a0c      	ldr	r2, [pc, #48]	; (8002b54 <HAL_InitTick+0xdc>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6013      	str	r3, [r2, #0]
 8002b28:	e002      	b.n	8002b30 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8002b30:	2031      	movs	r0, #49	; 0x31
 8002b32:	f000 fafd 	bl	8003130 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8002b36:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3738      	adds	r7, #56	; 0x38
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	46020c00 	.word	0x46020c00
 8002b48:	431bde83 	.word	0x431bde83
 8002b4c:	20005d78 	.word	0x20005d78
 8002b50:	40001000 	.word	0x40001000
 8002b54:	20000004 	.word	0x20000004

08002b58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b5c:	e7fe      	b.n	8002b5c <NMI_Handler+0x4>

08002b5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b5e:	b480      	push	{r7}
 8002b60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b62:	e7fe      	b.n	8002b62 <HardFault_Handler+0x4>

08002b64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b64:	b480      	push	{r7}
 8002b66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b68:	e7fe      	b.n	8002b68 <MemManage_Handler+0x4>

08002b6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b6e:	e7fe      	b.n	8002b6e <BusFault_Handler+0x4>

08002b70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b70:	b480      	push	{r7}
 8002b72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b74:	e7fe      	b.n	8002b74 <UsageFault_Handler+0x4>

08002b76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b76:	b480      	push	{r7}
 8002b78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b7a:	bf00      	nop
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b82:	4770      	bx	lr

08002b84 <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8002b88:	4802      	ldr	r0, [pc, #8]	; (8002b94 <GPDMA1_Channel1_IRQHandler+0x10>)
 8002b8a:	f001 f849 	bl	8003c20 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8002b8e:	bf00      	nop
 8002b90:	bd80      	pop	{r7, pc}
 8002b92:	bf00      	nop
 8002b94:	20005b5c 	.word	0x20005b5c

08002b98 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002b9c:	4802      	ldr	r0, [pc, #8]	; (8002ba8 <TIM2_IRQHandler+0x10>)
 8002b9e:	f007 f87f 	bl	8009ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ba2:	bf00      	nop
 8002ba4:	bd80      	pop	{r7, pc}
 8002ba6:	bf00      	nop
 8002ba8:	20005c04 	.word	0x20005c04

08002bac <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <TIM6_IRQHandler+0x10>)
 8002bb2:	f007 f875 	bl	8009ca0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20005d78 	.word	0x20005d78

08002bc0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  return 1;
 8002bc4:	2301      	movs	r3, #1
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_kill>:

int _kill(int pid, int sig)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
 8002bd8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002bda:	f00a fb8f 	bl	800d2fc <__errno>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2216      	movs	r2, #22
 8002be2:	601a      	str	r2, [r3, #0]
  return -1;
 8002be4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <_exit>:

void _exit (int status)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bfc:	6878      	ldr	r0, [r7, #4]
 8002bfe:	f7ff ffe7 	bl	8002bd0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002c02:	e7fe      	b.n	8002c02 <_exit+0x12>

08002c04 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b086      	sub	sp, #24
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	60f8      	str	r0, [r7, #12]
 8002c0c:	60b9      	str	r1, [r7, #8]
 8002c0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c10:	2300      	movs	r3, #0
 8002c12:	617b      	str	r3, [r7, #20]
 8002c14:	e00a      	b.n	8002c2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c16:	e000      	b.n	8002c1a <_read+0x16>
 8002c18:	bf00      	nop
 8002c1a:	4601      	mov	r1, r0
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	60ba      	str	r2, [r7, #8]
 8002c22:	b2ca      	uxtb	r2, r1
 8002c24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	3301      	adds	r3, #1
 8002c2a:	617b      	str	r3, [r7, #20]
 8002c2c:	697a      	ldr	r2, [r7, #20]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	429a      	cmp	r2, r3
 8002c32:	dbf0      	blt.n	8002c16 <_read+0x12>
  }

  return len;
 8002c34:	687b      	ldr	r3, [r7, #4]
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3718      	adds	r7, #24
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}

08002c3e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c3e:	b580      	push	{r7, lr}
 8002c40:	b086      	sub	sp, #24
 8002c42:	af00      	add	r7, sp, #0
 8002c44:	60f8      	str	r0, [r7, #12]
 8002c46:	60b9      	str	r1, [r7, #8]
 8002c48:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	617b      	str	r3, [r7, #20]
 8002c4e:	e009      	b.n	8002c64 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	1c5a      	adds	r2, r3, #1
 8002c54:	60ba      	str	r2, [r7, #8]
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	e000      	b.n	8002c5e <_write+0x20>
 8002c5c:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c5e:	697b      	ldr	r3, [r7, #20]
 8002c60:	3301      	adds	r3, #1
 8002c62:	617b      	str	r3, [r7, #20]
 8002c64:	697a      	ldr	r2, [r7, #20]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	dbf1      	blt.n	8002c50 <_write+0x12>
  }
  return len;
 8002c6c:	687b      	ldr	r3, [r7, #4]
}
 8002c6e:	4618      	mov	r0, r3
 8002c70:	3718      	adds	r7, #24
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <_close>:

int _close(int file)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c7e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	370c      	adds	r7, #12
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr

08002c8e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
 8002c96:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c9e:	605a      	str	r2, [r3, #4]
  return 0;
 8002ca0:	2300      	movs	r3, #0
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	370c      	adds	r7, #12
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cac:	4770      	bx	lr

08002cae <_isatty>:

int _isatty(int file)
{
 8002cae:	b480      	push	{r7}
 8002cb0:	b083      	sub	sp, #12
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cb6:	2301      	movs	r3, #1
}
 8002cb8:	4618      	mov	r0, r3
 8002cba:	370c      	adds	r7, #12
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	b085      	sub	sp, #20
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	60b9      	str	r1, [r7, #8]
 8002cce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cd0:	2300      	movs	r3, #0
}
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	3714      	adds	r7, #20
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cdc:	4770      	bx	lr
	...

08002ce0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b086      	sub	sp, #24
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce8:	4a14      	ldr	r2, [pc, #80]	; (8002d3c <_sbrk+0x5c>)
 8002cea:	4b15      	ldr	r3, [pc, #84]	; (8002d40 <_sbrk+0x60>)
 8002cec:	1ad3      	subs	r3, r2, r3
 8002cee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cf4:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <_sbrk+0x64>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d102      	bne.n	8002d02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cfc:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <_sbrk+0x64>)
 8002cfe:	4a12      	ldr	r2, [pc, #72]	; (8002d48 <_sbrk+0x68>)
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d02:	4b10      	ldr	r3, [pc, #64]	; (8002d44 <_sbrk+0x64>)
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	4413      	add	r3, r2
 8002d0a:	693a      	ldr	r2, [r7, #16]
 8002d0c:	429a      	cmp	r2, r3
 8002d0e:	d207      	bcs.n	8002d20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d10:	f00a faf4 	bl	800d2fc <__errno>
 8002d14:	4603      	mov	r3, r0
 8002d16:	220c      	movs	r2, #12
 8002d18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8002d1e:	e009      	b.n	8002d34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d20:	4b08      	ldr	r3, [pc, #32]	; (8002d44 <_sbrk+0x64>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d26:	4b07      	ldr	r3, [pc, #28]	; (8002d44 <_sbrk+0x64>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4413      	add	r3, r2
 8002d2e:	4a05      	ldr	r2, [pc, #20]	; (8002d44 <_sbrk+0x64>)
 8002d30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d32:	68fb      	ldr	r3, [r7, #12]
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	3718      	adds	r7, #24
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	bd80      	pop	{r7, pc}
 8002d3c:	200c0000 	.word	0x200c0000
 8002d40:	00000400 	.word	0x00000400
 8002d44:	20005dc4 	.word	0x20005dc4
 8002d48:	20006420 	.word	0x20006420

08002d4c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8002d50:	4b18      	ldr	r3, [pc, #96]	; (8002db4 <SystemInit+0x68>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d56:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <SystemInit+0x68>)
 8002d58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <SystemInit+0x6c>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8002d66:	4b14      	ldr	r3, [pc, #80]	; (8002db8 <SystemInit+0x6c>)
 8002d68:	2200      	movs	r2, #0
 8002d6a:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8002d6c:	4b12      	ldr	r3, [pc, #72]	; (8002db8 <SystemInit+0x6c>)
 8002d6e:	2200      	movs	r2, #0
 8002d70:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8002d72:	4b11      	ldr	r3, [pc, #68]	; (8002db8 <SystemInit+0x6c>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8002d78:	4b0f      	ldr	r3, [pc, #60]	; (8002db8 <SystemInit+0x6c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a0e      	ldr	r2, [pc, #56]	; (8002db8 <SystemInit+0x6c>)
 8002d7e:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8002d82:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002d86:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8002d88:	4b0b      	ldr	r3, [pc, #44]	; (8002db8 <SystemInit+0x6c>)
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8002d8e:	4b0a      	ldr	r3, [pc, #40]	; (8002db8 <SystemInit+0x6c>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a09      	ldr	r2, [pc, #36]	; (8002db8 <SystemInit+0x6c>)
 8002d94:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d98:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <SystemInit+0x6c>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002da0:	4b04      	ldr	r3, [pc, #16]	; (8002db4 <SystemInit+0x68>)
 8002da2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002da6:	609a      	str	r2, [r3, #8]
  #endif
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00
 8002db8:	46020c00 	.word	0x46020c00

08002dbc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8002dbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df4 <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8002dc0:	f7ff ffc4 	bl	8002d4c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002dc4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002dc6:	e003      	b.n	8002dd0 <LoopCopyDataInit>

08002dc8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002dc8:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002dca:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002dcc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002dce:	3104      	adds	r1, #4

08002dd0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002dd0:	480a      	ldr	r0, [pc, #40]	; (8002dfc <LoopForever+0xa>)
	ldr	r3, =_edata
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002dd4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002dd6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002dd8:	d3f6      	bcc.n	8002dc8 <CopyDataInit>
	ldr	r2, =_sbss
 8002dda:	4a0a      	ldr	r2, [pc, #40]	; (8002e04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ddc:	e002      	b.n	8002de4 <LoopFillZerobss>

08002dde <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002dde:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002de0:	f842 3b04 	str.w	r3, [r2], #4

08002de4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002de4:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <LoopForever+0x16>)
	cmp	r2, r3
 8002de6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002de8:	d3f9      	bcc.n	8002dde <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002dea:	f00a fa8d 	bl	800d308 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002dee:	f7ff f89d 	bl	8001f2c <main>

08002df2 <LoopForever>:

LoopForever:
    b LoopForever
 8002df2:	e7fe      	b.n	8002df2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8002df4:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8002df8:	0800fe98 	.word	0x0800fe98
	ldr	r0, =_sdata
 8002dfc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002e00:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8002e04:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8002e08:	20006420 	.word	0x20006420

08002e0c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002e0c:	e7fe      	b.n	8002e0c <ADC1_IRQHandler>
	...

08002e10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e14:	4b11      	ldr	r3, [pc, #68]	; (8002e5c <HAL_Init+0x4c>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a10      	ldr	r2, [pc, #64]	; (8002e5c <HAL_Init+0x4c>)
 8002e1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e20:	2003      	movs	r0, #3
 8002e22:	f000 f960 	bl	80030e6 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8002e26:	f003 fcbf 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b0c      	ldr	r3, [pc, #48]	; (8002e60 <HAL_Init+0x50>)
 8002e2e:	6a1b      	ldr	r3, [r3, #32]
 8002e30:	f003 030f 	and.w	r3, r3, #15
 8002e34:	490b      	ldr	r1, [pc, #44]	; (8002e64 <HAL_Init+0x54>)
 8002e36:	5ccb      	ldrb	r3, [r1, r3]
 8002e38:	fa22 f303 	lsr.w	r3, r2, r3
 8002e3c:	4a0a      	ldr	r2, [pc, #40]	; (8002e68 <HAL_Init+0x58>)
 8002e3e:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002e40:	200f      	movs	r0, #15
 8002e42:	f7ff fe19 	bl	8002a78 <HAL_InitTick>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8002e4c:	2301      	movs	r3, #1
 8002e4e:	e002      	b.n	8002e56 <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002e50:	f7ff fb72 	bl	8002538 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e54:	2300      	movs	r3, #0
}
 8002e56:	4618      	mov	r0, r3
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	40022000 	.word	0x40022000
 8002e60:	46020c00 	.word	0x46020c00
 8002e64:	0800fa64 	.word	0x0800fa64
 8002e68:	20000000 	.word	0x20000000

08002e6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002e70:	4b06      	ldr	r3, [pc, #24]	; (8002e8c <HAL_IncTick+0x20>)
 8002e72:	781b      	ldrb	r3, [r3, #0]
 8002e74:	461a      	mov	r2, r3
 8002e76:	4b06      	ldr	r3, [pc, #24]	; (8002e90 <HAL_IncTick+0x24>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	4a04      	ldr	r2, [pc, #16]	; (8002e90 <HAL_IncTick+0x24>)
 8002e7e:	6013      	str	r3, [r2, #0]
}
 8002e80:	bf00      	nop
 8002e82:	46bd      	mov	sp, r7
 8002e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e88:	4770      	bx	lr
 8002e8a:	bf00      	nop
 8002e8c:	20000008 	.word	0x20000008
 8002e90:	20005dc8 	.word	0x20005dc8

08002e94 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e94:	b480      	push	{r7}
 8002e96:	af00      	add	r7, sp, #0
  return uwTick;
 8002e98:	4b03      	ldr	r3, [pc, #12]	; (8002ea8 <HAL_GetTick+0x14>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	46bd      	mov	sp, r7
 8002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea4:	4770      	bx	lr
 8002ea6:	bf00      	nop
 8002ea8:	20005dc8 	.word	0x20005dc8

08002eac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002eb4:	f7ff ffee 	bl	8002e94 <HAL_GetTick>
 8002eb8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ec4:	d005      	beq.n	8002ed2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <HAL_Delay+0x44>)
 8002ec8:	781b      	ldrb	r3, [r3, #0]
 8002eca:	461a      	mov	r2, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	4413      	add	r3, r2
 8002ed0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002ed2:	bf00      	nop
 8002ed4:	f7ff ffde 	bl	8002e94 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d8f7      	bhi.n	8002ed4 <HAL_Delay+0x28>
  {
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	bf00      	nop
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	20000008 	.word	0x20000008

08002ef4 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8002efc:	4b06      	ldr	r3, [pc, #24]	; (8002f18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002f04:	4904      	ldr	r1, [pc, #16]	; (8002f18 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	370c      	adds	r7, #12
 8002f10:	46bd      	mov	sp, r7
 8002f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f16:	4770      	bx	lr
 8002f18:	46007400 	.word	0x46007400

08002f1c <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b083      	sub	sp, #12
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8002f24:	4b06      	ldr	r3, [pc, #24]	; (8002f40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f023 0202 	bic.w	r2, r3, #2
 8002f2c:	4904      	ldr	r1, [pc, #16]	; (8002f40 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
}
 8002f34:	bf00      	nop
 8002f36:	370c      	adds	r7, #12
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3e:	4770      	bx	lr
 8002f40:	46007400 	.word	0x46007400

08002f44 <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8002f4a:	4b0f      	ldr	r3, [pc, #60]	; (8002f88 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a0e      	ldr	r2, [pc, #56]	; (8002f88 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8002f56:	f7ff ff9d 	bl	8002e94 <HAL_GetTick>
 8002f5a:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002f5c:	e008      	b.n	8002f70 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8002f5e:	f7ff ff99 	bl	8002e94 <HAL_GetTick>
 8002f62:	4602      	mov	r2, r0
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	2b0a      	cmp	r3, #10
 8002f6a:	d901      	bls.n	8002f70 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8002f6c:	2303      	movs	r3, #3
 8002f6e:	e006      	b.n	8002f7e <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8002f70:	4b05      	ldr	r3, [pc, #20]	; (8002f88 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	f003 0308 	and.w	r3, r3, #8
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d0f0      	beq.n	8002f5e <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8002f7c:	2300      	movs	r3, #0
}
 8002f7e:	4618      	mov	r0, r3
 8002f80:	3708      	adds	r7, #8
 8002f82:	46bd      	mov	sp, r7
 8002f84:	bd80      	pop	{r7, pc}
 8002f86:	bf00      	nop
 8002f88:	46007400 	.word	0x46007400

08002f8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b085      	sub	sp, #20
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002f9e:	68db      	ldr	r3, [r3, #12]
 8002fa0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fa2:	68ba      	ldr	r2, [r7, #8]
 8002fa4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002fa8:	4013      	ands	r3, r2
 8002faa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002fb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002fb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002fbe:	4a04      	ldr	r2, [pc, #16]	; (8002fd0 <__NVIC_SetPriorityGrouping+0x44>)
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	60d3      	str	r3, [r2, #12]
}
 8002fc4:	bf00      	nop
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fce:	4770      	bx	lr
 8002fd0:	e000ed00 	.word	0xe000ed00

08002fd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fd8:	4b04      	ldr	r3, [pc, #16]	; (8002fec <__NVIC_GetPriorityGrouping+0x18>)
 8002fda:	68db      	ldr	r3, [r3, #12]
 8002fdc:	0a1b      	lsrs	r3, r3, #8
 8002fde:	f003 0307 	and.w	r3, r3, #7
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fea:	4770      	bx	lr
 8002fec:	e000ed00 	.word	0xe000ed00

08002ff0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	db0b      	blt.n	800301a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003002:	79fb      	ldrb	r3, [r7, #7]
 8003004:	f003 021f 	and.w	r2, r3, #31
 8003008:	4907      	ldr	r1, [pc, #28]	; (8003028 <__NVIC_EnableIRQ+0x38>)
 800300a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300e:	095b      	lsrs	r3, r3, #5
 8003010:	2001      	movs	r0, #1
 8003012:	fa00 f202 	lsl.w	r2, r0, r2
 8003016:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
 8003026:	bf00      	nop
 8003028:	e000e100 	.word	0xe000e100

0800302c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800302c:	b480      	push	{r7}
 800302e:	b083      	sub	sp, #12
 8003030:	af00      	add	r7, sp, #0
 8003032:	4603      	mov	r3, r0
 8003034:	6039      	str	r1, [r7, #0]
 8003036:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003038:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303c:	2b00      	cmp	r3, #0
 800303e:	db0a      	blt.n	8003056 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	b2da      	uxtb	r2, r3
 8003044:	490c      	ldr	r1, [pc, #48]	; (8003078 <__NVIC_SetPriority+0x4c>)
 8003046:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304a:	0112      	lsls	r2, r2, #4
 800304c:	b2d2      	uxtb	r2, r2
 800304e:	440b      	add	r3, r1
 8003050:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003054:	e00a      	b.n	800306c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	b2da      	uxtb	r2, r3
 800305a:	4908      	ldr	r1, [pc, #32]	; (800307c <__NVIC_SetPriority+0x50>)
 800305c:	79fb      	ldrb	r3, [r7, #7]
 800305e:	f003 030f 	and.w	r3, r3, #15
 8003062:	3b04      	subs	r3, #4
 8003064:	0112      	lsls	r2, r2, #4
 8003066:	b2d2      	uxtb	r2, r2
 8003068:	440b      	add	r3, r1
 800306a:	761a      	strb	r2, [r3, #24]
}
 800306c:	bf00      	nop
 800306e:	370c      	adds	r7, #12
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000e100 	.word	0xe000e100
 800307c:	e000ed00 	.word	0xe000ed00

08003080 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003080:	b480      	push	{r7}
 8003082:	b089      	sub	sp, #36	; 0x24
 8003084:	af00      	add	r7, sp, #0
 8003086:	60f8      	str	r0, [r7, #12]
 8003088:	60b9      	str	r1, [r7, #8]
 800308a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	f1c3 0307 	rsb	r3, r3, #7
 800309a:	2b04      	cmp	r3, #4
 800309c:	bf28      	it	cs
 800309e:	2304      	movcs	r3, #4
 80030a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	3304      	adds	r3, #4
 80030a6:	2b06      	cmp	r3, #6
 80030a8:	d902      	bls.n	80030b0 <NVIC_EncodePriority+0x30>
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	3b03      	subs	r3, #3
 80030ae:	e000      	b.n	80030b2 <NVIC_EncodePriority+0x32>
 80030b0:	2300      	movs	r3, #0
 80030b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b4:	f04f 32ff 	mov.w	r2, #4294967295
 80030b8:	69bb      	ldr	r3, [r7, #24]
 80030ba:	fa02 f303 	lsl.w	r3, r2, r3
 80030be:	43da      	mvns	r2, r3
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	401a      	ands	r2, r3
 80030c4:	697b      	ldr	r3, [r7, #20]
 80030c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030c8:	f04f 31ff 	mov.w	r1, #4294967295
 80030cc:	697b      	ldr	r3, [r7, #20]
 80030ce:	fa01 f303 	lsl.w	r3, r1, r3
 80030d2:	43d9      	mvns	r1, r3
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030d8:	4313      	orrs	r3, r2
         );
}
 80030da:	4618      	mov	r0, r3
 80030dc:	3724      	adds	r7, #36	; 0x24
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f7ff ff4c 	bl	8002f8c <__NVIC_SetPriorityGrouping>
}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}

080030fc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b086      	sub	sp, #24
 8003100:	af00      	add	r7, sp, #0
 8003102:	4603      	mov	r3, r0
 8003104:	60b9      	str	r1, [r7, #8]
 8003106:	607a      	str	r2, [r7, #4]
 8003108:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800310a:	f7ff ff63 	bl	8002fd4 <__NVIC_GetPriorityGrouping>
 800310e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003110:	687a      	ldr	r2, [r7, #4]
 8003112:	68b9      	ldr	r1, [r7, #8]
 8003114:	6978      	ldr	r0, [r7, #20]
 8003116:	f7ff ffb3 	bl	8003080 <NVIC_EncodePriority>
 800311a:	4602      	mov	r2, r0
 800311c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003120:	4611      	mov	r1, r2
 8003122:	4618      	mov	r0, r3
 8003124:	f7ff ff82 	bl	800302c <__NVIC_SetPriority>
}
 8003128:	bf00      	nop
 800312a:	3718      	adds	r7, #24
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	4603      	mov	r3, r0
 8003138:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800313a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800313e:	4618      	mov	r0, r3
 8003140:	f7ff ff56 	bl	8002ff0 <__NVIC_EnableIRQ>
}
 8003144:	bf00      	nop
 8003146:	3708      	adds	r7, #8
 8003148:	46bd      	mov	sp, r7
 800314a:	bd80      	pop	{r7, pc}

0800314c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b082      	sub	sp, #8
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d101      	bne.n	800315e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e014      	b.n	8003188 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	791b      	ldrb	r3, [r3, #4]
 8003162:	b2db      	uxtb	r3, r3
 8003164:	2b00      	cmp	r3, #0
 8003166:	d105      	bne.n	8003174 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800316e:	6878      	ldr	r0, [r7, #4]
 8003170:	f7ff fa12 	bl	8002598 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	2202      	movs	r2, #2
 8003178:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	2200      	movs	r2, #0
 800317e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3708      	adds	r7, #8
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}

08003190 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b0a4      	sub	sp, #144	; 0x90
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
 800319c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	795b      	ldrb	r3, [r3, #5]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d101      	bne.n	80031aa <HAL_DAC_Start_DMA+0x1a>
 80031a6:	2302      	movs	r3, #2
 80031a8:	e19f      	b.n	80034ea <HAL_DAC_Start_DMA+0x35a>
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	2201      	movs	r2, #1
 80031ae:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2202      	movs	r2, #2
 80031b4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d12e      	bne.n	800321a <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	4a8b      	ldr	r2, [pc, #556]	; (80033f0 <HAL_DAC_Start_DMA+0x260>)
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	4a8a      	ldr	r2, [pc, #552]	; (80033f4 <HAL_DAC_Start_DMA+0x264>)
 80031ca:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a89      	ldr	r2, [pc, #548]	; (80033f8 <HAL_DAC_Start_DMA+0x268>)
 80031d2:	669a      	str	r2, [r3, #104]	; 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	681a      	ldr	r2, [r3, #0]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80031e2:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 80031e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d004      	beq.n	80031f6 <HAL_DAC_Start_DMA+0x66>
 80031ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80031f0:	2b04      	cmp	r3, #4
 80031f2:	d006      	beq.n	8003202 <HAL_DAC_Start_DMA+0x72>
 80031f4:	e00b      	b.n	800320e <HAL_DAC_Start_DMA+0x7e>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	3308      	adds	r3, #8
 80031fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8003200:	e03a      	b.n	8003278 <HAL_DAC_Start_DMA+0xe8>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	330c      	adds	r3, #12
 8003208:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 800320c:	e034      	b.n	8003278 <HAL_DAC_Start_DMA+0xe8>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3310      	adds	r3, #16
 8003214:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8003218:	e02e      	b.n	8003278 <HAL_DAC_Start_DMA+0xe8>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	68db      	ldr	r3, [r3, #12]
 800321e:	4a77      	ldr	r2, [pc, #476]	; (80033fc <HAL_DAC_Start_DMA+0x26c>)
 8003220:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	68db      	ldr	r3, [r3, #12]
 8003226:	4a76      	ldr	r2, [pc, #472]	; (8003400 <HAL_DAC_Start_DMA+0x270>)
 8003228:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	68db      	ldr	r3, [r3, #12]
 800322e:	4a75      	ldr	r2, [pc, #468]	; (8003404 <HAL_DAC_Start_DMA+0x274>)
 8003230:	669a      	str	r2, [r3, #104]	; 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	681a      	ldr	r2, [r3, #0]
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003240:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8003242:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003246:	2b00      	cmp	r3, #0
 8003248:	d004      	beq.n	8003254 <HAL_DAC_Start_DMA+0xc4>
 800324a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800324e:	2b04      	cmp	r3, #4
 8003250:	d006      	beq.n	8003260 <HAL_DAC_Start_DMA+0xd0>
 8003252:	e00b      	b.n	800326c <HAL_DAC_Start_DMA+0xdc>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	3314      	adds	r3, #20
 800325a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 800325e:	e00b      	b.n	8003278 <HAL_DAC_Start_DMA+0xe8>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	3318      	adds	r3, #24
 8003266:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 800326a:	e005      	b.n	8003278 <HAL_DAC_Start_DMA+0xe8>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	331c      	adds	r3, #28
 8003272:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8003276:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 8003278:	68bb      	ldr	r3, [r7, #8]
 800327a:	2b00      	cmp	r3, #0
 800327c:	d17e      	bne.n	800337c <HAL_DAC_Start_DMA+0x1ec>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681a      	ldr	r2, [r3, #0]
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800328c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	689b      	ldr	r3, [r3, #8]
 8003292:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003294:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003298:	2b00      	cmp	r3, #0
 800329a:	d04b      	beq.n	8003334 <HAL_DAC_Start_DMA+0x1a4>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d044      	beq.n	8003330 <HAL_DAC_Start_DMA+0x1a0>
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d03e      	beq.n	8003330 <HAL_DAC_Start_DMA+0x1a0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	689b      	ldr	r3, [r3, #8]
 80032b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032b8:	681a      	ldr	r2, [r3, #0]
 80032ba:	f107 0318 	add.w	r3, r7, #24
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f001 f861 	bl	8004388 <HAL_DMAEx_List_GetNodeConfig>
 80032c6:	4603      	mov	r3, r0
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d001      	beq.n	80032d0 <HAL_DAC_Start_DMA+0x140>
        {
          return HAL_ERROR;
 80032cc:	2301      	movs	r3, #1
 80032ce:	e10c      	b.n	80034ea <HAL_DAC_Start_DMA+0x35a>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80032d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032d2:	2b02      	cmp	r3, #2
 80032d4:	d104      	bne.n	80032e0 <HAL_DAC_Start_DMA+0x150>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032de:	e00a      	b.n	80032f6 <HAL_DAC_Start_DMA+0x166>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80032e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d104      	bne.n	80032f0 <HAL_DAC_Start_DMA+0x160>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	005b      	lsls	r3, r3, #1
 80032ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80032ee:	e002      	b.n	80032f6 <HAL_DAC_Start_DMA+0x166>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003302:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	689b      	ldr	r3, [r3, #8]
 8003314:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800331c:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	689b      	ldr	r3, [r3, #8]
 8003322:	4618      	mov	r0, r3
 8003324:	f000 ff86 	bl	8004234 <HAL_DMAEx_List_Start_IT>
 8003328:	4603      	mov	r3, r0
 800332a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800332e:	e0b0      	b.n	8003492 <HAL_DAC_Start_DMA+0x302>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8003330:	2301      	movs	r3, #1
 8003332:	e0da      	b.n	80034ea <HAL_DAC_Start_DMA+0x35a>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	699b      	ldr	r3, [r3, #24]
 800333a:	2b02      	cmp	r3, #2
 800333c:	d104      	bne.n	8003348 <HAL_DAC_Start_DMA+0x1b8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003346:	e00c      	b.n	8003362 <HAL_DAC_Start_DMA+0x1d2>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	699b      	ldr	r3, [r3, #24]
 800334e:	2b01      	cmp	r3, #1
 8003350:	d104      	bne.n	800335c <HAL_DAC_Start_DMA+0x1cc>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	005b      	lsls	r3, r3, #1
 8003356:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800335a:	e002      	b.n	8003362 <HAL_DAC_Start_DMA+0x1d2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6898      	ldr	r0, [r3, #8]
 8003366:	6879      	ldr	r1, [r7, #4]
 8003368:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800336c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003370:	f000 fb7a 	bl	8003a68 <HAL_DMA_Start_IT>
 8003374:	4603      	mov	r3, r0
 8003376:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800337a:	e08a      	b.n	8003492 <HAL_DAC_Start_DMA+0x302>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800338a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003392:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003396:	2b00      	cmp	r3, #0
 8003398:	d058      	beq.n	800344c <HAL_DAC_Start_DMA+0x2bc>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	68db      	ldr	r3, [r3, #12]
 800339e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d051      	beq.n	8003448 <HAL_DAC_Start_DMA+0x2b8>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	68db      	ldr	r3, [r3, #12]
 80033a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d04b      	beq.n	8003448 <HAL_DAC_Start_DMA+0x2b8>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	68db      	ldr	r3, [r3, #12]
 80033b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033b6:	681a      	ldr	r2, [r3, #0]
 80033b8:	f107 0318 	add.w	r3, r7, #24
 80033bc:	4611      	mov	r1, r2
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 ffe2 	bl	8004388 <HAL_DMAEx_List_GetNodeConfig>
 80033c4:	4603      	mov	r3, r0
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d001      	beq.n	80033ce <HAL_DAC_Start_DMA+0x23e>
        {
          return HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	e08d      	b.n	80034ea <HAL_DAC_Start_DMA+0x35a>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80033ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d0:	2b02      	cmp	r3, #2
 80033d2:	d104      	bne.n	80033de <HAL_DAC_Start_DMA+0x24e>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	009b      	lsls	r3, r3, #2
 80033d8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033dc:	e017      	b.n	800340e <HAL_DAC_Start_DMA+0x27e>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 80033de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e0:	2b01      	cmp	r3, #1
 80033e2:	d111      	bne.n	8003408 <HAL_DAC_Start_DMA+0x278>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	005b      	lsls	r3, r3, #1
 80033e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80033ec:	e00f      	b.n	800340e <HAL_DAC_Start_DMA+0x27e>
 80033ee:	bf00      	nop
 80033f0:	080038f5 	.word	0x080038f5
 80033f4:	08003917 	.word	0x08003917
 80033f8:	08003933 	.word	0x08003933
 80033fc:	080039fd 	.word	0x080039fd
 8003400:	08003a1f 	.word	0x08003a1f
 8003404:	08003a3b 	.word	0x08003a3b
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800341a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	687a      	ldr	r2, [r7, #4]
 8003426:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68db      	ldr	r3, [r3, #12]
 800342c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003434:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	68db      	ldr	r3, [r3, #12]
 800343a:	4618      	mov	r0, r3
 800343c:	f000 fefa 	bl	8004234 <HAL_DMAEx_List_Start_IT>
 8003440:	4603      	mov	r3, r0
 8003442:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8003446:	e024      	b.n	8003492 <HAL_DAC_Start_DMA+0x302>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8003448:	2301      	movs	r3, #1
 800344a:	e04e      	b.n	80034ea <HAL_DAC_Start_DMA+0x35a>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	68db      	ldr	r3, [r3, #12]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	2b02      	cmp	r3, #2
 8003454:	d104      	bne.n	8003460 <HAL_DAC_Start_DMA+0x2d0>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	009b      	lsls	r3, r3, #2
 800345a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800345e:	e00c      	b.n	800347a <HAL_DAC_Start_DMA+0x2ea>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	68db      	ldr	r3, [r3, #12]
 8003464:	699b      	ldr	r3, [r3, #24]
 8003466:	2b01      	cmp	r3, #1
 8003468:	d104      	bne.n	8003474 <HAL_DAC_Start_DMA+0x2e4>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003472:	e002      	b.n	800347a <HAL_DAC_Start_DMA+0x2ea>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	68d8      	ldr	r0, [r3, #12]
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003484:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8003488:	f000 faee 	bl	8003a68 <HAL_DMA_Start_IT>
 800348c:	4603      	mov	r3, r0
 800348e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8003498:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 800349c:	2b00      	cmp	r3, #0
 800349e:	d11c      	bne.n	80034da <HAL_DAC_Start_DMA+0x34a>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	f003 0310 	and.w	r3, r3, #16
 80034ac:	2201      	movs	r2, #1
 80034ae:	409a      	lsls	r2, r3
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034b8:	4b0e      	ldr	r3, [pc, #56]	; (80034f4 <HAL_DAC_Start_DMA+0x364>)
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	099b      	lsrs	r3, r3, #6
 80034be:	4a0e      	ldr	r2, [pc, #56]	; (80034f8 <HAL_DAC_Start_DMA+0x368>)
 80034c0:	fba2 2303 	umull	r2, r3, r2, r3
 80034c4:	099b      	lsrs	r3, r3, #6
 80034c6:	3301      	adds	r3, #1
 80034c8:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80034ca:	e002      	b.n	80034d2 <HAL_DAC_Start_DMA+0x342>
    {
      wait_loop_index--;
 80034cc:	697b      	ldr	r3, [r7, #20]
 80034ce:	3b01      	subs	r3, #1
 80034d0:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80034d2:	697b      	ldr	r3, [r7, #20]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1f9      	bne.n	80034cc <HAL_DAC_Start_DMA+0x33c>
 80034d8:	e005      	b.n	80034e6 <HAL_DAC_Start_DMA+0x356>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	f043 0204 	orr.w	r2, r3, #4
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 80034e6:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3790      	adds	r7, #144	; 0x90
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	20000000 	.word	0x20000000
 80034f8:	053e2d63 	.word	0x053e2d63

080034fc <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6819      	ldr	r1, [r3, #0]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003516:	fa02 f303 	lsl.w	r3, r2, r3
 800351a:	43da      	mvns	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	400a      	ands	r2, r1
 8003522:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6819      	ldr	r1, [r3, #0]
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2201      	movs	r2, #1
 8003532:	fa02 f303 	lsl.w	r3, r2, r3
 8003536:	43da      	mvns	r2, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	400a      	ands	r2, r1
 800353e:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d10d      	bne.n	8003562 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	4618      	mov	r0, r3
 800354c:	f000 faec 	bl	8003b28 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681a      	ldr	r2, [r3, #0]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800355e:	601a      	str	r2, [r3, #0]
 8003560:	e00c      	b.n	800357c <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	68db      	ldr	r3, [r3, #12]
 8003566:	4618      	mov	r0, r3
 8003568:	f000 fade 	bl	8003b28 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	681a      	ldr	r2, [r3, #0]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800357a:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003582:	2300      	movs	r3, #0
}
 8003584:	4618      	mov	r0, r3
 8003586:	3708      	adds	r7, #8
 8003588:	46bd      	mov	sp, r7
 800358a:	bd80      	pop	{r7, pc}

0800358c <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035a0:	b480      	push	{r7}
 80035a2:	b083      	sub	sp, #12
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80035a8:	bf00      	nop
 80035aa:	370c      	adds	r7, #12
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr

080035b4 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b083      	sub	sp, #12
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80035bc:	bf00      	nop
 80035be:	370c      	adds	r7, #12
 80035c0:	46bd      	mov	sp, r7
 80035c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c6:	4770      	bx	lr

080035c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b08a      	sub	sp, #40	; 0x28
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	60f8      	str	r0, [r7, #12]
 80035d0:	60b9      	str	r1, [r7, #8]
 80035d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035d4:	2300      	movs	r3, #0
 80035d6:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	795b      	ldrb	r3, [r3, #5]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d101      	bne.n	80035e4 <HAL_DAC_ConfigChannel+0x1c>
 80035e0:	2302      	movs	r3, #2
 80035e2:	e17e      	b.n	80038e2 <HAL_DAC_ConfigChannel+0x31a>
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	2201      	movs	r2, #1
 80035e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	2202      	movs	r2, #2
 80035ee:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	2b04      	cmp	r3, #4
 80035f6:	d17a      	bne.n	80036ee <HAL_DAC_ConfigChannel+0x126>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80035f8:	f7ff fc4c 	bl	8002e94 <HAL_GetTick>
 80035fc:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d13d      	bne.n	8003680 <HAL_DAC_ConfigChannel+0xb8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003604:	e018      	b.n	8003638 <HAL_DAC_ConfigChannel+0x70>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003606:	f7ff fc45 	bl	8002e94 <HAL_GetTick>
 800360a:	4602      	mov	r2, r0
 800360c:	69bb      	ldr	r3, [r7, #24]
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	2b01      	cmp	r3, #1
 8003612:	d911      	bls.n	8003638 <HAL_DAC_ConfigChannel+0x70>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_DAC_ConfigChannel+0x70>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	f043 0208 	orr.w	r2, r3, #8
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2203      	movs	r2, #3
 8003632:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003634:	2303      	movs	r3, #3
 8003636:	e154      	b.n	80038e2 <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800363e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1df      	bne.n	8003606 <HAL_DAC_ConfigChannel+0x3e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68ba      	ldr	r2, [r7, #8]
 800364c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800364e:	641a      	str	r2, [r3, #64]	; 0x40
 8003650:	e020      	b.n	8003694 <HAL_DAC_ConfigChannel+0xcc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003652:	f7ff fc1f 	bl	8002e94 <HAL_GetTick>
 8003656:	4602      	mov	r2, r0
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	1ad3      	subs	r3, r2, r3
 800365c:	2b01      	cmp	r3, #1
 800365e:	d90f      	bls.n	8003680 <HAL_DAC_ConfigChannel+0xb8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003666:	2b00      	cmp	r3, #0
 8003668:	da0a      	bge.n	8003680 <HAL_DAC_ConfigChannel+0xb8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	691b      	ldr	r3, [r3, #16]
 800366e:	f043 0208 	orr.w	r2, r3, #8
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2203      	movs	r2, #3
 800367a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e130      	b.n	80038e2 <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003686:	2b00      	cmp	r3, #0
 8003688:	dbe3      	blt.n	8003652 <HAL_DAC_ConfigChannel+0x8a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	68ba      	ldr	r2, [r7, #8]
 8003690:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003692:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f003 0310 	and.w	r3, r3, #16
 80036a0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80036a4:	fa01 f303 	lsl.w	r3, r1, r3
 80036a8:	43db      	mvns	r3, r3
 80036aa:	ea02 0103 	and.w	r1, r2, r3
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f003 0310 	and.w	r3, r3, #16
 80036b8:	409a      	lsls	r2, r3
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	430a      	orrs	r2, r1
 80036c0:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f003 0310 	and.w	r3, r3, #16
 80036ce:	21ff      	movs	r1, #255	; 0xff
 80036d0:	fa01 f303 	lsl.w	r3, r1, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	ea02 0103 	and.w	r1, r2, r3
 80036da:	68bb      	ldr	r3, [r7, #8]
 80036dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	f003 0310 	and.w	r3, r3, #16
 80036e4:	409a      	lsls	r2, r3
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	430a      	orrs	r2, r1
 80036ec:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	69db      	ldr	r3, [r3, #28]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d11d      	bne.n	8003748 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003712:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	f003 0310 	and.w	r3, r3, #16
 800371a:	221f      	movs	r2, #31
 800371c:	fa02 f303 	lsl.w	r3, r2, r3
 8003720:	43db      	mvns	r3, r3
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4013      	ands	r3, r2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	6a1b      	ldr	r3, [r3, #32]
 800372c:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	f003 0310 	and.w	r3, r3, #16
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	fa02 f303 	lsl.w	r3, r2, r3
 800373a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800373c:	4313      	orrs	r3, r2
 800373e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003746:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374e:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f003 0310 	and.w	r3, r3, #16
 8003756:	2207      	movs	r2, #7
 8003758:	fa02 f303 	lsl.w	r3, r2, r3
 800375c:	43db      	mvns	r3, r3
 800375e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003760:	4013      	ands	r3, r2
 8003762:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	699b      	ldr	r3, [r3, #24]
 8003768:	2b01      	cmp	r3, #1
 800376a:	d102      	bne.n	8003772 <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 800376c:	2300      	movs	r3, #0
 800376e:	623b      	str	r3, [r7, #32]
 8003770:	e00f      	b.n	8003792 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003772:	68bb      	ldr	r3, [r7, #8]
 8003774:	699b      	ldr	r3, [r3, #24]
 8003776:	2b02      	cmp	r3, #2
 8003778:	d102      	bne.n	8003780 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 800377a:	2301      	movs	r3, #1
 800377c:	623b      	str	r3, [r7, #32]
 800377e:	e008      	b.n	8003792 <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	695b      	ldr	r3, [r3, #20]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d102      	bne.n	800378e <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003788:	2301      	movs	r3, #1
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	e001      	b.n	8003792 <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800378e:	2300      	movs	r3, #0
 8003790:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	68da      	ldr	r2, [r3, #12]
 8003796:	68bb      	ldr	r3, [r7, #8]
 8003798:	695b      	ldr	r3, [r3, #20]
 800379a:	4313      	orrs	r3, r2
 800379c:	6a3a      	ldr	r2, [r7, #32]
 800379e:	4313      	orrs	r3, r2
 80037a0:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f003 0310 	and.w	r3, r3, #16
 80037a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	43db      	mvns	r3, r3
 80037b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037b4:	4013      	ands	r3, r2
 80037b6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80037b8:	68bb      	ldr	r3, [r7, #8]
 80037ba:	7a1b      	ldrb	r3, [r3, #8]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d102      	bne.n	80037c6 <HAL_DAC_ConfigChannel+0x1fe>
 80037c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80037c4:	e000      	b.n	80037c8 <HAL_DAC_ConfigChannel+0x200>
 80037c6:	2300      	movs	r3, #0
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f003 0310 	and.w	r3, r3, #16
 80037d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80037e0:	4013      	ands	r3, r2
 80037e2:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	7a5b      	ldrb	r3, [r3, #9]
 80037e8:	2b01      	cmp	r3, #1
 80037ea:	d102      	bne.n	80037f2 <HAL_DAC_ConfigChannel+0x22a>
 80037ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80037f0:	e000      	b.n	80037f4 <HAL_DAC_ConfigChannel+0x22c>
 80037f2:	2300      	movs	r3, #0
 80037f4:	697a      	ldr	r2, [r7, #20]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80037fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037fc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003802:	68bb      	ldr	r3, [r7, #8]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2b02      	cmp	r3, #2
 8003808:	d114      	bne.n	8003834 <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 800380a:	f003 f8d5 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 800380e:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003810:	693b      	ldr	r3, [r7, #16]
 8003812:	4a36      	ldr	r2, [pc, #216]	; (80038ec <HAL_DAC_ConfigChannel+0x324>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d904      	bls.n	8003822 <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800381e:	627b      	str	r3, [r7, #36]	; 0x24
 8003820:	e00f      	b.n	8003842 <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003822:	693b      	ldr	r3, [r7, #16]
 8003824:	4a32      	ldr	r2, [pc, #200]	; (80038f0 <HAL_DAC_ConfigChannel+0x328>)
 8003826:	4293      	cmp	r3, r2
 8003828:	d90a      	bls.n	8003840 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 800382a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800382c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003830:	627b      	str	r3, [r7, #36]	; 0x24
 8003832:	e006      	b.n	8003842 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003834:	68bb      	ldr	r3, [r7, #8]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383a:	4313      	orrs	r3, r2
 800383c:	627b      	str	r3, [r7, #36]	; 0x24
 800383e:	e000      	b.n	8003842 <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003840:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	f003 0310 	and.w	r3, r3, #16
 8003848:	697a      	ldr	r2, [r7, #20]
 800384a:	fa02 f303 	lsl.w	r3, r2, r3
 800384e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003850:	4313      	orrs	r3, r2
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800385a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	6819      	ldr	r1, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f003 0310 	and.w	r3, r3, #16
 8003868:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800386c:	fa02 f303 	lsl.w	r3, r2, r3
 8003870:	43da      	mvns	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	400a      	ands	r2, r1
 8003878:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	f003 0310 	and.w	r3, r3, #16
 8003888:	f640 72fe 	movw	r2, #4094	; 0xffe
 800388c:	fa02 f303 	lsl.w	r3, r2, r3
 8003890:	43db      	mvns	r3, r3
 8003892:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003894:	4013      	ands	r3, r2
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8003898:	68bb      	ldr	r3, [r7, #8]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f003 0310 	and.w	r3, r3, #16
 80038a4:	697a      	ldr	r2, [r7, #20]
 80038a6:	fa02 f303 	lsl.w	r3, r2, r3
 80038aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ac:	4313      	orrs	r3, r2
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038b6:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6819      	ldr	r1, [r3, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f003 0310 	and.w	r3, r3, #16
 80038c4:	22c0      	movs	r2, #192	; 0xc0
 80038c6:	fa02 f303 	lsl.w	r3, r2, r3
 80038ca:	43da      	mvns	r2, r3
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	400a      	ands	r2, r1
 80038d2:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2201      	movs	r2, #1
 80038d8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2200      	movs	r2, #0
 80038de:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80038e0:	7ffb      	ldrb	r3, [r7, #31]
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3728      	adds	r7, #40	; 0x28
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	09896800 	.word	0x09896800
 80038f0:	04c4b400 	.word	0x04c4b400

080038f4 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003900:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7ff fe42 	bl	800358c <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	2201      	movs	r2, #1
 800390c:	711a      	strb	r2, [r3, #4]
}
 800390e:	bf00      	nop
 8003910:	3710      	adds	r7, #16
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}

08003916 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8003916:	b580      	push	{r7, lr}
 8003918:	b084      	sub	sp, #16
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003922:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8003924:	68f8      	ldr	r0, [r7, #12]
 8003926:	f7ff fe3b 	bl	80035a0 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800392a:	bf00      	nop
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}

08003932 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8003932:	b580      	push	{r7, lr}
 8003934:	b084      	sub	sp, #16
 8003936:	af00      	add	r7, sp, #0
 8003938:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	691b      	ldr	r3, [r3, #16]
 8003944:	f043 0204 	orr.w	r2, r3, #4
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800394c:	68f8      	ldr	r0, [r7, #12]
 800394e:	f7ff fe31 	bl	80035b4 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	711a      	strb	r2, [r3, #4]
}
 8003958:	bf00      	nop
 800395a:	3710      	adds	r7, #16
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}

08003960 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8003968:	bf00      	nop
 800396a:	370c      	adds	r7, #12
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003974:	b480      	push	{r7}
 8003976:	b083      	sub	sp, #12
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 800397c:	bf00      	nop
 800397e:	370c      	adds	r7, #12
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr

08003988 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8003988:	b480      	push	{r7}
 800398a:	b083      	sub	sp, #12
 800398c:	af00      	add	r7, sp, #0
 800398e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8003990:	bf00      	nop
 8003992:	370c      	adds	r7, #12
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr

0800399c <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	791b      	ldrb	r3, [r3, #4]
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d11e      	bne.n	80039ee <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	795b      	ldrb	r3, [r3, #5]
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d101      	bne.n	80039bc <HAL_DACEx_SetConfigAutonomousMode+0x20>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e019      	b.n	80039f0 <HAL_DACEx_SetConfigAutonomousMode+0x54>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2202      	movs	r2, #2
 80039c6:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039ce:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	681a      	ldr	r2, [r3, #0]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	430a      	orrs	r2, r1
 80039dc:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2200      	movs	r2, #0
 80039e8:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 80039ee:	2302      	movs	r3, #2
  }
}
 80039f0:	4618      	mov	r0, r3
 80039f2:	370c      	adds	r7, #12
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a08:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8003a0a:	68f8      	ldr	r0, [r7, #12]
 8003a0c:	f7ff ffa8 	bl	8003960 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2201      	movs	r2, #1
 8003a14:	711a      	strb	r2, [r3, #4]
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b084      	sub	sp, #16
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ffa1 	bl	8003974 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8003a3a:	b580      	push	{r7, lr}
 8003a3c:	b084      	sub	sp, #16
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a46:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f043 0204 	orr.w	r2, r3, #4
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ff97 	bl	8003988 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	711a      	strb	r2, [r3, #4]
}
 8003a60:	bf00      	nop
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d101      	bne.n	8003a80 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e04f      	b.n	8003b20 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d101      	bne.n	8003a8e <HAL_DMA_Start_IT+0x26>
 8003a8a:	2302      	movs	r3, #2
 8003a8c:	e048      	b.n	8003b20 <HAL_DMA_Start_IT+0xb8>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2201      	movs	r2, #1
 8003a92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	2b01      	cmp	r3, #1
 8003aa0:	d136      	bne.n	8003b10 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	2202      	movs	r2, #2
 8003aa6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2200      	movs	r2, #0
 8003aae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	687a      	ldr	r2, [r7, #4]
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f000 fa68 	bl	8003f8c <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	695a      	ldr	r2, [r3, #20]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8003aca:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d007      	beq.n	8003ae4 <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	695a      	ldr	r2, [r3, #20]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ae2:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d007      	beq.n	8003afc <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	695a      	ldr	r2, [r3, #20]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003afa:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695a      	ldr	r2, [r3, #20]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f042 0201 	orr.w	r2, r2, #1
 8003b0a:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e007      	b.n	8003b20 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2240      	movs	r2, #64	; 0x40
 8003b14:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8003b1e:	2301      	movs	r3, #1
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8003b30:	f7ff f9b0 	bl	8002e94 <HAL_GetTick>
 8003b34:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d101      	bne.n	8003b40 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e06b      	b.n	8003c18 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003b46:	b2db      	uxtb	r3, r3
 8003b48:	2b02      	cmp	r3, #2
 8003b4a:	d008      	beq.n	8003b5e <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2220      	movs	r2, #32
 8003b50:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e05c      	b.n	8003c18 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	695a      	ldr	r2, [r3, #20]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f042 0204 	orr.w	r2, r2, #4
 8003b6c:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2205      	movs	r2, #5
 8003b72:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003b76:	e020      	b.n	8003bba <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8003b78:	f7ff f98c 	bl	8002e94 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	2b05      	cmp	r3, #5
 8003b84:	d919      	bls.n	8003bba <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8a:	f043 0210 	orr.w	r2, r3, #16
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	2203      	movs	r2, #3
 8003b96:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d003      	beq.n	8003bae <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003baa:	2201      	movs	r2, #1
 8003bac:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e02e      	b.n	8003c18 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	691b      	ldr	r3, [r3, #16]
 8003bc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d0d7      	beq.n	8003b78 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	695a      	ldr	r2, [r3, #20]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0202 	orr.w	r2, r2, #2
 8003bd6:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2204      	movs	r2, #4
 8003bdc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003be8:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2201      	movs	r2, #1
 8003bee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d007      	beq.n	8003c0e <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c02:	2201      	movs	r2, #1
 8003c04:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2200      	movs	r2, #0
 8003c12:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8003c16:	2300      	movs	r3, #0
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3710      	adds	r7, #16
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}

08003c20 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b086      	sub	sp, #24
 8003c24:	af00      	add	r7, sp, #0
 8003c26:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003c30:	f023 030f 	bic.w	r3, r3, #15
 8003c34:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c3e:	3b50      	subs	r3, #80	; 0x50
 8003c40:	09db      	lsrs	r3, r3, #7
 8003c42:	f003 031f 	and.w	r3, r3, #31
 8003c46:	2201      	movs	r2, #1
 8003c48:	fa02 f303 	lsl.w	r3, r2, r3
 8003c4c:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4013      	ands	r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 8154 	beq.w	8003f08 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d011      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	695b      	ldr	r3, [r3, #20]
 8003c74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d00a      	beq.n	8003c92 <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003c84:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c8a:	f043 0201 	orr.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	691b      	ldr	r3, [r3, #16]
 8003c98:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d011      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003cb6:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cbc:	f043 0202 	orr.w	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	691b      	ldr	r3, [r3, #16]
 8003cca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d011      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d00a      	beq.n	8003cf6 <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003ce8:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cee:	f043 0204 	orr.w	r2, r3, #4
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691b      	ldr	r3, [r3, #16]
 8003cfc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d011      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d00a      	beq.n	8003d28 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003d1a:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f043 0208 	orr.w	r2, r3, #8
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d013      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	695b      	ldr	r3, [r3, #20]
 8003d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d4c:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d003      	beq.n	8003d5e <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003d5a:	6878      	ldr	r0, [r7, #4]
 8003d5c:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	691b      	ldr	r3, [r3, #16]
 8003d64:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d059      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d052      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d82:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8003d8a:	b2db      	uxtb	r3, r3
 8003d8c:	2b04      	cmp	r3, #4
 8003d8e:	d13b      	bne.n	8003e08 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	695a      	ldr	r2, [r3, #20]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d9e:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	695a      	ldr	r2, [r3, #20]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f042 0202 	orr.w	r2, r2, #2
 8003dae:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	695b      	ldr	r3, [r3, #20]
 8003db6:	f003 0301 	and.w	r3, r3, #1
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d004      	beq.n	8003dc8 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2203      	movs	r2, #3
 8003dc2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003dc6:	e003      	b.n	8003dd0 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2201      	movs	r2, #1
 8003dcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dd4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d007      	beq.n	8003dec <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de0:	2201      	movs	r2, #1
 8003de2:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	2200      	movs	r2, #0
 8003dea:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2200      	movs	r2, #0
 8003df0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	f000 8087 	beq.w	8003f0c <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	4798      	blx	r3
        }

        return;
 8003e06:	e081      	b.n	8003f0c <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2205      	movs	r2, #5
 8003e0c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d003      	beq.n	8003e20 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	691b      	ldr	r3, [r3, #16]
 8003e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d039      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695b      	ldr	r3, [r3, #20]
 8003e34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d032      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d012      	beq.n	8003e6e <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d116      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d111      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e68:	2201      	movs	r2, #1
 8003e6a:	731a      	strb	r2, [r3, #12]
 8003e6c:	e008      	b.n	8003e80 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d103      	bne.n	8003e80 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2201      	movs	r2, #1
 8003e7c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f44f 7240 	mov.w	r2, #768	; 0x300
 8003e88:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d003      	beq.n	8003ea2 <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d031      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	695a      	ldr	r2, [r3, #20]
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f042 0202 	orr.w	r2, r2, #2
 8003eb8:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	695b      	ldr	r3, [r3, #20]
 8003ec0:	f003 0301 	and.w	r3, r3, #1
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d004      	beq.n	8003ed2 <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2203      	movs	r2, #3
 8003ecc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8003ed0:	e003      	b.n	8003eda <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2201      	movs	r2, #1
 8003ed6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ede:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d003      	beq.n	8003eee <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eea:	2201      	movs	r2, #1
 8003eec:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d007      	beq.n	8003f0e <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	4798      	blx	r3
 8003f06:	e002      	b.n	8003f0e <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8003f08:	bf00      	nop
 8003f0a:	e000      	b.n	8003f0e <HAL_DMA_IRQHandler+0x2ee>
        return;
 8003f0c:	bf00      	nop
    }
  }
}
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d101      	bne.n	8003f28 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8003f24:	2301      	movs	r3, #1
 8003f26:	e02b      	b.n	8003f80 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8003f30:	f023 030f 	bic.w	r3, r3, #15
 8003f34:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f3e:	3b50      	subs	r3, #80	; 0x50
 8003f40:	09db      	lsrs	r3, r3, #7
 8003f42:	f003 031f 	and.w	r3, r3, #31
 8003f46:	2201      	movs	r2, #1
 8003f48:	fa02 f303 	lsl.w	r3, r2, r3
 8003f4c:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	f003 0310 	and.w	r3, r3, #16
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d012      	beq.n	8003f7e <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	f003 0311 	and.w	r3, r3, #17
 8003f5e:	2b11      	cmp	r3, #17
 8003f60:	d106      	bne.n	8003f70 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	431a      	orrs	r2, r3
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	e006      	b.n	8003f7e <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	685a      	ldr	r2, [r3, #4]
 8003f74:	68bb      	ldr	r3, [r7, #8]
 8003f76:	43db      	mvns	r3, r3
 8003f78:	401a      	ands	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3714      	adds	r7, #20
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	607a      	str	r2, [r7, #4]
 8003f98:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa0:	0c1b      	lsrs	r3, r3, #16
 8003fa2:	041b      	lsls	r3, r3, #16
 8003fa4:	683a      	ldr	r2, [r7, #0]
 8003fa6:	b291      	uxth	r1, r2
 8003fa8:	68fa      	ldr	r2, [r7, #12]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	430b      	orrs	r3, r1
 8003fae:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8003fb8:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	68ba      	ldr	r2, [r7, #8]
 8003fc0:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003fca:	bf00      	nop
 8003fcc:	3714      	adds	r7, #20
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr
	...

08003fd8 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b084      	sub	sp, #16
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8003fe0:	f7fe ff58 	bl	8002e94 <HAL_GetTick>
 8003fe4:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8003fec:	2301      	movs	r3, #1
 8003fee:	e0dc      	b.n	80041aa <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <HAL_DMAEx_List_Init+0x1dc>)
 8003ff6:	4293      	cmp	r3, r2
 8003ff8:	f000 809f 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a6d      	ldr	r2, [pc, #436]	; (80041b8 <HAL_DMAEx_List_Init+0x1e0>)
 8004002:	4293      	cmp	r3, r2
 8004004:	f000 8099 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	4a6b      	ldr	r2, [pc, #428]	; (80041bc <HAL_DMAEx_List_Init+0x1e4>)
 800400e:	4293      	cmp	r3, r2
 8004010:	f000 8093 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a69      	ldr	r2, [pc, #420]	; (80041c0 <HAL_DMAEx_List_Init+0x1e8>)
 800401a:	4293      	cmp	r3, r2
 800401c:	f000 808d 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	4a67      	ldr	r2, [pc, #412]	; (80041c4 <HAL_DMAEx_List_Init+0x1ec>)
 8004026:	4293      	cmp	r3, r2
 8004028:	f000 8087 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a65      	ldr	r2, [pc, #404]	; (80041c8 <HAL_DMAEx_List_Init+0x1f0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	f000 8081 	beq.w	800413a <HAL_DMAEx_List_Init+0x162>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	4a63      	ldr	r2, [pc, #396]	; (80041cc <HAL_DMAEx_List_Init+0x1f4>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d07b      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	4a62      	ldr	r2, [pc, #392]	; (80041d0 <HAL_DMAEx_List_Init+0x1f8>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d076      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a60      	ldr	r2, [pc, #384]	; (80041d4 <HAL_DMAEx_List_Init+0x1fc>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d071      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a5f      	ldr	r2, [pc, #380]	; (80041d8 <HAL_DMAEx_List_Init+0x200>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d06c      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a5d      	ldr	r2, [pc, #372]	; (80041dc <HAL_DMAEx_List_Init+0x204>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d067      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a5c      	ldr	r2, [pc, #368]	; (80041e0 <HAL_DMAEx_List_Init+0x208>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d062      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a5a      	ldr	r2, [pc, #360]	; (80041e4 <HAL_DMAEx_List_Init+0x20c>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d05d      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a59      	ldr	r2, [pc, #356]	; (80041e8 <HAL_DMAEx_List_Init+0x210>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d058      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a57      	ldr	r2, [pc, #348]	; (80041ec <HAL_DMAEx_List_Init+0x214>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d053      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a56      	ldr	r2, [pc, #344]	; (80041f0 <HAL_DMAEx_List_Init+0x218>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d04e      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a54      	ldr	r2, [pc, #336]	; (80041f4 <HAL_DMAEx_List_Init+0x21c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d049      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a53      	ldr	r2, [pc, #332]	; (80041f8 <HAL_DMAEx_List_Init+0x220>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d044      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	4a51      	ldr	r2, [pc, #324]	; (80041fc <HAL_DMAEx_List_Init+0x224>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d03f      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a50      	ldr	r2, [pc, #320]	; (8004200 <HAL_DMAEx_List_Init+0x228>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d03a      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a4e      	ldr	r2, [pc, #312]	; (8004204 <HAL_DMAEx_List_Init+0x22c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d035      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a4d      	ldr	r2, [pc, #308]	; (8004208 <HAL_DMAEx_List_Init+0x230>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d030      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a4b      	ldr	r2, [pc, #300]	; (800420c <HAL_DMAEx_List_Init+0x234>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d02b      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	4a4a      	ldr	r2, [pc, #296]	; (8004210 <HAL_DMAEx_List_Init+0x238>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d026      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a48      	ldr	r2, [pc, #288]	; (8004214 <HAL_DMAEx_List_Init+0x23c>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d021      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a47      	ldr	r2, [pc, #284]	; (8004218 <HAL_DMAEx_List_Init+0x240>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d01c      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a45      	ldr	r2, [pc, #276]	; (800421c <HAL_DMAEx_List_Init+0x244>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d017      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a44      	ldr	r2, [pc, #272]	; (8004220 <HAL_DMAEx_List_Init+0x248>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d012      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a42      	ldr	r2, [pc, #264]	; (8004224 <HAL_DMAEx_List_Init+0x24c>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d00d      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a41      	ldr	r2, [pc, #260]	; (8004228 <HAL_DMAEx_List_Init+0x250>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d008      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a3f      	ldr	r2, [pc, #252]	; (800422c <HAL_DMAEx_List_Init+0x254>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d003      	beq.n	800413a <HAL_DMAEx_List_Init+0x162>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a3e      	ldr	r2, [pc, #248]	; (8004230 <HAL_DMAEx_List_Init+0x258>)
 8004138:	4293      	cmp	r3, r2
 800413a:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2202      	movs	r2, #2
 8004148:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	695a      	ldr	r2, [r3, #20]
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f042 0206 	orr.w	r2, r2, #6
 800415a:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800415c:	e00f      	b.n	800417e <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 800415e:	f7fe fe99 	bl	8002e94 <HAL_GetTick>
 8004162:	4602      	mov	r2, r0
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	1ad3      	subs	r3, r2, r3
 8004168:	2b05      	cmp	r3, #5
 800416a:	d908      	bls.n	800417e <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2210      	movs	r2, #16
 8004170:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2203      	movs	r2, #3
 8004176:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 800417a:	2301      	movs	r3, #1
 800417c:	e015      	b.n	80041aa <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	695b      	ldr	r3, [r3, #20]
 8004184:	f003 0301 	and.w	r3, r3, #1
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1e8      	bne.n	800415e <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fad1 	bl	8004734 <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	2200      	movs	r2, #0
 800419e:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3710      	adds	r7, #16
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40020050 	.word	0x40020050
 80041b8:	50020050 	.word	0x50020050
 80041bc:	400200d0 	.word	0x400200d0
 80041c0:	500200d0 	.word	0x500200d0
 80041c4:	40020150 	.word	0x40020150
 80041c8:	50020150 	.word	0x50020150
 80041cc:	400201d0 	.word	0x400201d0
 80041d0:	500201d0 	.word	0x500201d0
 80041d4:	40020250 	.word	0x40020250
 80041d8:	50020250 	.word	0x50020250
 80041dc:	400202d0 	.word	0x400202d0
 80041e0:	500202d0 	.word	0x500202d0
 80041e4:	40020350 	.word	0x40020350
 80041e8:	50020350 	.word	0x50020350
 80041ec:	400203d0 	.word	0x400203d0
 80041f0:	500203d0 	.word	0x500203d0
 80041f4:	40020450 	.word	0x40020450
 80041f8:	50020450 	.word	0x50020450
 80041fc:	400204d0 	.word	0x400204d0
 8004200:	500204d0 	.word	0x500204d0
 8004204:	40020550 	.word	0x40020550
 8004208:	50020550 	.word	0x50020550
 800420c:	400205d0 	.word	0x400205d0
 8004210:	500205d0 	.word	0x500205d0
 8004214:	40020650 	.word	0x40020650
 8004218:	50020650 	.word	0x50020650
 800421c:	400206d0 	.word	0x400206d0
 8004220:	500206d0 	.word	0x500206d0
 8004224:	40020750 	.word	0x40020750
 8004228:	50020750 	.word	0x50020750
 800422c:	400207d0 	.word	0x400207d0
 8004230:	500207d0 	.word	0x500207d0

08004234 <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b086      	sub	sp, #24
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d003      	beq.n	800424a <HAL_DMAEx_List_Start_IT+0x16>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004246:	2b00      	cmp	r3, #0
 8004248:	d101      	bne.n	800424e <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 800424a:	2301      	movs	r3, #1
 800424c:	e082      	b.n	8004354 <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004254:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	695b      	ldr	r3, [r3, #20]
 800425c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004260:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 8004262:	7dfb      	ldrb	r3, [r7, #23]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d005      	beq.n	8004274 <HAL_DMAEx_List_Start_IT+0x40>
 8004268:	7dfb      	ldrb	r3, [r7, #23]
 800426a:	2b02      	cmp	r3, #2
 800426c:	d16a      	bne.n	8004344 <HAL_DMAEx_List_Start_IT+0x110>
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d067      	beq.n	8004344 <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b01      	cmp	r3, #1
 800427e:	d157      	bne.n	8004330 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_DMAEx_List_Start_IT+0x5a>
 800428a:	2302      	movs	r3, #2
 800428c:	e062      	b.n	8004354 <HAL_DMAEx_List_Start_IT+0x120>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2202      	movs	r2, #2
 800429a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042a2:	2202      	movs	r2, #2
 80042a4:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2200      	movs	r2, #0
 80042aa:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042b0:	2200      	movs	r2, #0
 80042b2:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	695a      	ldr	r2, [r3, #20]
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80042c2:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d007      	beq.n	80042dc <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695a      	ldr	r2, [r3, #20]
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042da:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d007      	beq.n	80042f4 <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	695a      	ldr	r2, [r3, #20]
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042f2:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f107 010c 	add.w	r1, r7, #12
 80042fe:	2200      	movs	r2, #0
 8004300:	4618      	mov	r0, r3
 8004302:	f000 fe37 	bl	8004f74 <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	4619      	mov	r1, r3
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	0c0b      	lsrs	r3, r1, #16
 8004314:	041b      	lsls	r3, r3, #16
 8004316:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	461a      	mov	r2, r3
 8004320:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004324:	4013      	ands	r3, r2
 8004326:	68f9      	ldr	r1, [r7, #12]
 8004328:	687a      	ldr	r2, [r7, #4]
 800432a:	6812      	ldr	r2, [r2, #0]
 800432c:	430b      	orrs	r3, r1
 800432e:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695a      	ldr	r2, [r3, #20]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e007      	b.n	8004354 <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2240      	movs	r2, #64	; 0x40
 8004348:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	2200      	movs	r2, #0
 800434e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
}
 8004354:	4618      	mov	r0, r3
 8004356:	3718      	adds	r7, #24
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b082      	sub	sp, #8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2b00      	cmp	r3, #0
 800436a:	d002      	beq.n	8004372 <HAL_DMAEx_List_BuildNode+0x16>
 800436c:	683b      	ldr	r3, [r7, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d101      	bne.n	8004376 <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e004      	b.n	8004380 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 8004376:	6839      	ldr	r1, [r7, #0]
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f000 fb33 	bl	80049e4 <DMA_List_BuildNode>

  return HAL_OK;
 800437e:	2300      	movs	r3, #0
}
 8004380:	4618      	mov	r0, r3
 8004382:	3708      	adds	r7, #8
 8004384:	46bd      	mov	sp, r7
 8004386:	bd80      	pop	{r7, pc}

08004388 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
 8004390:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d002      	beq.n	800439e <HAL_DMAEx_List_GetNodeConfig+0x16>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d101      	bne.n	80043a2 <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 800439e:	2301      	movs	r3, #1
 80043a0:	e004      	b.n	80043ac <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80043a2:	6839      	ldr	r1, [r7, #0]
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 fc6f 	bl	8004c88 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80043aa:	2300      	movs	r3, #0
}
 80043ac:	4618      	mov	r0, r3
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b08c      	sub	sp, #48	; 0x30
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	60f8      	str	r0, [r7, #12]
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_DMAEx_List_InsertNode+0x18>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d101      	bne.n	80043d0 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e0b6      	b.n	800453e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	695b      	ldr	r3, [r3, #20]
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d104      	bne.n	80043e2 <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2204      	movs	r2, #4
 80043dc:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0ad      	b.n	800453e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	687a      	ldr	r2, [r7, #4]
 80043e8:	68b9      	ldr	r1, [r7, #8]
 80043ea:	4618      	mov	r0, r3
 80043ec:	f000 fd56 	bl	8004e9c <DMA_List_CheckNodesBaseAddresses>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	d004      	beq.n	8004400 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2205      	movs	r2, #5
 80043fa:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80043fc:	2301      	movs	r3, #1
 80043fe:	e09e      	b.n	800453e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	687a      	ldr	r2, [r7, #4]
 8004406:	68b9      	ldr	r1, [r7, #8]
 8004408:	4618      	mov	r0, r3
 800440a:	f000 fd77 	bl	8004efc <DMA_List_CheckNodesTypes>
 800440e:	4603      	mov	r3, r0
 8004410:	2b00      	cmp	r3, #0
 8004412:	d004      	beq.n	800441e <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	2204      	movs	r2, #4
 8004418:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e08f      	b.n	800453e <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	2202      	movs	r2, #2
 8004422:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	2200      	movs	r2, #0
 8004428:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 800442a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800442e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004432:	4619      	mov	r1, r3
 8004434:	6878      	ldr	r0, [r7, #4]
 8004436:	f000 fd9d 	bl	8004f74 <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d11a      	bne.n	8004478 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 8004442:	68bb      	ldr	r3, [r7, #8]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d106      	bne.n	8004456 <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2201      	movs	r2, #1
 8004452:	609a      	str	r2, [r3, #8]
 8004454:	e06c      	b.n	8004530 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	68ba      	ldr	r2, [r7, #8]
 800445a:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004462:	4013      	ands	r3, r2
 8004464:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004466:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004468:	4319      	orrs	r1, r3
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	2202      	movs	r2, #2
 8004474:	609a      	str	r2, [r3, #8]
 8004476:	e05b      	b.n	8004530 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	461a      	mov	r2, r3
 8004484:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8004488:	4013      	ands	r3, r2
 800448a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800448e:	4319      	orrs	r1, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	601a      	str	r2, [r3, #0]
 800449c:	e043      	b.n	8004526 <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 800449e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a0:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80044a2:	f107 0314 	add.w	r3, r7, #20
 80044a6:	461a      	mov	r2, r3
 80044a8:	68b9      	ldr	r1, [r7, #8]
 80044aa:	68f8      	ldr	r0, [r7, #12]
 80044ac:	f000 fd92 	bl	8004fd4 <DMA_List_FindNode>
 80044b0:	4603      	mov	r3, r0
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d132      	bne.n	800451c <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80044b6:	69fa      	ldr	r2, [r7, #28]
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d11a      	bne.n	80044f6 <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d00b      	beq.n	80044e0 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	461a      	mov	r2, r3
 80044ce:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80044d2:	4013      	ands	r3, r2
 80044d4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d8:	4319      	orrs	r1, r3
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 80044e0:	687a      	ldr	r2, [r7, #4]
 80044e2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80044e6:	4013      	ands	r3, r2
 80044e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80044ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ec:	4319      	orrs	r1, r3
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80044f4:	e017      	b.n	8004526 <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 80044f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8004506:	687a      	ldr	r2, [r7, #4]
 8004508:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800450c:	4013      	ands	r3, r2
 800450e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004510:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004512:	4319      	orrs	r1, r3
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800451a:	e004      	b.n	8004526 <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2206      	movs	r2, #6
 8004520:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 8004522:	2301      	movs	r3, #1
 8004524:	e00b      	b.n	800453e <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	689b      	ldr	r3, [r3, #8]
 800452a:	1c5a      	adds	r2, r3, #1
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3730      	adds	r7, #48	; 0x30
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b08a      	sub	sp, #40	; 0x28
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2b00      	cmp	r3, #0
 8004552:	d101      	bne.n	8004558 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	e052      	b.n	80045fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	2b00      	cmp	r3, #0
 800455e:	d104      	bne.n	800456a <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2202      	movs	r2, #2
 8004564:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e049      	b.n	80045fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	685b      	ldr	r3, [r3, #4]
 800456e:	2b00      	cmp	r3, #0
 8004570:	d00c      	beq.n	800458c <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	429a      	cmp	r2, r3
 800457c:	d101      	bne.n	8004582 <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 800457e:	2300      	movs	r3, #0
 8004580:	e03d      	b.n	80045fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2204      	movs	r2, #4
 8004586:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8004588:	2301      	movs	r3, #1
 800458a:	e038      	b.n	80045fe <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	695b      	ldr	r3, [r3, #20]
 8004590:	2b01      	cmp	r3, #1
 8004592:	d104      	bne.n	800459e <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2204      	movs	r2, #4
 8004598:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e02f      	b.n	80045fe <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2202      	movs	r2, #2
 80045a2:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2200      	movs	r2, #0
 80045a8:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	f107 0220 	add.w	r2, r7, #32
 80045b2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80045b6:	4618      	mov	r0, r3
 80045b8:	f000 fcdc 	bl	8004f74 <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80045bc:	6a3b      	ldr	r3, [r7, #32]
 80045be:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80045c0:	f107 030c 	add.w	r3, r7, #12
 80045c4:	461a      	mov	r2, r3
 80045c6:	2100      	movs	r1, #0
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 fd03 	bl	8004fd4 <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	461a      	mov	r2, r3
 80045d4:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80045d8:	4013      	ands	r3, r2
 80045da:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80045dc:	69ba      	ldr	r2, [r7, #24]
 80045de:	4610      	mov	r0, r2
 80045e0:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80045e2:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 80045e4:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2200      	movs	r2, #0
 80045f4:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	2201      	movs	r2, #1
 80045fa:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3728      	adds	r7, #40	; 0x28
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8004608:	b480      	push	{r7}
 800460a:	b085      	sub	sp, #20
 800460c:	af00      	add	r7, sp, #0
 800460e:	6078      	str	r0, [r7, #4]
 8004610:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_DMAEx_List_LinkQ+0x16>
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e072      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004628:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004630:	b2db      	uxtb	r3, r3
 8004632:	2b02      	cmp	r3, #2
 8004634:	d002      	beq.n	800463c <HAL_DMAEx_List_LinkQ+0x34>
 8004636:	7bfb      	ldrb	r3, [r7, #15]
 8004638:	2b05      	cmp	r3, #5
 800463a:	d108      	bne.n	800464e <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 800464a:	2301      	movs	r3, #1
 800464c:	e05c      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	7b1b      	ldrb	r3, [r3, #12]
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b02      	cmp	r3, #2
 8004656:	d104      	bne.n	8004662 <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	2201      	movs	r2, #1
 800465c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800465e:	2301      	movs	r3, #1
 8004660:	e052      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a2b      	ldr	r2, [pc, #172]	; (8004714 <HAL_DMAEx_List_LinkQ+0x10c>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d022      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a29      	ldr	r2, [pc, #164]	; (8004718 <HAL_DMAEx_List_LinkQ+0x110>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d01d      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a28      	ldr	r2, [pc, #160]	; (800471c <HAL_DMAEx_List_LinkQ+0x114>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d018      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a26      	ldr	r2, [pc, #152]	; (8004720 <HAL_DMAEx_List_LinkQ+0x118>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d013      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a25      	ldr	r2, [pc, #148]	; (8004724 <HAL_DMAEx_List_LinkQ+0x11c>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d00e      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	4a23      	ldr	r2, [pc, #140]	; (8004728 <HAL_DMAEx_List_LinkQ+0x120>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d009      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4a22      	ldr	r2, [pc, #136]	; (800472c <HAL_DMAEx_List_LinkQ+0x124>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d004      	beq.n	80046b2 <HAL_DMAEx_List_LinkQ+0xaa>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	4a20      	ldr	r2, [pc, #128]	; (8004730 <HAL_DMAEx_List_LinkQ+0x128>)
 80046ae:	4293      	cmp	r3, r2
 80046b0:	d101      	bne.n	80046b6 <HAL_DMAEx_List_LinkQ+0xae>
 80046b2:	2301      	movs	r3, #1
 80046b4:	e000      	b.n	80046b8 <HAL_DMAEx_List_LinkQ+0xb0>
 80046b6:	2300      	movs	r3, #0
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d10b      	bne.n	80046d4 <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80046bc:	683b      	ldr	r3, [r7, #0]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6a1b      	ldr	r3, [r3, #32]
 80046c2:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d004      	beq.n	80046d4 <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2203      	movs	r2, #3
 80046ce:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80046d0:	2301      	movs	r3, #1
 80046d2:	e019      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046d8:	2b81      	cmp	r3, #129	; 0x81
 80046da:	d108      	bne.n	80046ee <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d10d      	bne.n	8004700 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	2204      	movs	r2, #4
 80046e8:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80046ea:	2301      	movs	r3, #1
 80046ec:	e00c      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 80046ee:	683b      	ldr	r3, [r7, #0]
 80046f0:	685b      	ldr	r3, [r3, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d004      	beq.n	8004700 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2204      	movs	r2, #4
 80046fa:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e003      	b.n	8004708 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40020650 	.word	0x40020650
 8004718:	50020650 	.word	0x50020650
 800471c:	400206d0 	.word	0x400206d0
 8004720:	500206d0 	.word	0x500206d0
 8004724:	40020750 	.word	0x40020750
 8004728:	50020750 	.word	0x50020750
 800472c:	400207d0 	.word	0x400207d0
 8004730:	500207d0 	.word	0x500207d0

08004734 <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 8004734:	b480      	push	{r7}
 8004736:	b085      	sub	sp, #20
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004744:	4313      	orrs	r3, r2
 8004746:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	4a85      	ldr	r2, [pc, #532]	; (8004964 <DMA_List_Init+0x230>)
 800474e:	4293      	cmp	r3, r2
 8004750:	f000 80a0 	beq.w	8004894 <DMA_List_Init+0x160>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	4a83      	ldr	r2, [pc, #524]	; (8004968 <DMA_List_Init+0x234>)
 800475a:	4293      	cmp	r3, r2
 800475c:	f000 809a 	beq.w	8004894 <DMA_List_Init+0x160>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a81      	ldr	r2, [pc, #516]	; (800496c <DMA_List_Init+0x238>)
 8004766:	4293      	cmp	r3, r2
 8004768:	f000 8094 	beq.w	8004894 <DMA_List_Init+0x160>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a7f      	ldr	r2, [pc, #508]	; (8004970 <DMA_List_Init+0x23c>)
 8004772:	4293      	cmp	r3, r2
 8004774:	f000 808e 	beq.w	8004894 <DMA_List_Init+0x160>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	4a7d      	ldr	r2, [pc, #500]	; (8004974 <DMA_List_Init+0x240>)
 800477e:	4293      	cmp	r3, r2
 8004780:	f000 8088 	beq.w	8004894 <DMA_List_Init+0x160>
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	4a7b      	ldr	r2, [pc, #492]	; (8004978 <DMA_List_Init+0x244>)
 800478a:	4293      	cmp	r3, r2
 800478c:	f000 8082 	beq.w	8004894 <DMA_List_Init+0x160>
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4a79      	ldr	r2, [pc, #484]	; (800497c <DMA_List_Init+0x248>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d07c      	beq.n	8004894 <DMA_List_Init+0x160>
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a78      	ldr	r2, [pc, #480]	; (8004980 <DMA_List_Init+0x24c>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d077      	beq.n	8004894 <DMA_List_Init+0x160>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	4a76      	ldr	r2, [pc, #472]	; (8004984 <DMA_List_Init+0x250>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d072      	beq.n	8004894 <DMA_List_Init+0x160>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a75      	ldr	r2, [pc, #468]	; (8004988 <DMA_List_Init+0x254>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d06d      	beq.n	8004894 <DMA_List_Init+0x160>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a73      	ldr	r2, [pc, #460]	; (800498c <DMA_List_Init+0x258>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d068      	beq.n	8004894 <DMA_List_Init+0x160>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a72      	ldr	r2, [pc, #456]	; (8004990 <DMA_List_Init+0x25c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d063      	beq.n	8004894 <DMA_List_Init+0x160>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a70      	ldr	r2, [pc, #448]	; (8004994 <DMA_List_Init+0x260>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d05e      	beq.n	8004894 <DMA_List_Init+0x160>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a6f      	ldr	r2, [pc, #444]	; (8004998 <DMA_List_Init+0x264>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d059      	beq.n	8004894 <DMA_List_Init+0x160>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a6d      	ldr	r2, [pc, #436]	; (800499c <DMA_List_Init+0x268>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d054      	beq.n	8004894 <DMA_List_Init+0x160>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a6c      	ldr	r2, [pc, #432]	; (80049a0 <DMA_List_Init+0x26c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d04f      	beq.n	8004894 <DMA_List_Init+0x160>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a6a      	ldr	r2, [pc, #424]	; (80049a4 <DMA_List_Init+0x270>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d04a      	beq.n	8004894 <DMA_List_Init+0x160>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a69      	ldr	r2, [pc, #420]	; (80049a8 <DMA_List_Init+0x274>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d045      	beq.n	8004894 <DMA_List_Init+0x160>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a67      	ldr	r2, [pc, #412]	; (80049ac <DMA_List_Init+0x278>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d040      	beq.n	8004894 <DMA_List_Init+0x160>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4a66      	ldr	r2, [pc, #408]	; (80049b0 <DMA_List_Init+0x27c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	d03b      	beq.n	8004894 <DMA_List_Init+0x160>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a64      	ldr	r2, [pc, #400]	; (80049b4 <DMA_List_Init+0x280>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d036      	beq.n	8004894 <DMA_List_Init+0x160>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a63      	ldr	r2, [pc, #396]	; (80049b8 <DMA_List_Init+0x284>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d031      	beq.n	8004894 <DMA_List_Init+0x160>
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a61      	ldr	r2, [pc, #388]	; (80049bc <DMA_List_Init+0x288>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d02c      	beq.n	8004894 <DMA_List_Init+0x160>
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	4a60      	ldr	r2, [pc, #384]	; (80049c0 <DMA_List_Init+0x28c>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d027      	beq.n	8004894 <DMA_List_Init+0x160>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a5e      	ldr	r2, [pc, #376]	; (80049c4 <DMA_List_Init+0x290>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d022      	beq.n	8004894 <DMA_List_Init+0x160>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	4a5d      	ldr	r2, [pc, #372]	; (80049c8 <DMA_List_Init+0x294>)
 8004854:	4293      	cmp	r3, r2
 8004856:	d01d      	beq.n	8004894 <DMA_List_Init+0x160>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	4a5b      	ldr	r2, [pc, #364]	; (80049cc <DMA_List_Init+0x298>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d018      	beq.n	8004894 <DMA_List_Init+0x160>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a5a      	ldr	r2, [pc, #360]	; (80049d0 <DMA_List_Init+0x29c>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d013      	beq.n	8004894 <DMA_List_Init+0x160>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a58      	ldr	r2, [pc, #352]	; (80049d4 <DMA_List_Init+0x2a0>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d00e      	beq.n	8004894 <DMA_List_Init+0x160>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	4a57      	ldr	r2, [pc, #348]	; (80049d8 <DMA_List_Init+0x2a4>)
 800487c:	4293      	cmp	r3, r2
 800487e:	d009      	beq.n	8004894 <DMA_List_Init+0x160>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	4a55      	ldr	r2, [pc, #340]	; (80049dc <DMA_List_Init+0x2a8>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d004      	beq.n	8004894 <DMA_List_Init+0x160>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a54      	ldr	r2, [pc, #336]	; (80049e0 <DMA_List_Init+0x2ac>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <DMA_List_Init+0x164>
 8004894:	2301      	movs	r3, #1
 8004896:	e000      	b.n	800489a <DMA_List_Init+0x166>
 8004898:	2300      	movs	r3, #0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a2:	68fa      	ldr	r2, [r7, #12]
 80048a4:	4313      	orrs	r3, r2
 80048a6:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	695b      	ldr	r3, [r3, #20]
 80048ae:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68fa      	ldr	r2, [r7, #12]
 80048b8:	430a      	orrs	r2, r1
 80048ba:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	687a      	ldr	r2, [r7, #4]
 80048ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80048cc:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	2200      	movs	r2, #0
 80048d4:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	2200      	movs	r2, #0
 80048dc:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	2200      	movs	r2, #0
 80048e4:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	4a36      	ldr	r2, [pc, #216]	; (80049c4 <DMA_List_Init+0x290>)
 80048ec:	4293      	cmp	r3, r2
 80048ee:	d022      	beq.n	8004936 <DMA_List_Init+0x202>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	4a34      	ldr	r2, [pc, #208]	; (80049c8 <DMA_List_Init+0x294>)
 80048f6:	4293      	cmp	r3, r2
 80048f8:	d01d      	beq.n	8004936 <DMA_List_Init+0x202>
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	4a33      	ldr	r2, [pc, #204]	; (80049cc <DMA_List_Init+0x298>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d018      	beq.n	8004936 <DMA_List_Init+0x202>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	4a31      	ldr	r2, [pc, #196]	; (80049d0 <DMA_List_Init+0x29c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d013      	beq.n	8004936 <DMA_List_Init+0x202>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a30      	ldr	r2, [pc, #192]	; (80049d4 <DMA_List_Init+0x2a0>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d00e      	beq.n	8004936 <DMA_List_Init+0x202>
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	4a2e      	ldr	r2, [pc, #184]	; (80049d8 <DMA_List_Init+0x2a4>)
 800491e:	4293      	cmp	r3, r2
 8004920:	d009      	beq.n	8004936 <DMA_List_Init+0x202>
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	4a2d      	ldr	r2, [pc, #180]	; (80049dc <DMA_List_Init+0x2a8>)
 8004928:	4293      	cmp	r3, r2
 800492a:	d004      	beq.n	8004936 <DMA_List_Init+0x202>
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	4a2b      	ldr	r2, [pc, #172]	; (80049e0 <DMA_List_Init+0x2ac>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d101      	bne.n	800493a <DMA_List_Init+0x206>
 8004936:	2301      	movs	r3, #1
 8004938:	e000      	b.n	800493c <DMA_List_Init+0x208>
 800493a:	2300      	movs	r3, #0
 800493c:	2b00      	cmp	r3, #0
 800493e:	d007      	beq.n	8004950 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2200      	movs	r2, #0
 8004946:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2200      	movs	r2, #0
 800494e:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	2200      	movs	r2, #0
 8004956:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8004958:	bf00      	nop
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004962:	4770      	bx	lr
 8004964:	40020050 	.word	0x40020050
 8004968:	50020050 	.word	0x50020050
 800496c:	400200d0 	.word	0x400200d0
 8004970:	500200d0 	.word	0x500200d0
 8004974:	40020150 	.word	0x40020150
 8004978:	50020150 	.word	0x50020150
 800497c:	400201d0 	.word	0x400201d0
 8004980:	500201d0 	.word	0x500201d0
 8004984:	40020250 	.word	0x40020250
 8004988:	50020250 	.word	0x50020250
 800498c:	400202d0 	.word	0x400202d0
 8004990:	500202d0 	.word	0x500202d0
 8004994:	40020350 	.word	0x40020350
 8004998:	50020350 	.word	0x50020350
 800499c:	400203d0 	.word	0x400203d0
 80049a0:	500203d0 	.word	0x500203d0
 80049a4:	40020450 	.word	0x40020450
 80049a8:	50020450 	.word	0x50020450
 80049ac:	400204d0 	.word	0x400204d0
 80049b0:	500204d0 	.word	0x500204d0
 80049b4:	40020550 	.word	0x40020550
 80049b8:	50020550 	.word	0x50020550
 80049bc:	400205d0 	.word	0x400205d0
 80049c0:	500205d0 	.word	0x500205d0
 80049c4:	40020650 	.word	0x40020650
 80049c8:	50020650 	.word	0x50020650
 80049cc:	400206d0 	.word	0x400206d0
 80049d0:	500206d0 	.word	0x500206d0
 80049d4:	40020750 	.word	0x40020750
 80049d8:	50020750 	.word	0x50020750
 80049dc:	400207d0 	.word	0x400207d0
 80049e0:	500207d0 	.word	0x500207d0

080049e4 <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 80049e4:	b480      	push	{r7}
 80049e6:	b085      	sub	sp, #20
 80049e8:	af00      	add	r7, sp, #0
 80049ea:	6078      	str	r0, [r7, #4]
 80049ec:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 80049f6:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 80049fc:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8004a02:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8004a08:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8004a0a:	683b      	ldr	r3, [r7, #0]
 8004a0c:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f003 0320 	and.w	r3, r3, #32
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d017      	beq.n	8004a4a <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004a1a:	683b      	ldr	r3, [r7, #0]
 8004a1c:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a26:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	051b      	lsls	r3, r3, #20
 8004a30:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8004a34:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8004a42:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8004a44:	431a      	orrs	r2, r3
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6859      	ldr	r1, [r3, #4]
 8004a52:	f240 237f 	movw	r3, #639	; 0x27f
 8004a56:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8004a58:	431a      	orrs	r2, r3
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a66:	d10c      	bne.n	8004a82 <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f003 0320 	and.w	r3, r3, #32
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d011      	beq.n	8004a98 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8004a7c:	683b      	ldr	r3, [r7, #0]
 8004a7e:	605a      	str	r2, [r3, #4]
 8004a80:	e00a      	b.n	8004a98 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	68db      	ldr	r3, [r3, #12]
 8004a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004a8a:	d105      	bne.n	8004a98 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d00f      	beq.n	8004ac0 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ab2:	041b      	lsls	r3, r3, #16
 8004ab4:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8004ab8:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8004aba:	431a      	orrs	r2, r3
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	683b      	ldr	r3, [r7, #0]
 8004ac8:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d04e      	beq.n	8004b74 <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ade:	3b01      	subs	r3, #1
 8004ae0:	0419      	lsls	r1, r3, #16
 8004ae2:	4b67      	ldr	r3, [pc, #412]	; (8004c80 <DMA_List_BuildNode+0x29c>)
 8004ae4:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	da06      	bge.n	8004b02 <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	609a      	str	r2, [r3, #8]
 8004b00:	e005      	b.n	8004b0e <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	da06      	bge.n	8004b24 <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8004b16:	683b      	ldr	r3, [r7, #0]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	609a      	str	r2, [r3, #8]
 8004b22:	e005      	b.n	8004b30 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	da06      	bge.n	8004b46 <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8004b38:	683b      	ldr	r3, [r7, #0]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	609a      	str	r2, [r3, #8]
 8004b44:	e005      	b.n	8004b52 <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004b4e:	683b      	ldr	r3, [r7, #0]
 8004b50:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	da06      	bge.n	8004b68 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8004b5a:	683b      	ldr	r3, [r7, #0]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	609a      	str	r2, [r3, #8]
 8004b66:	e005      	b.n	8004b74 <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b78:	683b      	ldr	r3, [r7, #0]
 8004b7a:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d059      	beq.n	8004c44 <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	da09      	bge.n	8004bac <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b9c:	425b      	negs	r3, r3
 8004b9e:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8004ba6:	683b      	ldr	r3, [r7, #0]
 8004ba8:	615a      	str	r2, [r3, #20]
 8004baa:	e005      	b.n	8004bb8 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bb0:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	da0d      	bge.n	8004bdc <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bc4:	425b      	negs	r3, r3
 8004bc6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	695a      	ldr	r2, [r3, #20]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	0419      	lsls	r1, r3, #16
 8004bd0:	4b2c      	ldr	r3, [pc, #176]	; (8004c84 <DMA_List_BuildNode+0x2a0>)
 8004bd2:	400b      	ands	r3, r1
 8004bd4:	431a      	orrs	r2, r3
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	615a      	str	r2, [r3, #20]
 8004bda:	e009      	b.n	8004bf0 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	0419      	lsls	r1, r3, #16
 8004be6:	4b27      	ldr	r3, [pc, #156]	; (8004c84 <DMA_List_BuildNode+0x2a0>)
 8004be8:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8004bea:	431a      	orrs	r2, r3
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	da08      	bge.n	8004c0a <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bfc:	425b      	negs	r3, r3
 8004bfe:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	b29a      	uxth	r2, r3
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	619a      	str	r2, [r3, #24]
 8004c08:	e004      	b.n	8004c14 <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c0e:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	da0b      	bge.n	8004c34 <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c20:	425b      	negs	r3, r3
 8004c22:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004c2c:	431a      	orrs	r2, r3
 8004c2e:	683b      	ldr	r3, [r7, #0]
 8004c30:	619a      	str	r2, [r3, #24]
 8004c32:	e007      	b.n	8004c44 <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004c3c:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8004c3e:	431a      	orrs	r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681a      	ldr	r2, [r3, #0]
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d006      	beq.n	8004c66 <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	6a1b      	ldr	r3, [r3, #32]
 8004c5c:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8004c64:	e005      	b.n	8004c72 <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	6a1b      	ldr	r3, [r3, #32]
 8004c6a:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	621a      	str	r2, [r3, #32]
}
 8004c72:	bf00      	nop
 8004c74:	3714      	adds	r7, #20
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	07ff0000 	.word	0x07ff0000
 8004c84:	1fff0000 	.word	0x1fff0000

08004c88 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
 8004c90:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	6a1b      	ldr	r3, [r3, #32]
 8004c96:	b2da      	uxtb	r2, r3
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8004c9c:	683b      	ldr	r3, [r7, #0]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f003 0208 	and.w	r2, r3, #8
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8004cb4:	683b      	ldr	r3, [r7, #0]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0203 	and.w	r2, r3, #3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004cd6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	625a      	str	r2, [r3, #36]	; 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8004ce0:	0d1b      	lsrs	r3, r3, #20
 8004ce2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ce6:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	; 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 2240 	and.w	r2, r3, #1073758208	; 0x40004000
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62da      	str	r2, [r3, #44]	; 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	4b66      	ldr	r3, [pc, #408]	; (8004e98 <DMA_List_GetNodeConfig+0x210>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	687a      	ldr	r2, [r7, #4]
 8004d02:	6393      	str	r3, [r2, #56]	; 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	685b      	ldr	r3, [r3, #4]
 8004d14:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d008      	beq.n	8004d2e <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d22:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d2a:	60da      	str	r2, [r3, #12]
 8004d2c:	e013      	b.n	8004d56 <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d004      	beq.n	8004d50 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d4c:	60da      	str	r2, [r3, #12]
 8004d4e:	e002      	b.n	8004d56 <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	2200      	movs	r2, #0
 8004d54:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8004d62:	683b      	ldr	r3, [r7, #0]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	641a      	str	r2, [r3, #64]	; 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	645a      	str	r2, [r3, #68]	; 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8004d7e:	0c1b      	lsrs	r3, r3, #16
 8004d80:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	649a      	str	r2, [r3, #72]	; 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	631a      	str	r2, [r3, #48]	; 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8004d94:	683b      	ldr	r3, [r7, #0]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	669a      	str	r2, [r3, #104]	; 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f003 0302 	and.w	r3, r3, #2
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d008      	beq.n	8004dbc <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	0c1b      	lsrs	r3, r3, #16
 8004db0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004db4:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004dba:	e002      	b.n	8004dc2 <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	68da      	ldr	r2, [r3, #12]
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	661a      	str	r2, [r3, #96]	; 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	691a      	ldr	r2, [r3, #16]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	665a      	str	r2, [r3, #100]	; 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d04a      	beq.n	8004e74 <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
 8004de2:	b29b      	uxth	r3, r3
 8004de4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004de8:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8004dea:	89fa      	ldrh	r2, [r7, #14]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	651a      	str	r2, [r3, #80]	; 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8004df0:	683b      	ldr	r3, [r7, #0]
 8004df2:	695b      	ldr	r3, [r3, #20]
 8004df4:	0c1b      	lsrs	r3, r3, #16
 8004df6:	b29b      	uxth	r3, r3
 8004df8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dfc:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8004dfe:	89fa      	ldrh	r2, [r7, #14]
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	655a      	str	r2, [r3, #84]	; 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d004      	beq.n	8004e1a <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e14:	425a      	negs	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	689b      	ldr	r3, [r3, #8]
 8004e1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d004      	beq.n	8004e30 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e2a:	425a      	negs	r2, r3
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	699b      	ldr	r3, [r3, #24]
 8004e34:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8004e36:	89fa      	ldrh	r2, [r7, #14]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	659a      	str	r2, [r3, #88]	; 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	699b      	ldr	r3, [r3, #24]
 8004e40:	0c1b      	lsrs	r3, r3, #16
 8004e42:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8004e44:	89fa      	ldrh	r2, [r7, #14]
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	65da      	str	r2, [r3, #92]	; 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8004e4a:	683b      	ldr	r3, [r7, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d004      	beq.n	8004e60 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e5a:	425a      	negs	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	689b      	ldr	r3, [r3, #8]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	da11      	bge.n	8004e8c <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004e6c:	425a      	negs	r2, r3
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8004e72:	e00b      	b.n	8004e8c <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	651a      	str	r2, [r3, #80]	; 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	655a      	str	r2, [r3, #84]	; 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2200      	movs	r2, #0
 8004e84:	659a      	str	r2, [r3, #88]	; 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004e8c:	bf00      	nop
 8004e8e:	3714      	adds	r7, #20
 8004e90:	46bd      	mov	sp, r7
 8004e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e96:	4770      	bx	lr
 8004e98:	0c002000 	.word	0x0c002000

08004e9c <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b087      	sub	sp, #28
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8004ea8:	68fa      	ldr	r2, [r7, #12]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	431a      	orrs	r2, r3
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	0c1b      	lsrs	r3, r3, #16
 8004eb4:	041b      	lsls	r3, r3, #16
 8004eb6:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	617b      	str	r3, [r7, #20]
 8004ec6:	e00a      	b.n	8004ede <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8004ec8:	68bb      	ldr	r3, [r7, #8]
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d002      	beq.n	8004ed4 <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	617b      	str	r3, [r7, #20]
 8004ed2:	e004      	b.n	8004ede <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d001      	beq.n	8004ede <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	0c1b      	lsrs	r3, r3, #16
 8004ee2:	041b      	lsls	r3, r3, #16
 8004ee4:	693a      	ldr	r2, [r7, #16]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d001      	beq.n	8004eee <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8004eea:	2301      	movs	r3, #1
 8004eec:	e000      	b.n	8004ef0 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8004eee:	2300      	movs	r3, #0
}
 8004ef0:	4618      	mov	r0, r3
 8004ef2:	371c      	adds	r7, #28
 8004ef4:	46bd      	mov	sp, r7
 8004ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efa:	4770      	bx	lr

08004efc <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8004efc:	b480      	push	{r7}
 8004efe:	b087      	sub	sp, #28
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	60f8      	str	r0, [r7, #12]
 8004f04:	60b9      	str	r1, [r7, #8]
 8004f06:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d004      	beq.n	8004f1c <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a1b      	ldr	r3, [r3, #32]
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	617b      	str	r3, [r7, #20]
 8004f1a:	e00e      	b.n	8004f3a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8004f1c:	68bb      	ldr	r3, [r7, #8]
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d004      	beq.n	8004f2c <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	6a1b      	ldr	r3, [r3, #32]
 8004f26:	b2db      	uxtb	r3, r3
 8004f28:	617b      	str	r3, [r7, #20]
 8004f2a:	e006      	b.n	8004f3a <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d007      	beq.n	8004f50 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8004f40:	68bb      	ldr	r3, [r7, #8]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	b2db      	uxtb	r3, r3
 8004f46:	697a      	ldr	r2, [r7, #20]
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d001      	beq.n	8004f50 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8004f4c:	2302      	movs	r3, #2
 8004f4e:	e00b      	b.n	8004f68 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d007      	beq.n	8004f66 <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	b2db      	uxtb	r3, r3
 8004f5c:	697a      	ldr	r2, [r7, #20]
 8004f5e:	429a      	cmp	r2, r3
 8004f60:	d001      	beq.n	8004f66 <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e000      	b.n	8004f68 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	371c      	adds	r7, #28
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f72:	4770      	bx	lr

08004f74 <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8004f74:	b480      	push	{r7}
 8004f76:	b085      	sub	sp, #20
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	60f8      	str	r0, [r7, #12]
 8004f7c:	60b9      	str	r1, [r7, #8]
 8004f7e:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a1b      	ldr	r3, [r3, #32]
 8004f84:	f003 0302 	and.w	r3, r3, #2
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00c      	beq.n	8004fa6 <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d002      	beq.n	8004f98 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	4a0d      	ldr	r2, [pc, #52]	; (8004fcc <DMA_List_GetCLLRNodeInfo+0x58>)
 8004f96:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00f      	beq.n	8004fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2207      	movs	r2, #7
 8004fa2:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8004fa4:	e00b      	b.n	8004fbe <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8004fa6:	68bb      	ldr	r3, [r7, #8]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	4a08      	ldr	r2, [pc, #32]	; (8004fd0 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8004fb0:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d002      	beq.n	8004fbe <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2205      	movs	r2, #5
 8004fbc:	601a      	str	r2, [r3, #0]
}
 8004fbe:	bf00      	nop
 8004fc0:	3714      	adds	r7, #20
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc8:	4770      	bx	lr
 8004fca:	bf00      	nop
 8004fcc:	fe010000 	.word	0xfe010000
 8004fd0:	f8010000 	.word	0xf8010000

08004fd4 <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8004fd4:	b480      	push	{r7}
 8004fd6:	b089      	sub	sp, #36	; 0x24
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	60f8      	str	r0, [r7, #12]
 8004fdc:	60b9      	str	r1, [r7, #8]
 8004fde:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8004fe8:	2300      	movs	r3, #0
 8004fea:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d142      	bne.n	800507e <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8004ff8:	e01d      	b.n	8005036 <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d107      	bne.n	8005010 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	461a      	mov	r2, r3
 8005006:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800500a:	4013      	ands	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
 800500e:	e00f      	b.n	8005030 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005010:	69bb      	ldr	r3, [r7, #24]
 8005012:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	0c1b      	lsrs	r3, r3, #16
 800501a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800501c:	69ba      	ldr	r2, [r7, #24]
 800501e:	4413      	add	r3, r2
 8005020:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8005022:	693b      	ldr	r3, [r7, #16]
 8005024:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005028:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800502c:	4013      	ands	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	3301      	adds	r3, #1
 8005034:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	689b      	ldr	r3, [r3, #8]
 800503a:	69fa      	ldr	r2, [r7, #28]
 800503c:	429a      	cmp	r2, r3
 800503e:	d3dc      	bcc.n	8004ffa <DMA_List_FindNode+0x26>
 8005040:	e029      	b.n	8005096 <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 8005042:	69fb      	ldr	r3, [r7, #28]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d107      	bne.n	8005058 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	461a      	mov	r2, r3
 800504e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005052:	4013      	ands	r3, r2
 8005054:	61bb      	str	r3, [r7, #24]
 8005056:	e00f      	b.n	8005078 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	0c1b      	lsrs	r3, r3, #16
 8005062:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8005064:	69ba      	ldr	r2, [r7, #24]
 8005066:	4413      	add	r3, r2
 8005068:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8005070:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005074:	4013      	ands	r3, r2
 8005076:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8005078:	69fb      	ldr	r3, [r7, #28]
 800507a:	3301      	adds	r3, #1
 800507c:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	69fa      	ldr	r2, [r7, #28]
 8005084:	429a      	cmp	r2, r3
 8005086:	d206      	bcs.n	8005096 <DMA_List_FindNode+0xc2>
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800508e:	4013      	ands	r3, r2
 8005090:	69ba      	ldr	r2, [r7, #24]
 8005092:	429a      	cmp	r2, r3
 8005094:	d1d5      	bne.n	8005042 <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 8005096:	68bb      	ldr	r3, [r7, #8]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d008      	beq.n	80050ae <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 800509c:	68ba      	ldr	r2, [r7, #8]
 800509e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80050a2:	4013      	ands	r3, r2
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d001      	beq.n	80050ae <DMA_List_FindNode+0xda>
    {
      return 1U;
 80050aa:	2301      	movs	r3, #1
 80050ac:	e02b      	b.n	8005106 <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	69fa      	ldr	r2, [r7, #28]
 80050b2:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	0c1b      	lsrs	r3, r3, #16
 80050ba:	041b      	lsls	r3, r3, #16
 80050bc:	697a      	ldr	r2, [r7, #20]
 80050be:	431a      	orrs	r2, r3
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	0c1b      	lsrs	r3, r3, #16
 80050ca:	041b      	lsls	r3, r3, #16
 80050cc:	69ba      	ldr	r2, [r7, #24]
 80050ce:	431a      	orrs	r2, r3
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	461a      	mov	r2, r3
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d00f      	beq.n	8005104 <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	68db      	ldr	r3, [r3, #12]
 80050e8:	461a      	mov	r2, r3
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80050f0:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 80050f4:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	0c1b      	lsrs	r3, r3, #16
 80050fc:	041b      	lsls	r3, r3, #16
 80050fe:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 8005104:	2300      	movs	r3, #0
}
 8005106:	4618      	mov	r0, r3
 8005108:	3724      	adds	r7, #36	; 0x24
 800510a:	46bd      	mov	sp, r7
 800510c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005110:	4770      	bx	lr
	...

08005114 <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8005114:	b480      	push	{r7}
 8005116:	b089      	sub	sp, #36	; 0x24
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
 800511c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8005126:	e1ba      	b.n	800549e <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	681a      	ldr	r2, [r3, #0]
 800512c:	2101      	movs	r1, #1
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	fa01 f303 	lsl.w	r3, r1, r3
 8005134:	4013      	ands	r3, r2
 8005136:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 81aa 	beq.w	8005498 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	4a55      	ldr	r2, [pc, #340]	; (800529c <HAL_GPIO_Init+0x188>)
 8005148:	4293      	cmp	r3, r2
 800514a:	d15d      	bne.n	8005208 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 8005152:	2201      	movs	r2, #1
 8005154:	697b      	ldr	r3, [r7, #20]
 8005156:	fa02 f303 	lsl.w	r3, r2, r3
 800515a:	43db      	mvns	r3, r3
 800515c:	69fa      	ldr	r2, [r7, #28]
 800515e:	4013      	ands	r3, r2
 8005160:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f003 0201 	and.w	r2, r3, #1
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	fa02 f303 	lsl.w	r3, r2, r3
 8005170:	69fa      	ldr	r2, [r7, #28]
 8005172:	4313      	orrs	r3, r2
 8005174:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	69fa      	ldr	r2, [r7, #28]
 800517a:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 800517c:	4a48      	ldr	r2, [pc, #288]	; (80052a0 <HAL_GPIO_Init+0x18c>)
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005184:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 8005186:	4a46      	ldr	r2, [pc, #280]	; (80052a0 <HAL_GPIO_Init+0x18c>)
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	00db      	lsls	r3, r3, #3
 800518c:	4413      	add	r3, r2
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 8005192:	69bb      	ldr	r3, [r7, #24]
 8005194:	08da      	lsrs	r2, r3, #3
 8005196:	693b      	ldr	r3, [r7, #16]
 8005198:	3208      	adds	r2, #8
 800519a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800519e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80051a0:	69bb      	ldr	r3, [r7, #24]
 80051a2:	f003 0307 	and.w	r3, r3, #7
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	220f      	movs	r2, #15
 80051aa:	fa02 f303 	lsl.w	r3, r2, r3
 80051ae:	43db      	mvns	r3, r3
 80051b0:	69fa      	ldr	r2, [r7, #28]
 80051b2:	4013      	ands	r3, r2
 80051b4:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	f003 0307 	and.w	r3, r3, #7
 80051bc:	009b      	lsls	r3, r3, #2
 80051be:	220b      	movs	r2, #11
 80051c0:	fa02 f303 	lsl.w	r3, r2, r3
 80051c4:	69fa      	ldr	r2, [r7, #28]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	08da      	lsrs	r2, r3, #3
 80051ce:	693b      	ldr	r3, [r7, #16]
 80051d0:	3208      	adds	r2, #8
 80051d2:	69f9      	ldr	r1, [r7, #28]
 80051d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80051de:	69bb      	ldr	r3, [r7, #24]
 80051e0:	005b      	lsls	r3, r3, #1
 80051e2:	2203      	movs	r2, #3
 80051e4:	fa02 f303 	lsl.w	r3, r2, r3
 80051e8:	43db      	mvns	r3, r3
 80051ea:	69fa      	ldr	r2, [r7, #28]
 80051ec:	4013      	ands	r3, r2
 80051ee:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 80051f0:	69bb      	ldr	r3, [r7, #24]
 80051f2:	005b      	lsls	r3, r3, #1
 80051f4:	2202      	movs	r2, #2
 80051f6:	fa02 f303 	lsl.w	r3, r2, r3
 80051fa:	69fa      	ldr	r2, [r7, #28]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	69fa      	ldr	r2, [r7, #28]
 8005204:	601a      	str	r2, [r3, #0]
 8005206:	e067      	b.n	80052d8 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	685b      	ldr	r3, [r3, #4]
 800520c:	2b02      	cmp	r3, #2
 800520e:	d003      	beq.n	8005218 <HAL_GPIO_Init+0x104>
 8005210:	683b      	ldr	r3, [r7, #0]
 8005212:	685b      	ldr	r3, [r3, #4]
 8005214:	2b12      	cmp	r3, #18
 8005216:	d145      	bne.n	80052a4 <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	08da      	lsrs	r2, r3, #3
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	3208      	adds	r2, #8
 8005220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005224:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f003 0307 	and.w	r3, r3, #7
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	220f      	movs	r2, #15
 8005230:	fa02 f303 	lsl.w	r3, r2, r3
 8005234:	43db      	mvns	r3, r3
 8005236:	69fa      	ldr	r2, [r7, #28]
 8005238:	4013      	ands	r3, r2
 800523a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	f003 020f 	and.w	r2, r3, #15
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f003 0307 	and.w	r3, r3, #7
 800524a:	009b      	lsls	r3, r3, #2
 800524c:	fa02 f303 	lsl.w	r3, r2, r3
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	4313      	orrs	r3, r2
 8005254:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 8005256:	697b      	ldr	r3, [r7, #20]
 8005258:	08da      	lsrs	r2, r3, #3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	3208      	adds	r2, #8
 800525e:	69f9      	ldr	r1, [r7, #28]
 8005260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	005b      	lsls	r3, r3, #1
 800526e:	2203      	movs	r2, #3
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	43db      	mvns	r3, r3
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	4013      	ands	r3, r2
 800527a:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 800527c:	683b      	ldr	r3, [r7, #0]
 800527e:	685b      	ldr	r3, [r3, #4]
 8005280:	f003 0203 	and.w	r2, r3, #3
 8005284:	69bb      	ldr	r3, [r7, #24]
 8005286:	005b      	lsls	r3, r3, #1
 8005288:	fa02 f303 	lsl.w	r3, r2, r3
 800528c:	69fa      	ldr	r2, [r7, #28]
 800528e:	4313      	orrs	r3, r2
 8005290:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	69fa      	ldr	r2, [r7, #28]
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	e01e      	b.n	80052d8 <HAL_GPIO_Init+0x1c4>
 800529a:	bf00      	nop
 800529c:	46020000 	.word	0x46020000
 80052a0:	0800fabc 	.word	0x0800fabc
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80052aa:	69bb      	ldr	r3, [r7, #24]
 80052ac:	005b      	lsls	r3, r3, #1
 80052ae:	2203      	movs	r2, #3
 80052b0:	fa02 f303 	lsl.w	r3, r2, r3
 80052b4:	43db      	mvns	r3, r3
 80052b6:	69fa      	ldr	r2, [r7, #28]
 80052b8:	4013      	ands	r3, r2
 80052ba:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	685b      	ldr	r3, [r3, #4]
 80052c0:	f003 0203 	and.w	r2, r3, #3
 80052c4:	69bb      	ldr	r3, [r7, #24]
 80052c6:	005b      	lsls	r3, r3, #1
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	69fa      	ldr	r2, [r7, #28]
 80052ce:	4313      	orrs	r3, r2
 80052d0:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80052d2:	693b      	ldr	r3, [r7, #16]
 80052d4:	69fa      	ldr	r2, [r7, #28]
 80052d6:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	685b      	ldr	r3, [r3, #4]
 80052dc:	2b01      	cmp	r3, #1
 80052de:	d00b      	beq.n	80052f8 <HAL_GPIO_Init+0x1e4>
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	2b02      	cmp	r3, #2
 80052e6:	d007      	beq.n	80052f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052e8:	683b      	ldr	r3, [r7, #0]
 80052ea:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052ec:	2b11      	cmp	r3, #17
 80052ee:	d003      	beq.n	80052f8 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	685b      	ldr	r3, [r3, #4]
 80052f4:	2b12      	cmp	r3, #18
 80052f6:	d130      	bne.n	800535a <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	689b      	ldr	r3, [r3, #8]
 80052fc:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	005b      	lsls	r3, r3, #1
 8005302:	2203      	movs	r2, #3
 8005304:	fa02 f303 	lsl.w	r3, r2, r3
 8005308:	43db      	mvns	r3, r3
 800530a:	69fa      	ldr	r2, [r7, #28]
 800530c:	4013      	ands	r3, r2
 800530e:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	68da      	ldr	r2, [r3, #12]
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	fa02 f303 	lsl.w	r3, r2, r3
 800531c:	69fa      	ldr	r2, [r7, #28]
 800531e:	4313      	orrs	r3, r2
 8005320:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 8005322:	693b      	ldr	r3, [r7, #16]
 8005324:	69fa      	ldr	r2, [r7, #28]
 8005326:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 800532e:	2201      	movs	r2, #1
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	fa02 f303 	lsl.w	r3, r2, r3
 8005336:	43db      	mvns	r3, r3
 8005338:	69fa      	ldr	r2, [r7, #28]
 800533a:	4013      	ands	r3, r2
 800533c:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 800533e:	683b      	ldr	r3, [r7, #0]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	091b      	lsrs	r3, r3, #4
 8005344:	f003 0201 	and.w	r2, r3, #1
 8005348:	69bb      	ldr	r3, [r7, #24]
 800534a:	fa02 f303 	lsl.w	r3, r2, r3
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	4313      	orrs	r3, r2
 8005352:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 8005354:	693b      	ldr	r3, [r7, #16]
 8005356:	69fa      	ldr	r2, [r7, #28]
 8005358:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800535a:	683b      	ldr	r3, [r7, #0]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	2b03      	cmp	r3, #3
 8005360:	d017      	beq.n	8005392 <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8005368:	69bb      	ldr	r3, [r7, #24]
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	2203      	movs	r2, #3
 800536e:	fa02 f303 	lsl.w	r3, r2, r3
 8005372:	43db      	mvns	r3, r3
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	4013      	ands	r3, r2
 8005378:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689a      	ldr	r2, [r3, #8]
 800537e:	69bb      	ldr	r3, [r7, #24]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	4313      	orrs	r3, r2
 800538a:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 800538c:	693b      	ldr	r3, [r7, #16]
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800539a:	2b00      	cmp	r3, #0
 800539c:	d07c      	beq.n	8005498 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 800539e:	4a47      	ldr	r2, [pc, #284]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	089b      	lsrs	r3, r3, #2
 80053a4:	3318      	adds	r3, #24
 80053a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053aa:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80053ac:	697b      	ldr	r3, [r7, #20]
 80053ae:	f003 0303 	and.w	r3, r3, #3
 80053b2:	00db      	lsls	r3, r3, #3
 80053b4:	220f      	movs	r2, #15
 80053b6:	fa02 f303 	lsl.w	r3, r2, r3
 80053ba:	43db      	mvns	r3, r3
 80053bc:	69fa      	ldr	r2, [r7, #28]
 80053be:	4013      	ands	r3, r2
 80053c0:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	0a9a      	lsrs	r2, r3, #10
 80053c6:	4b3e      	ldr	r3, [pc, #248]	; (80054c0 <HAL_GPIO_Init+0x3ac>)
 80053c8:	4013      	ands	r3, r2
 80053ca:	697a      	ldr	r2, [r7, #20]
 80053cc:	f002 0203 	and.w	r2, r2, #3
 80053d0:	00d2      	lsls	r2, r2, #3
 80053d2:	4093      	lsls	r3, r2
 80053d4:	69fa      	ldr	r2, [r7, #28]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 80053da:	4938      	ldr	r1, [pc, #224]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	089b      	lsrs	r3, r3, #2
 80053e0:	3318      	adds	r3, #24
 80053e2:	69fa      	ldr	r2, [r7, #28]
 80053e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80053e8:	4b34      	ldr	r3, [pc, #208]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	43db      	mvns	r3, r3
 80053f2:	69fa      	ldr	r2, [r7, #28]
 80053f4:	4013      	ands	r3, r2
 80053f6:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	685b      	ldr	r3, [r3, #4]
 80053fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005400:	2b00      	cmp	r3, #0
 8005402:	d003      	beq.n	800540c <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 8005404:	69fa      	ldr	r2, [r7, #28]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	4313      	orrs	r3, r2
 800540a:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 800540c:	4a2b      	ldr	r2, [pc, #172]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 800540e:	69fb      	ldr	r3, [r7, #28]
 8005410:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 8005412:	4b2a      	ldr	r3, [pc, #168]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	43db      	mvns	r3, r3
 800541c:	69fa      	ldr	r2, [r7, #28]
 800541e:	4013      	ands	r3, r2
 8005420:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800542a:	2b00      	cmp	r3, #0
 800542c:	d003      	beq.n	8005436 <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 800542e:	69fa      	ldr	r2, [r7, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	4313      	orrs	r3, r2
 8005434:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 8005436:	4a21      	ldr	r2, [pc, #132]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 8005438:	69fb      	ldr	r3, [r7, #28]
 800543a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 800543c:	4b1f      	ldr	r3, [pc, #124]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 800543e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005442:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	43db      	mvns	r3, r3
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	4013      	ands	r3, r2
 800544c:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	685b      	ldr	r3, [r3, #4]
 8005452:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005456:	2b00      	cmp	r3, #0
 8005458:	d003      	beq.n	8005462 <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 800545a:	69fa      	ldr	r2, [r7, #28]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 8005462:	4a16      	ldr	r2, [pc, #88]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 8005464:	69fb      	ldr	r3, [r7, #28]
 8005466:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 800546a:	4b14      	ldr	r3, [pc, #80]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 800546c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005470:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	43db      	mvns	r3, r3
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	4013      	ands	r3, r2
 800547a:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005484:	2b00      	cmp	r3, #0
 8005486:	d003      	beq.n	8005490 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 8005488:	69fa      	ldr	r2, [r7, #28]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 8005490:	4a0a      	ldr	r2, [pc, #40]	; (80054bc <HAL_GPIO_Init+0x3a8>)
 8005492:	69fb      	ldr	r3, [r7, #28]
 8005494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 8005498:	697b      	ldr	r3, [r7, #20]
 800549a:	3301      	adds	r3, #1
 800549c:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	697b      	ldr	r3, [r7, #20]
 80054a4:	fa22 f303 	lsr.w	r3, r2, r3
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	f47f ae3d 	bne.w	8005128 <HAL_GPIO_Init+0x14>
  }
}
 80054ae:	bf00      	nop
 80054b0:	bf00      	nop
 80054b2:	3724      	adds	r7, #36	; 0x24
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	46022000 	.word	0x46022000
 80054c0:	002f7f7f 	.word	0x002f7f7f

080054c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80054c4:	b480      	push	{r7}
 80054c6:	b083      	sub	sp, #12
 80054c8:	af00      	add	r7, sp, #0
 80054ca:	6078      	str	r0, [r7, #4]
 80054cc:	460b      	mov	r3, r1
 80054ce:	807b      	strh	r3, [r7, #2]
 80054d0:	4613      	mov	r3, r2
 80054d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80054d4:	787b      	ldrb	r3, [r7, #1]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d003      	beq.n	80054e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80054da:	887a      	ldrh	r2, [r7, #2]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 80054e0:	e002      	b.n	80054e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 80054e2:	887a      	ldrh	r2, [r7, #2]
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80054e8:	bf00      	nop
 80054ea:	370c      	adds	r7, #12
 80054ec:	46bd      	mov	sp, r7
 80054ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f2:	4770      	bx	lr

080054f4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80054f4:	b480      	push	{r7}
 80054f6:	b085      	sub	sp, #20
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 80054fc:	4b39      	ldr	r3, [pc, #228]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80054fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005500:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005504:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 8005506:	68ba      	ldr	r2, [r7, #8]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	429a      	cmp	r2, r3
 800550c:	d10b      	bne.n	8005526 <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d905      	bls.n	8005522 <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8005516:	4b33      	ldr	r3, [pc, #204]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005518:	68db      	ldr	r3, [r3, #12]
 800551a:	4a32      	ldr	r2, [pc, #200]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800551c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005520:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 8005522:	2300      	movs	r3, #0
 8005524:	e057      	b.n	80055d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800552c:	d90a      	bls.n	8005544 <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 800552e:	4b2d      	ldr	r3, [pc, #180]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005530:	68db      	ldr	r3, [r3, #12]
 8005532:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4313      	orrs	r3, r2
 800553a:	4a2a      	ldr	r2, [pc, #168]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800553c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005540:	60d3      	str	r3, [r2, #12]
 8005542:	e007      	b.n	8005554 <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 8005544:	4b27      	ldr	r3, [pc, #156]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800554c:	4925      	ldr	r1, [pc, #148]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	4313      	orrs	r3, r2
 8005552:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005554:	4b24      	ldr	r3, [pc, #144]	; (80055e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a24      	ldr	r2, [pc, #144]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 800555a:	fba2 2303 	umull	r2, r3, r2, r3
 800555e:	099b      	lsrs	r3, r3, #6
 8005560:	2232      	movs	r2, #50	; 0x32
 8005562:	fb02 f303 	mul.w	r3, r2, r3
 8005566:	4a21      	ldr	r2, [pc, #132]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005568:	fba2 2303 	umull	r2, r3, r2, r3
 800556c:	099b      	lsrs	r3, r3, #6
 800556e:	3301      	adds	r3, #1
 8005570:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 8005572:	e002      	b.n	800557a <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	3b01      	subs	r3, #1
 8005578:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800557a:	4b1a      	ldr	r3, [pc, #104]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005582:	2b00      	cmp	r3, #0
 8005584:	d102      	bne.n	800558c <HAL_PWREx_ControlVoltageScaling+0x98>
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d1f3      	bne.n	8005574 <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d01b      	beq.n	80055ca <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 8005592:	4b15      	ldr	r3, [pc, #84]	; (80055e8 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	4a15      	ldr	r2, [pc, #84]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8005598:	fba2 2303 	umull	r2, r3, r2, r3
 800559c:	099b      	lsrs	r3, r3, #6
 800559e:	2232      	movs	r2, #50	; 0x32
 80055a0:	fb02 f303 	mul.w	r3, r2, r3
 80055a4:	4a11      	ldr	r2, [pc, #68]	; (80055ec <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80055a6:	fba2 2303 	umull	r2, r3, r2, r3
 80055aa:	099b      	lsrs	r3, r3, #6
 80055ac:	3301      	adds	r3, #1
 80055ae:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80055b0:	e002      	b.n	80055b8 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	3b01      	subs	r3, #1
 80055b6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80055b8:	4b0a      	ldr	r3, [pc, #40]	; (80055e4 <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80055ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d102      	bne.n	80055ca <HAL_PWREx_ControlVoltageScaling+0xd6>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1f3      	bne.n	80055b2 <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	2b00      	cmp	r3, #0
 80055ce:	d101      	bne.n	80055d4 <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e000      	b.n	80055d6 <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80055d4:	2300      	movs	r3, #0
}
 80055d6:	4618      	mov	r0, r3
 80055d8:	3714      	adds	r7, #20
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	46020800 	.word	0x46020800
 80055e8:	20000000 	.word	0x20000000
 80055ec:	10624dd3 	.word	0x10624dd3

080055f0 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80055f0:	b480      	push	{r7}
 80055f2:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 80055f4:	4b04      	ldr	r3, [pc, #16]	; (8005608 <HAL_PWREx_GetVoltageRange+0x18>)
 80055f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 80055fc:	4618      	mov	r0, r3
 80055fe:	46bd      	mov	sp, r7
 8005600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005604:	4770      	bx	lr
 8005606:	bf00      	nop
 8005608:	46020800 	.word	0x46020800

0800560c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	; 0x38
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 8005614:	2300      	movs	r3, #0
 8005616:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d102      	bne.n	8005626 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8005620:	2301      	movs	r3, #1
 8005622:	f000 bec8 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005626:	4b99      	ldr	r3, [pc, #612]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	f003 030c 	and.w	r3, r3, #12
 800562e:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005630:	4b96      	ldr	r3, [pc, #600]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005634:	f003 0303 	and.w	r3, r3, #3
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0310 	and.w	r3, r3, #16
 8005642:	2b00      	cmp	r3, #0
 8005644:	f000 816c 	beq.w	8005920 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8005648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800564a:	2b00      	cmp	r3, #0
 800564c:	d007      	beq.n	800565e <HAL_RCC_OscConfig+0x52>
 800564e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005650:	2b0c      	cmp	r3, #12
 8005652:	f040 80de 	bne.w	8005812 <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005656:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005658:	2b01      	cmp	r3, #1
 800565a:	f040 80da 	bne.w	8005812 <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	69db      	ldr	r3, [r3, #28]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d102      	bne.n	800566c <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 8005666:	2301      	movs	r3, #1
 8005668:	f000 bea5 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005670:	4b86      	ldr	r3, [pc, #536]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005672:	689b      	ldr	r3, [r3, #8]
 8005674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d004      	beq.n	8005686 <HAL_RCC_OscConfig+0x7a>
 800567c:	4b83      	ldr	r3, [pc, #524]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800567e:	689b      	ldr	r3, [r3, #8]
 8005680:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005684:	e005      	b.n	8005692 <HAL_RCC_OscConfig+0x86>
 8005686:	4b81      	ldr	r3, [pc, #516]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005688:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800568c:	041b      	lsls	r3, r3, #16
 800568e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005692:	4293      	cmp	r3, r2
 8005694:	d255      	bcs.n	8005742 <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8005696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005698:	2b00      	cmp	r3, #0
 800569a:	d10a      	bne.n	80056b2 <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056a0:	4618      	mov	r0, r3
 80056a2:	f001 fa17 	bl	8006ad4 <RCC_SetFlashLatencyFromMSIRange>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d002      	beq.n	80056b2 <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	f000 be82 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80056b2:	4b76      	ldr	r3, [pc, #472]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	4a75      	ldr	r2, [pc, #468]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056b8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056bc:	6093      	str	r3, [r2, #8]
 80056be:	4b73      	ldr	r3, [pc, #460]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056c0:	689b      	ldr	r3, [r3, #8]
 80056c2:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ca:	4970      	ldr	r1, [pc, #448]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056cc:	4313      	orrs	r3, r2
 80056ce:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d4:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 80056d8:	d309      	bcc.n	80056ee <HAL_RCC_OscConfig+0xe2>
 80056da:	4b6c      	ldr	r3, [pc, #432]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056dc:	68db      	ldr	r3, [r3, #12]
 80056de:	f023 021f 	bic.w	r2, r3, #31
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6a1b      	ldr	r3, [r3, #32]
 80056e6:	4969      	ldr	r1, [pc, #420]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	60cb      	str	r3, [r1, #12]
 80056ec:	e07e      	b.n	80057ec <HAL_RCC_OscConfig+0x1e0>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	da0a      	bge.n	800570c <HAL_RCC_OscConfig+0x100>
 80056f6:	4b65      	ldr	r3, [pc, #404]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80056f8:	68db      	ldr	r3, [r3, #12]
 80056fa:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a1b      	ldr	r3, [r3, #32]
 8005702:	015b      	lsls	r3, r3, #5
 8005704:	4961      	ldr	r1, [pc, #388]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005706:	4313      	orrs	r3, r2
 8005708:	60cb      	str	r3, [r1, #12]
 800570a:	e06f      	b.n	80057ec <HAL_RCC_OscConfig+0x1e0>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005710:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005714:	d30a      	bcc.n	800572c <HAL_RCC_OscConfig+0x120>
 8005716:	4b5d      	ldr	r3, [pc, #372]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005718:	68db      	ldr	r3, [r3, #12]
 800571a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	6a1b      	ldr	r3, [r3, #32]
 8005722:	029b      	lsls	r3, r3, #10
 8005724:	4959      	ldr	r1, [pc, #356]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005726:	4313      	orrs	r3, r2
 8005728:	60cb      	str	r3, [r1, #12]
 800572a:	e05f      	b.n	80057ec <HAL_RCC_OscConfig+0x1e0>
 800572c:	4b57      	ldr	r3, [pc, #348]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800572e:	68db      	ldr	r3, [r3, #12]
 8005730:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	03db      	lsls	r3, r3, #15
 800573a:	4954      	ldr	r1, [pc, #336]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800573c:	4313      	orrs	r3, r2
 800573e:	60cb      	str	r3, [r1, #12]
 8005740:	e054      	b.n	80057ec <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8005742:	4b52      	ldr	r3, [pc, #328]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4a51      	ldr	r2, [pc, #324]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005748:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800574c:	6093      	str	r3, [r2, #8]
 800574e:	4b4f      	ldr	r3, [pc, #316]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005750:	689b      	ldr	r3, [r3, #8]
 8005752:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800575a:	494c      	ldr	r1, [pc, #304]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800575c:	4313      	orrs	r3, r2
 800575e:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005768:	d309      	bcc.n	800577e <HAL_RCC_OscConfig+0x172>
 800576a:	4b48      	ldr	r3, [pc, #288]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f023 021f 	bic.w	r2, r3, #31
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a1b      	ldr	r3, [r3, #32]
 8005776:	4945      	ldr	r1, [pc, #276]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005778:	4313      	orrs	r3, r2
 800577a:	60cb      	str	r3, [r1, #12]
 800577c:	e028      	b.n	80057d0 <HAL_RCC_OscConfig+0x1c4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005782:	2b00      	cmp	r3, #0
 8005784:	da0a      	bge.n	800579c <HAL_RCC_OscConfig+0x190>
 8005786:	4b41      	ldr	r3, [pc, #260]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005788:	68db      	ldr	r3, [r3, #12]
 800578a:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	015b      	lsls	r3, r3, #5
 8005794:	493d      	ldr	r1, [pc, #244]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005796:	4313      	orrs	r3, r2
 8005798:	60cb      	str	r3, [r1, #12]
 800579a:	e019      	b.n	80057d0 <HAL_RCC_OscConfig+0x1c4>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057a4:	d30a      	bcc.n	80057bc <HAL_RCC_OscConfig+0x1b0>
 80057a6:	4b39      	ldr	r3, [pc, #228]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80057a8:	68db      	ldr	r3, [r3, #12]
 80057aa:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6a1b      	ldr	r3, [r3, #32]
 80057b2:	029b      	lsls	r3, r3, #10
 80057b4:	4935      	ldr	r1, [pc, #212]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60cb      	str	r3, [r1, #12]
 80057ba:	e009      	b.n	80057d0 <HAL_RCC_OscConfig+0x1c4>
 80057bc:	4b33      	ldr	r3, [pc, #204]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	6a1b      	ldr	r3, [r3, #32]
 80057c8:	03db      	lsls	r3, r3, #15
 80057ca:	4930      	ldr	r1, [pc, #192]	; (800588c <HAL_RCC_OscConfig+0x280>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80057d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d10a      	bne.n	80057ec <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	4618      	mov	r0, r3
 80057dc:	f001 f97a 	bl	8006ad4 <RCC_SetFlashLatencyFromMSIRange>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d002      	beq.n	80057ec <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 80057e6:	2301      	movs	r3, #1
 80057e8:	f000 bde5 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 80057ec:	f001 f8e4 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80057f0:	4b27      	ldr	r3, [pc, #156]	; (8005890 <HAL_RCC_OscConfig+0x284>)
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	4618      	mov	r0, r3
 80057f6:	f7fd f93f 	bl	8002a78 <HAL_InitTick>
 80057fa:	4603      	mov	r3, r0
 80057fc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8005800:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005804:	2b00      	cmp	r3, #0
 8005806:	f000 808a 	beq.w	800591e <HAL_RCC_OscConfig+0x312>
        {
          return status;
 800580a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800580e:	f000 bdd2 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	69db      	ldr	r3, [r3, #28]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d066      	beq.n	80058e8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 800581a:	4b1c      	ldr	r3, [pc, #112]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a1b      	ldr	r2, [pc, #108]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005820:	f043 0301 	orr.w	r3, r3, #1
 8005824:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005826:	f7fd fb35 	bl	8002e94 <HAL_GetTick>
 800582a:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800582c:	e009      	b.n	8005842 <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800582e:	f7fd fb31 	bl	8002e94 <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d902      	bls.n	8005842 <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	f000 bdba 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8005842:	4b12      	ldr	r3, [pc, #72]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	f003 0304 	and.w	r3, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	d0ef      	beq.n	800582e <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800584e:	4b0f      	ldr	r3, [pc, #60]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	4a0e      	ldr	r2, [pc, #56]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005854:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005858:	6093      	str	r3, [r2, #8]
 800585a:	4b0c      	ldr	r3, [pc, #48]	; (800588c <HAL_RCC_OscConfig+0x280>)
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005866:	4909      	ldr	r1, [pc, #36]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005868:	4313      	orrs	r3, r2
 800586a:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005870:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8005874:	d30e      	bcc.n	8005894 <HAL_RCC_OscConfig+0x288>
 8005876:	4b05      	ldr	r3, [pc, #20]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	f023 021f 	bic.w	r2, r3, #31
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	6a1b      	ldr	r3, [r3, #32]
 8005882:	4902      	ldr	r1, [pc, #8]	; (800588c <HAL_RCC_OscConfig+0x280>)
 8005884:	4313      	orrs	r3, r2
 8005886:	60cb      	str	r3, [r1, #12]
 8005888:	e04a      	b.n	8005920 <HAL_RCC_OscConfig+0x314>
 800588a:	bf00      	nop
 800588c:	46020c00 	.word	0x46020c00
 8005890:	20000004 	.word	0x20000004
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005898:	2b00      	cmp	r3, #0
 800589a:	da0a      	bge.n	80058b2 <HAL_RCC_OscConfig+0x2a6>
 800589c:	4b98      	ldr	r3, [pc, #608]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800589e:	68db      	ldr	r3, [r3, #12]
 80058a0:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	6a1b      	ldr	r3, [r3, #32]
 80058a8:	015b      	lsls	r3, r3, #5
 80058aa:	4995      	ldr	r1, [pc, #596]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60cb      	str	r3, [r1, #12]
 80058b0:	e036      	b.n	8005920 <HAL_RCC_OscConfig+0x314>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058ba:	d30a      	bcc.n	80058d2 <HAL_RCC_OscConfig+0x2c6>
 80058bc:	4b90      	ldr	r3, [pc, #576]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	029b      	lsls	r3, r3, #10
 80058ca:	498d      	ldr	r1, [pc, #564]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60cb      	str	r3, [r1, #12]
 80058d0:	e026      	b.n	8005920 <HAL_RCC_OscConfig+0x314>
 80058d2:	4b8b      	ldr	r3, [pc, #556]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058d4:	68db      	ldr	r3, [r3, #12]
 80058d6:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6a1b      	ldr	r3, [r3, #32]
 80058de:	03db      	lsls	r3, r3, #15
 80058e0:	4987      	ldr	r1, [pc, #540]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	60cb      	str	r3, [r1, #12]
 80058e6:	e01b      	b.n	8005920 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 80058e8:	4b85      	ldr	r3, [pc, #532]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	4a84      	ldr	r2, [pc, #528]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80058ee:	f023 0301 	bic.w	r3, r3, #1
 80058f2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80058f4:	f7fd face 	bl	8002e94 <HAL_GetTick>
 80058f8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 80058fa:	e009      	b.n	8005910 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80058fc:	f7fd faca 	bl	8002e94 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d902      	bls.n	8005910 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	f000 bd53 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8005910:	4b7b      	ldr	r3, [pc, #492]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	f003 0304 	and.w	r3, r3, #4
 8005918:	2b00      	cmp	r3, #0
 800591a:	d1ef      	bne.n	80058fc <HAL_RCC_OscConfig+0x2f0>
 800591c:	e000      	b.n	8005920 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 800591e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	f003 0301 	and.w	r3, r3, #1
 8005928:	2b00      	cmp	r3, #0
 800592a:	f000 808b 	beq.w	8005a44 <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800592e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005930:	2b08      	cmp	r3, #8
 8005932:	d005      	beq.n	8005940 <HAL_RCC_OscConfig+0x334>
 8005934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005936:	2b0c      	cmp	r3, #12
 8005938:	d109      	bne.n	800594e <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800593a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800593c:	2b03      	cmp	r3, #3
 800593e:	d106      	bne.n	800594e <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d17d      	bne.n	8005a44 <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8005948:	2301      	movs	r3, #1
 800594a:	f000 bd34 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	685b      	ldr	r3, [r3, #4]
 8005952:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005956:	d106      	bne.n	8005966 <HAL_RCC_OscConfig+0x35a>
 8005958:	4b69      	ldr	r3, [pc, #420]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a68      	ldr	r2, [pc, #416]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800595e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005962:	6013      	str	r3, [r2, #0]
 8005964:	e041      	b.n	80059ea <HAL_RCC_OscConfig+0x3de>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800596e:	d112      	bne.n	8005996 <HAL_RCC_OscConfig+0x38a>
 8005970:	4b63      	ldr	r3, [pc, #396]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	4a62      	ldr	r2, [pc, #392]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005976:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800597a:	6013      	str	r3, [r2, #0]
 800597c:	4b60      	ldr	r3, [pc, #384]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	4a5f      	ldr	r2, [pc, #380]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005982:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8005986:	6013      	str	r3, [r2, #0]
 8005988:	4b5d      	ldr	r3, [pc, #372]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a5c      	ldr	r2, [pc, #368]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 800598e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005992:	6013      	str	r3, [r2, #0]
 8005994:	e029      	b.n	80059ea <HAL_RCC_OscConfig+0x3de>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	685b      	ldr	r3, [r3, #4]
 800599a:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 800599e:	d112      	bne.n	80059c6 <HAL_RCC_OscConfig+0x3ba>
 80059a0:	4b57      	ldr	r3, [pc, #348]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a56      	ldr	r2, [pc, #344]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80059aa:	6013      	str	r3, [r2, #0]
 80059ac:	4b54      	ldr	r3, [pc, #336]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a53      	ldr	r2, [pc, #332]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80059b6:	6013      	str	r3, [r2, #0]
 80059b8:	4b51      	ldr	r3, [pc, #324]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a50      	ldr	r2, [pc, #320]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80059c2:	6013      	str	r3, [r2, #0]
 80059c4:	e011      	b.n	80059ea <HAL_RCC_OscConfig+0x3de>
 80059c6:	4b4e      	ldr	r3, [pc, #312]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4a4d      	ldr	r2, [pc, #308]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80059d0:	6013      	str	r3, [r2, #0]
 80059d2:	4b4b      	ldr	r3, [pc, #300]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a4a      	ldr	r2, [pc, #296]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80059dc:	6013      	str	r3, [r2, #0]
 80059de:	4b48      	ldr	r3, [pc, #288]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	4a47      	ldr	r2, [pc, #284]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 80059e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80059e8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	685b      	ldr	r3, [r3, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d014      	beq.n	8005a1c <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 80059f2:	f7fd fa4f 	bl	8002e94 <HAL_GetTick>
 80059f6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80059f8:	e009      	b.n	8005a0e <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80059fa:	f7fd fa4b 	bl	8002e94 <HAL_GetTick>
 80059fe:	4602      	mov	r2, r0
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	1ad3      	subs	r3, r2, r3
 8005a04:	2b64      	cmp	r3, #100	; 0x64
 8005a06:	d902      	bls.n	8005a0e <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8005a08:	2303      	movs	r3, #3
 8005a0a:	f000 bcd4 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a0e:	4b3c      	ldr	r3, [pc, #240]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d0ef      	beq.n	80059fa <HAL_RCC_OscConfig+0x3ee>
 8005a1a:	e013      	b.n	8005a44 <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8005a1c:	f7fd fa3a 	bl	8002e94 <HAL_GetTick>
 8005a20:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a22:	e009      	b.n	8005a38 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005a24:	f7fd fa36 	bl	8002e94 <HAL_GetTick>
 8005a28:	4602      	mov	r2, r0
 8005a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a2c:	1ad3      	subs	r3, r2, r3
 8005a2e:	2b64      	cmp	r3, #100	; 0x64
 8005a30:	d902      	bls.n	8005a38 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8005a32:	2303      	movs	r3, #3
 8005a34:	f000 bcbf 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005a38:	4b31      	ldr	r3, [pc, #196]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d1ef      	bne.n	8005a24 <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	f003 0302 	and.w	r3, r3, #2
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d05f      	beq.n	8005b10 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8005a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a52:	2b04      	cmp	r3, #4
 8005a54:	d005      	beq.n	8005a62 <HAL_RCC_OscConfig+0x456>
 8005a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a58:	2b0c      	cmp	r3, #12
 8005a5a:	d114      	bne.n	8005a86 <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a5e:	2b02      	cmp	r3, #2
 8005a60:	d111      	bne.n	8005a86 <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d102      	bne.n	8005a70 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	f000 bca3 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005a70:	4b23      	ldr	r3, [pc, #140]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a72:	691b      	ldr	r3, [r3, #16]
 8005a74:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	691b      	ldr	r3, [r3, #16]
 8005a7c:	041b      	lsls	r3, r3, #16
 8005a7e:	4920      	ldr	r1, [pc, #128]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a80:	4313      	orrs	r3, r2
 8005a82:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8005a84:	e044      	b.n	8005b10 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d024      	beq.n	8005ad8 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8005a8e:	4b1c      	ldr	r3, [pc, #112]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a1b      	ldr	r2, [pc, #108]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005a94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a98:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005a9a:	f7fd f9fb 	bl	8002e94 <HAL_GetTick>
 8005a9e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005aa0:	e009      	b.n	8005ab6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aa2:	f7fd f9f7 	bl	8002e94 <HAL_GetTick>
 8005aa6:	4602      	mov	r2, r0
 8005aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	2b02      	cmp	r3, #2
 8005aae:	d902      	bls.n	8005ab6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	f000 bc80 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005ab6:	4b12      	ldr	r3, [pc, #72]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d0ef      	beq.n	8005aa2 <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8005ac2:	4b0f      	ldr	r3, [pc, #60]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005ac4:	691b      	ldr	r3, [r3, #16]
 8005ac6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	691b      	ldr	r3, [r3, #16]
 8005ace:	041b      	lsls	r3, r3, #16
 8005ad0:	490b      	ldr	r1, [pc, #44]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	610b      	str	r3, [r1, #16]
 8005ad6:	e01b      	b.n	8005b10 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8005ad8:	4b09      	ldr	r3, [pc, #36]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a08      	ldr	r2, [pc, #32]	; (8005b00 <HAL_RCC_OscConfig+0x4f4>)
 8005ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ae2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8005ae4:	f7fd f9d6 	bl	8002e94 <HAL_GetTick>
 8005ae8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005aea:	e00b      	b.n	8005b04 <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005aec:	f7fd f9d2 	bl	8002e94 <HAL_GetTick>
 8005af0:	4602      	mov	r2, r0
 8005af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	2b02      	cmp	r3, #2
 8005af8:	d904      	bls.n	8005b04 <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	f000 bc5b 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
 8005b00:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005b04:	4baf      	ldr	r3, [pc, #700]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d1ed      	bne.n	8005aec <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0308 	and.w	r3, r3, #8
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	f000 80c8 	beq.w	8005cae <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005b24:	4ba7      	ldr	r3, [pc, #668]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b2a:	f003 0304 	and.w	r3, r3, #4
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d111      	bne.n	8005b56 <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b32:	4ba4      	ldr	r3, [pc, #656]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005b34:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b38:	4aa2      	ldr	r2, [pc, #648]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005b3a:	f043 0304 	orr.w	r3, r3, #4
 8005b3e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005b42:	4ba0      	ldr	r3, [pc, #640]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005b44:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005b48:	f003 0304 	and.w	r3, r3, #4
 8005b4c:	617b      	str	r3, [r7, #20]
 8005b4e:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8005b50:	2301      	movs	r3, #1
 8005b52:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b56:	4b9c      	ldr	r3, [pc, #624]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b5a:	f003 0301 	and.w	r3, r3, #1
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d119      	bne.n	8005b96 <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005b62:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005b64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b66:	4a98      	ldr	r2, [pc, #608]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005b68:	f043 0301 	orr.w	r3, r3, #1
 8005b6c:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005b6e:	f7fd f991 	bl	8002e94 <HAL_GetTick>
 8005b72:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b74:	e009      	b.n	8005b8a <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b76:	f7fd f98d 	bl	8002e94 <HAL_GetTick>
 8005b7a:	4602      	mov	r2, r0
 8005b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b7e:	1ad3      	subs	r3, r2, r3
 8005b80:	2b02      	cmp	r3, #2
 8005b82:	d902      	bls.n	8005b8a <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8005b84:	2303      	movs	r3, #3
 8005b86:	f000 bc16 	b.w	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005b8a:	4b8f      	ldr	r3, [pc, #572]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d0ef      	beq.n	8005b76 <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	695b      	ldr	r3, [r3, #20]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d05f      	beq.n	8005c5e <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8005b9e:	4b89      	ldr	r3, [pc, #548]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005ba0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ba4:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	699a      	ldr	r2, [r3, #24]
 8005baa:	6a3b      	ldr	r3, [r7, #32]
 8005bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005bb0:	429a      	cmp	r2, r3
 8005bb2:	d037      	beq.n	8005c24 <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005bb4:	6a3b      	ldr	r3, [r7, #32]
 8005bb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8005bbe:	6a3b      	ldr	r3, [r7, #32]
 8005bc0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d101      	bne.n	8005bcc <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e3f4      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8005bcc:	6a3b      	ldr	r3, [r7, #32]
 8005bce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d01b      	beq.n	8005c0e <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8005bd6:	4b7b      	ldr	r3, [pc, #492]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005bd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005bdc:	4a79      	ldr	r2, [pc, #484]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005bde:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005be2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8005be6:	f7fd f955 	bl	8002e94 <HAL_GetTick>
 8005bea:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005bec:	e008      	b.n	8005c00 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005bee:	f7fd f951 	bl	8002e94 <HAL_GetTick>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	2b05      	cmp	r3, #5
 8005bfa:	d901      	bls.n	8005c00 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8005bfc:	2303      	movs	r3, #3
 8005bfe:	e3da      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c00:	4b70      	ldr	r3, [pc, #448]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c02:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c06:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1ef      	bne.n	8005bee <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8005c0e:	4b6d      	ldr	r3, [pc, #436]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c14:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	699b      	ldr	r3, [r3, #24]
 8005c1c:	4969      	ldr	r1, [pc, #420]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c1e:	4313      	orrs	r3, r2
 8005c20:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8005c24:	4b67      	ldr	r3, [pc, #412]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c26:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c2a:	4a66      	ldr	r2, [pc, #408]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c2c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005c30:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005c34:	f7fd f92e 	bl	8002e94 <HAL_GetTick>
 8005c38:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005c3a:	e008      	b.n	8005c4e <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c3c:	f7fd f92a 	bl	8002e94 <HAL_GetTick>
 8005c40:	4602      	mov	r2, r0
 8005c42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c44:	1ad3      	subs	r3, r2, r3
 8005c46:	2b05      	cmp	r3, #5
 8005c48:	d901      	bls.n	8005c4e <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8005c4a:	2303      	movs	r3, #3
 8005c4c:	e3b3      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8005c4e:	4b5d      	ldr	r3, [pc, #372]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d0ef      	beq.n	8005c3c <HAL_RCC_OscConfig+0x630>
 8005c5c:	e01b      	b.n	8005c96 <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8005c5e:	4b59      	ldr	r3, [pc, #356]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c64:	4a57      	ldr	r2, [pc, #348]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c66:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8005c6a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8005c6e:	f7fd f911 	bl	8002e94 <HAL_GetTick>
 8005c72:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c74:	e008      	b.n	8005c88 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c76:	f7fd f90d 	bl	8002e94 <HAL_GetTick>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	2b05      	cmp	r3, #5
 8005c82:	d901      	bls.n	8005c88 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8005c84:	2303      	movs	r3, #3
 8005c86:	e396      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8005c88:	4b4e      	ldr	r3, [pc, #312]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005c8a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005c8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d1ef      	bne.n	8005c76 <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005c96:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d107      	bne.n	8005cae <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c9e:	4b49      	ldr	r3, [pc, #292]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ca4:	4a47      	ldr	r2, [pc, #284]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005ca6:	f023 0304 	bic.w	r3, r3, #4
 8005caa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f003 0304 	and.w	r3, r3, #4
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	f000 8111 	beq.w	8005ede <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8005cbc:	2300      	movs	r3, #0
 8005cbe:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005cc2:	4b40      	ldr	r3, [pc, #256]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005cc4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cc8:	f003 0304 	and.w	r3, r3, #4
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d111      	bne.n	8005cf4 <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cd0:	4b3c      	ldr	r3, [pc, #240]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005cd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005cd6:	4a3b      	ldr	r2, [pc, #236]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005cd8:	f043 0304 	orr.w	r3, r3, #4
 8005cdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8005ce0:	4b38      	ldr	r3, [pc, #224]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ce6:	f003 0304 	and.w	r3, r3, #4
 8005cea:	613b      	str	r3, [r7, #16]
 8005cec:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005cf4:	4b34      	ldr	r3, [pc, #208]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cf8:	f003 0301 	and.w	r3, r3, #1
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d118      	bne.n	8005d32 <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8005d00:	4b31      	ldr	r3, [pc, #196]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005d02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d04:	4a30      	ldr	r2, [pc, #192]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005d06:	f043 0301 	orr.w	r3, r3, #1
 8005d0a:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005d0c:	f7fd f8c2 	bl	8002e94 <HAL_GetTick>
 8005d10:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d12:	e008      	b.n	8005d26 <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005d14:	f7fd f8be 	bl	8002e94 <HAL_GetTick>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d1c:	1ad3      	subs	r3, r2, r3
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d901      	bls.n	8005d26 <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8005d22:	2303      	movs	r3, #3
 8005d24:	e347      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8005d26:	4b28      	ldr	r3, [pc, #160]	; (8005dc8 <HAL_RCC_OscConfig+0x7bc>)
 8005d28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d2a:	f003 0301 	and.w	r3, r3, #1
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d0f0      	beq.n	8005d14 <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	f003 0301 	and.w	r3, r3, #1
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d01f      	beq.n	8005d7e <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	689b      	ldr	r3, [r3, #8]
 8005d42:	f003 0304 	and.w	r3, r3, #4
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d010      	beq.n	8005d6c <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d4a:	4b1e      	ldr	r3, [pc, #120]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d4c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d50:	4a1c      	ldr	r2, [pc, #112]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d52:	f043 0304 	orr.w	r3, r3, #4
 8005d56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d5a:	4b1a      	ldr	r3, [pc, #104]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d5c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d60:	4a18      	ldr	r2, [pc, #96]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d62:	f043 0301 	orr.w	r3, r3, #1
 8005d66:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d6a:	e018      	b.n	8005d9e <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d6c:	4b15      	ldr	r3, [pc, #84]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d6e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d72:	4a14      	ldr	r2, [pc, #80]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d74:	f043 0301 	orr.w	r3, r3, #1
 8005d78:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8005d7c:	e00f      	b.n	8005d9e <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8005d7e:	4b11      	ldr	r3, [pc, #68]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d80:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d84:	4a0f      	ldr	r2, [pc, #60]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d86:	f023 0301 	bic.w	r3, r3, #1
 8005d8a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8005d8e:	4b0d      	ldr	r3, [pc, #52]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d90:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005d94:	4a0b      	ldr	r2, [pc, #44]	; (8005dc4 <HAL_RCC_OscConfig+0x7b8>)
 8005d96:	f023 0304 	bic.w	r3, r3, #4
 8005d9a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d057      	beq.n	8005e56 <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8005da6:	f7fd f875 	bl	8002e94 <HAL_GetTick>
 8005daa:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dac:	e00e      	b.n	8005dcc <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005dae:	f7fd f871 	bl	8002e94 <HAL_GetTick>
 8005db2:	4602      	mov	r2, r0
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	1ad3      	subs	r3, r2, r3
 8005db8:	f241 3288 	movw	r2, #5000	; 0x1388
 8005dbc:	4293      	cmp	r3, r2
 8005dbe:	d905      	bls.n	8005dcc <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8005dc0:	2303      	movs	r3, #3
 8005dc2:	e2f8      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
 8005dc4:	46020c00 	.word	0x46020c00
 8005dc8:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dcc:	4b9c      	ldr	r3, [pc, #624]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005dce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dd2:	f003 0302 	and.w	r3, r3, #2
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d0e9      	beq.n	8005dae <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	689b      	ldr	r3, [r3, #8]
 8005dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005de2:	2b00      	cmp	r3, #0
 8005de4:	d01b      	beq.n	8005e1e <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005de6:	4b96      	ldr	r3, [pc, #600]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005de8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005dec:	4a94      	ldr	r2, [pc, #592]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005dee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005df2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005df6:	e00a      	b.n	8005e0e <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005df8:	f7fd f84c 	bl	8002e94 <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d901      	bls.n	8005e0e <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8005e0a:	2303      	movs	r3, #3
 8005e0c:	e2d3      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8005e0e:	4b8c      	ldr	r3, [pc, #560]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e14:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d0ed      	beq.n	8005df8 <HAL_RCC_OscConfig+0x7ec>
 8005e1c:	e053      	b.n	8005ec6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e1e:	4b88      	ldr	r3, [pc, #544]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e20:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e24:	4a86      	ldr	r2, [pc, #536]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e2a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e2e:	e00a      	b.n	8005e46 <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e30:	f7fd f830 	bl	8002e94 <HAL_GetTick>
 8005e34:	4602      	mov	r2, r0
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	1ad3      	subs	r3, r2, r3
 8005e3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d901      	bls.n	8005e46 <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8005e42:	2303      	movs	r3, #3
 8005e44:	e2b7      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005e46:	4b7e      	ldr	r3, [pc, #504]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d1ed      	bne.n	8005e30 <HAL_RCC_OscConfig+0x824>
 8005e54:	e037      	b.n	8005ec6 <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8005e56:	f7fd f81d 	bl	8002e94 <HAL_GetTick>
 8005e5a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e5c:	e00a      	b.n	8005e74 <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e5e:	f7fd f819 	bl	8002e94 <HAL_GetTick>
 8005e62:	4602      	mov	r2, r0
 8005e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e66:	1ad3      	subs	r3, r2, r3
 8005e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e6c:	4293      	cmp	r3, r2
 8005e6e:	d901      	bls.n	8005e74 <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8005e70:	2303      	movs	r3, #3
 8005e72:	e2a0      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005e74:	4b72      	ldr	r3, [pc, #456]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e76:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e7a:	f003 0302 	and.w	r3, r3, #2
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d1ed      	bne.n	8005e5e <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8005e82:	4b6f      	ldr	r3, [pc, #444]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	d01a      	beq.n	8005ec6 <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8005e90:	4b6b      	ldr	r3, [pc, #428]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e92:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005e96:	4a6a      	ldr	r2, [pc, #424]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005e98:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005e9c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005ea0:	e00a      	b.n	8005eb8 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ea2:	f7fc fff7 	bl	8002e94 <HAL_GetTick>
 8005ea6:	4602      	mov	r2, r0
 8005ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eaa:	1ad3      	subs	r3, r2, r3
 8005eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e27e      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8005eb8:	4b61      	ldr	r3, [pc, #388]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8005ebe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d1ed      	bne.n	8005ea2 <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005ec6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8005eca:	2b01      	cmp	r3, #1
 8005ecc:	d107      	bne.n	8005ede <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ece:	4b5c      	ldr	r3, [pc, #368]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005ed0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005ed4:	4a5a      	ldr	r2, [pc, #360]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005ed6:	f023 0304 	bic.w	r3, r3, #4
 8005eda:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d036      	beq.n	8005f58 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d019      	beq.n	8005f26 <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8005ef2:	4b53      	ldr	r3, [pc, #332]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a52      	ldr	r2, [pc, #328]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005ef8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005efc:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005efe:	f7fc ffc9 	bl	8002e94 <HAL_GetTick>
 8005f02:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f04:	e008      	b.n	8005f18 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f06:	f7fc ffc5 	bl	8002e94 <HAL_GetTick>
 8005f0a:	4602      	mov	r2, r0
 8005f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f0e:	1ad3      	subs	r3, r2, r3
 8005f10:	2b02      	cmp	r3, #2
 8005f12:	d901      	bls.n	8005f18 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8005f14:	2303      	movs	r3, #3
 8005f16:	e24e      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8005f18:	4b49      	ldr	r3, [pc, #292]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d0f0      	beq.n	8005f06 <HAL_RCC_OscConfig+0x8fa>
 8005f24:	e018      	b.n	8005f58 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8005f26:	4b46      	ldr	r3, [pc, #280]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a45      	ldr	r2, [pc, #276]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f2c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005f30:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005f32:	f7fc ffaf 	bl	8002e94 <HAL_GetTick>
 8005f36:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f38:	e008      	b.n	8005f4c <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005f3a:	f7fc ffab 	bl	8002e94 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d901      	bls.n	8005f4c <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e234      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8005f4c:	4b3c      	ldr	r3, [pc, #240]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f4e:	681b      	ldr	r3, [r3, #0]
 8005f50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d1f0      	bne.n	8005f3a <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d036      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d019      	beq.n	8005fa0 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8005f6c:	4b34      	ldr	r3, [pc, #208]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a33      	ldr	r2, [pc, #204]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f72:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005f76:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005f78:	f7fc ff8c 	bl	8002e94 <HAL_GetTick>
 8005f7c:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005f7e:	e008      	b.n	8005f92 <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005f80:	f7fc ff88 	bl	8002e94 <HAL_GetTick>
 8005f84:	4602      	mov	r2, r0
 8005f86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f88:	1ad3      	subs	r3, r2, r3
 8005f8a:	2b02      	cmp	r3, #2
 8005f8c:	d901      	bls.n	8005f92 <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8005f8e:	2303      	movs	r3, #3
 8005f90:	e211      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8005f92:	4b2b      	ldr	r3, [pc, #172]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d0f0      	beq.n	8005f80 <HAL_RCC_OscConfig+0x974>
 8005f9e:	e018      	b.n	8005fd2 <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8005fa0:	4b27      	ldr	r3, [pc, #156]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a26      	ldr	r2, [pc, #152]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005fa6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005faa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8005fac:	f7fc ff72 	bl	8002e94 <HAL_GetTick>
 8005fb0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8005fb4:	f7fc ff6e 	bl	8002e94 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e1f7      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8005fc6:	4b1e      	ldr	r3, [pc, #120]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d07f      	beq.n	80060de <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d062      	beq.n	80060ac <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 8005fe6:	4b16      	ldr	r3, [pc, #88]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005fe8:	689b      	ldr	r3, [r3, #8]
 8005fea:	4a15      	ldr	r2, [pc, #84]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005fec:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005ff0:	6093      	str	r3, [r2, #8]
 8005ff2:	4b13      	ldr	r3, [pc, #76]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ffe:	4910      	ldr	r1, [pc, #64]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8006000:	4313      	orrs	r3, r2
 8006002:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006008:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800600c:	d309      	bcc.n	8006022 <HAL_RCC_OscConfig+0xa16>
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 8006010:	68db      	ldr	r3, [r3, #12]
 8006012:	f023 021f 	bic.w	r2, r3, #31
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6a1b      	ldr	r3, [r3, #32]
 800601a:	4909      	ldr	r1, [pc, #36]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 800601c:	4313      	orrs	r3, r2
 800601e:	60cb      	str	r3, [r1, #12]
 8006020:	e02a      	b.n	8006078 <HAL_RCC_OscConfig+0xa6c>
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006026:	2b00      	cmp	r3, #0
 8006028:	da0c      	bge.n	8006044 <HAL_RCC_OscConfig+0xa38>
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a1b      	ldr	r3, [r3, #32]
 8006036:	015b      	lsls	r3, r3, #5
 8006038:	4901      	ldr	r1, [pc, #4]	; (8006040 <HAL_RCC_OscConfig+0xa34>)
 800603a:	4313      	orrs	r3, r2
 800603c:	60cb      	str	r3, [r1, #12]
 800603e:	e01b      	b.n	8006078 <HAL_RCC_OscConfig+0xa6c>
 8006040:	46020c00 	.word	0x46020c00
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006048:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800604c:	d30a      	bcc.n	8006064 <HAL_RCC_OscConfig+0xa58>
 800604e:	4ba1      	ldr	r3, [pc, #644]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006050:	68db      	ldr	r3, [r3, #12]
 8006052:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	029b      	lsls	r3, r3, #10
 800605c:	499d      	ldr	r1, [pc, #628]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800605e:	4313      	orrs	r3, r2
 8006060:	60cb      	str	r3, [r1, #12]
 8006062:	e009      	b.n	8006078 <HAL_RCC_OscConfig+0xa6c>
 8006064:	4b9b      	ldr	r3, [pc, #620]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	03db      	lsls	r3, r3, #15
 8006072:	4998      	ldr	r1, [pc, #608]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006074:	4313      	orrs	r3, r2
 8006076:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 8006078:	4b96      	ldr	r3, [pc, #600]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	4a95      	ldr	r2, [pc, #596]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800607e:	f043 0310 	orr.w	r3, r3, #16
 8006082:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006084:	f7fc ff06 	bl	8002e94 <HAL_GetTick>
 8006088:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800608a:	e008      	b.n	800609e <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 800608c:	f7fc ff02 	bl	8002e94 <HAL_GetTick>
 8006090:	4602      	mov	r2, r0
 8006092:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006094:	1ad3      	subs	r3, r2, r3
 8006096:	2b02      	cmp	r3, #2
 8006098:	d901      	bls.n	800609e <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 800609a:	2303      	movs	r3, #3
 800609c:	e18b      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 800609e:	4b8d      	ldr	r3, [pc, #564]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0320 	and.w	r3, r3, #32
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d0f0      	beq.n	800608c <HAL_RCC_OscConfig+0xa80>
 80060aa:	e018      	b.n	80060de <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80060ac:	4b89      	ldr	r3, [pc, #548]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a88      	ldr	r2, [pc, #544]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80060b2:	f023 0310 	bic.w	r3, r3, #16
 80060b6:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80060b8:	f7fc feec 	bl	8002e94 <HAL_GetTick>
 80060bc:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80060be:	e008      	b.n	80060d2 <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80060c0:	f7fc fee8 	bl	8002e94 <HAL_GetTick>
 80060c4:	4602      	mov	r2, r0
 80060c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060c8:	1ad3      	subs	r3, r2, r3
 80060ca:	2b02      	cmp	r3, #2
 80060cc:	d901      	bls.n	80060d2 <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80060ce:	2303      	movs	r3, #3
 80060d0:	e171      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80060d2:	4b80      	ldr	r3, [pc, #512]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	f003 0320 	and.w	r3, r3, #32
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1f0      	bne.n	80060c0 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	f000 8166 	beq.w	80063b4 <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 80060e8:	2300      	movs	r3, #0
 80060ea:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80060ee:	4b79      	ldr	r3, [pc, #484]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80060f0:	69db      	ldr	r3, [r3, #28]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b0c      	cmp	r3, #12
 80060f8:	f000 80f2 	beq.w	80062e0 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	2b02      	cmp	r3, #2
 8006102:	f040 80c5 	bne.w	8006290 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006106:	4b73      	ldr	r3, [pc, #460]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a72      	ldr	r2, [pc, #456]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800610c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006110:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006112:	f7fc febf 	bl	8002e94 <HAL_GetTick>
 8006116:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8006118:	e008      	b.n	800612c <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800611a:	f7fc febb 	bl	8002e94 <HAL_GetTick>
 800611e:	4602      	mov	r2, r0
 8006120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006122:	1ad3      	subs	r3, r2, r3
 8006124:	2b02      	cmp	r3, #2
 8006126:	d901      	bls.n	800612c <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8006128:	2303      	movs	r3, #3
 800612a:	e144      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 800612c:	4b69      	ldr	r3, [pc, #420]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1f0      	bne.n	800611a <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006138:	4b66      	ldr	r3, [pc, #408]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800613a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800613e:	f003 0304 	and.w	r3, r3, #4
 8006142:	2b00      	cmp	r3, #0
 8006144:	d111      	bne.n	800616a <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 8006146:	4b63      	ldr	r3, [pc, #396]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006148:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800614c:	4a61      	ldr	r2, [pc, #388]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800614e:	f043 0304 	orr.w	r3, r3, #4
 8006152:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006156:	4b5f      	ldr	r3, [pc, #380]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006158:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800615c:	f003 0304 	and.w	r3, r3, #4
 8006160:	60fb      	str	r3, [r7, #12]
 8006162:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 8006164:	2301      	movs	r3, #1
 8006166:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 800616a:	4b5b      	ldr	r3, [pc, #364]	; (80062d8 <HAL_RCC_OscConfig+0xccc>)
 800616c:	68db      	ldr	r3, [r3, #12]
 800616e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006172:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8006176:	d102      	bne.n	800617e <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 8006178:	2301      	movs	r3, #1
 800617a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800617e:	4b56      	ldr	r3, [pc, #344]	; (80062d8 <HAL_RCC_OscConfig+0xccc>)
 8006180:	68db      	ldr	r3, [r3, #12]
 8006182:	4a55      	ldr	r2, [pc, #340]	; (80062d8 <HAL_RCC_OscConfig+0xccc>)
 8006184:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006188:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 800618a:	4b52      	ldr	r3, [pc, #328]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800618c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800618e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006192:	f023 0303 	bic.w	r3, r3, #3
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800619a:	687a      	ldr	r2, [r7, #4]
 800619c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800619e:	3a01      	subs	r2, #1
 80061a0:	0212      	lsls	r2, r2, #8
 80061a2:	4311      	orrs	r1, r2
 80061a4:	687a      	ldr	r2, [r7, #4]
 80061a6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80061a8:	430a      	orrs	r2, r1
 80061aa:	494a      	ldr	r1, [pc, #296]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	628b      	str	r3, [r1, #40]	; 0x28
 80061b0:	4b48      	ldr	r3, [pc, #288]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80061b2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061b4:	4b49      	ldr	r3, [pc, #292]	; (80062dc <HAL_RCC_OscConfig+0xcd0>)
 80061b6:	4013      	ands	r3, r2
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80061bc:	3a01      	subs	r2, #1
 80061be:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061c6:	3a01      	subs	r2, #1
 80061c8:	0252      	lsls	r2, r2, #9
 80061ca:	b292      	uxth	r2, r2
 80061cc:	4311      	orrs	r1, r2
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80061d2:	3a01      	subs	r2, #1
 80061d4:	0412      	lsls	r2, r2, #16
 80061d6:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 80061da:	4311      	orrs	r1, r2
 80061dc:	687a      	ldr	r2, [r7, #4]
 80061de:	6d52      	ldr	r2, [r2, #84]	; 0x54
 80061e0:	3a01      	subs	r2, #1
 80061e2:	0612      	lsls	r2, r2, #24
 80061e4:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 80061e8:	430a      	orrs	r2, r1
 80061ea:	493a      	ldr	r1, [pc, #232]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80061ec:	4313      	orrs	r3, r2
 80061ee:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80061f0:	4b38      	ldr	r3, [pc, #224]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80061f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061f4:	4a37      	ldr	r2, [pc, #220]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80061f6:	f023 0310 	bic.w	r3, r3, #16
 80061fa:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006200:	4a34      	ldr	r2, [pc, #208]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006202:	00db      	lsls	r3, r3, #3
 8006204:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 8006206:	4b33      	ldr	r3, [pc, #204]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800620a:	4a32      	ldr	r2, [pc, #200]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800620c:	f043 0310 	orr.w	r3, r3, #16
 8006210:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 8006212:	4b30      	ldr	r3, [pc, #192]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006214:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006216:	f023 020c 	bic.w	r2, r3, #12
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800621e:	492d      	ldr	r1, [pc, #180]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006220:	4313      	orrs	r3, r2
 8006222:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 8006224:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8006228:	2b01      	cmp	r3, #1
 800622a:	d105      	bne.n	8006238 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800622c:	4b2a      	ldr	r3, [pc, #168]	; (80062d8 <HAL_RCC_OscConfig+0xccc>)
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	4a29      	ldr	r2, [pc, #164]	; (80062d8 <HAL_RCC_OscConfig+0xccc>)
 8006232:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006236:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8006238:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 800623c:	2b01      	cmp	r3, #1
 800623e:	d107      	bne.n	8006250 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8006240:	4b24      	ldr	r3, [pc, #144]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006242:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006246:	4a23      	ldr	r2, [pc, #140]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006248:	f023 0304 	bic.w	r3, r3, #4
 800624c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8006250:	4b20      	ldr	r3, [pc, #128]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006254:	4a1f      	ldr	r2, [pc, #124]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006256:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800625a:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 800625c:	4b1d      	ldr	r3, [pc, #116]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	4a1c      	ldr	r2, [pc, #112]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006266:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006268:	f7fc fe14 	bl	8002e94 <HAL_GetTick>
 800626c:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800626e:	e008      	b.n	8006282 <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006270:	f7fc fe10 	bl	8002e94 <HAL_GetTick>
 8006274:	4602      	mov	r2, r0
 8006276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006278:	1ad3      	subs	r3, r2, r3
 800627a:	2b02      	cmp	r3, #2
 800627c:	d901      	bls.n	8006282 <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 800627e:	2303      	movs	r3, #3
 8006280:	e099      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006282:	4b14      	ldr	r3, [pc, #80]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800628a:	2b00      	cmp	r3, #0
 800628c:	d0f0      	beq.n	8006270 <HAL_RCC_OscConfig+0xc64>
 800628e:	e091      	b.n	80063b4 <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 8006290:	4b10      	ldr	r3, [pc, #64]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 8006296:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800629a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800629c:	f7fc fdfa 	bl	8002e94 <HAL_GetTick>
 80062a0:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062a2:	e008      	b.n	80062b6 <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80062a4:	f7fc fdf6 	bl	8002e94 <HAL_GetTick>
 80062a8:	4602      	mov	r2, r0
 80062aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062ac:	1ad3      	subs	r3, r2, r3
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	d901      	bls.n	80062b6 <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80062b2:	2303      	movs	r3, #3
 80062b4:	e07f      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80062b6:	4b07      	ldr	r3, [pc, #28]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1f0      	bne.n	80062a4 <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80062c2:	4b04      	ldr	r3, [pc, #16]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	4a03      	ldr	r2, [pc, #12]	; (80062d4 <HAL_RCC_OscConfig+0xcc8>)
 80062c8:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80062cc:	f023 0303 	bic.w	r3, r3, #3
 80062d0:	6293      	str	r3, [r2, #40]	; 0x28
 80062d2:	e06f      	b.n	80063b4 <HAL_RCC_OscConfig+0xda8>
 80062d4:	46020c00 	.word	0x46020c00
 80062d8:	46020800 	.word	0x46020800
 80062dc:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 80062e0:	4b37      	ldr	r3, [pc, #220]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 80062e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062e4:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80062e6:	4b36      	ldr	r3, [pc, #216]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 80062e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80062ea:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d039      	beq.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 80062f4:	69fb      	ldr	r3, [r7, #28]
 80062f6:	f003 0203 	and.w	r2, r3, #3
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80062fe:	429a      	cmp	r2, r3
 8006300:	d132      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	0a1b      	lsrs	r3, r3, #8
 8006306:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800630e:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8006310:	429a      	cmp	r2, r3
 8006312:	d129      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8006314:	69fb      	ldr	r3, [r7, #28]
 8006316:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 800631e:	429a      	cmp	r2, r3
 8006320:	d122      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006322:	69bb      	ldr	r3, [r7, #24]
 8006324:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800632c:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800632e:	429a      	cmp	r2, r3
 8006330:	d11a      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 8006332:	69bb      	ldr	r3, [r7, #24]
 8006334:	0a5b      	lsrs	r3, r3, #9
 8006336:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800633e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8006340:	429a      	cmp	r2, r3
 8006342:	d111      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 8006344:	69bb      	ldr	r3, [r7, #24]
 8006346:	0c1b      	lsrs	r3, r3, #16
 8006348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006350:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8006352:	429a      	cmp	r2, r3
 8006354:	d108      	bne.n	8006368 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 8006356:	69bb      	ldr	r3, [r7, #24]
 8006358:	0e1b      	lsrs	r3, r3, #24
 800635a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006362:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8006364:	429a      	cmp	r2, r3
 8006366:	d001      	beq.n	800636c <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8006368:	2301      	movs	r3, #1
 800636a:	e024      	b.n	80063b6 <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800636c:	4b14      	ldr	r3, [pc, #80]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 800636e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006370:	08db      	lsrs	r3, r3, #3
 8006372:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 800637a:	429a      	cmp	r2, r3
 800637c:	d01a      	beq.n	80063b4 <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 800637e:	4b10      	ldr	r3, [pc, #64]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 8006380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006382:	4a0f      	ldr	r2, [pc, #60]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 8006384:	f023 0310 	bic.w	r3, r3, #16
 8006388:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800638a:	f7fc fd83 	bl	8002e94 <HAL_GetTick>
 800638e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 8006390:	bf00      	nop
 8006392:	f7fc fd7f 	bl	8002e94 <HAL_GetTick>
 8006396:	4602      	mov	r2, r0
 8006398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800639a:	4293      	cmp	r3, r2
 800639c:	d0f9      	beq.n	8006392 <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80063a2:	4a07      	ldr	r2, [pc, #28]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 80063a4:	00db      	lsls	r3, r3, #3
 80063a6:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80063a8:	4b05      	ldr	r3, [pc, #20]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 80063aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063ac:	4a04      	ldr	r2, [pc, #16]	; (80063c0 <HAL_RCC_OscConfig+0xdb4>)
 80063ae:	f043 0310 	orr.w	r3, r3, #16
 80063b2:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80063b4:	2300      	movs	r3, #0
}
 80063b6:	4618      	mov	r0, r3
 80063b8:	3738      	adds	r7, #56	; 0x38
 80063ba:	46bd      	mov	sp, r7
 80063bc:	bd80      	pop	{r7, pc}
 80063be:	bf00      	nop
 80063c0:	46020c00 	.word	0x46020c00

080063c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b086      	sub	sp, #24
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
 80063cc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d101      	bne.n	80063d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80063d4:	2301      	movs	r3, #1
 80063d6:	e1d9      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80063d8:	4b9b      	ldr	r3, [pc, #620]	; (8006648 <HAL_RCC_ClockConfig+0x284>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	f003 030f 	and.w	r3, r3, #15
 80063e0:	683a      	ldr	r2, [r7, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d910      	bls.n	8006408 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80063e6:	4b98      	ldr	r3, [pc, #608]	; (8006648 <HAL_RCC_ClockConfig+0x284>)
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f023 020f 	bic.w	r2, r3, #15
 80063ee:	4996      	ldr	r1, [pc, #600]	; (8006648 <HAL_RCC_ClockConfig+0x284>)
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063f6:	4b94      	ldr	r3, [pc, #592]	; (8006648 <HAL_RCC_ClockConfig+0x284>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	f003 030f 	and.w	r3, r3, #15
 80063fe:	683a      	ldr	r2, [r7, #0]
 8006400:	429a      	cmp	r2, r3
 8006402:	d001      	beq.n	8006408 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8006404:	2301      	movs	r3, #1
 8006406:	e1c1      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f003 0310 	and.w	r3, r3, #16
 8006410:	2b00      	cmp	r3, #0
 8006412:	d010      	beq.n	8006436 <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	695a      	ldr	r2, [r3, #20]
 8006418:	4b8c      	ldr	r3, [pc, #560]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 800641a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800641c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006420:	429a      	cmp	r2, r3
 8006422:	d908      	bls.n	8006436 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 8006424:	4b89      	ldr	r3, [pc, #548]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006428:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	695b      	ldr	r3, [r3, #20]
 8006430:	4986      	ldr	r1, [pc, #536]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006432:	4313      	orrs	r3, r2
 8006434:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	f003 0308 	and.w	r3, r3, #8
 800643e:	2b00      	cmp	r3, #0
 8006440:	d012      	beq.n	8006468 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691a      	ldr	r2, [r3, #16]
 8006446:	4b81      	ldr	r3, [pc, #516]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006448:	6a1b      	ldr	r3, [r3, #32]
 800644a:	091b      	lsrs	r3, r3, #4
 800644c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006450:	429a      	cmp	r2, r3
 8006452:	d909      	bls.n	8006468 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006454:	4b7d      	ldr	r3, [pc, #500]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006456:	6a1b      	ldr	r3, [r3, #32]
 8006458:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	691b      	ldr	r3, [r3, #16]
 8006460:	011b      	lsls	r3, r3, #4
 8006462:	497a      	ldr	r1, [pc, #488]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006464:	4313      	orrs	r3, r2
 8006466:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 0304 	and.w	r3, r3, #4
 8006470:	2b00      	cmp	r3, #0
 8006472:	d010      	beq.n	8006496 <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	68da      	ldr	r2, [r3, #12]
 8006478:	4b74      	ldr	r3, [pc, #464]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 800647a:	6a1b      	ldr	r3, [r3, #32]
 800647c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006480:	429a      	cmp	r2, r3
 8006482:	d908      	bls.n	8006496 <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8006484:	4b71      	ldr	r3, [pc, #452]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006486:	6a1b      	ldr	r3, [r3, #32]
 8006488:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	68db      	ldr	r3, [r3, #12]
 8006490:	496e      	ldr	r1, [pc, #440]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006492:	4313      	orrs	r3, r2
 8006494:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	f003 0302 	and.w	r3, r3, #2
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d010      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	689a      	ldr	r2, [r3, #8]
 80064a6:	4b69      	ldr	r3, [pc, #420]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	f003 030f 	and.w	r3, r3, #15
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d908      	bls.n	80064c4 <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80064b2:	4b66      	ldr	r3, [pc, #408]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064b4:	6a1b      	ldr	r3, [r3, #32]
 80064b6:	f023 020f 	bic.w	r2, r3, #15
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	689b      	ldr	r3, [r3, #8]
 80064be:	4963      	ldr	r1, [pc, #396]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064c0:	4313      	orrs	r3, r2
 80064c2:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0301 	and.w	r3, r3, #1
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	f000 80d2 	beq.w	8006676 <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80064d2:	2300      	movs	r3, #0
 80064d4:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	685b      	ldr	r3, [r3, #4]
 80064da:	2b03      	cmp	r3, #3
 80064dc:	d143      	bne.n	8006566 <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80064de:	4b5b      	ldr	r3, [pc, #364]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064e4:	f003 0304 	and.w	r3, r3, #4
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d110      	bne.n	800650e <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80064ec:	4b57      	ldr	r3, [pc, #348]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80064f2:	4a56      	ldr	r2, [pc, #344]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064f4:	f043 0304 	orr.w	r3, r3, #4
 80064f8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80064fc:	4b53      	ldr	r3, [pc, #332]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80064fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	60bb      	str	r3, [r7, #8]
 8006508:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 800650a:	2301      	movs	r3, #1
 800650c:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 800650e:	f7fc fcc1 	bl	8002e94 <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 8006514:	4b4e      	ldr	r3, [pc, #312]	; (8006650 <HAL_RCC_ClockConfig+0x28c>)
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d00f      	beq.n	8006540 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006520:	e008      	b.n	8006534 <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 8006522:	f7fc fcb7 	bl	8002e94 <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	693b      	ldr	r3, [r7, #16]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	2b02      	cmp	r3, #2
 800652e:	d901      	bls.n	8006534 <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8006530:	2303      	movs	r3, #3
 8006532:	e12b      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8006534:	4b46      	ldr	r3, [pc, #280]	; (8006650 <HAL_RCC_ClockConfig+0x28c>)
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800653c:	2b00      	cmp	r3, #0
 800653e:	d0f0      	beq.n	8006522 <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006540:	7dfb      	ldrb	r3, [r7, #23]
 8006542:	2b01      	cmp	r3, #1
 8006544:	d107      	bne.n	8006556 <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006546:	4b41      	ldr	r3, [pc, #260]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006548:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800654c:	4a3f      	ldr	r2, [pc, #252]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 800654e:	f023 0304 	bic.w	r3, r3, #4
 8006552:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8006556:	4b3d      	ldr	r3, [pc, #244]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800655e:	2b00      	cmp	r3, #0
 8006560:	d121      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 8006562:	2301      	movs	r3, #1
 8006564:	e112      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	685b      	ldr	r3, [r3, #4]
 800656a:	2b02      	cmp	r3, #2
 800656c:	d107      	bne.n	800657e <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800656e:	4b37      	ldr	r3, [pc, #220]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006576:	2b00      	cmp	r3, #0
 8006578:	d115      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	e106      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d107      	bne.n	8006596 <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006586:	4b31      	ldr	r3, [pc, #196]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	f003 0304 	and.w	r3, r3, #4
 800658e:	2b00      	cmp	r3, #0
 8006590:	d109      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 8006592:	2301      	movs	r3, #1
 8006594:	e0fa      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006596:	4b2d      	ldr	r3, [pc, #180]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d101      	bne.n	80065a6 <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80065a2:	2301      	movs	r3, #1
 80065a4:	e0f2      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80065a6:	4b29      	ldr	r3, [pc, #164]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80065a8:	69db      	ldr	r3, [r3, #28]
 80065aa:	f023 0203 	bic.w	r2, r3, #3
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	4926      	ldr	r1, [pc, #152]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80065b4:	4313      	orrs	r3, r2
 80065b6:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80065b8:	f7fc fc6c 	bl	8002e94 <HAL_GetTick>
 80065bc:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	685b      	ldr	r3, [r3, #4]
 80065c2:	2b03      	cmp	r3, #3
 80065c4:	d112      	bne.n	80065ec <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065c6:	e00a      	b.n	80065de <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065c8:	f7fc fc64 	bl	8002e94 <HAL_GetTick>
 80065cc:	4602      	mov	r2, r0
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d901      	bls.n	80065de <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 80065da:	2303      	movs	r3, #3
 80065dc:	e0d6      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80065de:	4b1b      	ldr	r3, [pc, #108]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	f003 030c 	and.w	r3, r3, #12
 80065e6:	2b0c      	cmp	r3, #12
 80065e8:	d1ee      	bne.n	80065c8 <HAL_RCC_ClockConfig+0x204>
 80065ea:	e044      	b.n	8006676 <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	2b02      	cmp	r3, #2
 80065f2:	d112      	bne.n	800661a <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80065f4:	e00a      	b.n	800660c <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80065f6:	f7fc fc4d 	bl	8002e94 <HAL_GetTick>
 80065fa:	4602      	mov	r2, r0
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	1ad3      	subs	r3, r2, r3
 8006600:	f241 3288 	movw	r2, #5000	; 0x1388
 8006604:	4293      	cmp	r3, r2
 8006606:	d901      	bls.n	800660c <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006608:	2303      	movs	r3, #3
 800660a:	e0bf      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800660c:	4b0f      	ldr	r3, [pc, #60]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 800660e:	69db      	ldr	r3, [r3, #28]
 8006610:	f003 030c 	and.w	r3, r3, #12
 8006614:	2b08      	cmp	r3, #8
 8006616:	d1ee      	bne.n	80065f6 <HAL_RCC_ClockConfig+0x232>
 8006618:	e02d      	b.n	8006676 <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	685b      	ldr	r3, [r3, #4]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d123      	bne.n	800666a <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8006622:	e00a      	b.n	800663a <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006624:	f7fc fc36 	bl	8002e94 <HAL_GetTick>
 8006628:	4602      	mov	r2, r0
 800662a:	693b      	ldr	r3, [r7, #16]
 800662c:	1ad3      	subs	r3, r2, r3
 800662e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006632:	4293      	cmp	r3, r2
 8006634:	d901      	bls.n	800663a <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 8006636:	2303      	movs	r3, #3
 8006638:	e0a8      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800663a:	4b04      	ldr	r3, [pc, #16]	; (800664c <HAL_RCC_ClockConfig+0x288>)
 800663c:	69db      	ldr	r3, [r3, #28]
 800663e:	f003 030c 	and.w	r3, r3, #12
 8006642:	2b00      	cmp	r3, #0
 8006644:	d1ee      	bne.n	8006624 <HAL_RCC_ClockConfig+0x260>
 8006646:	e016      	b.n	8006676 <HAL_RCC_ClockConfig+0x2b2>
 8006648:	40022000 	.word	0x40022000
 800664c:	46020c00 	.word	0x46020c00
 8006650:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006654:	f7fc fc1e 	bl	8002e94 <HAL_GetTick>
 8006658:	4602      	mov	r2, r0
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	1ad3      	subs	r3, r2, r3
 800665e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006662:	4293      	cmp	r3, r2
 8006664:	d901      	bls.n	800666a <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 8006666:	2303      	movs	r3, #3
 8006668:	e090      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800666a:	4b4a      	ldr	r3, [pc, #296]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 800666c:	69db      	ldr	r3, [r3, #28]
 800666e:	f003 030c 	and.w	r3, r3, #12
 8006672:	2b04      	cmp	r3, #4
 8006674:	d1ee      	bne.n	8006654 <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f003 0302 	and.w	r3, r3, #2
 800667e:	2b00      	cmp	r3, #0
 8006680:	d010      	beq.n	80066a4 <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	689a      	ldr	r2, [r3, #8]
 8006686:	4b43      	ldr	r3, [pc, #268]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006688:	6a1b      	ldr	r3, [r3, #32]
 800668a:	f003 030f 	and.w	r3, r3, #15
 800668e:	429a      	cmp	r2, r3
 8006690:	d208      	bcs.n	80066a4 <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 8006692:	4b40      	ldr	r3, [pc, #256]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006694:	6a1b      	ldr	r3, [r3, #32]
 8006696:	f023 020f 	bic.w	r2, r3, #15
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	493d      	ldr	r1, [pc, #244]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 80066a0:	4313      	orrs	r3, r2
 80066a2:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066a4:	4b3c      	ldr	r3, [pc, #240]	; (8006798 <HAL_RCC_ClockConfig+0x3d4>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 030f 	and.w	r3, r3, #15
 80066ac:	683a      	ldr	r2, [r7, #0]
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d210      	bcs.n	80066d4 <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b2:	4b39      	ldr	r3, [pc, #228]	; (8006798 <HAL_RCC_ClockConfig+0x3d4>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	f023 020f 	bic.w	r2, r3, #15
 80066ba:	4937      	ldr	r1, [pc, #220]	; (8006798 <HAL_RCC_ClockConfig+0x3d4>)
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	4313      	orrs	r3, r2
 80066c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80066c2:	4b35      	ldr	r3, [pc, #212]	; (8006798 <HAL_RCC_ClockConfig+0x3d4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	f003 030f 	and.w	r3, r3, #15
 80066ca:	683a      	ldr	r2, [r7, #0]
 80066cc:	429a      	cmp	r2, r3
 80066ce:	d001      	beq.n	80066d4 <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80066d0:	2301      	movs	r3, #1
 80066d2:	e05b      	b.n	800678c <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	f003 0304 	and.w	r3, r3, #4
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d010      	beq.n	8006702 <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	68da      	ldr	r2, [r3, #12]
 80066e4:	4b2b      	ldr	r3, [pc, #172]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 80066e6:	6a1b      	ldr	r3, [r3, #32]
 80066e8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80066ec:	429a      	cmp	r2, r3
 80066ee:	d208      	bcs.n	8006702 <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80066f0:	4b28      	ldr	r3, [pc, #160]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 80066f2:	6a1b      	ldr	r3, [r3, #32]
 80066f4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	68db      	ldr	r3, [r3, #12]
 80066fc:	4925      	ldr	r1, [pc, #148]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 80066fe:	4313      	orrs	r3, r2
 8006700:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0308 	and.w	r3, r3, #8
 800670a:	2b00      	cmp	r3, #0
 800670c:	d012      	beq.n	8006734 <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	691a      	ldr	r2, [r3, #16]
 8006712:	4b20      	ldr	r3, [pc, #128]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	091b      	lsrs	r3, r3, #4
 8006718:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800671c:	429a      	cmp	r2, r3
 800671e:	d209      	bcs.n	8006734 <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8006720:	4b1c      	ldr	r3, [pc, #112]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006722:	6a1b      	ldr	r3, [r3, #32]
 8006724:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	691b      	ldr	r3, [r3, #16]
 800672c:	011b      	lsls	r3, r3, #4
 800672e:	4919      	ldr	r1, [pc, #100]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006730:	4313      	orrs	r3, r2
 8006732:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b00      	cmp	r3, #0
 800673e:	d010      	beq.n	8006762 <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	695a      	ldr	r2, [r3, #20]
 8006744:	4b13      	ldr	r3, [pc, #76]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006748:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800674c:	429a      	cmp	r2, r3
 800674e:	d208      	bcs.n	8006762 <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8006750:	4b10      	ldr	r3, [pc, #64]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 8006752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006754:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	490d      	ldr	r1, [pc, #52]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 800675e:	4313      	orrs	r3, r2
 8006760:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8006762:	f000 f821 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8006766:	4602      	mov	r2, r0
 8006768:	4b0a      	ldr	r3, [pc, #40]	; (8006794 <HAL_RCC_ClockConfig+0x3d0>)
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	f003 030f 	and.w	r3, r3, #15
 8006770:	490a      	ldr	r1, [pc, #40]	; (800679c <HAL_RCC_ClockConfig+0x3d8>)
 8006772:	5ccb      	ldrb	r3, [r1, r3]
 8006774:	fa22 f303 	lsr.w	r3, r2, r3
 8006778:	4a09      	ldr	r2, [pc, #36]	; (80067a0 <HAL_RCC_ClockConfig+0x3dc>)
 800677a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800677c:	4b09      	ldr	r3, [pc, #36]	; (80067a4 <HAL_RCC_ClockConfig+0x3e0>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4618      	mov	r0, r3
 8006782:	f7fc f979 	bl	8002a78 <HAL_InitTick>
 8006786:	4603      	mov	r3, r0
 8006788:	73fb      	strb	r3, [r7, #15]

  return status;
 800678a:	7bfb      	ldrb	r3, [r7, #15]
}
 800678c:	4618      	mov	r0, r3
 800678e:	3718      	adds	r7, #24
 8006790:	46bd      	mov	sp, r7
 8006792:	bd80      	pop	{r7, pc}
 8006794:	46020c00 	.word	0x46020c00
 8006798:	40022000 	.word	0x40022000
 800679c:	0800fa64 	.word	0x0800fa64
 80067a0:	20000000 	.word	0x20000000
 80067a4:	20000004 	.word	0x20000004

080067a8 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b08b      	sub	sp, #44	; 0x2c
 80067ac:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80067ae:	2300      	movs	r3, #0
 80067b0:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80067b2:	2300      	movs	r3, #0
 80067b4:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067b6:	4b7b      	ldr	r3, [pc, #492]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80067b8:	69db      	ldr	r3, [r3, #28]
 80067ba:	f003 030c 	and.w	r3, r3, #12
 80067be:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067c0:	4b78      	ldr	r3, [pc, #480]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80067c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067c4:	f003 0303 	and.w	r3, r3, #3
 80067c8:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80067ca:	69bb      	ldr	r3, [r7, #24]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d005      	beq.n	80067dc <HAL_RCC_GetSysClockFreq+0x34>
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	2b0c      	cmp	r3, #12
 80067d4:	d121      	bne.n	800681a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d11e      	bne.n	800681a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 80067dc:	4b71      	ldr	r3, [pc, #452]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80067de:	689b      	ldr	r3, [r3, #8]
 80067e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d107      	bne.n	80067f8 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 80067e8:	4b6e      	ldr	r3, [pc, #440]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80067ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80067ee:	0b1b      	lsrs	r3, r3, #12
 80067f0:	f003 030f 	and.w	r3, r3, #15
 80067f4:	627b      	str	r3, [r7, #36]	; 0x24
 80067f6:	e005      	b.n	8006804 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 80067f8:	4b6a      	ldr	r3, [pc, #424]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80067fa:	689b      	ldr	r3, [r3, #8]
 80067fc:	0f1b      	lsrs	r3, r3, #28
 80067fe:	f003 030f 	and.w	r3, r3, #15
 8006802:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8006804:	4a68      	ldr	r2, [pc, #416]	; (80069a8 <HAL_RCC_GetSysClockFreq+0x200>)
 8006806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006808:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800680c:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d110      	bne.n	8006836 <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8006814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006816:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8006818:	e00d      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800681a:	4b62      	ldr	r3, [pc, #392]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800681c:	69db      	ldr	r3, [r3, #28]
 800681e:	f003 030c 	and.w	r3, r3, #12
 8006822:	2b04      	cmp	r3, #4
 8006824:	d102      	bne.n	800682c <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8006826:	4b61      	ldr	r3, [pc, #388]	; (80069ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006828:	623b      	str	r3, [r7, #32]
 800682a:	e004      	b.n	8006836 <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800682c:	69bb      	ldr	r3, [r7, #24]
 800682e:	2b08      	cmp	r3, #8
 8006830:	d101      	bne.n	8006836 <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006832:	4b5e      	ldr	r3, [pc, #376]	; (80069ac <HAL_RCC_GetSysClockFreq+0x204>)
 8006834:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006836:	69bb      	ldr	r3, [r7, #24]
 8006838:	2b0c      	cmp	r3, #12
 800683a:	f040 80ac 	bne.w	8006996 <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800683e:	4b59      	ldr	r3, [pc, #356]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	f003 0303 	and.w	r3, r3, #3
 8006846:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8006848:	4b56      	ldr	r3, [pc, #344]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 800684a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684c:	0a1b      	lsrs	r3, r3, #8
 800684e:	f003 030f 	and.w	r3, r3, #15
 8006852:	3301      	adds	r3, #1
 8006854:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 8006856:	4b53      	ldr	r3, [pc, #332]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800685a:	091b      	lsrs	r3, r3, #4
 800685c:	f003 0301 	and.w	r3, r3, #1
 8006860:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8006862:	4b50      	ldr	r3, [pc, #320]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006864:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006866:	08db      	lsrs	r3, r3, #3
 8006868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800686c:	68ba      	ldr	r2, [r7, #8]
 800686e:	fb02 f303 	mul.w	r3, r2, r3
 8006872:	ee07 3a90 	vmov	s15, r3
 8006876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800687a:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	2b00      	cmp	r3, #0
 8006882:	f000 8086 	beq.w	8006992 <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d003      	beq.n	8006894 <HAL_RCC_GetSysClockFreq+0xec>
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	2b03      	cmp	r3, #3
 8006890:	d022      	beq.n	80068d8 <HAL_RCC_GetSysClockFreq+0x130>
 8006892:	e043      	b.n	800691c <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	ee07 3a90 	vmov	s15, r3
 800689a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800689e:	eddf 6a44 	vldr	s13, [pc, #272]	; 80069b0 <HAL_RCC_GetSysClockFreq+0x208>
 80068a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068a6:	4b3f      	ldr	r3, [pc, #252]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80068a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068ae:	ee07 3a90 	vmov	s15, r3
 80068b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80068b6:	ed97 6a01 	vldr	s12, [r7, #4]
 80068ba:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80069b4 <HAL_RCC_GetSysClockFreq+0x20c>
 80068be:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80068c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80068ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80068d2:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80068d6:	e046      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	ee07 3a90 	vmov	s15, r3
 80068de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068e2:	eddf 6a33 	vldr	s13, [pc, #204]	; 80069b0 <HAL_RCC_GetSysClockFreq+0x208>
 80068e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 80068ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80068f2:	ee07 3a90 	vmov	s15, r3
 80068f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80068fa:	ed97 6a01 	vldr	s12, [r7, #4]
 80068fe:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80069b4 <HAL_RCC_GetSysClockFreq+0x20c>
 8006902:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006906:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800690a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800690e:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006916:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800691a:	e024      	b.n	8006966 <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800691c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800691e:	ee07 3a90 	vmov	s15, r3
 8006922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	ee07 3a90 	vmov	s15, r3
 800692c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006934:	4b1b      	ldr	r3, [pc, #108]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006936:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006938:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800693c:	ee07 3a90 	vmov	s15, r3
 8006940:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006944:	ed97 6a01 	vldr	s12, [r7, #4]
 8006948:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80069b4 <HAL_RCC_GetSysClockFreq+0x20c>
 800694c:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8006950:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8006954:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006958:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800695c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006960:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8006964:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 8006966:	4b0f      	ldr	r3, [pc, #60]	; (80069a4 <HAL_RCC_GetSysClockFreq+0x1fc>)
 8006968:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800696a:	0e1b      	lsrs	r3, r3, #24
 800696c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006970:	3301      	adds	r3, #1
 8006972:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	ee07 3a90 	vmov	s15, r3
 800697a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800697e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006982:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006986:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800698a:	ee17 3a90 	vmov	r3, s15
 800698e:	623b      	str	r3, [r7, #32]
 8006990:	e001      	b.n	8006996 <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 8006992:	2300      	movs	r3, #0
 8006994:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 8006996:	6a3b      	ldr	r3, [r7, #32]
}
 8006998:	4618      	mov	r0, r3
 800699a:	372c      	adds	r7, #44	; 0x2c
 800699c:	46bd      	mov	sp, r7
 800699e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a2:	4770      	bx	lr
 80069a4:	46020c00 	.word	0x46020c00
 80069a8:	0800fa7c 	.word	0x0800fa7c
 80069ac:	00f42400 	.word	0x00f42400
 80069b0:	4b742400 	.word	0x4b742400
 80069b4:	46000000 	.word	0x46000000

080069b8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80069bc:	f7ff fef4 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 80069c0:	4602      	mov	r2, r0
 80069c2:	4b07      	ldr	r3, [pc, #28]	; (80069e0 <HAL_RCC_GetHCLKFreq+0x28>)
 80069c4:	6a1b      	ldr	r3, [r3, #32]
 80069c6:	f003 030f 	and.w	r3, r3, #15
 80069ca:	4906      	ldr	r1, [pc, #24]	; (80069e4 <HAL_RCC_GetHCLKFreq+0x2c>)
 80069cc:	5ccb      	ldrb	r3, [r1, r3]
 80069ce:	fa22 f303 	lsr.w	r3, r2, r3
 80069d2:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80069d4:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80069d6:	4b04      	ldr	r3, [pc, #16]	; (80069e8 <HAL_RCC_GetHCLKFreq+0x30>)
 80069d8:	681b      	ldr	r3, [r3, #0]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	bd80      	pop	{r7, pc}
 80069de:	bf00      	nop
 80069e0:	46020c00 	.word	0x46020c00
 80069e4:	0800fa64 	.word	0x0800fa64
 80069e8:	20000000 	.word	0x20000000

080069ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 80069f0:	f7ff ffe2 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80069f4:	4602      	mov	r2, r0
 80069f6:	4b05      	ldr	r3, [pc, #20]	; (8006a0c <HAL_RCC_GetPCLK1Freq+0x20>)
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	091b      	lsrs	r3, r3, #4
 80069fc:	f003 0307 	and.w	r3, r3, #7
 8006a00:	4903      	ldr	r1, [pc, #12]	; (8006a10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006a02:	5ccb      	ldrb	r3, [r1, r3]
 8006a04:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	46020c00 	.word	0x46020c00
 8006a10:	0800fa74 	.word	0x0800fa74

08006a14 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8006a18:	f7ff ffce 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a1c:	4602      	mov	r2, r0
 8006a1e:	4b05      	ldr	r3, [pc, #20]	; (8006a34 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	0a1b      	lsrs	r3, r3, #8
 8006a24:	f003 0307 	and.w	r3, r3, #7
 8006a28:	4903      	ldr	r1, [pc, #12]	; (8006a38 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006a2a:	5ccb      	ldrb	r3, [r1, r3]
 8006a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a30:	4618      	mov	r0, r3
 8006a32:	bd80      	pop	{r7, pc}
 8006a34:	46020c00 	.word	0x46020c00
 8006a38:	0800fa74 	.word	0x0800fa74

08006a3c <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8006a3c:	b580      	push	{r7, lr}
 8006a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8006a40:	f7ff ffba 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8006a44:	4602      	mov	r2, r0
 8006a46:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_RCC_GetPCLK3Freq+0x20>)
 8006a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a4a:	091b      	lsrs	r3, r3, #4
 8006a4c:	f003 0307 	and.w	r3, r3, #7
 8006a50:	4903      	ldr	r1, [pc, #12]	; (8006a60 <HAL_RCC_GetPCLK3Freq+0x24>)
 8006a52:	5ccb      	ldrb	r3, [r1, r3]
 8006a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a58:	4618      	mov	r0, r3
 8006a5a:	bd80      	pop	{r7, pc}
 8006a5c:	46020c00 	.word	0x46020c00
 8006a60:	0800fa74 	.word	0x0800fa74

08006a64 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a64:	b480      	push	{r7}
 8006a66:	b083      	sub	sp, #12
 8006a68:	af00      	add	r7, sp, #0
 8006a6a:	6078      	str	r0, [r7, #4]
 8006a6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	221f      	movs	r2, #31
 8006a72:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8006a74:	4b15      	ldr	r3, [pc, #84]	; (8006acc <HAL_RCC_GetClockConfig+0x68>)
 8006a76:	69db      	ldr	r3, [r3, #28]
 8006a78:	f003 0203 	and.w	r2, r3, #3
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8006a80:	4b12      	ldr	r3, [pc, #72]	; (8006acc <HAL_RCC_GetClockConfig+0x68>)
 8006a82:	6a1b      	ldr	r3, [r3, #32]
 8006a84:	f003 020f 	and.w	r2, r3, #15
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8006a8c:	4b0f      	ldr	r3, [pc, #60]	; (8006acc <HAL_RCC_GetClockConfig+0x68>)
 8006a8e:	6a1b      	ldr	r3, [r3, #32]
 8006a90:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8006a98:	4b0c      	ldr	r3, [pc, #48]	; (8006acc <HAL_RCC_GetClockConfig+0x68>)
 8006a9a:	6a1b      	ldr	r3, [r3, #32]
 8006a9c:	091b      	lsrs	r3, r3, #4
 8006a9e:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8006aa6:	4b09      	ldr	r3, [pc, #36]	; (8006acc <HAL_RCC_GetClockConfig+0x68>)
 8006aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aaa:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006ab2:	4b07      	ldr	r3, [pc, #28]	; (8006ad0 <HAL_RCC_GetClockConfig+0x6c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	f003 020f 	and.w	r2, r3, #15
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	601a      	str	r2, [r3, #0]
}
 8006abe:	bf00      	nop
 8006ac0:	370c      	adds	r7, #12
 8006ac2:	46bd      	mov	sp, r7
 8006ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac8:	4770      	bx	lr
 8006aca:	bf00      	nop
 8006acc:	46020c00 	.word	0x46020c00
 8006ad0:	40022000 	.word	0x40022000

08006ad4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8006ad4:	b580      	push	{r7, lr}
 8006ad6:	b086      	sub	sp, #24
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006adc:	4b3e      	ldr	r3, [pc, #248]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006ade:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ae2:	f003 0304 	and.w	r3, r3, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d003      	beq.n	8006af2 <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8006aea:	f7fe fd81 	bl	80055f0 <HAL_PWREx_GetVoltageRange>
 8006aee:	6178      	str	r0, [r7, #20]
 8006af0:	e019      	b.n	8006b26 <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8006af2:	4b39      	ldr	r3, [pc, #228]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006af4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006af8:	4a37      	ldr	r2, [pc, #220]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006afa:	f043 0304 	orr.w	r3, r3, #4
 8006afe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b02:	4b35      	ldr	r3, [pc, #212]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006b04:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b08:	f003 0304 	and.w	r3, r3, #4
 8006b0c:	60fb      	str	r3, [r7, #12]
 8006b0e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006b10:	f7fe fd6e 	bl	80055f0 <HAL_PWREx_GetVoltageRange>
 8006b14:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8006b16:	4b30      	ldr	r3, [pc, #192]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b1c:	4a2e      	ldr	r2, [pc, #184]	; (8006bd8 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8006b1e:	f023 0304 	bic.w	r3, r3, #4
 8006b22:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8006b26:	697b      	ldr	r3, [r7, #20]
 8006b28:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006b2c:	d003      	beq.n	8006b36 <RCC_SetFlashLatencyFromMSIRange+0x62>
 8006b2e:	697b      	ldr	r3, [r7, #20]
 8006b30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006b34:	d109      	bne.n	8006b4a <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b3c:	d202      	bcs.n	8006b44 <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8006b3e:	2301      	movs	r3, #1
 8006b40:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006b42:	e033      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8006b44:	2300      	movs	r3, #0
 8006b46:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8006b48:	e030      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b50:	d208      	bcs.n	8006b64 <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b58:	d102      	bne.n	8006b60 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	613b      	str	r3, [r7, #16]
 8006b5e:	e025      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8006b60:	2301      	movs	r3, #1
 8006b62:	e035      	b.n	8006bd0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006b6a:	d90f      	bls.n	8006b8c <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d109      	bne.n	8006b86 <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8006b78:	d902      	bls.n	8006b80 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	613b      	str	r3, [r7, #16]
 8006b7e:	e015      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8006b80:	2301      	movs	r3, #1
 8006b82:	613b      	str	r3, [r7, #16]
 8006b84:	e012      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8006b86:	2300      	movs	r3, #0
 8006b88:	613b      	str	r3, [r7, #16]
 8006b8a:	e00f      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b92:	d109      	bne.n	8006ba8 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8006b94:	697b      	ldr	r3, [r7, #20]
 8006b96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006b9a:	d102      	bne.n	8006ba2 <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8006b9c:	2301      	movs	r3, #1
 8006b9e:	613b      	str	r3, [r7, #16]
 8006ba0:	e004      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8006ba2:	2302      	movs	r3, #2
 8006ba4:	613b      	str	r3, [r7, #16]
 8006ba6:	e001      	b.n	8006bac <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8006ba8:	2301      	movs	r3, #1
 8006baa:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8006bac:	4b0b      	ldr	r3, [pc, #44]	; (8006bdc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f023 020f 	bic.w	r2, r3, #15
 8006bb4:	4909      	ldr	r1, [pc, #36]	; (8006bdc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006bb6:	693b      	ldr	r3, [r7, #16]
 8006bb8:	4313      	orrs	r3, r2
 8006bba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8006bbc:	4b07      	ldr	r3, [pc, #28]	; (8006bdc <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 030f 	and.w	r3, r3, #15
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	429a      	cmp	r2, r3
 8006bc8:	d001      	beq.n	8006bce <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e000      	b.n	8006bd0 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8006bce:	2300      	movs	r3, #0
}
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	3718      	adds	r7, #24
 8006bd4:	46bd      	mov	sp, r7
 8006bd6:	bd80      	pop	{r7, pc}
 8006bd8:	46020c00 	.word	0x46020c00
 8006bdc:	40022000 	.word	0x40022000

08006be0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8006be0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006be4:	b0ba      	sub	sp, #232	; 0xe8
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006bec:	2300      	movs	r3, #0
 8006bee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006bf2:	2300      	movs	r3, #0
 8006bf4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006bf8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c00:	f002 0401 	and.w	r4, r2, #1
 8006c04:	2500      	movs	r5, #0
 8006c06:	ea54 0305 	orrs.w	r3, r4, r5
 8006c0a:	d00b      	beq.n	8006c24 <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8006c0c:	4bcb      	ldr	r3, [pc, #812]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c12:	f023 0103 	bic.w	r1, r3, #3
 8006c16:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c1a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c1c:	4ac7      	ldr	r2, [pc, #796]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c1e:	430b      	orrs	r3, r1
 8006c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006c24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c2c:	f002 0802 	and.w	r8, r2, #2
 8006c30:	f04f 0900 	mov.w	r9, #0
 8006c34:	ea58 0309 	orrs.w	r3, r8, r9
 8006c38:	d00b      	beq.n	8006c52 <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8006c3a:	4bc0      	ldr	r3, [pc, #768]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c40:	f023 010c 	bic.w	r1, r3, #12
 8006c44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006c4a:	4abc      	ldr	r2, [pc, #752]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c4c:	430b      	orrs	r3, r1
 8006c4e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8006c52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c5a:	f002 0a04 	and.w	sl, r2, #4
 8006c5e:	f04f 0b00 	mov.w	fp, #0
 8006c62:	ea5a 030b 	orrs.w	r3, sl, fp
 8006c66:	d00b      	beq.n	8006c80 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8006c68:	4bb4      	ldr	r3, [pc, #720]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006c6e:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8006c72:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c78:	4ab0      	ldr	r2, [pc, #704]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006c7a:	430b      	orrs	r3, r1
 8006c7c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006c80:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006c84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006c88:	f002 0308 	and.w	r3, r2, #8
 8006c8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c90:	2300      	movs	r3, #0
 8006c92:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006c96:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8006c9a:	460b      	mov	r3, r1
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	d00b      	beq.n	8006cb8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8006ca0:	4ba6      	ldr	r3, [pc, #664]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006ca2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006ca6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006caa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006cb0:	4aa2      	ldr	r2, [pc, #648]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cb2:	430b      	orrs	r3, r1
 8006cb4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006cb8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cc0:	f002 0310 	and.w	r3, r2, #16
 8006cc4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006cc8:	2300      	movs	r3, #0
 8006cca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006cce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006cd2:	460b      	mov	r3, r1
 8006cd4:	4313      	orrs	r3, r2
 8006cd6:	d00b      	beq.n	8006cf0 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8006cd8:	4b98      	ldr	r3, [pc, #608]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006cde:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ce2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ce8:	4a94      	ldr	r2, [pc, #592]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006cea:	430b      	orrs	r3, r1
 8006cec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006cf0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006cf8:	f002 0320 	and.w	r3, r2, #32
 8006cfc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d00:	2300      	movs	r3, #0
 8006d02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006d06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8006d0a:	460b      	mov	r3, r1
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	d00b      	beq.n	8006d28 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8006d10:	4b8a      	ldr	r3, [pc, #552]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d12:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006d16:	f023 0107 	bic.w	r1, r3, #7
 8006d1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d1e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006d20:	4a86      	ldr	r2, [pc, #536]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d22:	430b      	orrs	r3, r1
 8006d24:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8006d28:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d30:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8006d34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006d38:	2300      	movs	r3, #0
 8006d3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d3e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8006d42:	460b      	mov	r3, r1
 8006d44:	4313      	orrs	r3, r2
 8006d46:	d00b      	beq.n	8006d60 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8006d48:	4b7c      	ldr	r3, [pc, #496]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d4e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006d52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d56:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006d58:	4a78      	ldr	r2, [pc, #480]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006d60:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006d68:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8006d6c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006d70:	2300      	movs	r3, #0
 8006d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006d76:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006d7a:	460b      	mov	r3, r1
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	d00b      	beq.n	8006d98 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8006d80:	4b6e      	ldr	r3, [pc, #440]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006d86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006d8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006d90:	4a6a      	ldr	r2, [pc, #424]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006d92:	430b      	orrs	r3, r1
 8006d94:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006d98:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006da0:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8006da4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006da8:	2300      	movs	r3, #0
 8006daa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006dae:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8006db2:	460b      	mov	r3, r1
 8006db4:	4313      	orrs	r3, r2
 8006db6:	d00b      	beq.n	8006dd0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8006db8:	4b60      	ldr	r3, [pc, #384]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006dbe:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8006dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006dc8:	4a5c      	ldr	r2, [pc, #368]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006dca:	430b      	orrs	r3, r1
 8006dcc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8006dd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006dd8:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8006ddc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006de0:	2300      	movs	r3, #0
 8006de2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006de6:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8006dea:	460b      	mov	r3, r1
 8006dec:	4313      	orrs	r3, r2
 8006dee:	d00b      	beq.n	8006e08 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8006df0:	4b52      	ldr	r3, [pc, #328]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006df2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006df6:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8006dfa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006dfe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006e00:	4a4e      	ldr	r2, [pc, #312]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e02:	430b      	orrs	r3, r1
 8006e04:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006e08:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e10:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8006e14:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006e1e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8006e22:	460b      	mov	r3, r1
 8006e24:	4313      	orrs	r3, r2
 8006e26:	d00b      	beq.n	8006e40 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8006e28:	4b44      	ldr	r3, [pc, #272]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e2a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e2e:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8006e32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006e38:	4a40      	ldr	r2, [pc, #256]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e3a:	430b      	orrs	r3, r1
 8006e3c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006e40:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e48:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8006e4c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006e50:	2300      	movs	r3, #0
 8006e52:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006e56:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8006e5a:	460b      	mov	r3, r1
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	d00b      	beq.n	8006e78 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006e66:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8006e6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006e70:	4a32      	ldr	r2, [pc, #200]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e72:	430b      	orrs	r3, r1
 8006e74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8006e78:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e80:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8006e84:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006e88:	2300      	movs	r3, #0
 8006e8a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006e8e:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8006e92:	460b      	mov	r3, r1
 8006e94:	4313      	orrs	r3, r2
 8006e96:	d00c      	beq.n	8006eb2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8006e98:	4b28      	ldr	r3, [pc, #160]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006e9a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8006e9e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8006ea2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ea6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006eaa:	4a24      	ldr	r2, [pc, #144]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006eac:	430b      	orrs	r3, r1
 8006eae:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8006eb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006eba:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8006ebe:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ec0:	2300      	movs	r3, #0
 8006ec2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006ec4:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4313      	orrs	r3, r2
 8006ecc:	d04f      	beq.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8006ece:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ed6:	2b80      	cmp	r3, #128	; 0x80
 8006ed8:	d02d      	beq.n	8006f36 <HAL_RCCEx_PeriphCLKConfig+0x356>
 8006eda:	2b80      	cmp	r3, #128	; 0x80
 8006edc:	d827      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ede:	2b60      	cmp	r3, #96	; 0x60
 8006ee0:	d02e      	beq.n	8006f40 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8006ee2:	2b60      	cmp	r3, #96	; 0x60
 8006ee4:	d823      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006ee6:	2b40      	cmp	r3, #64	; 0x40
 8006ee8:	d006      	beq.n	8006ef8 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8006eea:	2b40      	cmp	r3, #64	; 0x40
 8006eec:	d81f      	bhi.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d009      	beq.n	8006f06 <HAL_RCCEx_PeriphCLKConfig+0x326>
 8006ef2:	2b20      	cmp	r3, #32
 8006ef4:	d011      	beq.n	8006f1a <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8006ef6:	e01a      	b.n	8006f2e <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006ef8:	4b10      	ldr	r3, [pc, #64]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006efc:	4a0f      	ldr	r2, [pc, #60]	; (8006f3c <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006efe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f02:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f04:	e01d      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006f06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f0a:	3308      	adds	r3, #8
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	f002 fa41 	bl	8009394 <RCCEx_PLL2_Config>
 8006f12:	4603      	mov	r3, r0
 8006f14:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f18:	e013      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006f1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f1e:	332c      	adds	r3, #44	; 0x2c
 8006f20:	4618      	mov	r0, r3
 8006f22:	f002 facf 	bl	80094c4 <RCCEx_PLL3_Config>
 8006f26:	4603      	mov	r3, r0
 8006f28:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8006f2c:	e009      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006f34:	e005      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8006f36:	bf00      	nop
 8006f38:	e003      	b.n	8006f42 <HAL_RCCEx_PeriphCLKConfig+0x362>
 8006f3a:	bf00      	nop
 8006f3c:	46020c00 	.word	0x46020c00
        break;
 8006f40:	bf00      	nop
    }

    if (ret == HAL_OK)
 8006f42:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d10d      	bne.n	8006f66 <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8006f4a:	4bb6      	ldr	r3, [pc, #728]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006f4c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8006f50:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8006f54:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006f5c:	4ab1      	ldr	r2, [pc, #708]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006f5e:	430b      	orrs	r3, r1
 8006f60:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8006f64:	e003      	b.n	8006f6e <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006f66:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8006f6a:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8006f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006f76:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8006f7a:	673b      	str	r3, [r7, #112]	; 0x70
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	677b      	str	r3, [r7, #116]	; 0x74
 8006f80:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8006f84:	460b      	mov	r3, r1
 8006f86:	4313      	orrs	r3, r2
 8006f88:	d053      	beq.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8006f8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f96:	d033      	beq.n	8007000 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8006f98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f9c:	d82c      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006f9e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa2:	d02f      	beq.n	8007004 <HAL_RCCEx_PeriphCLKConfig+0x424>
 8006fa4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006fa8:	d826      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006faa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fae:	d008      	beq.n	8006fc2 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8006fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fb4:	d820      	bhi.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d00a      	beq.n	8006fd0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8006fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fbe:	d011      	beq.n	8006fe4 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8006fc0:	e01a      	b.n	8006ff8 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8006fc2:	4b98      	ldr	r3, [pc, #608]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc6:	4a97      	ldr	r2, [pc, #604]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8006fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006fcc:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006fce:	e01a      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8006fd0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fd4:	3308      	adds	r3, #8
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f002 f9dc 	bl	8009394 <RCCEx_PLL2_Config>
 8006fdc:	4603      	mov	r3, r0
 8006fde:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006fe2:	e010      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8006fe4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fe8:	332c      	adds	r3, #44	; 0x2c
 8006fea:	4618      	mov	r0, r3
 8006fec:	f002 fa6a 	bl	80094c4 <RCCEx_PLL3_Config>
 8006ff0:	4603      	mov	r3, r0
 8006ff2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 8006ff6:	e006      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8006ffe:	e002      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007000:	bf00      	nop
 8007002:	e000      	b.n	8007006 <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8007004:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007006:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800700a:	2b00      	cmp	r3, #0
 800700c:	d10d      	bne.n	800702a <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 800700e:	4b85      	ldr	r3, [pc, #532]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007010:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007014:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8007018:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800701c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007020:	4a80      	ldr	r2, [pc, #512]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007022:	430b      	orrs	r3, r1
 8007024:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007028:	e003      	b.n	8007032 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800702a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800702e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 8007032:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800703a:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800703e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007040:	2300      	movs	r3, #0
 8007042:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007044:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8007048:	460b      	mov	r3, r1
 800704a:	4313      	orrs	r3, r2
 800704c:	d046      	beq.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 800704e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007052:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8007056:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 800705a:	d028      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800705c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8007060:	d821      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007062:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007066:	d022      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007068:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800706c:	d81b      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800706e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007072:	d01c      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007074:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007078:	d815      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800707a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800707e:	d008      	beq.n	8007092 <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 8007080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007084:	d80f      	bhi.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8007086:	2b00      	cmp	r3, #0
 8007088:	d011      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800708a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800708e:	d00e      	beq.n	80070ae <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8007090:	e009      	b.n	80070a6 <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007096:	3308      	adds	r3, #8
 8007098:	4618      	mov	r0, r3
 800709a:	f002 f97b 	bl	8009394 <RCCEx_PLL2_Config>
 800709e:	4603      	mov	r3, r0
 80070a0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80070a4:	e004      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80070a6:	2301      	movs	r3, #1
 80070a8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80070ac:	e000      	b.n	80070b0 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80070ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 80070b0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d10d      	bne.n	80070d4 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80070b8:	4b5a      	ldr	r3, [pc, #360]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80070ba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80070be:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80070c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070c6:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80070ca:	4a56      	ldr	r2, [pc, #344]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80070cc:	430b      	orrs	r3, r1
 80070ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80070d2:	e003      	b.n	80070dc <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80070d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80070d8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 80070dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80070e4:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80070e8:	663b      	str	r3, [r7, #96]	; 0x60
 80070ea:	2300      	movs	r3, #0
 80070ec:	667b      	str	r3, [r7, #100]	; 0x64
 80070ee:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80070f2:	460b      	mov	r3, r1
 80070f4:	4313      	orrs	r3, r2
 80070f6:	d03f      	beq.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 80070f8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80070fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007100:	2b04      	cmp	r3, #4
 8007102:	d81e      	bhi.n	8007142 <HAL_RCCEx_PeriphCLKConfig+0x562>
 8007104:	a201      	add	r2, pc, #4	; (adr r2, 800710c <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 8007106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800710a:	bf00      	nop
 800710c:	0800714b 	.word	0x0800714b
 8007110:	08007121 	.word	0x08007121
 8007114:	0800712f 	.word	0x0800712f
 8007118:	0800714b 	.word	0x0800714b
 800711c:	0800714b 	.word	0x0800714b
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007120:	4b40      	ldr	r3, [pc, #256]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007122:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007124:	4a3f      	ldr	r2, [pc, #252]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007126:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800712a:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800712c:	e00e      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800712e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007132:	332c      	adds	r3, #44	; 0x2c
 8007134:	4618      	mov	r0, r3
 8007136:	f002 f9c5 	bl	80094c4 <RCCEx_PLL3_Config>
 800713a:	4603      	mov	r3, r0
 800713c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007140:	e004      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007148:	e000      	b.n	800714c <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 800714a:	bf00      	nop
    }
    if (ret == HAL_OK)
 800714c:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007150:	2b00      	cmp	r3, #0
 8007152:	d10d      	bne.n	8007170 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 8007154:	4b33      	ldr	r3, [pc, #204]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007156:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800715a:	f023 0107 	bic.w	r1, r3, #7
 800715e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007166:	4a2f      	ldr	r2, [pc, #188]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007168:	430b      	orrs	r3, r1
 800716a:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 800716e:	e003      	b.n	8007178 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007170:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007174:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 8007178:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800717c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007180:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8007184:	65bb      	str	r3, [r7, #88]	; 0x58
 8007186:	2300      	movs	r3, #0
 8007188:	65fb      	str	r3, [r7, #92]	; 0x5c
 800718a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800718e:	460b      	mov	r3, r1
 8007190:	4313      	orrs	r3, r2
 8007192:	d04d      	beq.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 8007194:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007198:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800719c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071a0:	d028      	beq.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x614>
 80071a2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80071a6:	d821      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80071a8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071ac:	d024      	beq.n	80071f8 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80071ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80071b2:	d81b      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80071b4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071b8:	d00e      	beq.n	80071d8 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80071ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80071be:	d815      	bhi.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d01b      	beq.n	80071fc <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80071c4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80071c8:	d110      	bne.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80071ca:	4b16      	ldr	r3, [pc, #88]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80071cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071ce:	4a15      	ldr	r2, [pc, #84]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80071d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80071d4:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80071d6:	e012      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 80071d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80071dc:	332c      	adds	r3, #44	; 0x2c
 80071de:	4618      	mov	r0, r3
 80071e0:	f002 f970 	bl	80094c4 <RCCEx_PLL3_Config>
 80071e4:	4603      	mov	r3, r0
 80071e6:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80071ea:	e008      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80071ec:	2301      	movs	r3, #1
 80071ee:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80071f2:	e004      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80071f4:	bf00      	nop
 80071f6:	e002      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80071f8:	bf00      	nop
 80071fa:	e000      	b.n	80071fe <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 80071fc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80071fe:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007202:	2b00      	cmp	r3, #0
 8007204:	d110      	bne.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 8007206:	4b07      	ldr	r3, [pc, #28]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007208:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800720c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8007210:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007218:	4a02      	ldr	r2, [pc, #8]	; (8007224 <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800721a:	430b      	orrs	r3, r1
 800721c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8007220:	e006      	b.n	8007230 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8007222:	bf00      	nop
 8007224:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007228:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800722c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007230:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007238:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800723c:	653b      	str	r3, [r7, #80]	; 0x50
 800723e:	2300      	movs	r3, #0
 8007240:	657b      	str	r3, [r7, #84]	; 0x54
 8007242:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8007246:	460b      	mov	r3, r1
 8007248:	4313      	orrs	r3, r2
 800724a:	f000 80b5 	beq.w	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800724e:	2300      	movs	r3, #0
 8007250:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007254:	4b9d      	ldr	r3, [pc, #628]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007256:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800725a:	f003 0304 	and.w	r3, r3, #4
 800725e:	2b00      	cmp	r3, #0
 8007260:	d113      	bne.n	800728a <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007262:	4b9a      	ldr	r3, [pc, #616]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007264:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007268:	4a98      	ldr	r2, [pc, #608]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800726a:	f043 0304 	orr.w	r3, r3, #4
 800726e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007272:	4b96      	ldr	r3, [pc, #600]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007278:	f003 0304 	and.w	r3, r3, #4
 800727c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007280:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 8007284:	2301      	movs	r3, #1
 8007286:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 800728a:	4b91      	ldr	r3, [pc, #580]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 800728c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800728e:	4a90      	ldr	r2, [pc, #576]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 8007290:	f043 0301 	orr.w	r3, r3, #1
 8007294:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007296:	f7fb fdfd 	bl	8002e94 <HAL_GetTick>
 800729a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 800729e:	e00b      	b.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80072a0:	f7fb fdf8 	bl	8002e94 <HAL_GetTick>
 80072a4:	4602      	mov	r2, r0
 80072a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072aa:	1ad3      	subs	r3, r2, r3
 80072ac:	2b02      	cmp	r3, #2
 80072ae:	d903      	bls.n	80072b8 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80072b0:	2303      	movs	r3, #3
 80072b2:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80072b6:	e005      	b.n	80072c4 <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80072b8:	4b85      	ldr	r3, [pc, #532]	; (80074d0 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80072ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072bc:	f003 0301 	and.w	r3, r3, #1
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d0ed      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80072c4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d165      	bne.n	8007398 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80072cc:	4b7f      	ldr	r3, [pc, #508]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80072ce:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072d2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80072d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 80072da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d023      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x74a>
 80072e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80072e6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80072ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072ee:	4293      	cmp	r3, r2
 80072f0:	d01b      	beq.n	800732a <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80072f2:	4b76      	ldr	r3, [pc, #472]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80072f4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80072f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072fc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007300:	4b72      	ldr	r3, [pc, #456]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007302:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007306:	4a71      	ldr	r2, [pc, #452]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800730c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007310:	4b6e      	ldr	r3, [pc, #440]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007312:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007316:	4a6d      	ldr	r2, [pc, #436]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007318:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800731c:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007320:	4a6a      	ldr	r2, [pc, #424]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007322:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007326:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800732a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800732e:	f003 0301 	and.w	r3, r3, #1
 8007332:	2b00      	cmp	r3, #0
 8007334:	d019      	beq.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007336:	f7fb fdad 	bl	8002e94 <HAL_GetTick>
 800733a:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800733e:	e00d      	b.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007340:	f7fb fda8 	bl	8002e94 <HAL_GetTick>
 8007344:	4602      	mov	r2, r0
 8007346:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800734a:	1ad2      	subs	r2, r2, r3
 800734c:	f241 3388 	movw	r3, #5000	; 0x1388
 8007350:	429a      	cmp	r2, r3
 8007352:	d903      	bls.n	800735c <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 800735a:	e006      	b.n	800736a <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800735c:	4b5b      	ldr	r3, [pc, #364]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800735e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d0ea      	beq.n	8007340 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 800736a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10d      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 8007372:	4b56      	ldr	r3, [pc, #344]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007374:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007378:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800737c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007380:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8007384:	4a51      	ldr	r2, [pc, #324]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007386:	430b      	orrs	r3, r1
 8007388:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 800738c:	e008      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800738e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007392:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 8007396:	e003      	b.n	80073a0 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007398:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800739c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80073a0:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80073a4:	2b01      	cmp	r3, #1
 80073a6:	d107      	bne.n	80073b8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80073a8:	4b48      	ldr	r3, [pc, #288]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80073aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80073ae:	4a47      	ldr	r2, [pc, #284]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80073b0:	f023 0304 	bic.w	r3, r3, #4
 80073b4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80073b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073c0:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80073c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80073c6:	2300      	movs	r3, #0
 80073c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073ca:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80073ce:	460b      	mov	r3, r1
 80073d0:	4313      	orrs	r3, r2
 80073d2:	d042      	beq.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80073d4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80073d8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80073dc:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073e0:	d022      	beq.n	8007428 <HAL_RCCEx_PeriphCLKConfig+0x848>
 80073e2:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 80073e6:	d81b      	bhi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80073e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073ec:	d011      	beq.n	8007412 <HAL_RCCEx_PeriphCLKConfig+0x832>
 80073ee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80073f2:	d815      	bhi.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x840>
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d019      	beq.n	800742c <HAL_RCCEx_PeriphCLKConfig+0x84c>
 80073f8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80073fc:	d110      	bne.n	8007420 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80073fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007402:	3308      	adds	r3, #8
 8007404:	4618      	mov	r0, r3
 8007406:	f001 ffc5 	bl	8009394 <RCCEx_PLL2_Config>
 800740a:	4603      	mov	r3, r0
 800740c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007410:	e00d      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8007412:	4b2e      	ldr	r3, [pc, #184]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007414:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007416:	4a2d      	ldr	r2, [pc, #180]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007418:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800741c:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 800741e:	e006      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007426:	e002      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8007428:	bf00      	nop
 800742a:	e000      	b.n	800742e <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 800742c:	bf00      	nop
    }
    if (ret == HAL_OK)
 800742e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d10d      	bne.n	8007452 <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 8007436:	4b25      	ldr	r3, [pc, #148]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8007438:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800743c:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8007440:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007444:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800744a:	430b      	orrs	r3, r1
 800744c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8007450:	e003      	b.n	800745a <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007452:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007456:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800745a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800745e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007462:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8007466:	643b      	str	r3, [r7, #64]	; 0x40
 8007468:	2300      	movs	r3, #0
 800746a:	647b      	str	r3, [r7, #68]	; 0x44
 800746c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8007470:	460b      	mov	r3, r1
 8007472:	4313      	orrs	r3, r2
 8007474:	d032      	beq.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 8007476:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800747a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800747e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007482:	d00b      	beq.n	800749c <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 8007484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007488:	d804      	bhi.n	8007494 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 800748a:	2b00      	cmp	r3, #0
 800748c:	d008      	beq.n	80074a0 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 800748e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007492:	d007      	beq.n	80074a4 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 8007494:	2301      	movs	r3, #1
 8007496:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800749a:	e004      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 800749c:	bf00      	nop
 800749e:	e002      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80074a0:	bf00      	nop
 80074a2:	e000      	b.n	80074a6 <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80074a4:	bf00      	nop
    }
    if (ret == HAL_OK)
 80074a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d112      	bne.n	80074d4 <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80074ae:	4b07      	ldr	r3, [pc, #28]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80074b0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074b4:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80074b8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80074c0:	4a02      	ldr	r2, [pc, #8]	; (80074cc <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80074c2:	430b      	orrs	r3, r1
 80074c4:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80074c8:	e008      	b.n	80074dc <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80074ca:	bf00      	nop
 80074cc:	46020c00 	.word	0x46020c00
 80074d0:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80074d4:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80074d8:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 80074dc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80074e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e4:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80074e8:	63bb      	str	r3, [r7, #56]	; 0x38
 80074ea:	2300      	movs	r3, #0
 80074ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80074ee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80074f2:	460b      	mov	r3, r1
 80074f4:	4313      	orrs	r3, r2
 80074f6:	d00c      	beq.n	8007512 <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 80074f8:	4b98      	ldr	r3, [pc, #608]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80074fa:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80074fe:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 8007502:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007506:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800750a:	4a94      	ldr	r2, [pc, #592]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800750c:	430b      	orrs	r3, r1
 800750e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 8007512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007516:	e9d3 2300 	ldrd	r2, r3, [r3]
 800751a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800751e:	633b      	str	r3, [r7, #48]	; 0x30
 8007520:	2300      	movs	r3, #0
 8007522:	637b      	str	r3, [r7, #52]	; 0x34
 8007524:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8007528:	460b      	mov	r3, r1
 800752a:	4313      	orrs	r3, r2
 800752c:	d019      	beq.n	8007562 <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 800752e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007532:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007536:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800753a:	d105      	bne.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800753c:	4b87      	ldr	r3, [pc, #540]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800753e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007540:	4a86      	ldr	r2, [pc, #536]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007542:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007546:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8007548:	4b84      	ldr	r3, [pc, #528]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800754a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800754e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8007552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800755a:	4a80      	ldr	r2, [pc, #512]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800755c:	430b      	orrs	r3, r1
 800755e:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 8007562:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800756e:	62bb      	str	r3, [r7, #40]	; 0x28
 8007570:	2300      	movs	r3, #0
 8007572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007574:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8007578:	460b      	mov	r3, r1
 800757a:	4313      	orrs	r3, r2
 800757c:	d00c      	beq.n	8007598 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 800757e:	4b77      	ldr	r3, [pc, #476]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007580:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007584:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007588:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800758c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007590:	4972      	ldr	r1, [pc, #456]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007592:	4313      	orrs	r3, r2
 8007594:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 8007598:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800759c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075a0:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80075a4:	623b      	str	r3, [r7, #32]
 80075a6:	2300      	movs	r3, #0
 80075a8:	627b      	str	r3, [r7, #36]	; 0x24
 80075aa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80075ae:	460b      	mov	r3, r1
 80075b0:	4313      	orrs	r3, r2
 80075b2:	d00c      	beq.n	80075ce <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80075b4:	4b69      	ldr	r3, [pc, #420]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80075b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80075ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80075be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075c2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80075c6:	4965      	ldr	r1, [pc, #404]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80075c8:	4313      	orrs	r3, r2
 80075ca:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80075ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075d6:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80075da:	61bb      	str	r3, [r7, #24]
 80075dc:	2300      	movs	r3, #0
 80075de:	61fb      	str	r3, [r7, #28]
 80075e0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80075e4:	460b      	mov	r3, r1
 80075e6:	4313      	orrs	r3, r2
 80075e8:	d00c      	beq.n	8007604 <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 80075ea:	4b5c      	ldr	r3, [pc, #368]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80075ec:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80075f0:	f023 0218 	bic.w	r2, r3, #24
 80075f4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80075f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80075fc:	4957      	ldr	r1, [pc, #348]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80075fe:	4313      	orrs	r3, r2
 8007600:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8007604:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800760c:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8007610:	613b      	str	r3, [r7, #16]
 8007612:	2300      	movs	r3, #0
 8007614:	617b      	str	r3, [r7, #20]
 8007616:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800761a:	460b      	mov	r3, r1
 800761c:	4313      	orrs	r3, r2
 800761e:	d032      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8007620:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007624:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007628:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800762c:	d105      	bne.n	800763a <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800762e:	4b4b      	ldr	r3, [pc, #300]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007630:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007632:	4a4a      	ldr	r2, [pc, #296]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007634:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007638:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 800763a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800763e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007642:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8007646:	d108      	bne.n	800765a <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800764c:	3308      	adds	r3, #8
 800764e:	4618      	mov	r0, r3
 8007650:	f001 fea0 	bl	8009394 <RCCEx_PLL2_Config>
 8007654:	4603      	mov	r3, r0
 8007656:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 800765a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800765e:	2b00      	cmp	r3, #0
 8007660:	d10d      	bne.n	800767e <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 8007662:	4b3e      	ldr	r3, [pc, #248]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007664:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007668:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800766c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007670:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007674:	4939      	ldr	r1, [pc, #228]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007676:	4313      	orrs	r3, r2
 8007678:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 800767c:	e003      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800767e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007682:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 8007686:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800768a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800768e:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 8007692:	60bb      	str	r3, [r7, #8]
 8007694:	2300      	movs	r3, #0
 8007696:	60fb      	str	r3, [r7, #12]
 8007698:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800769c:	460b      	mov	r3, r1
 800769e:	4313      	orrs	r3, r2
 80076a0:	d03a      	beq.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80076a2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80076aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076ae:	d00e      	beq.n	80076ce <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80076b0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80076b4:	d815      	bhi.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d017      	beq.n	80076ea <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80076ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076be:	d110      	bne.n	80076e2 <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80076c0:	4b26      	ldr	r3, [pc, #152]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80076c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076c4:	4a25      	ldr	r2, [pc, #148]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80076c6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80076ca:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80076cc:	e00e      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80076ce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80076d2:	3308      	adds	r3, #8
 80076d4:	4618      	mov	r0, r3
 80076d6:	f001 fe5d 	bl	8009394 <RCCEx_PLL2_Config>
 80076da:	4603      	mov	r3, r0
 80076dc:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80076e0:	e004      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80076e8:	e000      	b.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 80076ea:	bf00      	nop
    }
    if (ret == HAL_OK)
 80076ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d10d      	bne.n	8007710 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 80076f4:	4b19      	ldr	r3, [pc, #100]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80076f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80076fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80076fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007706:	4915      	ldr	r1, [pc, #84]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 800770e:	e003      	b.n	8007718 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007710:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007714:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8007718:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800771c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007720:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8007724:	603b      	str	r3, [r7, #0]
 8007726:	2300      	movs	r3, #0
 8007728:	607b      	str	r3, [r7, #4]
 800772a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800772e:	460b      	mov	r3, r1
 8007730:	4313      	orrs	r3, r2
 8007732:	d00c      	beq.n	800774e <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 8007734:	4b09      	ldr	r3, [pc, #36]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007736:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800773a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800773e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007742:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007746:	4905      	ldr	r1, [pc, #20]	; (800775c <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8007748:	4313      	orrs	r3, r2
 800774a:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 800774e:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 8007752:	4618      	mov	r0, r3
 8007754:	37e8      	adds	r7, #232	; 0xe8
 8007756:	46bd      	mov	sp, r7
 8007758:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800775c:	46020c00 	.word	0x46020c00

08007760 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8007760:	b480      	push	{r7}
 8007762:	b089      	sub	sp, #36	; 0x24
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8007768:	4bad      	ldr	r3, [pc, #692]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800776a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800776c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007770:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007772:	4bab      	ldr	r3, [pc, #684]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007776:	f003 0303 	and.w	r3, r3, #3
 800777a:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 800777c:	4ba8      	ldr	r3, [pc, #672]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800777e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007780:	0a1b      	lsrs	r3, r3, #8
 8007782:	f003 030f 	and.w	r3, r3, #15
 8007786:	3301      	adds	r3, #1
 8007788:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800778a:	4ba5      	ldr	r3, [pc, #660]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800778c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800778e:	091b      	lsrs	r3, r3, #4
 8007790:	f003 0301 	and.w	r3, r3, #1
 8007794:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 8007796:	4ba2      	ldr	r3, [pc, #648]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800779a:	08db      	lsrs	r3, r3, #3
 800779c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80077a0:	68fa      	ldr	r2, [r7, #12]
 80077a2:	fb02 f303 	mul.w	r3, r2, r3
 80077a6:	ee07 3a90 	vmov	s15, r3
 80077aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077ae:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	f000 8123 	beq.w	8007a00 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80077ba:	697b      	ldr	r3, [r7, #20]
 80077bc:	2b03      	cmp	r3, #3
 80077be:	d062      	beq.n	8007886 <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80077c0:	697b      	ldr	r3, [r7, #20]
 80077c2:	2b03      	cmp	r3, #3
 80077c4:	f200 8081 	bhi.w	80078ca <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	2b01      	cmp	r3, #1
 80077cc:	d024      	beq.n	8007818 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80077ce:	697b      	ldr	r3, [r7, #20]
 80077d0:	2b02      	cmp	r3, #2
 80077d2:	d17a      	bne.n	80078ca <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80077d4:	693b      	ldr	r3, [r7, #16]
 80077d6:	ee07 3a90 	vmov	s15, r3
 80077da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80077de:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80077e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80077e6:	4b8e      	ldr	r3, [pc, #568]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80077e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80077ee:	ee07 3a90 	vmov	s15, r3
 80077f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80077f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80077fa:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80077fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007802:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 8007806:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800780a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800780e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007812:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007816:	e08f      	b.n	8007938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8007818:	4b81      	ldr	r3, [pc, #516]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800781a:	689b      	ldr	r3, [r3, #8]
 800781c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 8007824:	4b7e      	ldr	r3, [pc, #504]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007826:	689b      	ldr	r3, [r3, #8]
 8007828:	0f1b      	lsrs	r3, r3, #28
 800782a:	f003 030f 	and.w	r3, r3, #15
 800782e:	e006      	b.n	800783e <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8007830:	4b7b      	ldr	r3, [pc, #492]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007836:	041b      	lsls	r3, r3, #16
 8007838:	0f1b      	lsrs	r3, r3, #28
 800783a:	f003 030f 	and.w	r3, r3, #15
 800783e:	4a7b      	ldr	r2, [pc, #492]	; (8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8007840:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007844:	ee07 3a90 	vmov	s15, r3
 8007848:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	ee07 3a90 	vmov	s15, r3
 8007852:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007856:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800785a:	69bb      	ldr	r3, [r7, #24]
 800785c:	ee07 3a90 	vmov	s15, r3
 8007860:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007864:	ed97 6a02 	vldr	s12, [r7, #8]
 8007868:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800786c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007870:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007874:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007878:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800787c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007880:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007884:	e058      	b.n	8007938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007886:	693b      	ldr	r3, [r7, #16]
 8007888:	ee07 3a90 	vmov	s15, r3
 800788c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007890:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007a24 <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 8007894:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007898:	4b61      	ldr	r3, [pc, #388]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800789a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800789c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078a0:	ee07 3a90 	vmov	s15, r3
 80078a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80078a8:	ed97 6a02 	vldr	s12, [r7, #8]
 80078ac:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80078b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80078b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80078c8:	e036      	b.n	8007938 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80078ca:	4b55      	ldr	r3, [pc, #340]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d005      	beq.n	80078e2 <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80078d6:	4b52      	ldr	r3, [pc, #328]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	0f1b      	lsrs	r3, r3, #28
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	e006      	b.n	80078f0 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 80078e2:	4b4f      	ldr	r3, [pc, #316]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80078e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80078e8:	041b      	lsls	r3, r3, #16
 80078ea:	0f1b      	lsrs	r3, r3, #28
 80078ec:	f003 030f 	and.w	r3, r3, #15
 80078f0:	4a4e      	ldr	r2, [pc, #312]	; (8007a2c <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 80078f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80078f6:	ee07 3a90 	vmov	s15, r3
 80078fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80078fe:	693b      	ldr	r3, [r7, #16]
 8007900:	ee07 3a90 	vmov	s15, r3
 8007904:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007908:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 800790c:	69bb      	ldr	r3, [r7, #24]
 800790e:	ee07 3a90 	vmov	s15, r3
 8007912:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007916:	ed97 6a02 	vldr	s12, [r7, #8]
 800791a:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 800791e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007922:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007926:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800792a:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 800792e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007932:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007936:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8007938:	4b39      	ldr	r3, [pc, #228]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800793a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800793c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007940:	2b00      	cmp	r3, #0
 8007942:	d017      	beq.n	8007974 <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007944:	4b36      	ldr	r3, [pc, #216]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007946:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007948:	0a5b      	lsrs	r3, r3, #9
 800794a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800794e:	ee07 3a90 	vmov	s15, r3
 8007952:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 8007956:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800795a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800795e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007962:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800796a:	ee17 2a90 	vmov	r2, s15
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e002      	b.n	800797a <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 800797a:	4b29      	ldr	r3, [pc, #164]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800797c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800797e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d017      	beq.n	80079b6 <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8007986:	4b26      	ldr	r3, [pc, #152]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8007988:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800798a:	0c1b      	lsrs	r3, r3, #16
 800798c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007990:	ee07 3a90 	vmov	s15, r3
 8007994:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 8007998:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800799c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079a0:	edd7 6a07 	vldr	s13, [r7, #28]
 80079a4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ac:	ee17 2a90 	vmov	r2, s15
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	605a      	str	r2, [r3, #4]
 80079b4:	e002      	b.n	80079bc <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80079bc:	4b18      	ldr	r3, [pc, #96]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079c0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d017      	beq.n	80079f8 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079c8:	4b15      	ldr	r3, [pc, #84]	; (8007a20 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80079ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079cc:	0e1b      	lsrs	r3, r3, #24
 80079ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80079d2:	ee07 3a90 	vmov	s15, r3
 80079d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 80079da:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80079de:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80079e2:	edd7 6a07 	vldr	s13, [r7, #28]
 80079e6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079ee:	ee17 2a90 	vmov	r2, s15
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80079f6:	e00c      	b.n	8007a12 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	2200      	movs	r2, #0
 80079fc:	609a      	str	r2, [r3, #8]
}
 80079fe:	e008      	b.n	8007a12 <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	2200      	movs	r2, #0
 8007a04:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2200      	movs	r2, #0
 8007a0a:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2200      	movs	r2, #0
 8007a10:	609a      	str	r2, [r3, #8]
}
 8007a12:	bf00      	nop
 8007a14:	3724      	adds	r7, #36	; 0x24
 8007a16:	46bd      	mov	sp, r7
 8007a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1c:	4770      	bx	lr
 8007a1e:	bf00      	nop
 8007a20:	46020c00 	.word	0x46020c00
 8007a24:	4b742400 	.word	0x4b742400
 8007a28:	46000000 	.word	0x46000000
 8007a2c:	0800fa7c 	.word	0x0800fa7c

08007a30 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8007a30:	b480      	push	{r7}
 8007a32:	b089      	sub	sp, #36	; 0x24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8007a38:	4bad      	ldr	r3, [pc, #692]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007a40:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8007a42:	4bab      	ldr	r3, [pc, #684]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a46:	f003 0303 	and.w	r3, r3, #3
 8007a4a:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8007a4c:	4ba8      	ldr	r3, [pc, #672]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	f003 030f 	and.w	r3, r3, #15
 8007a56:	3301      	adds	r3, #1
 8007a58:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8007a5a:	4ba5      	ldr	r3, [pc, #660]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a5e:	091b      	lsrs	r3, r3, #4
 8007a60:	f003 0301 	and.w	r3, r3, #1
 8007a64:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8007a66:	4ba2      	ldr	r3, [pc, #648]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a6a:	08db      	lsrs	r3, r3, #3
 8007a6c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	fb02 f303 	mul.w	r3, r2, r3
 8007a76:	ee07 3a90 	vmov	s15, r3
 8007a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007a7e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	f000 8123 	beq.w	8007cd0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b03      	cmp	r3, #3
 8007a8e:	d062      	beq.n	8007b56 <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8007a90:	697b      	ldr	r3, [r7, #20]
 8007a92:	2b03      	cmp	r3, #3
 8007a94:	f200 8081 	bhi.w	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	2b01      	cmp	r3, #1
 8007a9c:	d024      	beq.n	8007ae8 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2b02      	cmp	r3, #2
 8007aa2:	d17a      	bne.n	8007b9a <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007aa4:	693b      	ldr	r3, [r7, #16]
 8007aa6:	ee07 3a90 	vmov	s15, r3
 8007aaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007aae:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007ab6:	4b8e      	ldr	r3, [pc, #568]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007abe:	ee07 3a90 	vmov	s15, r3
 8007ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007aca:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ae6:	e08f      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007ae8:	4b81      	ldr	r3, [pc, #516]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007aea:	689b      	ldr	r3, [r3, #8]
 8007aec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007af0:	2b00      	cmp	r3, #0
 8007af2:	d005      	beq.n	8007b00 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8007af4:	4b7e      	ldr	r3, [pc, #504]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	0f1b      	lsrs	r3, r3, #28
 8007afa:	f003 030f 	and.w	r3, r3, #15
 8007afe:	e006      	b.n	8007b0e <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8007b00:	4b7b      	ldr	r3, [pc, #492]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b02:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b06:	041b      	lsls	r3, r3, #16
 8007b08:	0f1b      	lsrs	r3, r3, #28
 8007b0a:	f003 030f 	and.w	r3, r3, #15
 8007b0e:	4a7b      	ldr	r2, [pc, #492]	; (8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007b10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007b14:	ee07 3a90 	vmov	s15, r3
 8007b18:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b1c:	693b      	ldr	r3, [r7, #16]
 8007b1e:	ee07 3a90 	vmov	s15, r3
 8007b22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	ee07 3a90 	vmov	s15, r3
 8007b30:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007b34:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b38:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007b3c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007b40:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007b44:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b48:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8007b4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b50:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b54:	e058      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007b56:	693b      	ldr	r3, [r7, #16]
 8007b58:	ee07 3a90 	vmov	s15, r3
 8007b5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007b60:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007cf4 <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8007b64:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007b68:	4b61      	ldr	r3, [pc, #388]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007b70:	ee07 3a90 	vmov	s15, r3
 8007b74:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b78:	ed97 6a02 	vldr	s12, [r7, #8]
 8007b7c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007b80:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007b84:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8007b88:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007b8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8007b90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007b94:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007b98:	e036      	b.n	8007c08 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007b9a:	4b55      	ldr	r3, [pc, #340]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007b9c:	689b      	ldr	r3, [r3, #8]
 8007b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8007ba6:	4b52      	ldr	r3, [pc, #328]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	0f1b      	lsrs	r3, r3, #28
 8007bac:	f003 030f 	and.w	r3, r3, #15
 8007bb0:	e006      	b.n	8007bc0 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8007bb2:	4b4f      	ldr	r3, [pc, #316]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007bb4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007bb8:	041b      	lsls	r3, r3, #16
 8007bba:	0f1b      	lsrs	r3, r3, #28
 8007bbc:	f003 030f 	and.w	r3, r3, #15
 8007bc0:	4a4e      	ldr	r2, [pc, #312]	; (8007cfc <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8007bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bc6:	ee07 3a90 	vmov	s15, r3
 8007bca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	ee07 3a90 	vmov	s15, r3
 8007bd4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007bd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8007bdc:	69bb      	ldr	r3, [r7, #24]
 8007bde:	ee07 3a90 	vmov	s15, r3
 8007be2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007be6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007bea:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8007bee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007bf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007bf6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007bfa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8007bfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007c02:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007c06:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8007c08:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d017      	beq.n	8007c44 <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c14:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c18:	0a5b      	lsrs	r3, r3, #9
 8007c1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c1e:	ee07 3a90 	vmov	s15, r3
 8007c22:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8007c26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c2a:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c2e:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c36:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c3a:	ee17 2a90 	vmov	r2, s15
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	601a      	str	r2, [r3, #0]
 8007c42:	e002      	b.n	8007c4a <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8007c4a:	4b29      	ldr	r3, [pc, #164]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d017      	beq.n	8007c86 <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c56:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c5a:	0c1b      	lsrs	r3, r3, #16
 8007c5c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c60:	ee07 3a90 	vmov	s15, r3
 8007c64:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8007c68:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007c6c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c70:	edd7 6a07 	vldr	s13, [r7, #28]
 8007c74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007c78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007c7c:	ee17 2a90 	vmov	r2, s15
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	605a      	str	r2, [r3, #4]
 8007c84:	e002      	b.n	8007c8c <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8007c8c:	4b18      	ldr	r3, [pc, #96]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d017      	beq.n	8007cc8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007c98:	4b15      	ldr	r3, [pc, #84]	; (8007cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8007c9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c9c:	0e1b      	lsrs	r3, r3, #24
 8007c9e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca2:	ee07 3a90 	vmov	s15, r3
 8007ca6:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8007caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007cae:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8007cb2:	edd7 6a07 	vldr	s13, [r7, #28]
 8007cb6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007cba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007cbe:	ee17 2a90 	vmov	r2, s15
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8007cc6:	e00c      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	2200      	movs	r2, #0
 8007ccc:	609a      	str	r2, [r3, #8]
}
 8007cce:	e008      	b.n	8007ce2 <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2200      	movs	r2, #0
 8007cda:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	609a      	str	r2, [r3, #8]
}
 8007ce2:	bf00      	nop
 8007ce4:	3724      	adds	r7, #36	; 0x24
 8007ce6:	46bd      	mov	sp, r7
 8007ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cec:	4770      	bx	lr
 8007cee:	bf00      	nop
 8007cf0:	46020c00 	.word	0x46020c00
 8007cf4:	4b742400 	.word	0x4b742400
 8007cf8:	46000000 	.word	0x46000000
 8007cfc:	0800fa7c 	.word	0x0800fa7c

08007d00 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8007d00:	b480      	push	{r7}
 8007d02:	b089      	sub	sp, #36	; 0x24
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8007d08:	4bad      	ldr	r3, [pc, #692]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d10:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8007d12:	4bab      	ldr	r3, [pc, #684]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d16:	f003 0303 	and.w	r3, r3, #3
 8007d1a:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8007d1c:	4ba8      	ldr	r3, [pc, #672]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d20:	0a1b      	lsrs	r3, r3, #8
 8007d22:	f003 030f 	and.w	r3, r3, #15
 8007d26:	3301      	adds	r3, #1
 8007d28:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8007d2a:	4ba5      	ldr	r3, [pc, #660]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d2e:	091b      	lsrs	r3, r3, #4
 8007d30:	f003 0301 	and.w	r3, r3, #1
 8007d34:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8007d36:	4ba2      	ldr	r3, [pc, #648]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d3a:	08db      	lsrs	r3, r3, #3
 8007d3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007d40:	68fa      	ldr	r2, [r7, #12]
 8007d42:	fb02 f303 	mul.w	r3, r2, r3
 8007d46:	ee07 3a90 	vmov	s15, r3
 8007d4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d4e:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f000 8123 	beq.w	8007fa0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8007d5a:	697b      	ldr	r3, [r7, #20]
 8007d5c:	2b03      	cmp	r3, #3
 8007d5e:	d062      	beq.n	8007e26 <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	f200 8081 	bhi.w	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8007d68:	697b      	ldr	r3, [r7, #20]
 8007d6a:	2b01      	cmp	r3, #1
 8007d6c:	d024      	beq.n	8007db8 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8007d6e:	697b      	ldr	r3, [r7, #20]
 8007d70:	2b02      	cmp	r3, #2
 8007d72:	d17a      	bne.n	8007e6a <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	ee07 3a90 	vmov	s15, r3
 8007d7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007d7e:	eddf 6a91 	vldr	s13, [pc, #580]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007d82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007d86:	4b8e      	ldr	r3, [pc, #568]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d8e:	ee07 3a90 	vmov	s15, r3
 8007d92:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007d96:	ed97 6a02 	vldr	s12, [r7, #8]
 8007d9a:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007d9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007da2:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007da6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007daa:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007dae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007db2:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8007db6:	e08f      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007db8:	4b81      	ldr	r3, [pc, #516]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007dc0:	2b00      	cmp	r3, #0
 8007dc2:	d005      	beq.n	8007dd0 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8007dc4:	4b7e      	ldr	r3, [pc, #504]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	0f1b      	lsrs	r3, r3, #28
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	e006      	b.n	8007dde <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8007dd0:	4b7b      	ldr	r3, [pc, #492]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007dd2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007dd6:	041b      	lsls	r3, r3, #16
 8007dd8:	0f1b      	lsrs	r3, r3, #28
 8007dda:	f003 030f 	and.w	r3, r3, #15
 8007dde:	4a7b      	ldr	r2, [pc, #492]	; (8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007de0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007de4:	ee07 3a90 	vmov	s15, r3
 8007de8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007df6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007dfa:	69bb      	ldr	r3, [r7, #24]
 8007dfc:	ee07 3a90 	vmov	s15, r3
 8007e00:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e04:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e08:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e0c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007e10:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007e14:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e18:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007e1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e20:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e24:	e058      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	ee07 3a90 	vmov	s15, r3
 8007e2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e30:	eddf 6a64 	vldr	s13, [pc, #400]	; 8007fc4 <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8007e34:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007e38:	4b61      	ldr	r3, [pc, #388]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007e40:	ee07 3a90 	vmov	s15, r3
 8007e44:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e48:	ed97 6a02 	vldr	s12, [r7, #8]
 8007e4c:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007e50:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007e54:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8007e58:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007e5c:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8007e60:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007e64:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007e68:	e036      	b.n	8007ed8 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007e6a:	4b55      	ldr	r3, [pc, #340]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007e6c:	689b      	ldr	r3, [r3, #8]
 8007e6e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d005      	beq.n	8007e82 <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8007e76:	4b52      	ldr	r3, [pc, #328]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007e78:	689b      	ldr	r3, [r3, #8]
 8007e7a:	0f1b      	lsrs	r3, r3, #28
 8007e7c:	f003 030f 	and.w	r3, r3, #15
 8007e80:	e006      	b.n	8007e90 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8007e82:	4b4f      	ldr	r3, [pc, #316]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007e84:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e88:	041b      	lsls	r3, r3, #16
 8007e8a:	0f1b      	lsrs	r3, r3, #28
 8007e8c:	f003 030f 	and.w	r3, r3, #15
 8007e90:	4a4e      	ldr	r2, [pc, #312]	; (8007fcc <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8007e92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e96:	ee07 3a90 	vmov	s15, r3
 8007e9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007e9e:	693b      	ldr	r3, [r7, #16]
 8007ea0:	ee07 3a90 	vmov	s15, r3
 8007ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007ea8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8007eac:	69bb      	ldr	r3, [r7, #24]
 8007eae:	ee07 3a90 	vmov	s15, r3
 8007eb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8007eb6:	ed97 6a02 	vldr	s12, [r7, #8]
 8007eba:	eddf 5a43 	vldr	s11, [pc, #268]	; 8007fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8007ebe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8007ec2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8007ec6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007eca:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8007ece:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007ed2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8007ed6:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8007ed8:	4b39      	ldr	r3, [pc, #228]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007edc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	d017      	beq.n	8007f14 <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007ee4:	4b36      	ldr	r3, [pc, #216]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007ee6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee8:	0a5b      	lsrs	r3, r3, #9
 8007eea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007eee:	ee07 3a90 	vmov	s15, r3
 8007ef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8007ef6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007efa:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007efe:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f02:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f0a:	ee17 2a90 	vmov	r2, s15
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	601a      	str	r2, [r3, #0]
 8007f12:	e002      	b.n	8007f1a <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	2200      	movs	r2, #0
 8007f18:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8007f1a:	4b29      	ldr	r3, [pc, #164]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d017      	beq.n	8007f56 <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f26:	4b26      	ldr	r3, [pc, #152]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f2a:	0c1b      	lsrs	r3, r3, #16
 8007f2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f30:	ee07 3a90 	vmov	s15, r3
 8007f34:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8007f38:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f3c:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f40:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f4c:	ee17 2a90 	vmov	r2, s15
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]
 8007f54:	e002      	b.n	8007f5c <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2200      	movs	r2, #0
 8007f5a:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8007f5c:	4b18      	ldr	r3, [pc, #96]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d017      	beq.n	8007f98 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f68:	4b15      	ldr	r3, [pc, #84]	; (8007fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8007f6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f6c:	0e1b      	lsrs	r3, r3, #24
 8007f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007f72:	ee07 3a90 	vmov	s15, r3
 8007f76:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8007f7a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8007f7e:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8007f82:	edd7 6a07 	vldr	s13, [r7, #28]
 8007f86:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8007f8a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007f8e:	ee17 2a90 	vmov	r2, s15
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8007f96:	e00c      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	609a      	str	r2, [r3, #8]
}
 8007f9e:	e008      	b.n	8007fb2 <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	2200      	movs	r2, #0
 8007fa4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	2200      	movs	r2, #0
 8007faa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2200      	movs	r2, #0
 8007fb0:	609a      	str	r2, [r3, #8]
}
 8007fb2:	bf00      	nop
 8007fb4:	3724      	adds	r7, #36	; 0x24
 8007fb6:	46bd      	mov	sp, r7
 8007fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fbc:	4770      	bx	lr
 8007fbe:	bf00      	nop
 8007fc0:	46020c00 	.word	0x46020c00
 8007fc4:	4b742400 	.word	0x4b742400
 8007fc8:	46000000 	.word	0x46000000
 8007fcc:	0800fa7c 	.word	0x0800fa7c

08007fd0 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b08e      	sub	sp, #56	; 0x38
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8007fda:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007fde:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 8007fe2:	430b      	orrs	r3, r1
 8007fe4:	d145      	bne.n	8008072 <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8007fe6:	4ba7      	ldr	r3, [pc, #668]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007fe8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007fec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ff0:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 8007ff2:	4ba4      	ldr	r3, [pc, #656]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8007ff4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d108      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8008000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008002:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008006:	d104      	bne.n	8008012 <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8008008:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800800c:	637b      	str	r3, [r7, #52]	; 0x34
 800800e:	f001 b9b3 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 8008012:	4b9c      	ldr	r3, [pc, #624]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008014:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008018:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008020:	d114      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 8008022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008024:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008028:	d110      	bne.n	800804c <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800802a:	4b96      	ldr	r3, [pc, #600]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800802c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008030:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008034:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008038:	d103      	bne.n	8008042 <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 800803a:	23fa      	movs	r3, #250	; 0xfa
 800803c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800803e:	f001 b99b 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008042:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008046:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008048:	f001 b996 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 800804c:	4b8d      	ldr	r3, [pc, #564]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008058:	d107      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 800805a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800805c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008060:	d103      	bne.n	800806a <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 8008062:	4b89      	ldr	r3, [pc, #548]	; (8008288 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 8008064:	637b      	str	r3, [r7, #52]	; 0x34
 8008066:	f001 b987 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 800806a:	2300      	movs	r3, #0
 800806c:	637b      	str	r3, [r7, #52]	; 0x34
 800806e:	f001 b983 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8008072:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008076:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800807a:	430b      	orrs	r3, r1
 800807c:	d151      	bne.n	8008122 <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 800807e:	4b81      	ldr	r3, [pc, #516]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008080:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008084:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8008088:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800808a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800808c:	2b80      	cmp	r3, #128	; 0x80
 800808e:	d035      	beq.n	80080fc <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 8008090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008092:	2b80      	cmp	r3, #128	; 0x80
 8008094:	d841      	bhi.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 8008096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008098:	2b60      	cmp	r3, #96	; 0x60
 800809a:	d02a      	beq.n	80080f2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 800809c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800809e:	2b60      	cmp	r3, #96	; 0x60
 80080a0:	d83b      	bhi.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80080a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080a4:	2b40      	cmp	r3, #64	; 0x40
 80080a6:	d009      	beq.n	80080bc <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80080a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080aa:	2b40      	cmp	r3, #64	; 0x40
 80080ac:	d835      	bhi.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80080ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00c      	beq.n	80080ce <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80080b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080b6:	2b20      	cmp	r3, #32
 80080b8:	d012      	beq.n	80080e0 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80080ba:	e02e      	b.n	800811a <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80080bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80080c0:	4618      	mov	r0, r3
 80080c2:	f7ff fb4d 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80080c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ca:	f001 b955 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80080ce:	f107 0318 	add.w	r3, r7, #24
 80080d2:	4618      	mov	r0, r3
 80080d4:	f7ff fcac 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80080d8:	69bb      	ldr	r3, [r7, #24]
 80080da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080dc:	f001 b94c 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80080e0:	f107 030c 	add.w	r3, r7, #12
 80080e4:	4618      	mov	r0, r3
 80080e6:	f7ff fe0b 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080ee:	f001 b943 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80080f2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80080f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80080f8:	f001 b93e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80080fc:	4b61      	ldr	r3, [pc, #388]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008108:	d103      	bne.n	8008112 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 800810a:	4b60      	ldr	r3, [pc, #384]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800810c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800810e:	f001 b933 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008112:	2300      	movs	r3, #0
 8008114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008116:	f001 b92f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 800811a:	2300      	movs	r3, #0
 800811c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800811e:	f001 b92b 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 8008122:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008126:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800812a:	430b      	orrs	r3, r1
 800812c:	d158      	bne.n	80081e0 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 800812e:	4b55      	ldr	r3, [pc, #340]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008130:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008134:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008138:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800813a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800813c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008140:	d03b      	beq.n	80081ba <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 8008142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008144:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008148:	d846      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800814a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800814c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008150:	d02e      	beq.n	80081b0 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 8008152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008154:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008158:	d83e      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800815a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800815c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008160:	d00b      	beq.n	800817a <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 8008162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008168:	d836      	bhi.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 800816a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800816c:	2b00      	cmp	r3, #0
 800816e:	d00d      	beq.n	800818c <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008172:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008176:	d012      	beq.n	800819e <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 8008178:	e02e      	b.n	80081d8 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800817a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800817e:	4618      	mov	r0, r3
 8008180:	f7ff faee 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008186:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008188:	f001 b8f6 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800818c:	f107 0318 	add.w	r3, r7, #24
 8008190:	4618      	mov	r0, r3
 8008192:	f7ff fc4d 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800819a:	f001 b8ed 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800819e:	f107 030c 	add.w	r3, r7, #12
 80081a2:	4618      	mov	r0, r3
 80081a4:	f7ff fdac 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081ac:	f001 b8e4 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80081b0:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80081b4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081b6:	f001 b8df 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80081ba:	4b32      	ldr	r3, [pc, #200]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80081c6:	d103      	bne.n	80081d0 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80081c8:	4b30      	ldr	r3, [pc, #192]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80081cc:	f001 b8d4 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80081d0:	2300      	movs	r3, #0
 80081d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081d4:	f001 b8d0 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 80081d8:	2300      	movs	r3, #0
 80081da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80081dc:	f001 b8cc 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 80081e8:	430b      	orrs	r3, r1
 80081ea:	d126      	bne.n	800823a <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 80081ec:	4b25      	ldr	r3, [pc, #148]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80081ee:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80081f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80081f6:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 80081f8:	4b22      	ldr	r3, [pc, #136]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008200:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008204:	d106      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 8008206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008208:	2b00      	cmp	r3, #0
 800820a:	d103      	bne.n	8008214 <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 800820c:	4b1f      	ldr	r3, [pc, #124]	; (800828c <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 800820e:	637b      	str	r3, [r7, #52]	; 0x34
 8008210:	f001 b8b2 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 8008214:	4b1b      	ldr	r3, [pc, #108]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800821c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008220:	d107      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 8008222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008228:	d103      	bne.n	8008232 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 800822a:	4b19      	ldr	r3, [pc, #100]	; (8008290 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 800822c:	637b      	str	r3, [r7, #52]	; 0x34
 800822e:	f001 b8a3 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 8008232:	2300      	movs	r3, #0
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
 8008236:	f001 b89f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 800823a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800823e:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 8008242:	430b      	orrs	r3, r1
 8008244:	d16e      	bne.n	8008324 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008246:	4b0f      	ldr	r3, [pc, #60]	; (8008284 <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8008248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800824c:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8008250:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008254:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008258:	d03d      	beq.n	80082d6 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800825a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800825c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008260:	d85c      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008264:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008268:	d014      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 800826a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800826c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008270:	d854      	bhi.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008274:	2b00      	cmp	r3, #0
 8008276:	d01f      	beq.n	80082b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 8008278:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800827a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800827e:	d012      	beq.n	80082a6 <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 8008280:	e04c      	b.n	800831c <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8008282:	bf00      	nop
 8008284:	46020c00 	.word	0x46020c00
 8008288:	0007a120 	.word	0x0007a120
 800828c:	00f42400 	.word	0x00f42400
 8008290:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008294:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008298:	4618      	mov	r0, r3
 800829a:	f7ff fa61 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800829e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80082a0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082a2:	f001 b869 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80082a6:	f107 0318 	add.w	r3, r7, #24
 80082aa:	4618      	mov	r0, r3
 80082ac:	f7ff fbc0 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80082b0:	69fb      	ldr	r3, [r7, #28]
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082b4:	f001 b860 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80082b8:	4ba7      	ldr	r3, [pc, #668]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80082c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80082c4:	d103      	bne.n	80082ce <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80082c6:	4ba5      	ldr	r3, [pc, #660]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80082c8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80082ca:	f001 b855 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80082ce:	2300      	movs	r3, #0
 80082d0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80082d2:	f001 b851 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80082d6:	4ba0      	ldr	r3, [pc, #640]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	f003 0320 	and.w	r3, r3, #32
 80082de:	2b20      	cmp	r3, #32
 80082e0:	d118      	bne.n	8008314 <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80082e2:	4b9d      	ldr	r3, [pc, #628]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d005      	beq.n	80082fa <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80082ee:	4b9a      	ldr	r3, [pc, #616]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	0e1b      	lsrs	r3, r3, #24
 80082f4:	f003 030f 	and.w	r3, r3, #15
 80082f8:	e006      	b.n	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 80082fa:	4b97      	ldr	r3, [pc, #604]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80082fc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008300:	041b      	lsls	r3, r3, #16
 8008302:	0e1b      	lsrs	r3, r3, #24
 8008304:	f003 030f 	and.w	r3, r3, #15
 8008308:	4a95      	ldr	r2, [pc, #596]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800830a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800830e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008310:	f001 b832 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008314:	2300      	movs	r3, #0
 8008316:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008318:	f001 b82e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008320:	f001 b82a 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8008324:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008328:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 800832c:	430b      	orrs	r3, r1
 800832e:	d17f      	bne.n	8008430 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8008330:	4b89      	ldr	r3, [pc, #548]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008332:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008336:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800833a:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 800833c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800833e:	2b00      	cmp	r3, #0
 8008340:	d165      	bne.n	800840e <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 8008342:	4b85      	ldr	r3, [pc, #532]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008344:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008348:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 800834c:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 800834e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008350:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008354:	d034      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 8008356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008358:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800835c:	d853      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800835e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008360:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008364:	d00b      	beq.n	800837e <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 8008366:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008368:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800836c:	d84b      	bhi.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 800836e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008370:	2b00      	cmp	r3, #0
 8008372:	d016      	beq.n	80083a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 8008374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008376:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800837a:	d009      	beq.n	8008390 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 800837c:	e043      	b.n	8008406 <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800837e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008382:	4618      	mov	r0, r3
 8008384:	f7ff f9ec 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8008388:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800838a:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800838c:	f000 bff4 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008390:	f107 0318 	add.w	r3, r7, #24
 8008394:	4618      	mov	r0, r3
 8008396:	f7ff fb4b 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800839e:	f000 bfeb 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80083a2:	4b6d      	ldr	r3, [pc, #436]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80083aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80083ae:	d103      	bne.n	80083b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80083b0:	4b6a      	ldr	r3, [pc, #424]	; (800855c <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80083b2:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80083b4:	f000 bfe0 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80083b8:	2300      	movs	r3, #0
 80083ba:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80083bc:	f000 bfdc 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80083c0:	4b65      	ldr	r3, [pc, #404]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	f003 0320 	and.w	r3, r3, #32
 80083c8:	2b20      	cmp	r3, #32
 80083ca:	d118      	bne.n	80083fe <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80083cc:	4b62      	ldr	r3, [pc, #392]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80083ce:	689b      	ldr	r3, [r3, #8]
 80083d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083d4:	2b00      	cmp	r3, #0
 80083d6:	d005      	beq.n	80083e4 <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 80083d8:	4b5f      	ldr	r3, [pc, #380]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80083da:	689b      	ldr	r3, [r3, #8]
 80083dc:	0e1b      	lsrs	r3, r3, #24
 80083de:	f003 030f 	and.w	r3, r3, #15
 80083e2:	e006      	b.n	80083f2 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 80083e4:	4b5c      	ldr	r3, [pc, #368]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80083e6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80083ea:	041b      	lsls	r3, r3, #16
 80083ec:	0e1b      	lsrs	r3, r3, #24
 80083ee:	f003 030f 	and.w	r3, r3, #15
 80083f2:	4a5b      	ldr	r2, [pc, #364]	; (8008560 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 80083f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80083f8:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80083fa:	f000 bfbd 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80083fe:	2300      	movs	r3, #0
 8008400:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8008402:	f000 bfb9 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 8008406:	2300      	movs	r3, #0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800840a:	f000 bfb5 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 800840e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008410:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008414:	d108      	bne.n	8008428 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008416:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800841a:	4618      	mov	r0, r3
 800841c:	f7ff f9a0 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8008420:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008422:	637b      	str	r3, [r7, #52]	; 0x34
 8008424:	f000 bfa8 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8008428:	2300      	movs	r3, #0
 800842a:	637b      	str	r3, [r7, #52]	; 0x34
 800842c:	f000 bfa4 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8008430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008434:	1e51      	subs	r1, r2, #1
 8008436:	430b      	orrs	r3, r1
 8008438:	d136      	bne.n	80084a8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 800843a:	4b47      	ldr	r3, [pc, #284]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800843c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008440:	f003 0303 	and.w	r3, r3, #3
 8008444:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 8008446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 800844c:	f7fe fae2 	bl	8006a14 <HAL_RCC_GetPCLK2Freq>
 8008450:	6378      	str	r0, [r7, #52]	; 0x34
 8008452:	f000 bf91 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 8008456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008458:	2b01      	cmp	r3, #1
 800845a:	d104      	bne.n	8008466 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800845c:	f7fe f9a4 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008460:	6378      	str	r0, [r7, #52]	; 0x34
 8008462:	f000 bf89 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 8008466:	4b3c      	ldr	r3, [pc, #240]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800846e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008472:	d106      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 8008474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008476:	2b02      	cmp	r3, #2
 8008478:	d103      	bne.n	8008482 <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 800847a:	4b3a      	ldr	r3, [pc, #232]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800847c:	637b      	str	r3, [r7, #52]	; 0x34
 800847e:	f000 bf7b 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 8008482:	4b35      	ldr	r3, [pc, #212]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8008484:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008488:	f003 0302 	and.w	r3, r3, #2
 800848c:	2b02      	cmp	r3, #2
 800848e:	d107      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 8008490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008492:	2b03      	cmp	r3, #3
 8008494:	d104      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 8008496:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800849a:	637b      	str	r3, [r7, #52]	; 0x34
 800849c:	f000 bf6c 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	637b      	str	r3, [r7, #52]	; 0x34
 80084a4:	f000 bf68 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80084a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80084ac:	1e91      	subs	r1, r2, #2
 80084ae:	430b      	orrs	r3, r1
 80084b0:	d136      	bne.n	8008520 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80084b2:	4b29      	ldr	r3, [pc, #164]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80084b4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80084b8:	f003 030c 	and.w	r3, r3, #12
 80084bc:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80084be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d104      	bne.n	80084ce <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80084c4:	f7fe fa92 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 80084c8:	6378      	str	r0, [r7, #52]	; 0x34
 80084ca:	f000 bf55 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80084ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084d0:	2b04      	cmp	r3, #4
 80084d2:	d104      	bne.n	80084de <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80084d4:	f7fe f968 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 80084d8:	6378      	str	r0, [r7, #52]	; 0x34
 80084da:	f000 bf4d 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 80084de:	4b1e      	ldr	r3, [pc, #120]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084e6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084ea:	d106      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80084ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ee:	2b08      	cmp	r3, #8
 80084f0:	d103      	bne.n	80084fa <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 80084f2:	4b1c      	ldr	r3, [pc, #112]	; (8008564 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80084f4:	637b      	str	r3, [r7, #52]	; 0x34
 80084f6:	f000 bf3f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 80084fa:	4b17      	ldr	r3, [pc, #92]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80084fc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008500:	f003 0302 	and.w	r3, r3, #2
 8008504:	2b02      	cmp	r3, #2
 8008506:	d107      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8008508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800850a:	2b0c      	cmp	r3, #12
 800850c:	d104      	bne.n	8008518 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 800850e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008512:	637b      	str	r3, [r7, #52]	; 0x34
 8008514:	f000 bf30 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8008518:	2300      	movs	r3, #0
 800851a:	637b      	str	r3, [r7, #52]	; 0x34
 800851c:	f000 bf2c 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8008520:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008524:	1f11      	subs	r1, r2, #4
 8008526:	430b      	orrs	r3, r1
 8008528:	d13f      	bne.n	80085aa <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 800852a:	4b0b      	ldr	r3, [pc, #44]	; (8008558 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800852c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008530:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8008534:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 8008536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008538:	2b00      	cmp	r3, #0
 800853a:	d104      	bne.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800853c:	f7fe fa56 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008540:	6378      	str	r0, [r7, #52]	; 0x34
 8008542:	f000 bf19 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 8008546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008548:	2b10      	cmp	r3, #16
 800854a:	d10d      	bne.n	8008568 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800854c:	f7fe f92c 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008550:	6378      	str	r0, [r7, #52]	; 0x34
 8008552:	f000 bf11 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008556:	bf00      	nop
 8008558:	46020c00 	.word	0x46020c00
 800855c:	02dc6c00 	.word	0x02dc6c00
 8008560:	0800fa7c 	.word	0x0800fa7c
 8008564:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8008568:	4ba6      	ldr	r3, [pc, #664]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008570:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008574:	d106      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 8008576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008578:	2b20      	cmp	r3, #32
 800857a:	d103      	bne.n	8008584 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 800857c:	4ba2      	ldr	r3, [pc, #648]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800857e:	637b      	str	r3, [r7, #52]	; 0x34
 8008580:	f000 befa 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 8008584:	4b9f      	ldr	r3, [pc, #636]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008586:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800858a:	f003 0302 	and.w	r3, r3, #2
 800858e:	2b02      	cmp	r3, #2
 8008590:	d107      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 8008592:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008594:	2b30      	cmp	r3, #48	; 0x30
 8008596:	d104      	bne.n	80085a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 8008598:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800859c:	637b      	str	r3, [r7, #52]	; 0x34
 800859e:	f000 beeb 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80085a2:	2300      	movs	r3, #0
 80085a4:	637b      	str	r3, [r7, #52]	; 0x34
 80085a6:	f000 bee7 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80085aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80085ae:	f1a2 0108 	sub.w	r1, r2, #8
 80085b2:	430b      	orrs	r3, r1
 80085b4:	d136      	bne.n	8008624 <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80085b6:	4b93      	ldr	r3, [pc, #588]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085bc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80085c0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80085c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d104      	bne.n	80085d2 <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80085c8:	f7fe fa10 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 80085cc:	6378      	str	r0, [r7, #52]	; 0x34
 80085ce:	f000 bed3 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80085d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d4:	2b40      	cmp	r3, #64	; 0x40
 80085d6:	d104      	bne.n	80085e2 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80085d8:	f7fe f8e6 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 80085dc:	6378      	str	r0, [r7, #52]	; 0x34
 80085de:	f000 becb 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 80085e2:	4b88      	ldr	r3, [pc, #544]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80085ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ee:	d106      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	2b80      	cmp	r3, #128	; 0x80
 80085f4:	d103      	bne.n	80085fe <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 80085f6:	4b84      	ldr	r3, [pc, #528]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80085f8:	637b      	str	r3, [r7, #52]	; 0x34
 80085fa:	f000 bebd 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 80085fe:	4b81      	ldr	r3, [pc, #516]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008600:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008604:	f003 0302 	and.w	r3, r3, #2
 8008608:	2b02      	cmp	r3, #2
 800860a:	d107      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 800860c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800860e:	2bc0      	cmp	r3, #192	; 0xc0
 8008610:	d104      	bne.n	800861c <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 8008612:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008616:	637b      	str	r3, [r7, #52]	; 0x34
 8008618:	f000 beae 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 800861c:	2300      	movs	r3, #0
 800861e:	637b      	str	r3, [r7, #52]	; 0x34
 8008620:	f000 beaa 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 8008624:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008628:	f1a2 0110 	sub.w	r1, r2, #16
 800862c:	430b      	orrs	r3, r1
 800862e:	d139      	bne.n	80086a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8008630:	4b74      	ldr	r3, [pc, #464]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008632:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800863a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 800863c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800863e:	2b00      	cmp	r3, #0
 8008640:	d104      	bne.n	800864c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008642:	f7fe f9d3 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008646:	6378      	str	r0, [r7, #52]	; 0x34
 8008648:	f000 be96 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 800864c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800864e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008652:	d104      	bne.n	800865e <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008654:	f7fe f8a8 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008658:	6378      	str	r0, [r7, #52]	; 0x34
 800865a:	f000 be8d 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 800865e:	4b69      	ldr	r3, [pc, #420]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008666:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800866a:	d107      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 800866c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800866e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008672:	d103      	bne.n	800867c <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 8008674:	4b64      	ldr	r3, [pc, #400]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8008676:	637b      	str	r3, [r7, #52]	; 0x34
 8008678:	f000 be7e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 800867c:	4b61      	ldr	r3, [pc, #388]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800867e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008682:	f003 0302 	and.w	r3, r3, #2
 8008686:	2b02      	cmp	r3, #2
 8008688:	d108      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 800868a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800868c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008690:	d104      	bne.n	800869c <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 8008692:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008696:	637b      	str	r3, [r7, #52]	; 0x34
 8008698:	f000 be6e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	637b      	str	r3, [r7, #52]	; 0x34
 80086a0:	f000 be6a 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80086a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80086a8:	f1a2 0120 	sub.w	r1, r2, #32
 80086ac:	430b      	orrs	r3, r1
 80086ae:	d158      	bne.n	8008762 <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80086b0:	4b54      	ldr	r3, [pc, #336]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80086b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80086b6:	f003 0307 	and.w	r3, r3, #7
 80086ba:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80086bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d104      	bne.n	80086cc <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80086c2:	f7fe f9bb 	bl	8006a3c <HAL_RCC_GetPCLK3Freq>
 80086c6:	6378      	str	r0, [r7, #52]	; 0x34
 80086c8:	f000 be56 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80086cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ce:	2b01      	cmp	r3, #1
 80086d0:	d104      	bne.n	80086dc <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80086d2:	f7fe f869 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 80086d6:	6378      	str	r0, [r7, #52]	; 0x34
 80086d8:	f000 be4e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 80086dc:	4b49      	ldr	r3, [pc, #292]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086e8:	d106      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 80086ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086ec:	2b02      	cmp	r3, #2
 80086ee:	d103      	bne.n	80086f8 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 80086f0:	4b45      	ldr	r3, [pc, #276]	; (8008808 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80086f2:	637b      	str	r3, [r7, #52]	; 0x34
 80086f4:	f000 be40 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 80086f8:	4b42      	ldr	r3, [pc, #264]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80086fa:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b02      	cmp	r3, #2
 8008704:	d107      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 8008706:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008708:	2b03      	cmp	r3, #3
 800870a:	d104      	bne.n	8008716 <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 800870c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008710:	637b      	str	r3, [r7, #52]	; 0x34
 8008712:	f000 be31 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 8008716:	4b3b      	ldr	r3, [pc, #236]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0320 	and.w	r3, r3, #32
 800871e:	2b20      	cmp	r3, #32
 8008720:	d11b      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 8008722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008724:	2b04      	cmp	r3, #4
 8008726:	d118      	bne.n	800875a <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008728:	4b36      	ldr	r3, [pc, #216]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800872a:	689b      	ldr	r3, [r3, #8]
 800872c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008730:	2b00      	cmp	r3, #0
 8008732:	d005      	beq.n	8008740 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 8008734:	4b33      	ldr	r3, [pc, #204]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008736:	689b      	ldr	r3, [r3, #8]
 8008738:	0e1b      	lsrs	r3, r3, #24
 800873a:	f003 030f 	and.w	r3, r3, #15
 800873e:	e006      	b.n	800874e <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8008740:	4b30      	ldr	r3, [pc, #192]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008742:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008746:	041b      	lsls	r3, r3, #16
 8008748:	0e1b      	lsrs	r3, r3, #24
 800874a:	f003 030f 	and.w	r3, r3, #15
 800874e:	4a2f      	ldr	r2, [pc, #188]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8008750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008754:	637b      	str	r3, [r7, #52]	; 0x34
 8008756:	f000 be0f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 800875a:	2300      	movs	r3, #0
 800875c:	637b      	str	r3, [r7, #52]	; 0x34
 800875e:	f000 be0b 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 8008762:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008766:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800876a:	430b      	orrs	r3, r1
 800876c:	d172      	bne.n	8008854 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 800876e:	4b25      	ldr	r3, [pc, #148]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8008770:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008774:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8008778:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 800877a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800877c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008780:	d104      	bne.n	800878c <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008782:	f7fe f811 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008786:	6378      	str	r0, [r7, #52]	; 0x34
 8008788:	f000 bdf6 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 800878c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800878e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008792:	d108      	bne.n	80087a6 <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008794:	f107 0318 	add.w	r3, r7, #24
 8008798:	4618      	mov	r0, r3
 800879a:	f7ff f949 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	637b      	str	r3, [r7, #52]	; 0x34
 80087a2:	f000 bde9 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80087a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d104      	bne.n	80087b6 <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80087ac:	f7fe f904 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80087b0:	6378      	str	r0, [r7, #52]	; 0x34
 80087b2:	f000 bde1 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80087b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087b8:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80087bc:	d128      	bne.n	8008810 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80087be:	4b11      	ldr	r3, [pc, #68]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	f003 0320 	and.w	r3, r3, #32
 80087c6:	2b20      	cmp	r3, #32
 80087c8:	d118      	bne.n	80087fc <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80087ca:	4b0e      	ldr	r3, [pc, #56]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d005      	beq.n	80087e2 <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80087d6:	4b0b      	ldr	r3, [pc, #44]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80087d8:	689b      	ldr	r3, [r3, #8]
 80087da:	0e1b      	lsrs	r3, r3, #24
 80087dc:	f003 030f 	and.w	r3, r3, #15
 80087e0:	e006      	b.n	80087f0 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 80087e2:	4b08      	ldr	r3, [pc, #32]	; (8008804 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80087e4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80087e8:	041b      	lsls	r3, r3, #16
 80087ea:	0e1b      	lsrs	r3, r3, #24
 80087ec:	f003 030f 	and.w	r3, r3, #15
 80087f0:	4a06      	ldr	r2, [pc, #24]	; (800880c <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 80087f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087f6:	637b      	str	r3, [r7, #52]	; 0x34
 80087f8:	f000 bdbe 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 80087fc:	2300      	movs	r3, #0
 80087fe:	637b      	str	r3, [r7, #52]	; 0x34
 8008800:	f000 bdba 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008804:	46020c00 	.word	0x46020c00
 8008808:	00f42400 	.word	0x00f42400
 800880c:	0800fa7c 	.word	0x0800fa7c
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8008810:	4baf      	ldr	r3, [pc, #700]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008818:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800881c:	d107      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 800881e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008820:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008824:	d103      	bne.n	800882e <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 8008826:	4bab      	ldr	r3, [pc, #684]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008828:	637b      	str	r3, [r7, #52]	; 0x34
 800882a:	f000 bda5 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 800882e:	4ba8      	ldr	r3, [pc, #672]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008836:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800883a:	d107      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 800883c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800883e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008842:	d103      	bne.n	800884c <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 8008844:	4ba3      	ldr	r3, [pc, #652]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008846:	637b      	str	r3, [r7, #52]	; 0x34
 8008848:	f000 bd96 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 800884c:	2300      	movs	r3, #0
 800884e:	637b      	str	r3, [r7, #52]	; 0x34
 8008850:	f000 bd92 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 8008854:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008858:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800885c:	430b      	orrs	r3, r1
 800885e:	d158      	bne.n	8008912 <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8008860:	4b9b      	ldr	r3, [pc, #620]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008862:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800886c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800886e:	2b04      	cmp	r3, #4
 8008870:	d84b      	bhi.n	800890a <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 8008872:	a201      	add	r2, pc, #4	; (adr r2, 8008878 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 8008874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008878:	080088b1 	.word	0x080088b1
 800887c:	0800888d 	.word	0x0800888d
 8008880:	0800889f 	.word	0x0800889f
 8008884:	080088bb 	.word	0x080088bb
 8008888:	080088c5 	.word	0x080088c5
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800888c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008890:	4618      	mov	r0, r3
 8008892:	f7fe ff65 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008898:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800889a:	f000 bd6d 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800889e:	f107 030c 	add.w	r3, r7, #12
 80088a2:	4618      	mov	r0, r3
 80088a4:	f7ff fa2c 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80088a8:	693b      	ldr	r3, [r7, #16]
 80088aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088ac:	f000 bd64 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80088b0:	f7fe f882 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 80088b4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80088b6:	f000 bd5f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80088ba:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80088be:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80088c0:	f000 bd5a 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80088c4:	4b82      	ldr	r3, [pc, #520]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	f003 0320 	and.w	r3, r3, #32
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d118      	bne.n	8008902 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80088d0:	4b7f      	ldr	r3, [pc, #508]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80088d2:	689b      	ldr	r3, [r3, #8]
 80088d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d005      	beq.n	80088e8 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 80088dc:	4b7c      	ldr	r3, [pc, #496]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80088de:	689b      	ldr	r3, [r3, #8]
 80088e0:	0e1b      	lsrs	r3, r3, #24
 80088e2:	f003 030f 	and.w	r3, r3, #15
 80088e6:	e006      	b.n	80088f6 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 80088e8:	4b79      	ldr	r3, [pc, #484]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80088ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80088ee:	041b      	lsls	r3, r3, #16
 80088f0:	0e1b      	lsrs	r3, r3, #24
 80088f2:	f003 030f 	and.w	r3, r3, #15
 80088f6:	4a78      	ldr	r2, [pc, #480]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80088f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80088fc:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80088fe:	f000 bd3b 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008902:	2300      	movs	r3, #0
 8008904:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008906:	f000 bd37 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800890a:	2300      	movs	r3, #0
 800890c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800890e:	f000 bd33 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 8008912:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008916:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 800891a:	430b      	orrs	r3, r1
 800891c:	d167      	bne.n	80089ee <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 800891e:	4b6c      	ldr	r3, [pc, #432]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008920:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008924:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8008928:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800892a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800892c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008930:	d036      	beq.n	80089a0 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 8008932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008934:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008938:	d855      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800893a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800893c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008940:	d029      	beq.n	8008996 <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 8008942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008944:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8008948:	d84d      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800894a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800894c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008950:	d013      	beq.n	800897a <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8008952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008954:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008958:	d845      	bhi.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 800895a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800895c:	2b00      	cmp	r3, #0
 800895e:	d015      	beq.n	800898c <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8008960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008962:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008966:	d13e      	bne.n	80089e6 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008968:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800896c:	4618      	mov	r0, r3
 800896e:	f7fe fef7 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 8008972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008974:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008976:	f000 bcff 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800897a:	f107 030c 	add.w	r3, r7, #12
 800897e:	4618      	mov	r0, r3
 8008980:	f7ff f9be 	bl	8007d00 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 8008984:	693b      	ldr	r3, [r7, #16]
 8008986:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008988:	f000 bcf6 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 800898c:	f7fe f814 	bl	80069b8 <HAL_RCC_GetHCLKFreq>
 8008990:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008992:	f000 bcf1 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8008996:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800899a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800899c:	f000 bcec 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80089a0:	4b4b      	ldr	r3, [pc, #300]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f003 0320 	and.w	r3, r3, #32
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	d118      	bne.n	80089de <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80089ac:	4b48      	ldr	r3, [pc, #288]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80089ae:	689b      	ldr	r3, [r3, #8]
 80089b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d005      	beq.n	80089c4 <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80089b8:	4b45      	ldr	r3, [pc, #276]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80089ba:	689b      	ldr	r3, [r3, #8]
 80089bc:	0e1b      	lsrs	r3, r3, #24
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	e006      	b.n	80089d2 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80089c4:	4b42      	ldr	r3, [pc, #264]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80089c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80089ca:	041b      	lsls	r3, r3, #16
 80089cc:	0e1b      	lsrs	r3, r3, #24
 80089ce:	f003 030f 	and.w	r3, r3, #15
 80089d2:	4a41      	ldr	r2, [pc, #260]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80089d4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80089d8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80089da:	f000 bccd 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80089de:	2300      	movs	r3, #0
 80089e0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089e2:	f000 bcc9 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80089e6:	2300      	movs	r3, #0
 80089e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80089ea:	f000 bcc5 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 80089ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80089f2:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 80089f6:	430b      	orrs	r3, r1
 80089f8:	d14c      	bne.n	8008a94 <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80089fa:	4b35      	ldr	r3, [pc, #212]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80089fc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a00:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008a04:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8008a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d104      	bne.n	8008a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008a0c:	f7fd ffee 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008a10:	6378      	str	r0, [r7, #52]	; 0x34
 8008a12:	f000 bcb1 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8008a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a18:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a1c:	d104      	bne.n	8008a28 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008a1e:	f7fd fec3 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008a22:	6378      	str	r0, [r7, #52]	; 0x34
 8008a24:	f000 bca8 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8008a28:	4b29      	ldr	r3, [pc, #164]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a30:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008a34:	d107      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8008a36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008a3c:	d103      	bne.n	8008a46 <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8008a3e:	4b25      	ldr	r3, [pc, #148]	; (8008ad4 <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8008a40:	637b      	str	r3, [r7, #52]	; 0x34
 8008a42:	f000 bc99 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8008a46:	4b22      	ldr	r3, [pc, #136]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f003 0320 	and.w	r3, r3, #32
 8008a4e:	2b20      	cmp	r3, #32
 8008a50:	d11c      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8008a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a54:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008a58:	d118      	bne.n	8008a8c <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008a5a:	4b1d      	ldr	r3, [pc, #116]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008a5c:	689b      	ldr	r3, [r3, #8]
 8008a5e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d005      	beq.n	8008a72 <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8008a66:	4b1a      	ldr	r3, [pc, #104]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008a68:	689b      	ldr	r3, [r3, #8]
 8008a6a:	0e1b      	lsrs	r3, r3, #24
 8008a6c:	f003 030f 	and.w	r3, r3, #15
 8008a70:	e006      	b.n	8008a80 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8008a72:	4b17      	ldr	r3, [pc, #92]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008a74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008a78:	041b      	lsls	r3, r3, #16
 8008a7a:	0e1b      	lsrs	r3, r3, #24
 8008a7c:	f003 030f 	and.w	r3, r3, #15
 8008a80:	4a15      	ldr	r2, [pc, #84]	; (8008ad8 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8008a82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a86:	637b      	str	r3, [r7, #52]	; 0x34
 8008a88:	f000 bc76 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	637b      	str	r3, [r7, #52]	; 0x34
 8008a90:	f000 bc72 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8008a94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a98:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8008a9c:	430b      	orrs	r3, r1
 8008a9e:	d153      	bne.n	8008b48 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8008aa2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008aa6:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008aaa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8008aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d104      	bne.n	8008abc <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008ab2:	f7fd ff9b 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008ab6:	6378      	str	r0, [r7, #52]	; 0x34
 8008ab8:	f000 bc5e 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8008abc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008abe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ac2:	d10b      	bne.n	8008adc <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008ac4:	f7fd fe70 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008ac8:	6378      	str	r0, [r7, #52]	; 0x34
 8008aca:	f000 bc55 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008ace:	bf00      	nop
 8008ad0:	46020c00 	.word	0x46020c00
 8008ad4:	00f42400 	.word	0x00f42400
 8008ad8:	0800fa7c 	.word	0x0800fa7c
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8008adc:	4ba1      	ldr	r3, [pc, #644]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008ae8:	d107      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8008aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008aec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008af0:	d103      	bne.n	8008afa <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8008af2:	4b9d      	ldr	r3, [pc, #628]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008af4:	637b      	str	r3, [r7, #52]	; 0x34
 8008af6:	f000 bc3f 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8008afa:	4b9a      	ldr	r3, [pc, #616]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008afc:	681b      	ldr	r3, [r3, #0]
 8008afe:	f003 0320 	and.w	r3, r3, #32
 8008b02:	2b20      	cmp	r3, #32
 8008b04:	d11c      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8008b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008b0c:	d118      	bne.n	8008b40 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008b0e:	4b95      	ldr	r3, [pc, #596]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d005      	beq.n	8008b26 <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8008b1a:	4b92      	ldr	r3, [pc, #584]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008b1c:	689b      	ldr	r3, [r3, #8]
 8008b1e:	0e1b      	lsrs	r3, r3, #24
 8008b20:	f003 030f 	and.w	r3, r3, #15
 8008b24:	e006      	b.n	8008b34 <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8008b26:	4b8f      	ldr	r3, [pc, #572]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008b28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b2c:	041b      	lsls	r3, r3, #16
 8008b2e:	0e1b      	lsrs	r3, r3, #24
 8008b30:	f003 030f 	and.w	r3, r3, #15
 8008b34:	4a8d      	ldr	r2, [pc, #564]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3a:	637b      	str	r3, [r7, #52]	; 0x34
 8008b3c:	f000 bc1c 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8008b40:	2300      	movs	r3, #0
 8008b42:	637b      	str	r3, [r7, #52]	; 0x34
 8008b44:	f000 bc18 	b.w	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8008b48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008b4c:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8008b50:	430b      	orrs	r3, r1
 8008b52:	d151      	bne.n	8008bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8008b54:	4b83      	ldr	r3, [pc, #524]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008b56:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b5a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008b5e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8008b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b62:	2bc0      	cmp	r3, #192	; 0xc0
 8008b64:	d024      	beq.n	8008bb0 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8008b66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b68:	2bc0      	cmp	r3, #192	; 0xc0
 8008b6a:	d842      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b6e:	2b80      	cmp	r3, #128	; 0x80
 8008b70:	d00d      	beq.n	8008b8e <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8008b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b74:	2b80      	cmp	r3, #128	; 0x80
 8008b76:	d83c      	bhi.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8008b78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8008b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b80:	2b40      	cmp	r3, #64	; 0x40
 8008b82:	d011      	beq.n	8008ba8 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8008b84:	e035      	b.n	8008bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8008b86:	f7fd ff59 	bl	8006a3c <HAL_RCC_GetPCLK3Freq>
 8008b8a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008b8c:	e3f4      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008b8e:	4b75      	ldr	r3, [pc, #468]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008b90:	681b      	ldr	r3, [r3, #0]
 8008b92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008b9a:	d102      	bne.n	8008ba2 <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8008b9c:	4b72      	ldr	r3, [pc, #456]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008b9e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ba0:	e3ea      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008ba6:	e3e7      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8008ba8:	f7fd fdfe 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008bac:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008bae:	e3e3      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008bb0:	4b6c      	ldr	r3, [pc, #432]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	f003 0320 	and.w	r3, r3, #32
 8008bb8:	2b20      	cmp	r3, #32
 8008bba:	d117      	bne.n	8008bec <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008bbc:	4b69      	ldr	r3, [pc, #420]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d005      	beq.n	8008bd4 <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8008bc8:	4b66      	ldr	r3, [pc, #408]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008bca:	689b      	ldr	r3, [r3, #8]
 8008bcc:	0e1b      	lsrs	r3, r3, #24
 8008bce:	f003 030f 	and.w	r3, r3, #15
 8008bd2:	e006      	b.n	8008be2 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8008bd4:	4b63      	ldr	r3, [pc, #396]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008bd6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008bda:	041b      	lsls	r3, r3, #16
 8008bdc:	0e1b      	lsrs	r3, r3, #24
 8008bde:	f003 030f 	and.w	r3, r3, #15
 8008be2:	4a62      	ldr	r2, [pc, #392]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008be4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008be8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008bea:	e3c5      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008bec:	2300      	movs	r3, #0
 8008bee:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bf0:	e3c2      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008bf6:	e3bf      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8008bf8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008bfc:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8008c00:	430b      	orrs	r3, r1
 8008c02:	d147      	bne.n	8008c94 <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8008c04:	4b57      	ldr	r3, [pc, #348]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008c0a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8008c0e:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8008c10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d103      	bne.n	8008c1e <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008c16:	f7fd fee9 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008c1a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c1c:	e3ac      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8008c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c20:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008c24:	d103      	bne.n	8008c2e <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8008c26:	f7fd fdbf 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008c2a:	6378      	str	r0, [r7, #52]	; 0x34
 8008c2c:	e3a4      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8008c2e:	4b4d      	ldr	r3, [pc, #308]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008c36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008c3a:	d106      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8008c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008c42:	d102      	bne.n	8008c4a <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8008c44:	4b48      	ldr	r3, [pc, #288]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008c46:	637b      	str	r3, [r7, #52]	; 0x34
 8008c48:	e396      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8008c4a:	4b46      	ldr	r3, [pc, #280]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f003 0320 	and.w	r3, r3, #32
 8008c52:	2b20      	cmp	r3, #32
 8008c54:	d11b      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8008c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8008c5c:	d117      	bne.n	8008c8e <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008c5e:	4b41      	ldr	r3, [pc, #260]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d005      	beq.n	8008c76 <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8008c6a:	4b3e      	ldr	r3, [pc, #248]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	0e1b      	lsrs	r3, r3, #24
 8008c70:	f003 030f 	and.w	r3, r3, #15
 8008c74:	e006      	b.n	8008c84 <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8008c76:	4b3b      	ldr	r3, [pc, #236]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008c78:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008c7c:	041b      	lsls	r3, r3, #16
 8008c7e:	0e1b      	lsrs	r3, r3, #24
 8008c80:	f003 030f 	and.w	r3, r3, #15
 8008c84:	4a39      	ldr	r2, [pc, #228]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008c86:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008c8a:	637b      	str	r3, [r7, #52]	; 0x34
 8008c8c:	e374      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	637b      	str	r3, [r7, #52]	; 0x34
 8008c92:	e371      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8008c94:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008c98:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8008c9c:	430b      	orrs	r3, r1
 8008c9e:	d16a      	bne.n	8008d76 <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8008ca0:	4b30      	ldr	r3, [pc, #192]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008ca2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008ca6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008caa:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8008cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d120      	bne.n	8008cf4 <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008cb2:	4b2c      	ldr	r3, [pc, #176]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	f003 0320 	and.w	r3, r3, #32
 8008cba:	2b20      	cmp	r3, #32
 8008cbc:	d117      	bne.n	8008cee <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008cbe:	4b29      	ldr	r3, [pc, #164]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008cc0:	689b      	ldr	r3, [r3, #8]
 8008cc2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d005      	beq.n	8008cd6 <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8008cca:	4b26      	ldr	r3, [pc, #152]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	0e1b      	lsrs	r3, r3, #24
 8008cd0:	f003 030f 	and.w	r3, r3, #15
 8008cd4:	e006      	b.n	8008ce4 <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8008cd6:	4b23      	ldr	r3, [pc, #140]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008cd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008cdc:	041b      	lsls	r3, r3, #16
 8008cde:	0e1b      	lsrs	r3, r3, #24
 8008ce0:	f003 030f 	and.w	r3, r3, #15
 8008ce4:	4a21      	ldr	r2, [pc, #132]	; (8008d6c <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8008ce6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008cea:	637b      	str	r3, [r7, #52]	; 0x34
 8008cec:	e344      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	637b      	str	r3, [r7, #52]	; 0x34
 8008cf2:	e341      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8008cf4:	4b1b      	ldr	r3, [pc, #108]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008cf6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008cfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008cfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008d02:	d112      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8008d04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d06:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d0a:	d10e      	bne.n	8008d2a <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d0c:	4b15      	ldr	r3, [pc, #84]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008d0e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008d16:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008d1a:	d102      	bne.n	8008d22 <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8008d1c:	23fa      	movs	r3, #250	; 0xfa
 8008d1e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d20:	e32a      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008d22:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008d26:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008d28:	e326      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8008d2a:	4b0e      	ldr	r3, [pc, #56]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008d36:	d106      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8008d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d3a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d3e:	d102      	bne.n	8008d46 <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8008d40:	4b09      	ldr	r3, [pc, #36]	; (8008d68 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8008d42:	637b      	str	r3, [r7, #52]	; 0x34
 8008d44:	e318      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8008d46:	4b07      	ldr	r3, [pc, #28]	; (8008d64 <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8008d48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008d4c:	f003 0302 	and.w	r3, r3, #2
 8008d50:	2b02      	cmp	r3, #2
 8008d52:	d10d      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8008d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008d5a:	d109      	bne.n	8008d70 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8008d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008d60:	637b      	str	r3, [r7, #52]	; 0x34
 8008d62:	e309      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8008d64:	46020c00 	.word	0x46020c00
 8008d68:	00f42400 	.word	0x00f42400
 8008d6c:	0800fa7c 	.word	0x0800fa7c
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8008d70:	2300      	movs	r3, #0
 8008d72:	637b      	str	r3, [r7, #52]	; 0x34
 8008d74:	e300      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8008d76:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008d7a:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8008d7e:	430b      	orrs	r3, r1
 8008d80:	d164      	bne.n	8008e4c <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008d82:	4ba2      	ldr	r3, [pc, #648]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008d84:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008d8c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8008d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d120      	bne.n	8008dd6 <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008d94:	4b9d      	ldr	r3, [pc, #628]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f003 0320 	and.w	r3, r3, #32
 8008d9c:	2b20      	cmp	r3, #32
 8008d9e:	d117      	bne.n	8008dd0 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008da0:	4b9a      	ldr	r3, [pc, #616]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008da2:	689b      	ldr	r3, [r3, #8]
 8008da4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d005      	beq.n	8008db8 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8008dac:	4b97      	ldr	r3, [pc, #604]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008dae:	689b      	ldr	r3, [r3, #8]
 8008db0:	0e1b      	lsrs	r3, r3, #24
 8008db2:	f003 030f 	and.w	r3, r3, #15
 8008db6:	e006      	b.n	8008dc6 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8008db8:	4b94      	ldr	r3, [pc, #592]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008dba:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dbe:	041b      	lsls	r3, r3, #16
 8008dc0:	0e1b      	lsrs	r3, r3, #24
 8008dc2:	f003 030f 	and.w	r3, r3, #15
 8008dc6:	4a92      	ldr	r2, [pc, #584]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008dc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008dcc:	637b      	str	r3, [r7, #52]	; 0x34
 8008dce:	e2d3      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8008dd0:	2300      	movs	r3, #0
 8008dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8008dd4:	e2d0      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8008dd6:	4b8d      	ldr	r3, [pc, #564]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008dd8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008ddc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008de0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008de4:	d112      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8008de6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008dec:	d10e      	bne.n	8008e0c <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008dee:	4b87      	ldr	r3, [pc, #540]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008df0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008df4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008df8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008dfc:	d102      	bne.n	8008e04 <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8008dfe:	23fa      	movs	r3, #250	; 0xfa
 8008e00:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e02:	e2b9      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008e04:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008e08:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e0a:	e2b5      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8008e0c:	4b7f      	ldr	r3, [pc, #508]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008e18:	d106      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8008e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e20:	d102      	bne.n	8008e28 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8008e22:	4b7c      	ldr	r3, [pc, #496]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008e24:	637b      	str	r3, [r7, #52]	; 0x34
 8008e26:	e2a7      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8008e28:	4b78      	ldr	r3, [pc, #480]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008e2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e2e:	f003 0302 	and.w	r3, r3, #2
 8008e32:	2b02      	cmp	r3, #2
 8008e34:	d107      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8008e36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e38:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008e3c:	d103      	bne.n	8008e46 <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8008e3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008e42:	637b      	str	r3, [r7, #52]	; 0x34
 8008e44:	e298      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8008e46:	2300      	movs	r3, #0
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4a:	e295      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8008e4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008e50:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8008e54:	430b      	orrs	r3, r1
 8008e56:	d147      	bne.n	8008ee8 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8008e58:	4b6c      	ldr	r3, [pc, #432]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008e5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008e5e:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8008e62:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8008e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d103      	bne.n	8008e72 <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8008e6a:	f7fd fdbf 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8008e6e:	6378      	str	r0, [r7, #52]	; 0x34
 8008e70:	e282      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8008e72:	4b66      	ldr	r3, [pc, #408]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008e74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e78:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008e7c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008e80:	d112      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8008e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e84:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8008e88:	d10e      	bne.n	8008ea8 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e8a:	4b60      	ldr	r3, [pc, #384]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008e8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008e90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008e94:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008e98:	d102      	bne.n	8008ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8008e9a:	23fa      	movs	r3, #250	; 0xfa
 8008e9c:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008e9e:	e26b      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8008ea0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8008ea4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8008ea6:	e267      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8008ea8:	4b58      	ldr	r3, [pc, #352]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008eb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008eb4:	d106      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8008eb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8008ebc:	d102      	bne.n	8008ec4 <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8008ebe:	4b55      	ldr	r3, [pc, #340]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008ec0:	637b      	str	r3, [r7, #52]	; 0x34
 8008ec2:	e259      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8008ec4:	4b51      	ldr	r3, [pc, #324]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008ec6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008eca:	f003 0302 	and.w	r3, r3, #2
 8008ece:	2b02      	cmp	r3, #2
 8008ed0:	d107      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8008ed2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ed4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8008ed8:	d103      	bne.n	8008ee2 <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8008eda:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ede:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee0:	e24a      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	637b      	str	r3, [r7, #52]	; 0x34
 8008ee6:	e247      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8008ee8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008eec:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8008ef0:	430b      	orrs	r3, r1
 8008ef2:	d12d      	bne.n	8008f50 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8008ef4:	4b45      	ldr	r3, [pc, #276]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008ef6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008efa:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8008efe:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8008f00:	4b42      	ldr	r3, [pc, #264]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008f0c:	d105      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8008f0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f10:	2b00      	cmp	r3, #0
 8008f12:	d102      	bne.n	8008f1a <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8008f14:	4b3f      	ldr	r3, [pc, #252]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008f16:	637b      	str	r3, [r7, #52]	; 0x34
 8008f18:	e22e      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8008f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8008f20:	d107      	bne.n	8008f32 <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8008f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008f26:	4618      	mov	r0, r3
 8008f28:	f7fe fc1a 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8008f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f2e:	637b      	str	r3, [r7, #52]	; 0x34
 8008f30:	e222      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8008f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f34:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008f38:	d107      	bne.n	8008f4a <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8008f3a:	f107 0318 	add.w	r3, r7, #24
 8008f3e:	4618      	mov	r0, r3
 8008f40:	f7fe fd76 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8008f44:	69bb      	ldr	r3, [r7, #24]
 8008f46:	637b      	str	r3, [r7, #52]	; 0x34
 8008f48:	e216      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	637b      	str	r3, [r7, #52]	; 0x34
 8008f4e:	e213      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8008f50:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008f54:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8008f58:	430b      	orrs	r3, r1
 8008f5a:	d15d      	bne.n	8009018 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8008f5c:	4b2b      	ldr	r3, [pc, #172]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008f62:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8008f66:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8008f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f6a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f6e:	d028      	beq.n	8008fc2 <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8008f70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f72:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008f76:	d845      	bhi.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f7e:	d013      	beq.n	8008fa8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8008f80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008f86:	d83d      	bhi.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8008f88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d004      	beq.n	8008f98 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8008f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f90:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f94:	d004      	beq.n	8008fa0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8008f96:	e035      	b.n	8009004 <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8008f98:	f7fd fd3c 	bl	8006a14 <HAL_RCC_GetPCLK2Freq>
 8008f9c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008f9e:	e1eb      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8008fa0:	f7fd fc02 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8008fa4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8008fa6:	e1e7      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8008fa8:	4b18      	ldr	r3, [pc, #96]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008fb4:	d102      	bne.n	8008fbc <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8008fb6:	4b17      	ldr	r3, [pc, #92]	; (8009014 <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8008fb8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008fba:	e1dd      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008fbc:	2300      	movs	r3, #0
 8008fbe:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008fc0:	e1da      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8008fc2:	4b12      	ldr	r3, [pc, #72]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 0320 	and.w	r3, r3, #32
 8008fca:	2b20      	cmp	r3, #32
 8008fcc:	d117      	bne.n	8008ffe <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8008fce:	4b0f      	ldr	r3, [pc, #60]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008fd0:	689b      	ldr	r3, [r3, #8]
 8008fd2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 8008fda:	4b0c      	ldr	r3, [pc, #48]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	0e1b      	lsrs	r3, r3, #24
 8008fe0:	f003 030f 	and.w	r3, r3, #15
 8008fe4:	e006      	b.n	8008ff4 <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 8008fe6:	4b09      	ldr	r3, [pc, #36]	; (800900c <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8008fe8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008fec:	041b      	lsls	r3, r3, #16
 8008fee:	0e1b      	lsrs	r3, r3, #24
 8008ff0:	f003 030f 	and.w	r3, r3, #15
 8008ff4:	4a06      	ldr	r2, [pc, #24]	; (8009010 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8008ff6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ffa:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8008ffc:	e1bc      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8008ffe:	2300      	movs	r3, #0
 8009000:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009002:	e1b9      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009004:	2300      	movs	r3, #0
 8009006:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009008:	e1b6      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800900a:	bf00      	nop
 800900c:	46020c00 	.word	0x46020c00
 8009010:	0800fa7c 	.word	0x0800fa7c
 8009014:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 8009018:	e9d7 2300 	ldrd	r2, r3, [r7]
 800901c:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 8009020:	430b      	orrs	r3, r1
 8009022:	d156      	bne.n	80090d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 8009024:	4ba5      	ldr	r3, [pc, #660]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009026:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800902a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800902e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009032:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009036:	d028      	beq.n	800908a <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 8009038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800903a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800903e:	d845      	bhi.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009042:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009046:	d013      	beq.n	8009070 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 8009048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800904e:	d83d      	bhi.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 8009050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009052:	2b00      	cmp	r3, #0
 8009054:	d004      	beq.n	8009060 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 8009056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800905c:	d004      	beq.n	8009068 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800905e:	e035      	b.n	80090cc <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 8009060:	f7fd fcc4 	bl	80069ec <HAL_RCC_GetPCLK1Freq>
 8009064:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009066:	e187      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009068:	f7fd fb9e 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 800906c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800906e:	e183      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009070:	4b92      	ldr	r3, [pc, #584]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009078:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800907c:	d102      	bne.n	8009084 <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800907e:	4b90      	ldr	r3, [pc, #576]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 8009080:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009082:	e179      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009084:	2300      	movs	r3, #0
 8009086:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009088:	e176      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800908a:	4b8c      	ldr	r3, [pc, #560]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	f003 0320 	and.w	r3, r3, #32
 8009092:	2b20      	cmp	r3, #32
 8009094:	d117      	bne.n	80090c6 <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009096:	4b89      	ldr	r3, [pc, #548]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 80090a2:	4b86      	ldr	r3, [pc, #536]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80090a4:	689b      	ldr	r3, [r3, #8]
 80090a6:	0e1b      	lsrs	r3, r3, #24
 80090a8:	f003 030f 	and.w	r3, r3, #15
 80090ac:	e006      	b.n	80090bc <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 80090ae:	4b83      	ldr	r3, [pc, #524]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80090b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80090b4:	041b      	lsls	r3, r3, #16
 80090b6:	0e1b      	lsrs	r3, r3, #24
 80090b8:	f003 030f 	and.w	r3, r3, #15
 80090bc:	4a81      	ldr	r2, [pc, #516]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80090be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80090c2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80090c4:	e158      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80090c6:	2300      	movs	r3, #0
 80090c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090ca:	e155      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80090cc:	2300      	movs	r3, #0
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090d0:	e152      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 80090d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090d6:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 80090da:	430b      	orrs	r3, r1
 80090dc:	d177      	bne.n	80091ce <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 80090de:	4b77      	ldr	r3, [pc, #476]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80090e0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80090e4:	f003 0318 	and.w	r3, r3, #24
 80090e8:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 80090ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ec:	2b18      	cmp	r3, #24
 80090ee:	d86b      	bhi.n	80091c8 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 80090f0:	a201      	add	r2, pc, #4	; (adr r2, 80090f8 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 80090f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80090f6:	bf00      	nop
 80090f8:	0800915d 	.word	0x0800915d
 80090fc:	080091c9 	.word	0x080091c9
 8009100:	080091c9 	.word	0x080091c9
 8009104:	080091c9 	.word	0x080091c9
 8009108:	080091c9 	.word	0x080091c9
 800910c:	080091c9 	.word	0x080091c9
 8009110:	080091c9 	.word	0x080091c9
 8009114:	080091c9 	.word	0x080091c9
 8009118:	08009165 	.word	0x08009165
 800911c:	080091c9 	.word	0x080091c9
 8009120:	080091c9 	.word	0x080091c9
 8009124:	080091c9 	.word	0x080091c9
 8009128:	080091c9 	.word	0x080091c9
 800912c:	080091c9 	.word	0x080091c9
 8009130:	080091c9 	.word	0x080091c9
 8009134:	080091c9 	.word	0x080091c9
 8009138:	0800916d 	.word	0x0800916d
 800913c:	080091c9 	.word	0x080091c9
 8009140:	080091c9 	.word	0x080091c9
 8009144:	080091c9 	.word	0x080091c9
 8009148:	080091c9 	.word	0x080091c9
 800914c:	080091c9 	.word	0x080091c9
 8009150:	080091c9 	.word	0x080091c9
 8009154:	080091c9 	.word	0x080091c9
 8009158:	08009187 	.word	0x08009187
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800915c:	f7fd fc6e 	bl	8006a3c <HAL_RCC_GetPCLK3Freq>
 8009160:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009162:	e109      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009164:	f7fd fb20 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 8009168:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800916a:	e105      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800916c:	4b53      	ldr	r3, [pc, #332]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009178:	d102      	bne.n	8009180 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800917a:	4b51      	ldr	r3, [pc, #324]	; (80092c0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800917c:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800917e:	e0fb      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009180:	2300      	movs	r3, #0
 8009182:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009184:	e0f8      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009186:	4b4d      	ldr	r3, [pc, #308]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	f003 0320 	and.w	r3, r3, #32
 800918e:	2b20      	cmp	r3, #32
 8009190:	d117      	bne.n	80091c2 <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009192:	4b4a      	ldr	r3, [pc, #296]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009194:	689b      	ldr	r3, [r3, #8]
 8009196:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d005      	beq.n	80091aa <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800919e:	4b47      	ldr	r3, [pc, #284]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80091a0:	689b      	ldr	r3, [r3, #8]
 80091a2:	0e1b      	lsrs	r3, r3, #24
 80091a4:	f003 030f 	and.w	r3, r3, #15
 80091a8:	e006      	b.n	80091b8 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 80091aa:	4b44      	ldr	r3, [pc, #272]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80091ac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80091b0:	041b      	lsls	r3, r3, #16
 80091b2:	0e1b      	lsrs	r3, r3, #24
 80091b4:	f003 030f 	and.w	r3, r3, #15
 80091b8:	4a42      	ldr	r2, [pc, #264]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 80091ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80091be:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091c0:	e0da      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80091c2:	2300      	movs	r3, #0
 80091c4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091c6:	e0d7      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 80091c8:	2300      	movs	r3, #0
 80091ca:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091cc:	e0d4      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 80091ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80091d2:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 80091d6:	430b      	orrs	r3, r1
 80091d8:	d155      	bne.n	8009286 <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 80091da:	4b38      	ldr	r3, [pc, #224]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80091dc:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80091e0:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 80091e4:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80091e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091ec:	d013      	beq.n	8009216 <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 80091ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80091f4:	d844      	bhi.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 80091f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091f8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80091fc:	d013      	beq.n	8009226 <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 80091fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009200:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009204:	d83c      	bhi.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 8009206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009208:	2b00      	cmp	r3, #0
 800920a:	d014      	beq.n	8009236 <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800920c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800920e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009212:	d014      	beq.n	800923e <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 8009214:	e034      	b.n	8009280 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009216:	f107 0318 	add.w	r3, r7, #24
 800921a:	4618      	mov	r0, r3
 800921c:	f7fe fc08 	bl	8007a30 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 8009220:	69fb      	ldr	r3, [r7, #28]
 8009222:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009224:	e0a8      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009226:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800922a:	4618      	mov	r0, r3
 800922c:	f7fe fa98 	bl	8007760 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 8009230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009232:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009234:	e0a0      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009236:	f7fd fab7 	bl	80067a8 <HAL_RCC_GetSysClockFreq>
 800923a:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800923c:	e09c      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800923e:	4b1f      	ldr	r3, [pc, #124]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	f003 0320 	and.w	r3, r3, #32
 8009246:	2b20      	cmp	r3, #32
 8009248:	d117      	bne.n	800927a <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800924a:	4b1c      	ldr	r3, [pc, #112]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800924c:	689b      	ldr	r3, [r3, #8]
 800924e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009252:	2b00      	cmp	r3, #0
 8009254:	d005      	beq.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 8009256:	4b19      	ldr	r3, [pc, #100]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009258:	689b      	ldr	r3, [r3, #8]
 800925a:	0e1b      	lsrs	r3, r3, #24
 800925c:	f003 030f 	and.w	r3, r3, #15
 8009260:	e006      	b.n	8009270 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 8009262:	4b16      	ldr	r3, [pc, #88]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009264:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009268:	041b      	lsls	r3, r3, #16
 800926a:	0e1b      	lsrs	r3, r3, #24
 800926c:	f003 030f 	and.w	r3, r3, #15
 8009270:	4a14      	ldr	r2, [pc, #80]	; (80092c4 <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 8009272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009276:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009278:	e07e      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800927a:	2300      	movs	r3, #0
 800927c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800927e:	e07b      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009280:	2300      	movs	r3, #0
 8009282:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009284:	e078      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 8009286:	e9d7 2300 	ldrd	r2, r3, [r7]
 800928a:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800928e:	430b      	orrs	r3, r1
 8009290:	d138      	bne.n	8009304 <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 8009292:	4b0a      	ldr	r3, [pc, #40]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 8009294:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009298:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800929c:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800929e:	4b07      	ldr	r3, [pc, #28]	; (80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 80092a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092a4:	f003 0302 	and.w	r3, r3, #2
 80092a8:	2b02      	cmp	r3, #2
 80092aa:	d10d      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 80092ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092ae:	2b00      	cmp	r3, #0
 80092b0:	d10a      	bne.n	80092c8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 80092b2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80092b6:	637b      	str	r3, [r7, #52]	; 0x34
 80092b8:	e05e      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 80092ba:	bf00      	nop
 80092bc:	46020c00 	.word	0x46020c00
 80092c0:	00f42400 	.word	0x00f42400
 80092c4:	0800fa7c 	.word	0x0800fa7c
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 80092c8:	4b2e      	ldr	r3, [pc, #184]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80092ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80092d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80092d6:	d112      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 80092d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092de:	d10e      	bne.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092e0:	4b28      	ldr	r3, [pc, #160]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 80092e2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80092e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092ea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80092ee:	d102      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 80092f0:	23fa      	movs	r3, #250	; 0xfa
 80092f2:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092f4:	e040      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 80092f6:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80092fa:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 80092fc:	e03c      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 80092fe:	2300      	movs	r3, #0
 8009300:	637b      	str	r3, [r7, #52]	; 0x34
 8009302:	e039      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 8009304:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009308:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800930c:	430b      	orrs	r3, r1
 800930e:	d131      	bne.n	8009374 <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 8009310:	4b1c      	ldr	r3, [pc, #112]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009312:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009316:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800931a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800931c:	4b19      	ldr	r3, [pc, #100]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009324:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009328:	d105      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800932a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800932c:	2b00      	cmp	r3, #0
 800932e:	d102      	bne.n	8009336 <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 8009330:	4b15      	ldr	r3, [pc, #84]	; (8009388 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 8009332:	637b      	str	r3, [r7, #52]	; 0x34
 8009334:	e020      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 8009336:	4b13      	ldr	r3, [pc, #76]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800933e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009342:	d106      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 8009344:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009346:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800934a:	d102      	bne.n	8009352 <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800934c:	4b0f      	ldr	r3, [pc, #60]	; (800938c <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800934e:	637b      	str	r3, [r7, #52]	; 0x34
 8009350:	e012      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 8009352:	4b0c      	ldr	r3, [pc, #48]	; (8009384 <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800935a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800935e:	d106      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 8009360:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009362:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009366:	d102      	bne.n	800936e <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 8009368:	4b09      	ldr	r3, [pc, #36]	; (8009390 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800936a:	637b      	str	r3, [r7, #52]	; 0x34
 800936c:	e004      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800936e:	2300      	movs	r3, #0
 8009370:	637b      	str	r3, [r7, #52]	; 0x34
 8009372:	e001      	b.n	8009378 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 8009374:	2300      	movs	r3, #0
 8009376:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 8009378:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800937a:	4618      	mov	r0, r3
 800937c:	3738      	adds	r7, #56	; 0x38
 800937e:	46bd      	mov	sp, r7
 8009380:	bd80      	pop	{r7, pc}
 8009382:	bf00      	nop
 8009384:	46020c00 	.word	0x46020c00
 8009388:	02dc6c00 	.word	0x02dc6c00
 800938c:	016e3600 	.word	0x016e3600
 8009390:	00f42400 	.word	0x00f42400

08009394 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 8009394:	b580      	push	{r7, lr}
 8009396:	b084      	sub	sp, #16
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800939c:	4b47      	ldr	r3, [pc, #284]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	4a46      	ldr	r2, [pc, #280]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80093a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80093a6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80093a8:	f7f9 fd74 	bl	8002e94 <HAL_GetTick>
 80093ac:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093ae:	e008      	b.n	80093c2 <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80093b0:	f7f9 fd70 	bl	8002e94 <HAL_GetTick>
 80093b4:	4602      	mov	r2, r0
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	1ad3      	subs	r3, r2, r3
 80093ba:	2b02      	cmp	r3, #2
 80093bc:	d901      	bls.n	80093c2 <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80093be:	2303      	movs	r3, #3
 80093c0:	e077      	b.n	80094b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80093c2:	4b3e      	ldr	r3, [pc, #248]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80093c4:	681b      	ldr	r3, [r3, #0]
 80093c6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093ca:	2b00      	cmp	r3, #0
 80093cc:	d1f0      	bne.n	80093b0 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 80093ce:	4b3b      	ldr	r3, [pc, #236]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80093d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093d2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80093d6:	f023 0303 	bic.w	r3, r3, #3
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6811      	ldr	r1, [r2, #0]
 80093de:	687a      	ldr	r2, [r7, #4]
 80093e0:	6852      	ldr	r2, [r2, #4]
 80093e2:	3a01      	subs	r2, #1
 80093e4:	0212      	lsls	r2, r2, #8
 80093e6:	430a      	orrs	r2, r1
 80093e8:	4934      	ldr	r1, [pc, #208]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80093ea:	4313      	orrs	r3, r2
 80093ec:	62cb      	str	r3, [r1, #44]	; 0x2c
 80093ee:	4b33      	ldr	r3, [pc, #204]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80093f0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80093f2:	4b33      	ldr	r3, [pc, #204]	; (80094c0 <RCCEx_PLL2_Config+0x12c>)
 80093f4:	4013      	ands	r3, r2
 80093f6:	687a      	ldr	r2, [r7, #4]
 80093f8:	6892      	ldr	r2, [r2, #8]
 80093fa:	3a01      	subs	r2, #1
 80093fc:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009400:	687a      	ldr	r2, [r7, #4]
 8009402:	68d2      	ldr	r2, [r2, #12]
 8009404:	3a01      	subs	r2, #1
 8009406:	0252      	lsls	r2, r2, #9
 8009408:	b292      	uxth	r2, r2
 800940a:	4311      	orrs	r1, r2
 800940c:	687a      	ldr	r2, [r7, #4]
 800940e:	6912      	ldr	r2, [r2, #16]
 8009410:	3a01      	subs	r2, #1
 8009412:	0412      	lsls	r2, r2, #16
 8009414:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009418:	4311      	orrs	r1, r2
 800941a:	687a      	ldr	r2, [r7, #4]
 800941c:	6952      	ldr	r2, [r2, #20]
 800941e:	3a01      	subs	r2, #1
 8009420:	0612      	lsls	r2, r2, #24
 8009422:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009426:	430a      	orrs	r2, r1
 8009428:	4924      	ldr	r1, [pc, #144]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800942a:	4313      	orrs	r3, r2
 800942c:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800942e:	4b23      	ldr	r3, [pc, #140]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009432:	f023 020c 	bic.w	r2, r3, #12
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	699b      	ldr	r3, [r3, #24]
 800943a:	4920      	ldr	r1, [pc, #128]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800943c:	4313      	orrs	r3, r2
 800943e:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 8009440:	4b1e      	ldr	r3, [pc, #120]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	6a1b      	ldr	r3, [r3, #32]
 8009448:	491c      	ldr	r1, [pc, #112]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800944a:	4313      	orrs	r3, r2
 800944c:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800944e:	4b1b      	ldr	r3, [pc, #108]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009452:	4a1a      	ldr	r2, [pc, #104]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009454:	f023 0310 	bic.w	r3, r3, #16
 8009458:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800945a:	4b18      	ldr	r3, [pc, #96]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800945c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800945e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009462:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009466:	687a      	ldr	r2, [r7, #4]
 8009468:	69d2      	ldr	r2, [r2, #28]
 800946a:	00d2      	lsls	r2, r2, #3
 800946c:	4913      	ldr	r1, [pc, #76]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 800946e:	4313      	orrs	r3, r2
 8009470:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 8009472:	4b12      	ldr	r3, [pc, #72]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009476:	4a11      	ldr	r2, [pc, #68]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009478:	f043 0310 	orr.w	r3, r3, #16
 800947c:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800947e:	4b0f      	ldr	r3, [pc, #60]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a0e      	ldr	r2, [pc, #56]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 8009484:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009488:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800948a:	f7f9 fd03 	bl	8002e94 <HAL_GetTick>
 800948e:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8009490:	e008      	b.n	80094a4 <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8009492:	f7f9 fcff 	bl	8002e94 <HAL_GetTick>
 8009496:	4602      	mov	r2, r0
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	1ad3      	subs	r3, r2, r3
 800949c:	2b02      	cmp	r3, #2
 800949e:	d901      	bls.n	80094a4 <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 80094a0:	2303      	movs	r3, #3
 80094a2:	e006      	b.n	80094b2 <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80094a4:	4b05      	ldr	r3, [pc, #20]	; (80094bc <RCCEx_PLL2_Config+0x128>)
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d0f0      	beq.n	8009492 <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 80094b0:	2300      	movs	r3, #0

}
 80094b2:	4618      	mov	r0, r3
 80094b4:	3710      	adds	r7, #16
 80094b6:	46bd      	mov	sp, r7
 80094b8:	bd80      	pop	{r7, pc}
 80094ba:	bf00      	nop
 80094bc:	46020c00 	.word	0x46020c00
 80094c0:	80800000 	.word	0x80800000

080094c4 <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 80094c4:	b580      	push	{r7, lr}
 80094c6:	b084      	sub	sp, #16
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 80094cc:	4b47      	ldr	r3, [pc, #284]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	4a46      	ldr	r2, [pc, #280]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80094d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80094d6:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80094d8:	f7f9 fcdc 	bl	8002e94 <HAL_GetTick>
 80094dc:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094de:	e008      	b.n	80094f2 <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80094e0:	f7f9 fcd8 	bl	8002e94 <HAL_GetTick>
 80094e4:	4602      	mov	r2, r0
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	1ad3      	subs	r3, r2, r3
 80094ea:	2b02      	cmp	r3, #2
 80094ec:	d901      	bls.n	80094f2 <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 80094ee:	2303      	movs	r3, #3
 80094f0:	e077      	b.n	80095e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80094f2:	4b3e      	ldr	r3, [pc, #248]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1f0      	bne.n	80094e0 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 80094fe:	4b3b      	ldr	r3, [pc, #236]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009502:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8009506:	f023 0303 	bic.w	r3, r3, #3
 800950a:	687a      	ldr	r2, [r7, #4]
 800950c:	6811      	ldr	r1, [r2, #0]
 800950e:	687a      	ldr	r2, [r7, #4]
 8009510:	6852      	ldr	r2, [r2, #4]
 8009512:	3a01      	subs	r2, #1
 8009514:	0212      	lsls	r2, r2, #8
 8009516:	430a      	orrs	r2, r1
 8009518:	4934      	ldr	r1, [pc, #208]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800951a:	4313      	orrs	r3, r2
 800951c:	630b      	str	r3, [r1, #48]	; 0x30
 800951e:	4b33      	ldr	r3, [pc, #204]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009520:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009522:	4b33      	ldr	r3, [pc, #204]	; (80095f0 <RCCEx_PLL3_Config+0x12c>)
 8009524:	4013      	ands	r3, r2
 8009526:	687a      	ldr	r2, [r7, #4]
 8009528:	6892      	ldr	r2, [r2, #8]
 800952a:	3a01      	subs	r2, #1
 800952c:	f3c2 0108 	ubfx	r1, r2, #0, #9
 8009530:	687a      	ldr	r2, [r7, #4]
 8009532:	68d2      	ldr	r2, [r2, #12]
 8009534:	3a01      	subs	r2, #1
 8009536:	0252      	lsls	r2, r2, #9
 8009538:	b292      	uxth	r2, r2
 800953a:	4311      	orrs	r1, r2
 800953c:	687a      	ldr	r2, [r7, #4]
 800953e:	6912      	ldr	r2, [r2, #16]
 8009540:	3a01      	subs	r2, #1
 8009542:	0412      	lsls	r2, r2, #16
 8009544:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8009548:	4311      	orrs	r1, r2
 800954a:	687a      	ldr	r2, [r7, #4]
 800954c:	6952      	ldr	r2, [r2, #20]
 800954e:	3a01      	subs	r2, #1
 8009550:	0612      	lsls	r2, r2, #24
 8009552:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8009556:	430a      	orrs	r2, r1
 8009558:	4924      	ldr	r1, [pc, #144]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800955a:	4313      	orrs	r3, r2
 800955c:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800955e:	4b23      	ldr	r3, [pc, #140]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009562:	f023 020c 	bic.w	r2, r3, #12
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	699b      	ldr	r3, [r3, #24]
 800956a:	4920      	ldr	r1, [pc, #128]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800956c:	4313      	orrs	r3, r2
 800956e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 8009570:	4b1e      	ldr	r3, [pc, #120]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009572:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	6a1b      	ldr	r3, [r3, #32]
 8009578:	491c      	ldr	r1, [pc, #112]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800957a:	4313      	orrs	r3, r2
 800957c:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800957e:	4b1b      	ldr	r3, [pc, #108]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009582:	4a1a      	ldr	r2, [pc, #104]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 8009584:	f023 0310 	bic.w	r3, r3, #16
 8009588:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800958a:	4b18      	ldr	r3, [pc, #96]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800958c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800958e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009592:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8009596:	687a      	ldr	r2, [r7, #4]
 8009598:	69d2      	ldr	r2, [r2, #28]
 800959a:	00d2      	lsls	r2, r2, #3
 800959c:	4913      	ldr	r1, [pc, #76]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 800959e:	4313      	orrs	r3, r2
 80095a0:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 80095a2:	4b12      	ldr	r3, [pc, #72]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80095a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095a6:	4a11      	ldr	r2, [pc, #68]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80095a8:	f043 0310 	orr.w	r3, r3, #16
 80095ac:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 80095ae:	4b0f      	ldr	r3, [pc, #60]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4a0e      	ldr	r2, [pc, #56]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80095b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80095b8:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 80095ba:	f7f9 fc6b 	bl	8002e94 <HAL_GetTick>
 80095be:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095c0:	e008      	b.n	80095d4 <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80095c2:	f7f9 fc67 	bl	8002e94 <HAL_GetTick>
 80095c6:	4602      	mov	r2, r0
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d901      	bls.n	80095d4 <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 80095d0:	2303      	movs	r3, #3
 80095d2:	e006      	b.n	80095e2 <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80095d4:	4b05      	ldr	r3, [pc, #20]	; (80095ec <RCCEx_PLL3_Config+0x128>)
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d0f0      	beq.n	80095c2 <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 80095e0:	2300      	movs	r3, #0
}
 80095e2:	4618      	mov	r0, r3
 80095e4:	3710      	adds	r7, #16
 80095e6:	46bd      	mov	sp, r7
 80095e8:	bd80      	pop	{r7, pc}
 80095ea:	bf00      	nop
 80095ec:	46020c00 	.word	0x46020c00
 80095f0:	80800000 	.word	0x80800000

080095f4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80095f4:	b580      	push	{r7, lr}
 80095f6:	b084      	sub	sp, #16
 80095f8:	af00      	add	r7, sp, #0
 80095fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80095fc:	2301      	movs	r3, #1
 80095fe:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	2b00      	cmp	r3, #0
 8009604:	d071      	beq.n	80096ea <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800960c:	b2db      	uxtb	r3, r3
 800960e:	2b00      	cmp	r3, #0
 8009610:	d106      	bne.n	8009620 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2200      	movs	r2, #0
 8009616:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f7f9 f8de 	bl	80027dc <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2202      	movs	r2, #2
 8009624:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8009628:	4b32      	ldr	r3, [pc, #200]	; (80096f4 <HAL_RTC_Init+0x100>)
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f003 0310 	and.w	r3, r3, #16
 8009630:	2b10      	cmp	r3, #16
 8009632:	d051      	beq.n	80096d8 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009634:	4b2f      	ldr	r3, [pc, #188]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009636:	22ca      	movs	r2, #202	; 0xca
 8009638:	625a      	str	r2, [r3, #36]	; 0x24
 800963a:	4b2e      	ldr	r3, [pc, #184]	; (80096f4 <HAL_RTC_Init+0x100>)
 800963c:	2253      	movs	r2, #83	; 0x53
 800963e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8009640:	6878      	ldr	r0, [r7, #4]
 8009642:	f000 f88b 	bl	800975c <RTC_EnterInitMode>
 8009646:	4603      	mov	r3, r0
 8009648:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800964a:	7bfb      	ldrb	r3, [r7, #15]
 800964c:	2b00      	cmp	r3, #0
 800964e:	d13f      	bne.n	80096d0 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 8009650:	4b28      	ldr	r3, [pc, #160]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009652:	699b      	ldr	r3, [r3, #24]
 8009654:	4a27      	ldr	r2, [pc, #156]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009656:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800965a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800965e:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 8009660:	4b24      	ldr	r3, [pc, #144]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009662:	699a      	ldr	r2, [r3, #24]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6859      	ldr	r1, [r3, #4]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	4319      	orrs	r1, r3
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	430b      	orrs	r3, r1
 8009674:	491f      	ldr	r1, [pc, #124]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009676:	4313      	orrs	r3, r2
 8009678:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68da      	ldr	r2, [r3, #12]
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	041b      	lsls	r3, r3, #16
 8009684:	491b      	ldr	r1, [pc, #108]	; (80096f4 <HAL_RTC_Init+0x100>)
 8009686:	4313      	orrs	r3, r2
 8009688:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800968a:	4b1a      	ldr	r3, [pc, #104]	; (80096f4 <HAL_RTC_Init+0x100>)
 800968c:	68db      	ldr	r3, [r3, #12]
 800968e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800969a:	430b      	orrs	r3, r1
 800969c:	4915      	ldr	r1, [pc, #84]	; (80096f4 <HAL_RTC_Init+0x100>)
 800969e:	4313      	orrs	r3, r2
 80096a0:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f000 f896 	bl	80097d4 <RTC_ExitInitMode>
 80096a8:	4603      	mov	r3, r0
 80096aa:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 80096ac:	7bfb      	ldrb	r3, [r7, #15]
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d10e      	bne.n	80096d0 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 80096b2:	4b10      	ldr	r3, [pc, #64]	; (80096f4 <HAL_RTC_Init+0x100>)
 80096b4:	699b      	ldr	r3, [r3, #24]
 80096b6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	6a19      	ldr	r1, [r3, #32]
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	69db      	ldr	r3, [r3, #28]
 80096c2:	4319      	orrs	r1, r3
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	695b      	ldr	r3, [r3, #20]
 80096c8:	430b      	orrs	r3, r1
 80096ca:	490a      	ldr	r1, [pc, #40]	; (80096f4 <HAL_RTC_Init+0x100>)
 80096cc:	4313      	orrs	r3, r2
 80096ce:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80096d0:	4b08      	ldr	r3, [pc, #32]	; (80096f4 <HAL_RTC_Init+0x100>)
 80096d2:	22ff      	movs	r2, #255	; 0xff
 80096d4:	625a      	str	r2, [r3, #36]	; 0x24
 80096d6:	e001      	b.n	80096dc <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 80096d8:	2300      	movs	r3, #0
 80096da:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80096dc:	7bfb      	ldrb	r3, [r7, #15]
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d103      	bne.n	80096ea <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	2201      	movs	r2, #1
 80096e6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 80096ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80096ec:	4618      	mov	r0, r3
 80096ee:	3710      	adds	r7, #16
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	46007800 	.word	0x46007800

080096f8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b084      	sub	sp, #16
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 8009700:	4b15      	ldr	r3, [pc, #84]	; (8009758 <HAL_RTC_WaitForSynchro+0x60>)
 8009702:	68db      	ldr	r3, [r3, #12]
 8009704:	4a14      	ldr	r2, [pc, #80]	; (8009758 <HAL_RTC_WaitForSynchro+0x60>)
 8009706:	f023 0320 	bic.w	r3, r3, #32
 800970a:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800970c:	f7f9 fbc2 	bl	8002e94 <HAL_GetTick>
 8009710:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009712:	e013      	b.n	800973c <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8009714:	f7f9 fbbe 	bl	8002e94 <HAL_GetTick>
 8009718:	4602      	mov	r2, r0
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	1ad3      	subs	r3, r2, r3
 800971e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009722:	d90b      	bls.n	800973c <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 8009724:	4b0c      	ldr	r3, [pc, #48]	; (8009758 <HAL_RTC_WaitForSynchro+0x60>)
 8009726:	68db      	ldr	r3, [r3, #12]
 8009728:	f003 0320 	and.w	r3, r3, #32
 800972c:	2b00      	cmp	r3, #0
 800972e:	d10c      	bne.n	800974a <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	2203      	movs	r2, #3
 8009734:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 8009738:	2303      	movs	r3, #3
 800973a:	e008      	b.n	800974e <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800973c:	4b06      	ldr	r3, [pc, #24]	; (8009758 <HAL_RTC_WaitForSynchro+0x60>)
 800973e:	68db      	ldr	r3, [r3, #12]
 8009740:	f003 0320 	and.w	r3, r3, #32
 8009744:	2b00      	cmp	r3, #0
 8009746:	d0e5      	beq.n	8009714 <HAL_RTC_WaitForSynchro+0x1c>
 8009748:	e000      	b.n	800974c <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800974a:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800974c:	2300      	movs	r3, #0
}
 800974e:	4618      	mov	r0, r3
 8009750:	3710      	adds	r7, #16
 8009752:	46bd      	mov	sp, r7
 8009754:	bd80      	pop	{r7, pc}
 8009756:	bf00      	nop
 8009758:	46007800 	.word	0x46007800

0800975c <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800975c:	b580      	push	{r7, lr}
 800975e:	b084      	sub	sp, #16
 8009760:	af00      	add	r7, sp, #0
 8009762:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8009764:	2300      	movs	r3, #0
 8009766:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009768:	4b19      	ldr	r3, [pc, #100]	; (80097d0 <RTC_EnterInitMode+0x74>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009770:	2b00      	cmp	r3, #0
 8009772:	d128      	bne.n	80097c6 <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8009774:	4b16      	ldr	r3, [pc, #88]	; (80097d0 <RTC_EnterInitMode+0x74>)
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	4a15      	ldr	r2, [pc, #84]	; (80097d0 <RTC_EnterInitMode+0x74>)
 800977a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800977e:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 8009780:	f7f9 fb88 	bl	8002e94 <HAL_GetTick>
 8009784:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8009786:	e013      	b.n	80097b0 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8009788:	f7f9 fb84 	bl	8002e94 <HAL_GetTick>
 800978c:	4602      	mov	r2, r0
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	1ad3      	subs	r3, r2, r3
 8009792:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009796:	d90b      	bls.n	80097b0 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 8009798:	4b0d      	ldr	r3, [pc, #52]	; (80097d0 <RTC_EnterInitMode+0x74>)
 800979a:	68db      	ldr	r3, [r3, #12]
 800979c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d10f      	bne.n	80097c4 <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 80097a4:	2303      	movs	r3, #3
 80097a6:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	2203      	movs	r2, #3
 80097ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80097b0:	4b07      	ldr	r3, [pc, #28]	; (80097d0 <RTC_EnterInitMode+0x74>)
 80097b2:	68db      	ldr	r3, [r3, #12]
 80097b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b8:	2b00      	cmp	r3, #0
 80097ba:	d104      	bne.n	80097c6 <RTC_EnterInitMode+0x6a>
 80097bc:	7bfb      	ldrb	r3, [r7, #15]
 80097be:	2b03      	cmp	r3, #3
 80097c0:	d1e2      	bne.n	8009788 <RTC_EnterInitMode+0x2c>
 80097c2:	e000      	b.n	80097c6 <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 80097c4:	bf00      	nop
        }
      }
    }
  }

  return status;
 80097c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80097c8:	4618      	mov	r0, r3
 80097ca:	3710      	adds	r7, #16
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}
 80097d0:	46007800 	.word	0x46007800

080097d4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80097d4:	b580      	push	{r7, lr}
 80097d6:	b084      	sub	sp, #16
 80097d8:	af00      	add	r7, sp, #0
 80097da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80097dc:	2300      	movs	r3, #0
 80097de:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 80097e0:	4b1a      	ldr	r3, [pc, #104]	; (800984c <RTC_ExitInitMode+0x78>)
 80097e2:	68db      	ldr	r3, [r3, #12]
 80097e4:	4a19      	ldr	r2, [pc, #100]	; (800984c <RTC_ExitInitMode+0x78>)
 80097e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80097ea:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 80097ec:	4b17      	ldr	r3, [pc, #92]	; (800984c <RTC_ExitInitMode+0x78>)
 80097ee:	699b      	ldr	r3, [r3, #24]
 80097f0:	f003 0320 	and.w	r3, r3, #32
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d10c      	bne.n	8009812 <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f7ff ff7d 	bl	80096f8 <HAL_RTC_WaitForSynchro>
 80097fe:	4603      	mov	r3, r0
 8009800:	2b00      	cmp	r3, #0
 8009802:	d01e      	beq.n	8009842 <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2203      	movs	r2, #3
 8009808:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800980c:	2303      	movs	r3, #3
 800980e:	73fb      	strb	r3, [r7, #15]
 8009810:	e017      	b.n	8009842 <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009812:	4b0e      	ldr	r3, [pc, #56]	; (800984c <RTC_ExitInitMode+0x78>)
 8009814:	699b      	ldr	r3, [r3, #24]
 8009816:	4a0d      	ldr	r2, [pc, #52]	; (800984c <RTC_ExitInitMode+0x78>)
 8009818:	f023 0320 	bic.w	r3, r3, #32
 800981c:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800981e:	6878      	ldr	r0, [r7, #4]
 8009820:	f7ff ff6a 	bl	80096f8 <HAL_RTC_WaitForSynchro>
 8009824:	4603      	mov	r3, r0
 8009826:	2b00      	cmp	r3, #0
 8009828:	d005      	beq.n	8009836 <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	2203      	movs	r2, #3
 800982e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 8009832:	2303      	movs	r3, #3
 8009834:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8009836:	4b05      	ldr	r3, [pc, #20]	; (800984c <RTC_ExitInitMode+0x78>)
 8009838:	699b      	ldr	r3, [r3, #24]
 800983a:	4a04      	ldr	r2, [pc, #16]	; (800984c <RTC_ExitInitMode+0x78>)
 800983c:	f043 0320 	orr.w	r3, r3, #32
 8009840:	6193      	str	r3, [r2, #24]
  }
  return status;
 8009842:	7bfb      	ldrb	r3, [r7, #15]
}
 8009844:	4618      	mov	r0, r3
 8009846:	3710      	adds	r7, #16
 8009848:	46bd      	mov	sp, r7
 800984a:	bd80      	pop	{r7, pc}
 800984c:	46007800 	.word	0x46007800

08009850 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 8009850:	b580      	push	{r7, lr}
 8009852:	b084      	sub	sp, #16
 8009854:	af00      	add	r7, sp, #0
 8009856:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800985e:	2b01      	cmp	r3, #1
 8009860:	d101      	bne.n	8009866 <HAL_RTCEx_SetRefClock+0x16>
 8009862:	2302      	movs	r3, #2
 8009864:	e02f      	b.n	80098c6 <HAL_RTCEx_SetRefClock+0x76>
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2201      	movs	r2, #1
 800986a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	2202      	movs	r2, #2
 8009872:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009876:	4b16      	ldr	r3, [pc, #88]	; (80098d0 <HAL_RTCEx_SetRefClock+0x80>)
 8009878:	22ca      	movs	r2, #202	; 0xca
 800987a:	625a      	str	r2, [r3, #36]	; 0x24
 800987c:	4b14      	ldr	r3, [pc, #80]	; (80098d0 <HAL_RTCEx_SetRefClock+0x80>)
 800987e:	2253      	movs	r2, #83	; 0x53
 8009880:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f7ff ff6a 	bl	800975c <RTC_EnterInitMode>
 8009888:	4603      	mov	r3, r0
 800988a:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 800988c:	7bfb      	ldrb	r3, [r7, #15]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d10a      	bne.n	80098a8 <HAL_RTCEx_SetRefClock+0x58>
  {
    /* Enable clockref detection */
    SET_BIT(RTC->CR, RTC_CR_REFCKON);
 8009892:	4b0f      	ldr	r3, [pc, #60]	; (80098d0 <HAL_RTCEx_SetRefClock+0x80>)
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	4a0e      	ldr	r2, [pc, #56]	; (80098d0 <HAL_RTCEx_SetRefClock+0x80>)
 8009898:	f043 0310 	orr.w	r3, r3, #16
 800989c:	6193      	str	r3, [r2, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800989e:	6878      	ldr	r0, [r7, #4]
 80098a0:	f7ff ff98 	bl	80097d4 <RTC_ExitInitMode>
 80098a4:	4603      	mov	r3, r0
 80098a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80098a8:	4b09      	ldr	r3, [pc, #36]	; (80098d0 <HAL_RTCEx_SetRefClock+0x80>)
 80098aa:	22ff      	movs	r2, #255	; 0xff
 80098ac:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 80098ae:	7bfb      	ldrb	r3, [r7, #15]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d103      	bne.n	80098bc <HAL_RTCEx_SetRefClock+0x6c>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2201      	movs	r2, #1
 80098b8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2200      	movs	r2, #0
 80098c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 80098c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3710      	adds	r7, #16
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	bf00      	nop
 80098d0:	46007800 	.word	0x46007800

080098d4 <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 80098de:	683b      	ldr	r3, [r7, #0]
 80098e0:	681a      	ldr	r2, [r3, #0]
 80098e2:	683b      	ldr	r3, [r7, #0]
 80098e4:	685b      	ldr	r3, [r3, #4]
 80098e6:	4910      	ldr	r1, [pc, #64]	; (8009928 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 80098e8:	4313      	orrs	r3, r2
 80098ea:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 80098ec:	683b      	ldr	r3, [r7, #0]
 80098ee:	689a      	ldr	r2, [r3, #8]
 80098f0:	683b      	ldr	r3, [r7, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	431a      	orrs	r2, r3
 80098f6:	683b      	ldr	r3, [r7, #0]
 80098f8:	699b      	ldr	r3, [r3, #24]
 80098fa:	490c      	ldr	r1, [pc, #48]	; (800992c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 80098fc:	4313      	orrs	r3, r2
 80098fe:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 8009900:	4b0a      	ldr	r3, [pc, #40]	; (800992c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 8009908:	683b      	ldr	r3, [r7, #0]
 800990a:	6919      	ldr	r1, [r3, #16]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	695b      	ldr	r3, [r3, #20]
 8009910:	041b      	lsls	r3, r3, #16
 8009912:	430b      	orrs	r3, r1
 8009914:	4905      	ldr	r1, [pc, #20]	; (800992c <HAL_RTCEx_PrivilegeModeSet+0x58>)
 8009916:	4313      	orrs	r3, r2
 8009918:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800991a:	2300      	movs	r3, #0
}
 800991c:	4618      	mov	r0, r3
 800991e:	370c      	adds	r7, #12
 8009920:	46bd      	mov	sp, r7
 8009922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009926:	4770      	bx	lr
 8009928:	46007800 	.word	0x46007800
 800992c:	46007c00 	.word	0x46007c00

08009930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b082      	sub	sp, #8
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d101      	bne.n	8009942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800993e:	2301      	movs	r3, #1
 8009940:	e049      	b.n	80099d6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009948:	b2db      	uxtb	r3, r3
 800994a:	2b00      	cmp	r3, #0
 800994c:	d106      	bne.n	800995c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	2200      	movs	r2, #0
 8009952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009956:	6878      	ldr	r0, [r7, #4]
 8009958:	f7f8 ffb2 	bl	80028c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	2202      	movs	r2, #2
 8009960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681a      	ldr	r2, [r3, #0]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	3304      	adds	r3, #4
 800996c:	4619      	mov	r1, r3
 800996e:	4610      	mov	r0, r2
 8009970:	f000 fc40 	bl	800a1f4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2201      	movs	r2, #1
 8009978:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	2201      	movs	r2, #1
 8009980:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	2201      	movs	r2, #1
 8009988:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2201      	movs	r2, #1
 8009990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	2201      	movs	r2, #1
 8009998:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2201      	movs	r2, #1
 80099a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80099a4:	687b      	ldr	r3, [r7, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80099ac:	687b      	ldr	r3, [r7, #4]
 80099ae:	2201      	movs	r2, #1
 80099b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	2201      	movs	r2, #1
 80099b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2201      	movs	r2, #1
 80099c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	2201      	movs	r2, #1
 80099d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80099d4:	2300      	movs	r3, #0
}
 80099d6:	4618      	mov	r0, r3
 80099d8:	3708      	adds	r7, #8
 80099da:	46bd      	mov	sp, r7
 80099dc:	bd80      	pop	{r7, pc}
	...

080099e0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80099e0:	b480      	push	{r7}
 80099e2:	b085      	sub	sp, #20
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80099ee:	b2db      	uxtb	r3, r3
 80099f0:	2b01      	cmp	r3, #1
 80099f2:	d001      	beq.n	80099f8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80099f4:	2301      	movs	r3, #1
 80099f6:	e06a      	b.n	8009ace <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2202      	movs	r2, #2
 80099fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	4a35      	ldr	r2, [pc, #212]	; (8009adc <HAL_TIM_Base_Start+0xfc>)
 8009a06:	4293      	cmp	r3, r2
 8009a08:	d040      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a0a:	687b      	ldr	r3, [r7, #4]
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a34      	ldr	r2, [pc, #208]	; (8009ae0 <HAL_TIM_Base_Start+0x100>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d03b      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009a1c:	d036      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009a26:	d031      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	4a2d      	ldr	r2, [pc, #180]	; (8009ae4 <HAL_TIM_Base_Start+0x104>)
 8009a2e:	4293      	cmp	r3, r2
 8009a30:	d02c      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	4a2c      	ldr	r2, [pc, #176]	; (8009ae8 <HAL_TIM_Base_Start+0x108>)
 8009a38:	4293      	cmp	r3, r2
 8009a3a:	d027      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	4a2a      	ldr	r2, [pc, #168]	; (8009aec <HAL_TIM_Base_Start+0x10c>)
 8009a42:	4293      	cmp	r3, r2
 8009a44:	d022      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	4a29      	ldr	r2, [pc, #164]	; (8009af0 <HAL_TIM_Base_Start+0x110>)
 8009a4c:	4293      	cmp	r3, r2
 8009a4e:	d01d      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	4a27      	ldr	r2, [pc, #156]	; (8009af4 <HAL_TIM_Base_Start+0x114>)
 8009a56:	4293      	cmp	r3, r2
 8009a58:	d018      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a26      	ldr	r2, [pc, #152]	; (8009af8 <HAL_TIM_Base_Start+0x118>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d013      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	4a24      	ldr	r2, [pc, #144]	; (8009afc <HAL_TIM_Base_Start+0x11c>)
 8009a6a:	4293      	cmp	r3, r2
 8009a6c:	d00e      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	4a23      	ldr	r2, [pc, #140]	; (8009b00 <HAL_TIM_Base_Start+0x120>)
 8009a74:	4293      	cmp	r3, r2
 8009a76:	d009      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	4a21      	ldr	r2, [pc, #132]	; (8009b04 <HAL_TIM_Base_Start+0x124>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d004      	beq.n	8009a8c <HAL_TIM_Base_Start+0xac>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	4a20      	ldr	r2, [pc, #128]	; (8009b08 <HAL_TIM_Base_Start+0x128>)
 8009a88:	4293      	cmp	r3, r2
 8009a8a:	d115      	bne.n	8009ab8 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	689a      	ldr	r2, [r3, #8]
 8009a92:	4b1e      	ldr	r3, [pc, #120]	; (8009b0c <HAL_TIM_Base_Start+0x12c>)
 8009a94:	4013      	ands	r3, r2
 8009a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	2b06      	cmp	r3, #6
 8009a9c:	d015      	beq.n	8009aca <HAL_TIM_Base_Start+0xea>
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009aa4:	d011      	beq.n	8009aca <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	681a      	ldr	r2, [r3, #0]
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	681b      	ldr	r3, [r3, #0]
 8009ab0:	f042 0201 	orr.w	r2, r2, #1
 8009ab4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ab6:	e008      	b.n	8009aca <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	681a      	ldr	r2, [r3, #0]
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f042 0201 	orr.w	r2, r2, #1
 8009ac6:	601a      	str	r2, [r3, #0]
 8009ac8:	e000      	b.n	8009acc <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009aca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009acc:	2300      	movs	r3, #0
}
 8009ace:	4618      	mov	r0, r3
 8009ad0:	3714      	adds	r7, #20
 8009ad2:	46bd      	mov	sp, r7
 8009ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad8:	4770      	bx	lr
 8009ada:	bf00      	nop
 8009adc:	40012c00 	.word	0x40012c00
 8009ae0:	50012c00 	.word	0x50012c00
 8009ae4:	40000400 	.word	0x40000400
 8009ae8:	50000400 	.word	0x50000400
 8009aec:	40000800 	.word	0x40000800
 8009af0:	50000800 	.word	0x50000800
 8009af4:	40000c00 	.word	0x40000c00
 8009af8:	50000c00 	.word	0x50000c00
 8009afc:	40013400 	.word	0x40013400
 8009b00:	50013400 	.word	0x50013400
 8009b04:	40014000 	.word	0x40014000
 8009b08:	50014000 	.word	0x50014000
 8009b0c:	00010007 	.word	0x00010007

08009b10 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8009b10:	b480      	push	{r7}
 8009b12:	b083      	sub	sp, #12
 8009b14:	af00      	add	r7, sp, #0
 8009b16:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	681b      	ldr	r3, [r3, #0]
 8009b1c:	6a1a      	ldr	r2, [r3, #32]
 8009b1e:	f241 1311 	movw	r3, #4369	; 0x1111
 8009b22:	4013      	ands	r3, r2
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d10f      	bne.n	8009b48 <HAL_TIM_Base_Stop+0x38>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	6a1a      	ldr	r2, [r3, #32]
 8009b2e:	f244 4344 	movw	r3, #17476	; 0x4444
 8009b32:	4013      	ands	r3, r2
 8009b34:	2b00      	cmp	r3, #0
 8009b36:	d107      	bne.n	8009b48 <HAL_TIM_Base_Stop+0x38>
 8009b38:	687b      	ldr	r3, [r7, #4]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	681a      	ldr	r2, [r3, #0]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	681b      	ldr	r3, [r3, #0]
 8009b42:	f022 0201 	bic.w	r2, r2, #1
 8009b46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8009b50:	2300      	movs	r3, #0
}
 8009b52:	4618      	mov	r0, r3
 8009b54:	370c      	adds	r7, #12
 8009b56:	46bd      	mov	sp, r7
 8009b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5c:	4770      	bx	lr
	...

08009b60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009b60:	b480      	push	{r7}
 8009b62:	b085      	sub	sp, #20
 8009b64:	af00      	add	r7, sp, #0
 8009b66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b6e:	b2db      	uxtb	r3, r3
 8009b70:	2b01      	cmp	r3, #1
 8009b72:	d001      	beq.n	8009b78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e072      	b.n	8009c5e <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2202      	movs	r2, #2
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	68da      	ldr	r2, [r3, #12]
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	f042 0201 	orr.w	r2, r2, #1
 8009b8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	4a35      	ldr	r2, [pc, #212]	; (8009c6c <HAL_TIM_Base_Start_IT+0x10c>)
 8009b96:	4293      	cmp	r3, r2
 8009b98:	d040      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	4a34      	ldr	r2, [pc, #208]	; (8009c70 <HAL_TIM_Base_Start_IT+0x110>)
 8009ba0:	4293      	cmp	r3, r2
 8009ba2:	d03b      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	681b      	ldr	r3, [r3, #0]
 8009ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bac:	d036      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009bb6:	d031      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	4a2d      	ldr	r2, [pc, #180]	; (8009c74 <HAL_TIM_Base_Start_IT+0x114>)
 8009bbe:	4293      	cmp	r3, r2
 8009bc0:	d02c      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	4a2c      	ldr	r2, [pc, #176]	; (8009c78 <HAL_TIM_Base_Start_IT+0x118>)
 8009bc8:	4293      	cmp	r3, r2
 8009bca:	d027      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	4a2a      	ldr	r2, [pc, #168]	; (8009c7c <HAL_TIM_Base_Start_IT+0x11c>)
 8009bd2:	4293      	cmp	r3, r2
 8009bd4:	d022      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	4a29      	ldr	r2, [pc, #164]	; (8009c80 <HAL_TIM_Base_Start_IT+0x120>)
 8009bdc:	4293      	cmp	r3, r2
 8009bde:	d01d      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	4a27      	ldr	r2, [pc, #156]	; (8009c84 <HAL_TIM_Base_Start_IT+0x124>)
 8009be6:	4293      	cmp	r3, r2
 8009be8:	d018      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	4a26      	ldr	r2, [pc, #152]	; (8009c88 <HAL_TIM_Base_Start_IT+0x128>)
 8009bf0:	4293      	cmp	r3, r2
 8009bf2:	d013      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	4a24      	ldr	r2, [pc, #144]	; (8009c8c <HAL_TIM_Base_Start_IT+0x12c>)
 8009bfa:	4293      	cmp	r3, r2
 8009bfc:	d00e      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	4a23      	ldr	r2, [pc, #140]	; (8009c90 <HAL_TIM_Base_Start_IT+0x130>)
 8009c04:	4293      	cmp	r3, r2
 8009c06:	d009      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	4a21      	ldr	r2, [pc, #132]	; (8009c94 <HAL_TIM_Base_Start_IT+0x134>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d004      	beq.n	8009c1c <HAL_TIM_Base_Start_IT+0xbc>
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	4a20      	ldr	r2, [pc, #128]	; (8009c98 <HAL_TIM_Base_Start_IT+0x138>)
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	d115      	bne.n	8009c48 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	689a      	ldr	r2, [r3, #8]
 8009c22:	4b1e      	ldr	r3, [pc, #120]	; (8009c9c <HAL_TIM_Base_Start_IT+0x13c>)
 8009c24:	4013      	ands	r3, r2
 8009c26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b06      	cmp	r3, #6
 8009c2c:	d015      	beq.n	8009c5a <HAL_TIM_Base_Start_IT+0xfa>
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c34:	d011      	beq.n	8009c5a <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0201 	orr.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c46:	e008      	b.n	8009c5a <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	681a      	ldr	r2, [r3, #0]
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	f042 0201 	orr.w	r2, r2, #1
 8009c56:	601a      	str	r2, [r3, #0]
 8009c58:	e000      	b.n	8009c5c <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c5a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3714      	adds	r7, #20
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	40012c00 	.word	0x40012c00
 8009c70:	50012c00 	.word	0x50012c00
 8009c74:	40000400 	.word	0x40000400
 8009c78:	50000400 	.word	0x50000400
 8009c7c:	40000800 	.word	0x40000800
 8009c80:	50000800 	.word	0x50000800
 8009c84:	40000c00 	.word	0x40000c00
 8009c88:	50000c00 	.word	0x50000c00
 8009c8c:	40013400 	.word	0x40013400
 8009c90:	50013400 	.word	0x50013400
 8009c94:	40014000 	.word	0x40014000
 8009c98:	50014000 	.word	0x50014000
 8009c9c:	00010007 	.word	0x00010007

08009ca0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009ca0:	b580      	push	{r7, lr}
 8009ca2:	b082      	sub	sp, #8
 8009ca4:	af00      	add	r7, sp, #0
 8009ca6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	691b      	ldr	r3, [r3, #16]
 8009cae:	f003 0302 	and.w	r3, r3, #2
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d122      	bne.n	8009cfc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	68db      	ldr	r3, [r3, #12]
 8009cbc:	f003 0302 	and.w	r3, r3, #2
 8009cc0:	2b02      	cmp	r3, #2
 8009cc2:	d11b      	bne.n	8009cfc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	f06f 0202 	mvn.w	r2, #2
 8009ccc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	2201      	movs	r2, #1
 8009cd2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	699b      	ldr	r3, [r3, #24]
 8009cda:	f003 0303 	and.w	r3, r3, #3
 8009cde:	2b00      	cmp	r3, #0
 8009ce0:	d003      	beq.n	8009cea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009ce2:	6878      	ldr	r0, [r7, #4]
 8009ce4:	f000 fa68 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009ce8:	e005      	b.n	8009cf6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009cea:	6878      	ldr	r0, [r7, #4]
 8009cec:	f000 fa5a 	bl	800a1a4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009cf0:	6878      	ldr	r0, [r7, #4]
 8009cf2:	f000 fa6b 	bl	800a1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	f003 0304 	and.w	r3, r3, #4
 8009d06:	2b04      	cmp	r3, #4
 8009d08:	d122      	bne.n	8009d50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	681b      	ldr	r3, [r3, #0]
 8009d0e:	68db      	ldr	r3, [r3, #12]
 8009d10:	f003 0304 	and.w	r3, r3, #4
 8009d14:	2b04      	cmp	r3, #4
 8009d16:	d11b      	bne.n	8009d50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	f06f 0204 	mvn.w	r2, #4
 8009d20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	2202      	movs	r2, #2
 8009d26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	699b      	ldr	r3, [r3, #24]
 8009d2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d003      	beq.n	8009d3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d36:	6878      	ldr	r0, [r7, #4]
 8009d38:	f000 fa3e 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009d3c:	e005      	b.n	8009d4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d3e:	6878      	ldr	r0, [r7, #4]
 8009d40:	f000 fa30 	bl	800a1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d44:	6878      	ldr	r0, [r7, #4]
 8009d46:	f000 fa41 	bl	800a1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	2200      	movs	r2, #0
 8009d4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	691b      	ldr	r3, [r3, #16]
 8009d56:	f003 0308 	and.w	r3, r3, #8
 8009d5a:	2b08      	cmp	r3, #8
 8009d5c:	d122      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	681b      	ldr	r3, [r3, #0]
 8009d62:	68db      	ldr	r3, [r3, #12]
 8009d64:	f003 0308 	and.w	r3, r3, #8
 8009d68:	2b08      	cmp	r3, #8
 8009d6a:	d11b      	bne.n	8009da4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	f06f 0208 	mvn.w	r2, #8
 8009d74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d76:	687b      	ldr	r3, [r7, #4]
 8009d78:	2204      	movs	r2, #4
 8009d7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	681b      	ldr	r3, [r3, #0]
 8009d80:	69db      	ldr	r3, [r3, #28]
 8009d82:	f003 0303 	and.w	r3, r3, #3
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d003      	beq.n	8009d92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d8a:	6878      	ldr	r0, [r7, #4]
 8009d8c:	f000 fa14 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009d90:	e005      	b.n	8009d9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d92:	6878      	ldr	r0, [r7, #4]
 8009d94:	f000 fa06 	bl	800a1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d98:	6878      	ldr	r0, [r7, #4]
 8009d9a:	f000 fa17 	bl	800a1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	2200      	movs	r2, #0
 8009da2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	f003 0310 	and.w	r3, r3, #16
 8009dae:	2b10      	cmp	r3, #16
 8009db0:	d122      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	68db      	ldr	r3, [r3, #12]
 8009db8:	f003 0310 	and.w	r3, r3, #16
 8009dbc:	2b10      	cmp	r3, #16
 8009dbe:	d11b      	bne.n	8009df8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	f06f 0210 	mvn.w	r2, #16
 8009dc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	2208      	movs	r2, #8
 8009dce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69db      	ldr	r3, [r3, #28]
 8009dd6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d003      	beq.n	8009de6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dde:	6878      	ldr	r0, [r7, #4]
 8009de0:	f000 f9ea 	bl	800a1b8 <HAL_TIM_IC_CaptureCallback>
 8009de4:	e005      	b.n	8009df2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 f9dc 	bl	800a1a4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009dec:	6878      	ldr	r0, [r7, #4]
 8009dee:	f000 f9ed 	bl	800a1cc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	2200      	movs	r2, #0
 8009df6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	691b      	ldr	r3, [r3, #16]
 8009dfe:	f003 0301 	and.w	r3, r3, #1
 8009e02:	2b01      	cmp	r3, #1
 8009e04:	d10e      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	68db      	ldr	r3, [r3, #12]
 8009e0c:	f003 0301 	and.w	r3, r3, #1
 8009e10:	2b01      	cmp	r3, #1
 8009e12:	d107      	bne.n	8009e24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	f06f 0201 	mvn.w	r2, #1
 8009e1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e1e:	6878      	ldr	r0, [r7, #4]
 8009e20:	f7f8 fb72 	bl	8002508 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e24:	687b      	ldr	r3, [r7, #4]
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	691b      	ldr	r3, [r3, #16]
 8009e2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2e:	2b80      	cmp	r3, #128	; 0x80
 8009e30:	d10e      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e3c:	2b80      	cmp	r3, #128	; 0x80
 8009e3e:	d107      	bne.n	8009e50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	681b      	ldr	r3, [r3, #0]
 8009e44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fc34 	bl	800a6b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	691b      	ldr	r3, [r3, #16]
 8009e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e5e:	d10e      	bne.n	8009e7e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	68db      	ldr	r3, [r3, #12]
 8009e66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e6a:	2b80      	cmp	r3, #128	; 0x80
 8009e6c:	d107      	bne.n	8009e7e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e78:	6878      	ldr	r0, [r7, #4]
 8009e7a:	f000 fc27 	bl	800a6cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	691b      	ldr	r3, [r3, #16]
 8009e84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e88:	2b40      	cmp	r3, #64	; 0x40
 8009e8a:	d10e      	bne.n	8009eaa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	681b      	ldr	r3, [r3, #0]
 8009e90:	68db      	ldr	r3, [r3, #12]
 8009e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e96:	2b40      	cmp	r3, #64	; 0x40
 8009e98:	d107      	bne.n	8009eaa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	681b      	ldr	r3, [r3, #0]
 8009e9e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ea2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ea4:	6878      	ldr	r0, [r7, #4]
 8009ea6:	f000 f99b 	bl	800a1e0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	691b      	ldr	r3, [r3, #16]
 8009eb0:	f003 0320 	and.w	r3, r3, #32
 8009eb4:	2b20      	cmp	r3, #32
 8009eb6:	d10e      	bne.n	8009ed6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f003 0320 	and.w	r3, r3, #32
 8009ec2:	2b20      	cmp	r3, #32
 8009ec4:	d107      	bne.n	8009ed6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	f06f 0220 	mvn.w	r2, #32
 8009ece:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fbe7 	bl	800a6a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	691b      	ldr	r3, [r3, #16]
 8009edc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ee0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ee4:	d10f      	bne.n	8009f06 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	68db      	ldr	r3, [r3, #12]
 8009eec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009ef0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009ef4:	d107      	bne.n	8009f06 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8009efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8009f00:	6878      	ldr	r0, [r7, #4]
 8009f02:	f000 fbed 	bl	800a6e0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	691b      	ldr	r3, [r3, #16]
 8009f0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f10:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f14:	d10f      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	68db      	ldr	r3, [r3, #12]
 8009f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009f20:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009f24:	d107      	bne.n	8009f36 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8009f2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8009f30:	6878      	ldr	r0, [r7, #4]
 8009f32:	f000 fbdf 	bl	800a6f4 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	691b      	ldr	r3, [r3, #16]
 8009f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f44:	d10f      	bne.n	8009f66 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68db      	ldr	r3, [r3, #12]
 8009f4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009f50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009f54:	d107      	bne.n	8009f66 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8009f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8009f60:	6878      	ldr	r0, [r7, #4]
 8009f62:	f000 fbd1 	bl	800a708 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	691b      	ldr	r3, [r3, #16]
 8009f6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f70:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f74:	d10f      	bne.n	8009f96 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	68db      	ldr	r3, [r3, #12]
 8009f7c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009f80:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009f84:	d107      	bne.n	8009f96 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8009f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f000 fbc3 	bl	800a71c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009f96:	bf00      	nop
 8009f98:	3708      	adds	r7, #8
 8009f9a:	46bd      	mov	sp, r7
 8009f9c:	bd80      	pop	{r7, pc}
	...

08009fa0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009fa0:	b580      	push	{r7, lr}
 8009fa2:	b084      	sub	sp, #16
 8009fa4:	af00      	add	r7, sp, #0
 8009fa6:	6078      	str	r0, [r7, #4]
 8009fa8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009faa:	2300      	movs	r3, #0
 8009fac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009fb4:	2b01      	cmp	r3, #1
 8009fb6:	d101      	bne.n	8009fbc <HAL_TIM_ConfigClockSource+0x1c>
 8009fb8:	2302      	movs	r3, #2
 8009fba:	e0e6      	b.n	800a18a <HAL_TIM_ConfigClockSource+0x1ea>
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	2201      	movs	r2, #1
 8009fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	2202      	movs	r2, #2
 8009fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	689b      	ldr	r3, [r3, #8]
 8009fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009fd4:	68bb      	ldr	r3, [r7, #8]
 8009fd6:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8009fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009fe0:	68bb      	ldr	r3, [r7, #8]
 8009fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009fe6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	68ba      	ldr	r2, [r7, #8]
 8009fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009ff0:	683b      	ldr	r3, [r7, #0]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	4a67      	ldr	r2, [pc, #412]	; (800a194 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	f000 80b1 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 8009ffc:	4a65      	ldr	r2, [pc, #404]	; (800a194 <HAL_TIM_ConfigClockSource+0x1f4>)
 8009ffe:	4293      	cmp	r3, r2
 800a000:	f200 80b6 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a004:	4a64      	ldr	r2, [pc, #400]	; (800a198 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a006:	4293      	cmp	r3, r2
 800a008:	f000 80a9 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a00c:	4a62      	ldr	r2, [pc, #392]	; (800a198 <HAL_TIM_ConfigClockSource+0x1f8>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	f200 80ae 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a014:	4a61      	ldr	r2, [pc, #388]	; (800a19c <HAL_TIM_ConfigClockSource+0x1fc>)
 800a016:	4293      	cmp	r3, r2
 800a018:	f000 80a1 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a01c:	4a5f      	ldr	r2, [pc, #380]	; (800a19c <HAL_TIM_ConfigClockSource+0x1fc>)
 800a01e:	4293      	cmp	r3, r2
 800a020:	f200 80a6 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a024:	4a5e      	ldr	r2, [pc, #376]	; (800a1a0 <HAL_TIM_ConfigClockSource+0x200>)
 800a026:	4293      	cmp	r3, r2
 800a028:	f000 8099 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a02c:	4a5c      	ldr	r2, [pc, #368]	; (800a1a0 <HAL_TIM_ConfigClockSource+0x200>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	f200 809e 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a034:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a038:	f000 8091 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a03c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800a040:	f200 8096 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a044:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a048:	f000 8089 	beq.w	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a04c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a050:	f200 808e 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a054:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a058:	d03e      	beq.n	800a0d8 <HAL_TIM_ConfigClockSource+0x138>
 800a05a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a05e:	f200 8087 	bhi.w	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a062:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a066:	f000 8086 	beq.w	800a176 <HAL_TIM_ConfigClockSource+0x1d6>
 800a06a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a06e:	d87f      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a070:	2b70      	cmp	r3, #112	; 0x70
 800a072:	d01a      	beq.n	800a0aa <HAL_TIM_ConfigClockSource+0x10a>
 800a074:	2b70      	cmp	r3, #112	; 0x70
 800a076:	d87b      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a078:	2b60      	cmp	r3, #96	; 0x60
 800a07a:	d050      	beq.n	800a11e <HAL_TIM_ConfigClockSource+0x17e>
 800a07c:	2b60      	cmp	r3, #96	; 0x60
 800a07e:	d877      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a080:	2b50      	cmp	r3, #80	; 0x50
 800a082:	d03c      	beq.n	800a0fe <HAL_TIM_ConfigClockSource+0x15e>
 800a084:	2b50      	cmp	r3, #80	; 0x50
 800a086:	d873      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a088:	2b40      	cmp	r3, #64	; 0x40
 800a08a:	d058      	beq.n	800a13e <HAL_TIM_ConfigClockSource+0x19e>
 800a08c:	2b40      	cmp	r3, #64	; 0x40
 800a08e:	d86f      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a090:	2b30      	cmp	r3, #48	; 0x30
 800a092:	d064      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a094:	2b30      	cmp	r3, #48	; 0x30
 800a096:	d86b      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a098:	2b20      	cmp	r3, #32
 800a09a:	d060      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a09c:	2b20      	cmp	r3, #32
 800a09e:	d867      	bhi.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d05c      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a0a4:	2b10      	cmp	r3, #16
 800a0a6:	d05a      	beq.n	800a15e <HAL_TIM_ConfigClockSource+0x1be>
 800a0a8:	e062      	b.n	800a170 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	6818      	ldr	r0, [r3, #0]
 800a0ae:	683b      	ldr	r3, [r7, #0]
 800a0b0:	6899      	ldr	r1, [r3, #8]
 800a0b2:	683b      	ldr	r3, [r7, #0]
 800a0b4:	685a      	ldr	r2, [r3, #4]
 800a0b6:	683b      	ldr	r3, [r7, #0]
 800a0b8:	68db      	ldr	r3, [r3, #12]
 800a0ba:	f000 fa11 	bl	800a4e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	689b      	ldr	r3, [r3, #8]
 800a0c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a0cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	68ba      	ldr	r2, [r7, #8]
 800a0d4:	609a      	str	r2, [r3, #8]
      break;
 800a0d6:	e04f      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6818      	ldr	r0, [r3, #0]
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	6899      	ldr	r1, [r3, #8]
 800a0e0:	683b      	ldr	r3, [r7, #0]
 800a0e2:	685a      	ldr	r2, [r3, #4]
 800a0e4:	683b      	ldr	r3, [r7, #0]
 800a0e6:	68db      	ldr	r3, [r3, #12]
 800a0e8:	f000 f9fa 	bl	800a4e0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	689a      	ldr	r2, [r3, #8]
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a0fa:	609a      	str	r2, [r3, #8]
      break;
 800a0fc:	e03c      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	6818      	ldr	r0, [r3, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	6859      	ldr	r1, [r3, #4]
 800a106:	683b      	ldr	r3, [r7, #0]
 800a108:	68db      	ldr	r3, [r3, #12]
 800a10a:	461a      	mov	r2, r3
 800a10c:	f000 f96c 	bl	800a3e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	2150      	movs	r1, #80	; 0x50
 800a116:	4618      	mov	r0, r3
 800a118:	f000 f9c5 	bl	800a4a6 <TIM_ITRx_SetConfig>
      break;
 800a11c:	e02c      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	6818      	ldr	r0, [r3, #0]
 800a122:	683b      	ldr	r3, [r7, #0]
 800a124:	6859      	ldr	r1, [r3, #4]
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	68db      	ldr	r3, [r3, #12]
 800a12a:	461a      	mov	r2, r3
 800a12c:	f000 f98b 	bl	800a446 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	2160      	movs	r1, #96	; 0x60
 800a136:	4618      	mov	r0, r3
 800a138:	f000 f9b5 	bl	800a4a6 <TIM_ITRx_SetConfig>
      break;
 800a13c:	e01c      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6818      	ldr	r0, [r3, #0]
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	6859      	ldr	r1, [r3, #4]
 800a146:	683b      	ldr	r3, [r7, #0]
 800a148:	68db      	ldr	r3, [r3, #12]
 800a14a:	461a      	mov	r2, r3
 800a14c:	f000 f94c 	bl	800a3e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	2140      	movs	r1, #64	; 0x40
 800a156:	4618      	mov	r0, r3
 800a158:	f000 f9a5 	bl	800a4a6 <TIM_ITRx_SetConfig>
      break;
 800a15c:	e00c      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681a      	ldr	r2, [r3, #0]
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	681b      	ldr	r3, [r3, #0]
 800a166:	4619      	mov	r1, r3
 800a168:	4610      	mov	r0, r2
 800a16a:	f000 f99c 	bl	800a4a6 <TIM_ITRx_SetConfig>
      break;
 800a16e:	e003      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800a170:	2301      	movs	r3, #1
 800a172:	73fb      	strb	r3, [r7, #15]
      break;
 800a174:	e000      	b.n	800a178 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800a176:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	2201      	movs	r2, #1
 800a17c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	2200      	movs	r2, #0
 800a184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a188:	7bfb      	ldrb	r3, [r7, #15]
}
 800a18a:	4618      	mov	r0, r3
 800a18c:	3710      	adds	r7, #16
 800a18e:	46bd      	mov	sp, r7
 800a190:	bd80      	pop	{r7, pc}
 800a192:	bf00      	nop
 800a194:	00100070 	.word	0x00100070
 800a198:	00100040 	.word	0x00100040
 800a19c:	00100030 	.word	0x00100030
 800a1a0:	00100020 	.word	0x00100020

0800a1a4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a1a4:	b480      	push	{r7}
 800a1a6:	b083      	sub	sp, #12
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a1ac:	bf00      	nop
 800a1ae:	370c      	adds	r7, #12
 800a1b0:	46bd      	mov	sp, r7
 800a1b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b6:	4770      	bx	lr

0800a1b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a1b8:	b480      	push	{r7}
 800a1ba:	b083      	sub	sp, #12
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a1c0:	bf00      	nop
 800a1c2:	370c      	adds	r7, #12
 800a1c4:	46bd      	mov	sp, r7
 800a1c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ca:	4770      	bx	lr

0800a1cc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a1cc:	b480      	push	{r7}
 800a1ce:	b083      	sub	sp, #12
 800a1d0:	af00      	add	r7, sp, #0
 800a1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a1d4:	bf00      	nop
 800a1d6:	370c      	adds	r7, #12
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1de:	4770      	bx	lr

0800a1e0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a1e0:	b480      	push	{r7}
 800a1e2:	b083      	sub	sp, #12
 800a1e4:	af00      	add	r7, sp, #0
 800a1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a1e8:	bf00      	nop
 800a1ea:	370c      	adds	r7, #12
 800a1ec:	46bd      	mov	sp, r7
 800a1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f2:	4770      	bx	lr

0800a1f4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a1f4:	b480      	push	{r7}
 800a1f6:	b085      	sub	sp, #20
 800a1f8:	af00      	add	r7, sp, #0
 800a1fa:	6078      	str	r0, [r7, #4]
 800a1fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	681b      	ldr	r3, [r3, #0]
 800a202:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	4a68      	ldr	r2, [pc, #416]	; (800a3a8 <TIM_Base_SetConfig+0x1b4>)
 800a208:	4293      	cmp	r3, r2
 800a20a:	d02b      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	4a67      	ldr	r2, [pc, #412]	; (800a3ac <TIM_Base_SetConfig+0x1b8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d027      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a214:	687b      	ldr	r3, [r7, #4]
 800a216:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a21a:	d023      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a222:	d01f      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	4a62      	ldr	r2, [pc, #392]	; (800a3b0 <TIM_Base_SetConfig+0x1bc>)
 800a228:	4293      	cmp	r3, r2
 800a22a:	d01b      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	4a61      	ldr	r2, [pc, #388]	; (800a3b4 <TIM_Base_SetConfig+0x1c0>)
 800a230:	4293      	cmp	r3, r2
 800a232:	d017      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	4a60      	ldr	r2, [pc, #384]	; (800a3b8 <TIM_Base_SetConfig+0x1c4>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d013      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	4a5f      	ldr	r2, [pc, #380]	; (800a3bc <TIM_Base_SetConfig+0x1c8>)
 800a240:	4293      	cmp	r3, r2
 800a242:	d00f      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	4a5e      	ldr	r2, [pc, #376]	; (800a3c0 <TIM_Base_SetConfig+0x1cc>)
 800a248:	4293      	cmp	r3, r2
 800a24a:	d00b      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	4a5d      	ldr	r2, [pc, #372]	; (800a3c4 <TIM_Base_SetConfig+0x1d0>)
 800a250:	4293      	cmp	r3, r2
 800a252:	d007      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	4a5c      	ldr	r2, [pc, #368]	; (800a3c8 <TIM_Base_SetConfig+0x1d4>)
 800a258:	4293      	cmp	r3, r2
 800a25a:	d003      	beq.n	800a264 <TIM_Base_SetConfig+0x70>
 800a25c:	687b      	ldr	r3, [r7, #4]
 800a25e:	4a5b      	ldr	r2, [pc, #364]	; (800a3cc <TIM_Base_SetConfig+0x1d8>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d108      	bne.n	800a276 <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a26a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a26c:	683b      	ldr	r3, [r7, #0]
 800a26e:	685b      	ldr	r3, [r3, #4]
 800a270:	68fa      	ldr	r2, [r7, #12]
 800a272:	4313      	orrs	r3, r2
 800a274:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	4a4b      	ldr	r2, [pc, #300]	; (800a3a8 <TIM_Base_SetConfig+0x1b4>)
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d043      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	4a4a      	ldr	r2, [pc, #296]	; (800a3ac <TIM_Base_SetConfig+0x1b8>)
 800a282:	4293      	cmp	r3, r2
 800a284:	d03f      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a28c:	d03b      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a294:	d037      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	4a45      	ldr	r2, [pc, #276]	; (800a3b0 <TIM_Base_SetConfig+0x1bc>)
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d033      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	4a44      	ldr	r2, [pc, #272]	; (800a3b4 <TIM_Base_SetConfig+0x1c0>)
 800a2a2:	4293      	cmp	r3, r2
 800a2a4:	d02f      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2a6:	687b      	ldr	r3, [r7, #4]
 800a2a8:	4a43      	ldr	r2, [pc, #268]	; (800a3b8 <TIM_Base_SetConfig+0x1c4>)
 800a2aa:	4293      	cmp	r3, r2
 800a2ac:	d02b      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a42      	ldr	r2, [pc, #264]	; (800a3bc <TIM_Base_SetConfig+0x1c8>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d027      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a41      	ldr	r2, [pc, #260]	; (800a3c0 <TIM_Base_SetConfig+0x1cc>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d023      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a40      	ldr	r2, [pc, #256]	; (800a3c4 <TIM_Base_SetConfig+0x1d0>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d01f      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a3f      	ldr	r2, [pc, #252]	; (800a3c8 <TIM_Base_SetConfig+0x1d4>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d01b      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a3e      	ldr	r2, [pc, #248]	; (800a3cc <TIM_Base_SetConfig+0x1d8>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d017      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a3d      	ldr	r2, [pc, #244]	; (800a3d0 <TIM_Base_SetConfig+0x1dc>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d013      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a3c      	ldr	r2, [pc, #240]	; (800a3d4 <TIM_Base_SetConfig+0x1e0>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d00f      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	4a3b      	ldr	r2, [pc, #236]	; (800a3d8 <TIM_Base_SetConfig+0x1e4>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d00b      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2ee:	687b      	ldr	r3, [r7, #4]
 800a2f0:	4a3a      	ldr	r2, [pc, #232]	; (800a3dc <TIM_Base_SetConfig+0x1e8>)
 800a2f2:	4293      	cmp	r3, r2
 800a2f4:	d007      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	4a39      	ldr	r2, [pc, #228]	; (800a3e0 <TIM_Base_SetConfig+0x1ec>)
 800a2fa:	4293      	cmp	r3, r2
 800a2fc:	d003      	beq.n	800a306 <TIM_Base_SetConfig+0x112>
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	4a38      	ldr	r2, [pc, #224]	; (800a3e4 <TIM_Base_SetConfig+0x1f0>)
 800a302:	4293      	cmp	r3, r2
 800a304:	d108      	bne.n	800a318 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a306:	68fb      	ldr	r3, [r7, #12]
 800a308:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a30c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a30e:	683b      	ldr	r3, [r7, #0]
 800a310:	68db      	ldr	r3, [r3, #12]
 800a312:	68fa      	ldr	r2, [r7, #12]
 800a314:	4313      	orrs	r3, r2
 800a316:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a31e:	683b      	ldr	r3, [r7, #0]
 800a320:	695b      	ldr	r3, [r3, #20]
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	689a      	ldr	r2, [r3, #8]
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681a      	ldr	r2, [r3, #0]
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	4a1a      	ldr	r2, [pc, #104]	; (800a3a8 <TIM_Base_SetConfig+0x1b4>)
 800a340:	4293      	cmp	r3, r2
 800a342:	d023      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	4a19      	ldr	r2, [pc, #100]	; (800a3ac <TIM_Base_SetConfig+0x1b8>)
 800a348:	4293      	cmp	r3, r2
 800a34a:	d01f      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	4a1e      	ldr	r2, [pc, #120]	; (800a3c8 <TIM_Base_SetConfig+0x1d4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d01b      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a1d      	ldr	r2, [pc, #116]	; (800a3cc <TIM_Base_SetConfig+0x1d8>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d017      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a1c      	ldr	r2, [pc, #112]	; (800a3d0 <TIM_Base_SetConfig+0x1dc>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d013      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	4a1b      	ldr	r2, [pc, #108]	; (800a3d4 <TIM_Base_SetConfig+0x1e0>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d00f      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	4a1a      	ldr	r2, [pc, #104]	; (800a3d8 <TIM_Base_SetConfig+0x1e4>)
 800a370:	4293      	cmp	r3, r2
 800a372:	d00b      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	4a19      	ldr	r2, [pc, #100]	; (800a3dc <TIM_Base_SetConfig+0x1e8>)
 800a378:	4293      	cmp	r3, r2
 800a37a:	d007      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	4a18      	ldr	r2, [pc, #96]	; (800a3e0 <TIM_Base_SetConfig+0x1ec>)
 800a380:	4293      	cmp	r3, r2
 800a382:	d003      	beq.n	800a38c <TIM_Base_SetConfig+0x198>
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	4a17      	ldr	r2, [pc, #92]	; (800a3e4 <TIM_Base_SetConfig+0x1f0>)
 800a388:	4293      	cmp	r3, r2
 800a38a:	d103      	bne.n	800a394 <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a38c:	683b      	ldr	r3, [r7, #0]
 800a38e:	691a      	ldr	r2, [r3, #16]
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2201      	movs	r2, #1
 800a398:	615a      	str	r2, [r3, #20]
}
 800a39a:	bf00      	nop
 800a39c:	3714      	adds	r7, #20
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	40012c00 	.word	0x40012c00
 800a3ac:	50012c00 	.word	0x50012c00
 800a3b0:	40000400 	.word	0x40000400
 800a3b4:	50000400 	.word	0x50000400
 800a3b8:	40000800 	.word	0x40000800
 800a3bc:	50000800 	.word	0x50000800
 800a3c0:	40000c00 	.word	0x40000c00
 800a3c4:	50000c00 	.word	0x50000c00
 800a3c8:	40013400 	.word	0x40013400
 800a3cc:	50013400 	.word	0x50013400
 800a3d0:	40014000 	.word	0x40014000
 800a3d4:	50014000 	.word	0x50014000
 800a3d8:	40014400 	.word	0x40014400
 800a3dc:	50014400 	.word	0x50014400
 800a3e0:	40014800 	.word	0x40014800
 800a3e4:	50014800 	.word	0x50014800

0800a3e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b087      	sub	sp, #28
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	6a1b      	ldr	r3, [r3, #32]
 800a3fe:	f023 0201 	bic.w	r2, r3, #1
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	699b      	ldr	r3, [r3, #24]
 800a40a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a412:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a41e:	697b      	ldr	r3, [r7, #20]
 800a420:	f023 030a 	bic.w	r3, r3, #10
 800a424:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	4313      	orrs	r3, r2
 800a42c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	693a      	ldr	r2, [r7, #16]
 800a432:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a434:	68fb      	ldr	r3, [r7, #12]
 800a436:	697a      	ldr	r2, [r7, #20]
 800a438:	621a      	str	r2, [r3, #32]
}
 800a43a:	bf00      	nop
 800a43c:	371c      	adds	r7, #28
 800a43e:	46bd      	mov	sp, r7
 800a440:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a444:	4770      	bx	lr

0800a446 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a446:	b480      	push	{r7}
 800a448:	b087      	sub	sp, #28
 800a44a:	af00      	add	r7, sp, #0
 800a44c:	60f8      	str	r0, [r7, #12]
 800a44e:	60b9      	str	r1, [r7, #8]
 800a450:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6a1b      	ldr	r3, [r3, #32]
 800a456:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a458:	68fb      	ldr	r3, [r7, #12]
 800a45a:	6a1b      	ldr	r3, [r3, #32]
 800a45c:	f023 0210 	bic.w	r2, r3, #16
 800a460:	68fb      	ldr	r3, [r7, #12]
 800a462:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	699b      	ldr	r3, [r3, #24]
 800a468:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a46a:	693b      	ldr	r3, [r7, #16]
 800a46c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a470:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	031b      	lsls	r3, r3, #12
 800a476:	693a      	ldr	r2, [r7, #16]
 800a478:	4313      	orrs	r3, r2
 800a47a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a47c:	697b      	ldr	r3, [r7, #20]
 800a47e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a482:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a484:	68bb      	ldr	r3, [r7, #8]
 800a486:	011b      	lsls	r3, r3, #4
 800a488:	697a      	ldr	r2, [r7, #20]
 800a48a:	4313      	orrs	r3, r2
 800a48c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	693a      	ldr	r2, [r7, #16]
 800a492:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	697a      	ldr	r2, [r7, #20]
 800a498:	621a      	str	r2, [r3, #32]
}
 800a49a:	bf00      	nop
 800a49c:	371c      	adds	r7, #28
 800a49e:	46bd      	mov	sp, r7
 800a4a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4a4:	4770      	bx	lr

0800a4a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a4a6:	b480      	push	{r7}
 800a4a8:	b085      	sub	sp, #20
 800a4aa:	af00      	add	r7, sp, #0
 800a4ac:	6078      	str	r0, [r7, #4]
 800a4ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	689b      	ldr	r3, [r3, #8]
 800a4b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800a4bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a4c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a4c2:	683a      	ldr	r2, [r7, #0]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	4313      	orrs	r3, r2
 800a4c8:	f043 0307 	orr.w	r3, r3, #7
 800a4cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	609a      	str	r2, [r3, #8]
}
 800a4d4:	bf00      	nop
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr

0800a4e0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b087      	sub	sp, #28
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	60f8      	str	r0, [r7, #12]
 800a4e8:	60b9      	str	r1, [r7, #8]
 800a4ea:	607a      	str	r2, [r7, #4]
 800a4ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	689b      	ldr	r3, [r3, #8]
 800a4f2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a4f4:	697b      	ldr	r3, [r7, #20]
 800a4f6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a4fa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a4fc:	683b      	ldr	r3, [r7, #0]
 800a4fe:	021a      	lsls	r2, r3, #8
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	431a      	orrs	r2, r3
 800a504:	68bb      	ldr	r3, [r7, #8]
 800a506:	4313      	orrs	r3, r2
 800a508:	697a      	ldr	r2, [r7, #20]
 800a50a:	4313      	orrs	r3, r2
 800a50c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	697a      	ldr	r2, [r7, #20]
 800a512:	609a      	str	r2, [r3, #8]
}
 800a514:	bf00      	nop
 800a516:	371c      	adds	r7, #28
 800a518:	46bd      	mov	sp, r7
 800a51a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a51e:	4770      	bx	lr

0800a520 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a520:	b480      	push	{r7}
 800a522:	b085      	sub	sp, #20
 800a524:	af00      	add	r7, sp, #0
 800a526:	6078      	str	r0, [r7, #4]
 800a528:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a530:	2b01      	cmp	r3, #1
 800a532:	d101      	bne.n	800a538 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a534:	2302      	movs	r3, #2
 800a536:	e097      	b.n	800a668 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	2201      	movs	r2, #1
 800a53c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	2202      	movs	r2, #2
 800a544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	685b      	ldr	r3, [r3, #4]
 800a54e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a45      	ldr	r2, [pc, #276]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d00e      	beq.n	800a580 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	4a44      	ldr	r2, [pc, #272]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a568:	4293      	cmp	r3, r2
 800a56a:	d009      	beq.n	800a580 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	4a42      	ldr	r2, [pc, #264]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a572:	4293      	cmp	r3, r2
 800a574:	d004      	beq.n	800a580 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	4a41      	ldr	r2, [pc, #260]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a57c:	4293      	cmp	r3, r2
 800a57e:	d108      	bne.n	800a592 <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a586:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	685b      	ldr	r3, [r3, #4]
 800a58c:	68fa      	ldr	r2, [r7, #12]
 800a58e:	4313      	orrs	r3, r2
 800a590:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a592:	68fb      	ldr	r3, [r7, #12]
 800a594:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800a598:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a59c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a59e:	683b      	ldr	r3, [r7, #0]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	68fa      	ldr	r2, [r7, #12]
 800a5a4:	4313      	orrs	r3, r2
 800a5a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68fa      	ldr	r2, [r7, #12]
 800a5ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	4a2f      	ldr	r2, [pc, #188]	; (800a674 <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d040      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a2e      	ldr	r2, [pc, #184]	; (800a678 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d03b      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	681b      	ldr	r3, [r3, #0]
 800a5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a5cc:	d036      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a5d6:	d031      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	4a29      	ldr	r2, [pc, #164]	; (800a684 <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800a5de:	4293      	cmp	r3, r2
 800a5e0:	d02c      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	4a28      	ldr	r2, [pc, #160]	; (800a688 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800a5e8:	4293      	cmp	r3, r2
 800a5ea:	d027      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4a26      	ldr	r2, [pc, #152]	; (800a68c <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800a5f2:	4293      	cmp	r3, r2
 800a5f4:	d022      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	4a25      	ldr	r2, [pc, #148]	; (800a690 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800a5fc:	4293      	cmp	r3, r2
 800a5fe:	d01d      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4a23      	ldr	r2, [pc, #140]	; (800a694 <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d018      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	4a22      	ldr	r2, [pc, #136]	; (800a698 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800a610:	4293      	cmp	r3, r2
 800a612:	d013      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	4a18      	ldr	r2, [pc, #96]	; (800a67c <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800a61a:	4293      	cmp	r3, r2
 800a61c:	d00e      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	4a17      	ldr	r2, [pc, #92]	; (800a680 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800a624:	4293      	cmp	r3, r2
 800a626:	d009      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a1b      	ldr	r2, [pc, #108]	; (800a69c <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d004      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a1a      	ldr	r2, [pc, #104]	; (800a6a0 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d10c      	bne.n	800a656 <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a642:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	689b      	ldr	r3, [r3, #8]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	68ba      	ldr	r2, [r7, #8]
 800a654:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	2201      	movs	r2, #1
 800a65a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	2200      	movs	r2, #0
 800a662:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a666:	2300      	movs	r3, #0
}
 800a668:	4618      	mov	r0, r3
 800a66a:	3714      	adds	r7, #20
 800a66c:	46bd      	mov	sp, r7
 800a66e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a672:	4770      	bx	lr
 800a674:	40012c00 	.word	0x40012c00
 800a678:	50012c00 	.word	0x50012c00
 800a67c:	40013400 	.word	0x40013400
 800a680:	50013400 	.word	0x50013400
 800a684:	40000400 	.word	0x40000400
 800a688:	50000400 	.word	0x50000400
 800a68c:	40000800 	.word	0x40000800
 800a690:	50000800 	.word	0x50000800
 800a694:	40000c00 	.word	0x40000c00
 800a698:	50000c00 	.word	0x50000c00
 800a69c:	40014000 	.word	0x40014000
 800a6a0:	50014000 	.word	0x50014000

0800a6a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b083      	sub	sp, #12
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6ac:	bf00      	nop
 800a6ae:	370c      	adds	r7, #12
 800a6b0:	46bd      	mov	sp, r7
 800a6b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b6:	4770      	bx	lr

0800a6b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6b8:	b480      	push	{r7}
 800a6ba:	b083      	sub	sp, #12
 800a6bc:	af00      	add	r7, sp, #0
 800a6be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6c0:	bf00      	nop
 800a6c2:	370c      	adds	r7, #12
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr

0800a6cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6cc:	b480      	push	{r7}
 800a6ce:	b083      	sub	sp, #12
 800a6d0:	af00      	add	r7, sp, #0
 800a6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6d4:	bf00      	nop
 800a6d6:	370c      	adds	r7, #12
 800a6d8:	46bd      	mov	sp, r7
 800a6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6de:	4770      	bx	lr

0800a6e0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800a6e0:	b480      	push	{r7}
 800a6e2:	b083      	sub	sp, #12
 800a6e4:	af00      	add	r7, sp, #0
 800a6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800a6e8:	bf00      	nop
 800a6ea:	370c      	adds	r7, #12
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6f2:	4770      	bx	lr

0800a6f4 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800a6f4:	b480      	push	{r7}
 800a6f6:	b083      	sub	sp, #12
 800a6f8:	af00      	add	r7, sp, #0
 800a6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800a6fc:	bf00      	nop
 800a6fe:	370c      	adds	r7, #12
 800a700:	46bd      	mov	sp, r7
 800a702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a706:	4770      	bx	lr

0800a708 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800a708:	b480      	push	{r7}
 800a70a:	b083      	sub	sp, #12
 800a70c:	af00      	add	r7, sp, #0
 800a70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800a710:	bf00      	nop
 800a712:	370c      	adds	r7, #12
 800a714:	46bd      	mov	sp, r7
 800a716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a71a:	4770      	bx	lr

0800a71c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b083      	sub	sp, #12
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800a724:	bf00      	nop
 800a726:	370c      	adds	r7, #12
 800a728:	46bd      	mov	sp, r7
 800a72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72e:	4770      	bx	lr

0800a730 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a730:	b580      	push	{r7, lr}
 800a732:	b082      	sub	sp, #8
 800a734:	af00      	add	r7, sp, #0
 800a736:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d101      	bne.n	800a742 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a73e:	2301      	movs	r3, #1
 800a740:	e042      	b.n	800a7c8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a742:	687b      	ldr	r3, [r7, #4]
 800a744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d106      	bne.n	800a75a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	2200      	movs	r2, #0
 800a750:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7f8 f8d9 	bl	800290c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	2224      	movs	r2, #36	; 0x24
 800a75e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	681a      	ldr	r2, [r3, #0]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	f022 0201 	bic.w	r2, r2, #1
 800a770:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a772:	6878      	ldr	r0, [r7, #4]
 800a774:	f000 f9a2 	bl	800aabc <UART_SetConfig>
 800a778:	4603      	mov	r3, r0
 800a77a:	2b01      	cmp	r3, #1
 800a77c:	d101      	bne.n	800a782 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800a77e:	2301      	movs	r3, #1
 800a780:	e022      	b.n	800a7c8 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a786:	2b00      	cmp	r3, #0
 800a788:	d002      	beq.n	800a790 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800a78a:	6878      	ldr	r0, [r7, #4]
 800a78c:	f000 fb38 	bl	800ae00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685a      	ldr	r2, [r3, #4]
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a79e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	681b      	ldr	r3, [r3, #0]
 800a7a4:	689a      	ldr	r2, [r3, #8]
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a7ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f042 0201 	orr.w	r2, r2, #1
 800a7be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f000 fbbf 	bl	800af44 <UART_CheckIdleState>
 800a7c6:	4603      	mov	r3, r0
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	3708      	adds	r7, #8
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	bd80      	pop	{r7, pc}

0800a7d0 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a7d0:	b580      	push	{r7, lr}
 800a7d2:	b08a      	sub	sp, #40	; 0x28
 800a7d4:	af02      	add	r7, sp, #8
 800a7d6:	60f8      	str	r0, [r7, #12]
 800a7d8:	60b9      	str	r1, [r7, #8]
 800a7da:	603b      	str	r3, [r7, #0]
 800a7dc:	4613      	mov	r3, r2
 800a7de:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7e6:	2b20      	cmp	r3, #32
 800a7e8:	f040 808b 	bne.w	800a902 <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7ec:	68bb      	ldr	r3, [r7, #8]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	d002      	beq.n	800a7f8 <HAL_UART_Transmit+0x28>
 800a7f2:	88fb      	ldrh	r3, [r7, #6]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d101      	bne.n	800a7fc <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800a7f8:	2301      	movs	r3, #1
 800a7fa:	e083      	b.n	800a904 <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800a7fc:	68fb      	ldr	r3, [r7, #12]
 800a7fe:	681b      	ldr	r3, [r3, #0]
 800a800:	689b      	ldr	r3, [r3, #8]
 800a802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a806:	2b80      	cmp	r3, #128	; 0x80
 800a808:	d107      	bne.n	800a81a <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	689a      	ldr	r2, [r3, #8]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a818:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	2200      	movs	r2, #0
 800a81e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	2221      	movs	r2, #33	; 0x21
 800a826:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a82a:	f7f8 fb33 	bl	8002e94 <HAL_GetTick>
 800a82e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a830:	68fb      	ldr	r3, [r7, #12]
 800a832:	88fa      	ldrh	r2, [r7, #6]
 800a834:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	88fa      	ldrh	r2, [r7, #6]
 800a83c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	689b      	ldr	r3, [r3, #8]
 800a844:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a848:	d108      	bne.n	800a85c <HAL_UART_Transmit+0x8c>
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	691b      	ldr	r3, [r3, #16]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d104      	bne.n	800a85c <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800a852:	2300      	movs	r3, #0
 800a854:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a856:	68bb      	ldr	r3, [r7, #8]
 800a858:	61bb      	str	r3, [r7, #24]
 800a85a:	e003      	b.n	800a864 <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800a85c:	68bb      	ldr	r3, [r7, #8]
 800a85e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a860:	2300      	movs	r3, #0
 800a862:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800a864:	e030      	b.n	800a8c8 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	9300      	str	r3, [sp, #0]
 800a86a:	697b      	ldr	r3, [r7, #20]
 800a86c:	2200      	movs	r2, #0
 800a86e:	2180      	movs	r1, #128	; 0x80
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f000 fc11 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800a876:	4603      	mov	r3, r0
 800a878:	2b00      	cmp	r3, #0
 800a87a:	d005      	beq.n	800a888 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	2220      	movs	r2, #32
 800a880:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800a884:	2303      	movs	r3, #3
 800a886:	e03d      	b.n	800a904 <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	2b00      	cmp	r3, #0
 800a88c:	d10b      	bne.n	800a8a6 <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a88e:	69bb      	ldr	r3, [r7, #24]
 800a890:	881b      	ldrh	r3, [r3, #0]
 800a892:	461a      	mov	r2, r3
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a89c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a89e:	69bb      	ldr	r3, [r7, #24]
 800a8a0:	3302      	adds	r3, #2
 800a8a2:	61bb      	str	r3, [r7, #24]
 800a8a4:	e007      	b.n	800a8b6 <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	781a      	ldrb	r2, [r3, #0]
 800a8aa:	68fb      	ldr	r3, [r7, #12]
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a8b0:	69fb      	ldr	r3, [r7, #28]
 800a8b2:	3301      	adds	r3, #1
 800a8b4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a8bc:	b29b      	uxth	r3, r3
 800a8be:	3b01      	subs	r3, #1
 800a8c0:	b29a      	uxth	r2, r3
 800a8c2:	68fb      	ldr	r3, [r7, #12]
 800a8c4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800a8c8:	68fb      	ldr	r3, [r7, #12]
 800a8ca:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800a8ce:	b29b      	uxth	r3, r3
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d1c8      	bne.n	800a866 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a8d4:	683b      	ldr	r3, [r7, #0]
 800a8d6:	9300      	str	r3, [sp, #0]
 800a8d8:	697b      	ldr	r3, [r7, #20]
 800a8da:	2200      	movs	r2, #0
 800a8dc:	2140      	movs	r1, #64	; 0x40
 800a8de:	68f8      	ldr	r0, [r7, #12]
 800a8e0:	f000 fbda 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800a8e4:	4603      	mov	r3, r0
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d005      	beq.n	800a8f6 <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	2220      	movs	r2, #32
 800a8ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800a8f2:	2303      	movs	r3, #3
 800a8f4:	e006      	b.n	800a904 <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	2220      	movs	r2, #32
 800a8fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800a8fe:	2300      	movs	r3, #0
 800a900:	e000      	b.n	800a904 <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800a902:	2302      	movs	r3, #2
  }
}
 800a904:	4618      	mov	r0, r3
 800a906:	3720      	adds	r7, #32
 800a908:	46bd      	mov	sp, r7
 800a90a:	bd80      	pop	{r7, pc}

0800a90c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a90c:	b580      	push	{r7, lr}
 800a90e:	b08a      	sub	sp, #40	; 0x28
 800a910:	af02      	add	r7, sp, #8
 800a912:	60f8      	str	r0, [r7, #12]
 800a914:	60b9      	str	r1, [r7, #8]
 800a916:	603b      	str	r3, [r7, #0]
 800a918:	4613      	mov	r3, r2
 800a91a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800a922:	2b20      	cmp	r3, #32
 800a924:	f040 80c4 	bne.w	800aab0 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800a928:	68bb      	ldr	r3, [r7, #8]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d002      	beq.n	800a934 <HAL_UART_Receive+0x28>
 800a92e:	88fb      	ldrh	r3, [r7, #6]
 800a930:	2b00      	cmp	r3, #0
 800a932:	d101      	bne.n	800a938 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800a934:	2301      	movs	r3, #1
 800a936:	e0bc      	b.n	800aab2 <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	689b      	ldr	r3, [r3, #8]
 800a93e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a942:	2b40      	cmp	r3, #64	; 0x40
 800a944:	d107      	bne.n	800a956 <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	681b      	ldr	r3, [r3, #0]
 800a94a:	689a      	ldr	r2, [r3, #8]
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a954:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	2200      	movs	r2, #0
 800a95a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2222      	movs	r2, #34	; 0x22
 800a962:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2200      	movs	r2, #0
 800a96a:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a96c:	f7f8 fa92 	bl	8002e94 <HAL_GetTick>
 800a970:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	88fa      	ldrh	r2, [r7, #6]
 800a976:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	88fa      	ldrh	r2, [r7, #6]
 800a97e:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	689b      	ldr	r3, [r3, #8]
 800a986:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a98a:	d10e      	bne.n	800a9aa <HAL_UART_Receive+0x9e>
 800a98c:	68fb      	ldr	r3, [r7, #12]
 800a98e:	691b      	ldr	r3, [r3, #16]
 800a990:	2b00      	cmp	r3, #0
 800a992:	d105      	bne.n	800a9a0 <HAL_UART_Receive+0x94>
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a99a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a99e:	e02d      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	22ff      	movs	r2, #255	; 0xff
 800a9a4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9a8:	e028      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	689b      	ldr	r3, [r3, #8]
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10d      	bne.n	800a9ce <HAL_UART_Receive+0xc2>
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	691b      	ldr	r3, [r3, #16]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d104      	bne.n	800a9c4 <HAL_UART_Receive+0xb8>
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	22ff      	movs	r2, #255	; 0xff
 800a9be:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9c2:	e01b      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	227f      	movs	r2, #127	; 0x7f
 800a9c8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9cc:	e016      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	689b      	ldr	r3, [r3, #8]
 800a9d2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a9d6:	d10d      	bne.n	800a9f4 <HAL_UART_Receive+0xe8>
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	691b      	ldr	r3, [r3, #16]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d104      	bne.n	800a9ea <HAL_UART_Receive+0xde>
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	227f      	movs	r2, #127	; 0x7f
 800a9e4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9e8:	e008      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9ea:	68fb      	ldr	r3, [r7, #12]
 800a9ec:	223f      	movs	r2, #63	; 0x3f
 800a9ee:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800a9f2:	e003      	b.n	800a9fc <HAL_UART_Receive+0xf0>
 800a9f4:	68fb      	ldr	r3, [r7, #12]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800aa02:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	689b      	ldr	r3, [r3, #8]
 800aa08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa0c:	d108      	bne.n	800aa20 <HAL_UART_Receive+0x114>
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	691b      	ldr	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d104      	bne.n	800aa20 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800aa16:	2300      	movs	r3, #0
 800aa18:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800aa1a:	68bb      	ldr	r3, [r7, #8]
 800aa1c:	61bb      	str	r3, [r7, #24]
 800aa1e:	e003      	b.n	800aa28 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800aa24:	2300      	movs	r3, #0
 800aa26:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800aa28:	e036      	b.n	800aa98 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800aa2a:	683b      	ldr	r3, [r7, #0]
 800aa2c:	9300      	str	r3, [sp, #0]
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	2200      	movs	r2, #0
 800aa32:	2120      	movs	r1, #32
 800aa34:	68f8      	ldr	r0, [r7, #12]
 800aa36:	f000 fb2f 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800aa3a:	4603      	mov	r3, r0
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d005      	beq.n	800aa4c <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	2220      	movs	r2, #32
 800aa44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800aa48:	2303      	movs	r3, #3
 800aa4a:	e032      	b.n	800aab2 <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800aa4c:	69fb      	ldr	r3, [r7, #28]
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d10c      	bne.n	800aa6c <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800aa52:	68fb      	ldr	r3, [r7, #12]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa58:	b29a      	uxth	r2, r3
 800aa5a:	8a7b      	ldrh	r3, [r7, #18]
 800aa5c:	4013      	ands	r3, r2
 800aa5e:	b29a      	uxth	r2, r3
 800aa60:	69bb      	ldr	r3, [r7, #24]
 800aa62:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800aa64:	69bb      	ldr	r3, [r7, #24]
 800aa66:	3302      	adds	r3, #2
 800aa68:	61bb      	str	r3, [r7, #24]
 800aa6a:	e00c      	b.n	800aa86 <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	b2da      	uxtb	r2, r3
 800aa74:	8a7b      	ldrh	r3, [r7, #18]
 800aa76:	b2db      	uxtb	r3, r3
 800aa78:	4013      	ands	r3, r2
 800aa7a:	b2da      	uxtb	r2, r3
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800aa80:	69fb      	ldr	r3, [r7, #28]
 800aa82:	3301      	adds	r3, #1
 800aa84:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa8c:	b29b      	uxth	r3, r3
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	b29a      	uxth	r2, r3
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800aa9e:	b29b      	uxth	r3, r3
 800aaa0:	2b00      	cmp	r3, #0
 800aaa2:	d1c2      	bne.n	800aa2a <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	2220      	movs	r2, #32
 800aaa8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800aaac:	2300      	movs	r3, #0
 800aaae:	e000      	b.n	800aab2 <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800aab0:	2302      	movs	r3, #2
  }
}
 800aab2:	4618      	mov	r0, r3
 800aab4:	3720      	adds	r7, #32
 800aab6:	46bd      	mov	sp, r7
 800aab8:	bd80      	pop	{r7, pc}
	...

0800aabc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800aabc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800aac0:	b094      	sub	sp, #80	; 0x50
 800aac2:	af00      	add	r7, sp, #0
 800aac4:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800aac6:	2300      	movs	r3, #0
 800aac8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800aacc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aace:	681a      	ldr	r2, [r3, #0]
 800aad0:	4b7e      	ldr	r3, [pc, #504]	; (800accc <UART_SetConfig+0x210>)
 800aad2:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800aad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aad6:	689a      	ldr	r2, [r3, #8]
 800aad8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aada:	691b      	ldr	r3, [r3, #16]
 800aadc:	431a      	orrs	r2, r3
 800aade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae0:	695b      	ldr	r3, [r3, #20]
 800aae2:	431a      	orrs	r2, r3
 800aae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	4313      	orrs	r3, r2
 800aaea:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800aaec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	4977      	ldr	r1, [pc, #476]	; (800acd0 <UART_SetConfig+0x214>)
 800aaf4:	4019      	ands	r1, r3
 800aaf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aaf8:	681a      	ldr	r2, [r3, #0]
 800aafa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800aafc:	430b      	orrs	r3, r1
 800aafe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ab00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ab0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab0c:	68d9      	ldr	r1, [r3, #12]
 800ab0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab10:	681a      	ldr	r2, [r3, #0]
 800ab12:	ea40 0301 	orr.w	r3, r0, r1
 800ab16:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ab18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab1a:	699b      	ldr	r3, [r3, #24]
 800ab1c:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800ab1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab20:	681a      	ldr	r2, [r3, #0]
 800ab22:	4b6a      	ldr	r3, [pc, #424]	; (800accc <UART_SetConfig+0x210>)
 800ab24:	429a      	cmp	r2, r3
 800ab26:	d009      	beq.n	800ab3c <UART_SetConfig+0x80>
 800ab28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab2a:	681a      	ldr	r2, [r3, #0]
 800ab2c:	4b69      	ldr	r3, [pc, #420]	; (800acd4 <UART_SetConfig+0x218>)
 800ab2e:	429a      	cmp	r2, r3
 800ab30:	d004      	beq.n	800ab3c <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800ab32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab34:	6a1a      	ldr	r2, [r3, #32]
 800ab36:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab38:	4313      	orrs	r3, r2
 800ab3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ab3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	689b      	ldr	r3, [r3, #8]
 800ab42:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800ab46:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800ab4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab4c:	681a      	ldr	r2, [r3, #0]
 800ab4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ab50:	430b      	orrs	r3, r1
 800ab52:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800ab54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab56:	681b      	ldr	r3, [r3, #0]
 800ab58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab5a:	f023 000f 	bic.w	r0, r3, #15
 800ab5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab60:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800ab62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	ea40 0301 	orr.w	r3, r0, r1
 800ab6a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ab6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab6e:	681a      	ldr	r2, [r3, #0]
 800ab70:	4b59      	ldr	r3, [pc, #356]	; (800acd8 <UART_SetConfig+0x21c>)
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d102      	bne.n	800ab7c <UART_SetConfig+0xc0>
 800ab76:	2301      	movs	r3, #1
 800ab78:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab7a:	e029      	b.n	800abd0 <UART_SetConfig+0x114>
 800ab7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab7e:	681a      	ldr	r2, [r3, #0]
 800ab80:	4b56      	ldr	r3, [pc, #344]	; (800acdc <UART_SetConfig+0x220>)
 800ab82:	429a      	cmp	r2, r3
 800ab84:	d102      	bne.n	800ab8c <UART_SetConfig+0xd0>
 800ab86:	2302      	movs	r3, #2
 800ab88:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab8a:	e021      	b.n	800abd0 <UART_SetConfig+0x114>
 800ab8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	4b53      	ldr	r3, [pc, #332]	; (800ace0 <UART_SetConfig+0x224>)
 800ab92:	429a      	cmp	r2, r3
 800ab94:	d102      	bne.n	800ab9c <UART_SetConfig+0xe0>
 800ab96:	2304      	movs	r3, #4
 800ab98:	64bb      	str	r3, [r7, #72]	; 0x48
 800ab9a:	e019      	b.n	800abd0 <UART_SetConfig+0x114>
 800ab9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ab9e:	681a      	ldr	r2, [r3, #0]
 800aba0:	4b50      	ldr	r3, [pc, #320]	; (800ace4 <UART_SetConfig+0x228>)
 800aba2:	429a      	cmp	r2, r3
 800aba4:	d102      	bne.n	800abac <UART_SetConfig+0xf0>
 800aba6:	2308      	movs	r3, #8
 800aba8:	64bb      	str	r3, [r7, #72]	; 0x48
 800abaa:	e011      	b.n	800abd0 <UART_SetConfig+0x114>
 800abac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abae:	681a      	ldr	r2, [r3, #0]
 800abb0:	4b4d      	ldr	r3, [pc, #308]	; (800ace8 <UART_SetConfig+0x22c>)
 800abb2:	429a      	cmp	r2, r3
 800abb4:	d102      	bne.n	800abbc <UART_SetConfig+0x100>
 800abb6:	2310      	movs	r3, #16
 800abb8:	64bb      	str	r3, [r7, #72]	; 0x48
 800abba:	e009      	b.n	800abd0 <UART_SetConfig+0x114>
 800abbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abbe:	681a      	ldr	r2, [r3, #0]
 800abc0:	4b42      	ldr	r3, [pc, #264]	; (800accc <UART_SetConfig+0x210>)
 800abc2:	429a      	cmp	r2, r3
 800abc4:	d102      	bne.n	800abcc <UART_SetConfig+0x110>
 800abc6:	2320      	movs	r3, #32
 800abc8:	64bb      	str	r3, [r7, #72]	; 0x48
 800abca:	e001      	b.n	800abd0 <UART_SetConfig+0x114>
 800abcc:	2300      	movs	r3, #0
 800abce:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800abd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abd2:	681a      	ldr	r2, [r3, #0]
 800abd4:	4b3d      	ldr	r3, [pc, #244]	; (800accc <UART_SetConfig+0x210>)
 800abd6:	429a      	cmp	r2, r3
 800abd8:	d005      	beq.n	800abe6 <UART_SetConfig+0x12a>
 800abda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abdc:	681a      	ldr	r2, [r3, #0]
 800abde:	4b3d      	ldr	r3, [pc, #244]	; (800acd4 <UART_SetConfig+0x218>)
 800abe0:	429a      	cmp	r2, r3
 800abe2:	f040 8085 	bne.w	800acf0 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800abe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800abe8:	2200      	movs	r2, #0
 800abea:	623b      	str	r3, [r7, #32]
 800abec:	627a      	str	r2, [r7, #36]	; 0x24
 800abee:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800abf2:	f7fd f9ed 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800abf6:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800abf8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	f000 80e8 	beq.w	800add0 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800ac00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac04:	4a39      	ldr	r2, [pc, #228]	; (800acec <UART_SetConfig+0x230>)
 800ac06:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac0e:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac12:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	4613      	mov	r3, r2
 800ac1a:	005b      	lsls	r3, r3, #1
 800ac1c:	4413      	add	r3, r2
 800ac1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac20:	429a      	cmp	r2, r3
 800ac22:	d305      	bcc.n	800ac30 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800ac24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800ac2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ac2c:	429a      	cmp	r2, r3
 800ac2e:	d903      	bls.n	800ac38 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800ac30:	2301      	movs	r3, #1
 800ac32:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ac36:	e048      	b.n	800acca <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ac38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac3a:	2200      	movs	r2, #0
 800ac3c:	61bb      	str	r3, [r7, #24]
 800ac3e:	61fa      	str	r2, [r7, #28]
 800ac40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ac44:	4a29      	ldr	r2, [pc, #164]	; (800acec <UART_SetConfig+0x230>)
 800ac46:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	2200      	movs	r2, #0
 800ac4e:	613b      	str	r3, [r7, #16]
 800ac50:	617a      	str	r2, [r7, #20]
 800ac52:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800ac56:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800ac5a:	f7f6 f8d9 	bl	8000e10 <__aeabi_uldivmod>
 800ac5e:	4602      	mov	r2, r0
 800ac60:	460b      	mov	r3, r1
 800ac62:	4610      	mov	r0, r2
 800ac64:	4619      	mov	r1, r3
 800ac66:	f04f 0200 	mov.w	r2, #0
 800ac6a:	f04f 0300 	mov.w	r3, #0
 800ac6e:	020b      	lsls	r3, r1, #8
 800ac70:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800ac74:	0202      	lsls	r2, r0, #8
 800ac76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ac78:	6849      	ldr	r1, [r1, #4]
 800ac7a:	0849      	lsrs	r1, r1, #1
 800ac7c:	2000      	movs	r0, #0
 800ac7e:	460c      	mov	r4, r1
 800ac80:	4605      	mov	r5, r0
 800ac82:	eb12 0804 	adds.w	r8, r2, r4
 800ac86:	eb43 0905 	adc.w	r9, r3, r5
 800ac8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac8c:	685b      	ldr	r3, [r3, #4]
 800ac8e:	2200      	movs	r2, #0
 800ac90:	60bb      	str	r3, [r7, #8]
 800ac92:	60fa      	str	r2, [r7, #12]
 800ac94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800ac98:	4640      	mov	r0, r8
 800ac9a:	4649      	mov	r1, r9
 800ac9c:	f7f6 f8b8 	bl	8000e10 <__aeabi_uldivmod>
 800aca0:	4602      	mov	r2, r0
 800aca2:	460b      	mov	r3, r1
 800aca4:	4613      	mov	r3, r2
 800aca6:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800aca8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acaa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800acae:	d308      	bcc.n	800acc2 <UART_SetConfig+0x206>
 800acb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800acb2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800acb6:	d204      	bcs.n	800acc2 <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800acb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800acbe:	60da      	str	r2, [r3, #12]
 800acc0:	e003      	b.n	800acca <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800acc2:	2301      	movs	r3, #1
 800acc4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800acc8:	e082      	b.n	800add0 <UART_SetConfig+0x314>
 800acca:	e081      	b.n	800add0 <UART_SetConfig+0x314>
 800accc:	46002400 	.word	0x46002400
 800acd0:	cfff69f3 	.word	0xcfff69f3
 800acd4:	56002400 	.word	0x56002400
 800acd8:	40013800 	.word	0x40013800
 800acdc:	40004400 	.word	0x40004400
 800ace0:	40004800 	.word	0x40004800
 800ace4:	40004c00 	.word	0x40004c00
 800ace8:	40005000 	.word	0x40005000
 800acec:	0800fb3c 	.word	0x0800fb3c
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800acf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acf2:	69db      	ldr	r3, [r3, #28]
 800acf4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800acf8:	d13c      	bne.n	800ad74 <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800acfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800acfc:	2200      	movs	r2, #0
 800acfe:	603b      	str	r3, [r7, #0]
 800ad00:	607a      	str	r2, [r7, #4]
 800ad02:	e9d7 0100 	ldrd	r0, r1, [r7]
 800ad06:	f7fd f963 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad0a:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800ad0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad0e:	2b00      	cmp	r3, #0
 800ad10:	d05e      	beq.n	800add0 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad16:	4a39      	ldr	r2, [pc, #228]	; (800adfc <UART_SetConfig+0x340>)
 800ad18:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad1c:	461a      	mov	r2, r3
 800ad1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad20:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad24:	005a      	lsls	r2, r3, #1
 800ad26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	085b      	lsrs	r3, r3, #1
 800ad2c:	441a      	add	r2, r3
 800ad2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad30:	685b      	ldr	r3, [r3, #4]
 800ad32:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad36:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ad38:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad3a:	2b0f      	cmp	r3, #15
 800ad3c:	d916      	bls.n	800ad6c <UART_SetConfig+0x2b0>
 800ad3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ad44:	d212      	bcs.n	800ad6c <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800ad46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad48:	b29b      	uxth	r3, r3
 800ad4a:	f023 030f 	bic.w	r3, r3, #15
 800ad4e:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800ad50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ad52:	085b      	lsrs	r3, r3, #1
 800ad54:	b29b      	uxth	r3, r3
 800ad56:	f003 0307 	and.w	r3, r3, #7
 800ad5a:	b29a      	uxth	r2, r3
 800ad5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800ad5e:	4313      	orrs	r3, r2
 800ad60:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800ad62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800ad68:	60da      	str	r2, [r3, #12]
 800ad6a:	e031      	b.n	800add0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800ad6c:	2301      	movs	r3, #1
 800ad6e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800ad72:	e02d      	b.n	800add0 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800ad74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ad76:	2200      	movs	r2, #0
 800ad78:	469a      	mov	sl, r3
 800ad7a:	4693      	mov	fp, r2
 800ad7c:	4650      	mov	r0, sl
 800ad7e:	4659      	mov	r1, fp
 800ad80:	f7fd f926 	bl	8007fd0 <HAL_RCCEx_GetPeriphCLKFreq>
 800ad84:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800ad86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d021      	beq.n	800add0 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ad8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad90:	4a1a      	ldr	r2, [pc, #104]	; (800adfc <UART_SetConfig+0x340>)
 800ad92:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ad96:	461a      	mov	r2, r3
 800ad98:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ad9a:	fbb3 f2f2 	udiv	r2, r3, r2
 800ad9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada0:	685b      	ldr	r3, [r3, #4]
 800ada2:	085b      	lsrs	r3, r3, #1
 800ada4:	441a      	add	r2, r3
 800ada6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	fbb2 f3f3 	udiv	r3, r2, r3
 800adae:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800adb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb2:	2b0f      	cmp	r3, #15
 800adb4:	d909      	bls.n	800adca <UART_SetConfig+0x30e>
 800adb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800adbc:	d205      	bcs.n	800adca <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800adbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800adc0:	b29a      	uxth	r2, r3
 800adc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	60da      	str	r2, [r3, #12]
 800adc8:	e002      	b.n	800add0 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800adca:	2301      	movs	r3, #1
 800adcc:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800add0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add2:	2201      	movs	r2, #1
 800add4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	2201      	movs	r2, #1
 800addc:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ade0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade2:	2200      	movs	r2, #0
 800ade4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	2200      	movs	r2, #0
 800adea:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800adec:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800adf0:	4618      	mov	r0, r3
 800adf2:	3750      	adds	r7, #80	; 0x50
 800adf4:	46bd      	mov	sp, r7
 800adf6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800adfa:	bf00      	nop
 800adfc:	0800fb3c 	.word	0x0800fb3c

0800ae00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae00:	b480      	push	{r7}
 800ae02:	b083      	sub	sp, #12
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae0c:	f003 0301 	and.w	r3, r3, #1
 800ae10:	2b00      	cmp	r3, #0
 800ae12:	d00a      	beq.n	800ae2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	685b      	ldr	r3, [r3, #4]
 800ae1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	430a      	orrs	r2, r1
 800ae28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae2e:	f003 0302 	and.w	r3, r3, #2
 800ae32:	2b00      	cmp	r3, #0
 800ae34:	d00a      	beq.n	800ae4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	681b      	ldr	r3, [r3, #0]
 800ae3a:	685b      	ldr	r3, [r3, #4]
 800ae3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	430a      	orrs	r2, r1
 800ae4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae50:	f003 0304 	and.w	r3, r3, #4
 800ae54:	2b00      	cmp	r3, #0
 800ae56:	d00a      	beq.n	800ae6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae72:	f003 0308 	and.w	r3, r3, #8
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d00a      	beq.n	800ae90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	685b      	ldr	r3, [r3, #4]
 800ae80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	430a      	orrs	r2, r1
 800ae8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ae94:	f003 0310 	and.w	r3, r3, #16
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d00a      	beq.n	800aeb2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	689b      	ldr	r3, [r3, #8]
 800aea2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	681b      	ldr	r3, [r3, #0]
 800aeae:	430a      	orrs	r2, r1
 800aeb0:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aeb6:	f003 0320 	and.w	r3, r3, #32
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d00a      	beq.n	800aed4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	430a      	orrs	r2, r1
 800aed2:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aedc:	2b00      	cmp	r3, #0
 800aede:	d01a      	beq.n	800af16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	685b      	ldr	r3, [r3, #4]
 800aee6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	430a      	orrs	r2, r1
 800aef4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aefa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aefe:	d10a      	bne.n	800af16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	685b      	ldr	r3, [r3, #4]
 800af06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	430a      	orrs	r2, r1
 800af14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00a      	beq.n	800af38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	685b      	ldr	r3, [r3, #4]
 800af28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800af30:	687b      	ldr	r3, [r7, #4]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	430a      	orrs	r2, r1
 800af36:	605a      	str	r2, [r3, #4]
  }
}
 800af38:	bf00      	nop
 800af3a:	370c      	adds	r7, #12
 800af3c:	46bd      	mov	sp, r7
 800af3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af42:	4770      	bx	lr

0800af44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b098      	sub	sp, #96	; 0x60
 800af48:	af02      	add	r7, sp, #8
 800af4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2200      	movs	r2, #0
 800af50:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800af54:	f7f7 ff9e 	bl	8002e94 <HAL_GetTick>
 800af58:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f003 0308 	and.w	r3, r3, #8
 800af64:	2b08      	cmp	r3, #8
 800af66:	d12f      	bne.n	800afc8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af6c:	9300      	str	r3, [sp, #0]
 800af6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800af70:	2200      	movs	r2, #0
 800af72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f88e 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800af7c:	4603      	mov	r3, r0
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d022      	beq.n	800afc8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800af88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800af8a:	e853 3f00 	ldrex	r3, [r3]
 800af8e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800af90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800af92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af96:	653b      	str	r3, [r7, #80]	; 0x50
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	461a      	mov	r2, r3
 800af9e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800afa0:	647b      	str	r3, [r7, #68]	; 0x44
 800afa2:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800afa4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800afa6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800afa8:	e841 2300 	strex	r3, r2, [r1]
 800afac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800afae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d1e6      	bne.n	800af82 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	2220      	movs	r2, #32
 800afb8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2200      	movs	r2, #0
 800afc0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800afc4:	2303      	movs	r3, #3
 800afc6:	e063      	b.n	800b090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f003 0304 	and.w	r3, r3, #4
 800afd2:	2b04      	cmp	r3, #4
 800afd4:	d149      	bne.n	800b06a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800afd6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800afda:	9300      	str	r3, [sp, #0]
 800afdc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800afde:	2200      	movs	r2, #0
 800afe0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800afe4:	6878      	ldr	r0, [r7, #4]
 800afe6:	f000 f857 	bl	800b098 <UART_WaitOnFlagUntilTimeout>
 800afea:	4603      	mov	r3, r0
 800afec:	2b00      	cmp	r3, #0
 800afee:	d03c      	beq.n	800b06a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800aff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aff8:	e853 3f00 	ldrex	r3, [r3]
 800affc:	623b      	str	r3, [r7, #32]
   return(result);
 800affe:	6a3b      	ldr	r3, [r7, #32]
 800b000:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b004:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	681b      	ldr	r3, [r3, #0]
 800b00a:	461a      	mov	r2, r3
 800b00c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b00e:	633b      	str	r3, [r7, #48]	; 0x30
 800b010:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b012:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800b014:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b016:	e841 2300 	strex	r3, r2, [r1]
 800b01a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800b01c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b01e:	2b00      	cmp	r3, #0
 800b020:	d1e6      	bne.n	800aff0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	3308      	adds	r3, #8
 800b028:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b02a:	693b      	ldr	r3, [r7, #16]
 800b02c:	e853 3f00 	ldrex	r3, [r3]
 800b030:	60fb      	str	r3, [r7, #12]
   return(result);
 800b032:	68fb      	ldr	r3, [r7, #12]
 800b034:	f023 0301 	bic.w	r3, r3, #1
 800b038:	64bb      	str	r3, [r7, #72]	; 0x48
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	3308      	adds	r3, #8
 800b040:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b042:	61fa      	str	r2, [r7, #28]
 800b044:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b046:	69b9      	ldr	r1, [r7, #24]
 800b048:	69fa      	ldr	r2, [r7, #28]
 800b04a:	e841 2300 	strex	r3, r2, [r1]
 800b04e:	617b      	str	r3, [r7, #20]
   return(result);
 800b050:	697b      	ldr	r3, [r7, #20]
 800b052:	2b00      	cmp	r3, #0
 800b054:	d1e5      	bne.n	800b022 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800b056:	687b      	ldr	r3, [r7, #4]
 800b058:	2220      	movs	r2, #32
 800b05a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800b05e:	687b      	ldr	r3, [r7, #4]
 800b060:	2200      	movs	r2, #0
 800b062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b066:	2303      	movs	r3, #3
 800b068:	e012      	b.n	800b090 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2220      	movs	r2, #32
 800b06e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	2220      	movs	r2, #32
 800b076:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2200      	movs	r2, #0
 800b07e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	2200      	movs	r2, #0
 800b08a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b08e:	2300      	movs	r3, #0
}
 800b090:	4618      	mov	r0, r3
 800b092:	3758      	adds	r7, #88	; 0x58
 800b094:	46bd      	mov	sp, r7
 800b096:	bd80      	pop	{r7, pc}

0800b098 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b098:	b580      	push	{r7, lr}
 800b09a:	b084      	sub	sp, #16
 800b09c:	af00      	add	r7, sp, #0
 800b09e:	60f8      	str	r0, [r7, #12]
 800b0a0:	60b9      	str	r1, [r7, #8]
 800b0a2:	603b      	str	r3, [r7, #0]
 800b0a4:	4613      	mov	r3, r2
 800b0a6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0a8:	e049      	b.n	800b13e <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b0aa:	69bb      	ldr	r3, [r7, #24]
 800b0ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b0b0:	d045      	beq.n	800b13e <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b0b2:	f7f7 feef 	bl	8002e94 <HAL_GetTick>
 800b0b6:	4602      	mov	r2, r0
 800b0b8:	683b      	ldr	r3, [r7, #0]
 800b0ba:	1ad3      	subs	r3, r2, r3
 800b0bc:	69ba      	ldr	r2, [r7, #24]
 800b0be:	429a      	cmp	r2, r3
 800b0c0:	d302      	bcc.n	800b0c8 <UART_WaitOnFlagUntilTimeout+0x30>
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	d101      	bne.n	800b0cc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800b0c8:	2303      	movs	r3, #3
 800b0ca:	e048      	b.n	800b15e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 0304 	and.w	r3, r3, #4
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	d031      	beq.n	800b13e <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800b0da:	68fb      	ldr	r3, [r7, #12]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	69db      	ldr	r3, [r3, #28]
 800b0e0:	f003 0308 	and.w	r3, r3, #8
 800b0e4:	2b08      	cmp	r3, #8
 800b0e6:	d110      	bne.n	800b10a <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	2208      	movs	r2, #8
 800b0ee:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b0f0:	68f8      	ldr	r0, [r7, #12]
 800b0f2:	f000 f838 	bl	800b166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	2208      	movs	r2, #8
 800b0fa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	2200      	movs	r2, #0
 800b102:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800b106:	2301      	movs	r3, #1
 800b108:	e029      	b.n	800b15e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	681b      	ldr	r3, [r3, #0]
 800b10e:	69db      	ldr	r3, [r3, #28]
 800b110:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b114:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b118:	d111      	bne.n	800b13e <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800b124:	68f8      	ldr	r0, [r7, #12]
 800b126:	f000 f81e 	bl	800b166 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	2220      	movs	r2, #32
 800b12e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b132:	68fb      	ldr	r3, [r7, #12]
 800b134:	2200      	movs	r2, #0
 800b136:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e00f      	b.n	800b15e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	69da      	ldr	r2, [r3, #28]
 800b144:	68bb      	ldr	r3, [r7, #8]
 800b146:	4013      	ands	r3, r2
 800b148:	68ba      	ldr	r2, [r7, #8]
 800b14a:	429a      	cmp	r2, r3
 800b14c:	bf0c      	ite	eq
 800b14e:	2301      	moveq	r3, #1
 800b150:	2300      	movne	r3, #0
 800b152:	b2db      	uxtb	r3, r3
 800b154:	461a      	mov	r2, r3
 800b156:	79fb      	ldrb	r3, [r7, #7]
 800b158:	429a      	cmp	r2, r3
 800b15a:	d0a6      	beq.n	800b0aa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b15c:	2300      	movs	r3, #0
}
 800b15e:	4618      	mov	r0, r3
 800b160:	3710      	adds	r7, #16
 800b162:	46bd      	mov	sp, r7
 800b164:	bd80      	pop	{r7, pc}

0800b166 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b166:	b480      	push	{r7}
 800b168:	b095      	sub	sp, #84	; 0x54
 800b16a:	af00      	add	r7, sp, #0
 800b16c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	681b      	ldr	r3, [r3, #0]
 800b172:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b176:	e853 3f00 	ldrex	r3, [r3]
 800b17a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800b17c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b17e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800b182:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	461a      	mov	r2, r3
 800b18a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b18c:	643b      	str	r3, [r7, #64]	; 0x40
 800b18e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b190:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800b192:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800b194:	e841 2300 	strex	r3, r2, [r1]
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d1e6      	bne.n	800b16e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	3308      	adds	r3, #8
 800b1a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1a8:	6a3b      	ldr	r3, [r7, #32]
 800b1aa:	e853 3f00 	ldrex	r3, [r3]
 800b1ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800b1b0:	69fb      	ldr	r3, [r7, #28]
 800b1b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800b1b6:	f023 0301 	bic.w	r3, r3, #1
 800b1ba:	64bb      	str	r3, [r7, #72]	; 0x48
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	3308      	adds	r3, #8
 800b1c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b1c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b1c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800b1ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b1cc:	e841 2300 	strex	r3, r2, [r1]
 800b1d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800b1d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d1e3      	bne.n	800b1a0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d118      	bne.n	800b212 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	e853 3f00 	ldrex	r3, [r3]
 800b1ec:	60bb      	str	r3, [r7, #8]
   return(result);
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	f023 0310 	bic.w	r3, r3, #16
 800b1f4:	647b      	str	r3, [r7, #68]	; 0x44
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	461a      	mov	r2, r3
 800b1fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b1fe:	61bb      	str	r3, [r7, #24]
 800b200:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b202:	6979      	ldr	r1, [r7, #20]
 800b204:	69ba      	ldr	r2, [r7, #24]
 800b206:	e841 2300 	strex	r3, r2, [r1]
 800b20a:	613b      	str	r3, [r7, #16]
   return(result);
 800b20c:	693b      	ldr	r3, [r7, #16]
 800b20e:	2b00      	cmp	r3, #0
 800b210:	d1e6      	bne.n	800b1e0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b212:	687b      	ldr	r3, [r7, #4]
 800b214:	2220      	movs	r2, #32
 800b216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2200      	movs	r2, #0
 800b21e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	2200      	movs	r2, #0
 800b224:	675a      	str	r2, [r3, #116]	; 0x74
}
 800b226:	bf00      	nop
 800b228:	3754      	adds	r7, #84	; 0x54
 800b22a:	46bd      	mov	sp, r7
 800b22c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b230:	4770      	bx	lr

0800b232 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800b232:	b480      	push	{r7}
 800b234:	b085      	sub	sp, #20
 800b236:	af00      	add	r7, sp, #0
 800b238:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b240:	2b01      	cmp	r3, #1
 800b242:	d101      	bne.n	800b248 <HAL_UARTEx_DisableFifoMode+0x16>
 800b244:	2302      	movs	r3, #2
 800b246:	e027      	b.n	800b298 <HAL_UARTEx_DisableFifoMode+0x66>
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	2201      	movs	r2, #1
 800b24c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2224      	movs	r2, #36	; 0x24
 800b254:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	687b      	ldr	r3, [r7, #4]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0201 	bic.w	r2, r2, #1
 800b26e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800b276:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	2200      	movs	r2, #0
 800b27c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	68fa      	ldr	r2, [r7, #12]
 800b284:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b286:	687b      	ldr	r3, [r7, #4]
 800b288:	2220      	movs	r2, #32
 800b28a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	2200      	movs	r2, #0
 800b292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b296:	2300      	movs	r3, #0
}
 800b298:	4618      	mov	r0, r3
 800b29a:	3714      	adds	r7, #20
 800b29c:	46bd      	mov	sp, r7
 800b29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a2:	4770      	bx	lr

0800b2a4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b2a4:	b580      	push	{r7, lr}
 800b2a6:	b084      	sub	sp, #16
 800b2a8:	af00      	add	r7, sp, #0
 800b2aa:	6078      	str	r0, [r7, #4]
 800b2ac:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b2b4:	2b01      	cmp	r3, #1
 800b2b6:	d101      	bne.n	800b2bc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800b2b8:	2302      	movs	r3, #2
 800b2ba:	e02d      	b.n	800b318 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	2201      	movs	r2, #1
 800b2c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	2224      	movs	r2, #36	; 0x24
 800b2c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	681a      	ldr	r2, [r3, #0]
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f022 0201 	bic.w	r2, r2, #1
 800b2e2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	689b      	ldr	r3, [r3, #8]
 800b2ea:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	683a      	ldr	r2, [r7, #0]
 800b2f4:	430a      	orrs	r2, r1
 800b2f6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b2f8:	6878      	ldr	r0, [r7, #4]
 800b2fa:	f000 f84f 	bl	800b39c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	68fa      	ldr	r2, [r7, #12]
 800b304:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	2220      	movs	r2, #32
 800b30a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	2200      	movs	r2, #0
 800b312:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b316:	2300      	movs	r3, #0
}
 800b318:	4618      	mov	r0, r3
 800b31a:	3710      	adds	r7, #16
 800b31c:	46bd      	mov	sp, r7
 800b31e:	bd80      	pop	{r7, pc}

0800b320 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800b320:	b580      	push	{r7, lr}
 800b322:	b084      	sub	sp, #16
 800b324:	af00      	add	r7, sp, #0
 800b326:	6078      	str	r0, [r7, #4]
 800b328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800b330:	2b01      	cmp	r3, #1
 800b332:	d101      	bne.n	800b338 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800b334:	2302      	movs	r3, #2
 800b336:	e02d      	b.n	800b394 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	2201      	movs	r2, #1
 800b33c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2224      	movs	r2, #36	; 0x24
 800b344:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	681b      	ldr	r3, [r3, #0]
 800b34c:	681b      	ldr	r3, [r3, #0]
 800b34e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	681a      	ldr	r2, [r3, #0]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0201 	bic.w	r2, r2, #1
 800b35e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	689b      	ldr	r3, [r3, #8]
 800b366:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	681b      	ldr	r3, [r3, #0]
 800b36e:	683a      	ldr	r2, [r7, #0]
 800b370:	430a      	orrs	r2, r1
 800b372:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800b374:	6878      	ldr	r0, [r7, #4]
 800b376:	f000 f811 	bl	800b39c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	68fa      	ldr	r2, [r7, #12]
 800b380:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	2220      	movs	r2, #32
 800b386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	2200      	movs	r2, #0
 800b38e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}

0800b39c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800b39c:	b480      	push	{r7}
 800b39e:	b085      	sub	sp, #20
 800b3a0:	af00      	add	r7, sp, #0
 800b3a2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d108      	bne.n	800b3be <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	2201      	movs	r2, #1
 800b3b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	2201      	movs	r2, #1
 800b3b8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800b3bc:	e031      	b.n	800b422 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800b3be:	2308      	movs	r3, #8
 800b3c0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800b3c2:	2308      	movs	r3, #8
 800b3c4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	689b      	ldr	r3, [r3, #8]
 800b3cc:	0e5b      	lsrs	r3, r3, #25
 800b3ce:	b2db      	uxtb	r3, r3
 800b3d0:	f003 0307 	and.w	r3, r3, #7
 800b3d4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	689b      	ldr	r3, [r3, #8]
 800b3dc:	0f5b      	lsrs	r3, r3, #29
 800b3de:	b2db      	uxtb	r3, r3
 800b3e0:	f003 0307 	and.w	r3, r3, #7
 800b3e4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3e6:	7bbb      	ldrb	r3, [r7, #14]
 800b3e8:	7b3a      	ldrb	r2, [r7, #12]
 800b3ea:	4911      	ldr	r1, [pc, #68]	; (800b430 <UARTEx_SetNbDataToProcess+0x94>)
 800b3ec:	5c8a      	ldrb	r2, [r1, r2]
 800b3ee:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800b3f2:	7b3a      	ldrb	r2, [r7, #12]
 800b3f4:	490f      	ldr	r1, [pc, #60]	; (800b434 <UARTEx_SetNbDataToProcess+0x98>)
 800b3f6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800b3f8:	fb93 f3f2 	sdiv	r3, r3, r2
 800b3fc:	b29a      	uxth	r2, r3
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b404:	7bfb      	ldrb	r3, [r7, #15]
 800b406:	7b7a      	ldrb	r2, [r7, #13]
 800b408:	4909      	ldr	r1, [pc, #36]	; (800b430 <UARTEx_SetNbDataToProcess+0x94>)
 800b40a:	5c8a      	ldrb	r2, [r1, r2]
 800b40c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800b410:	7b7a      	ldrb	r2, [r7, #13]
 800b412:	4908      	ldr	r1, [pc, #32]	; (800b434 <UARTEx_SetNbDataToProcess+0x98>)
 800b414:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800b416:	fb93 f3f2 	sdiv	r3, r3, r2
 800b41a:	b29a      	uxth	r2, r3
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800b422:	bf00      	nop
 800b424:	3714      	adds	r7, #20
 800b426:	46bd      	mov	sp, r7
 800b428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b42c:	4770      	bx	lr
 800b42e:	bf00      	nop
 800b430:	0800fb54 	.word	0x0800fb54
 800b434:	0800fb5c 	.word	0x0800fb5c

0800b438 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b096      	sub	sp, #88	; 0x58
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	60f8      	str	r0, [r7, #12]
 800b440:	60b9      	str	r1, [r7, #8]
 800b442:	607a      	str	r2, [r7, #4]
 800b444:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	3303      	adds	r3, #3
 800b44a:	f023 0303 	bic.w	r3, r3, #3
 800b44e:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b450:	f3ef 8310 	mrs	r3, PRIMASK
 800b454:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800b456:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800b458:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800b45a:	b672      	cpsid	i
#endif
    return(int_posture);
 800b45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800b45e:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800b460:	4b55      	ldr	r3, [pc, #340]	; (800b5b8 <_tx_byte_allocate+0x180>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800b466:	2300      	movs	r3, #0
 800b468:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b46e:	621a      	str	r2, [r3, #32]
 800b470:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b472:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b476:	f383 8810 	msr	PRIMASK, r3
}
 800b47a:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800b47c:	6879      	ldr	r1, [r7, #4]
 800b47e:	68f8      	ldr	r0, [r7, #12]
 800b480:	f000 f9b2 	bl	800b7e8 <_tx_byte_pool_search>
 800b484:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b486:	f3ef 8310 	mrs	r3, PRIMASK
 800b48a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800b48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800b48e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800b490:	b672      	cpsid	i
    return(int_posture);
 800b492:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800b494:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800b496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b498:	2b00      	cmp	r3, #0
 800b49a:	d002      	beq.n	800b4a2 <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800b49c:	2301      	movs	r3, #1
 800b49e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800b4a0:	e006      	b.n	800b4b0 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	6a1b      	ldr	r3, [r3, #32]
 800b4a6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b4a8:	429a      	cmp	r2, r3
 800b4aa:	d101      	bne.n	800b4b0 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800b4ac:	2301      	movs	r3, #1
 800b4ae:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800b4b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d0d9      	beq.n	800b46a <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800b4ba:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800b4bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b4be:	2b00      	cmp	r3, #0
 800b4c0:	d008      	beq.n	800b4d4 <_tx_byte_allocate+0x9c>
 800b4c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4c4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	f383 8810 	msr	PRIMASK, r3
}
 800b4cc:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	653b      	str	r3, [r7, #80]	; 0x50
 800b4d2:	e06c      	b.n	800b5ae <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800b4d4:	683b      	ldr	r3, [r7, #0]
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d061      	beq.n	800b59e <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800b4da:	4b38      	ldr	r3, [pc, #224]	; (800b5bc <_tx_byte_allocate+0x184>)
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	2b00      	cmp	r3, #0
 800b4e0:	d007      	beq.n	800b4f2 <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800b4e2:	2310      	movs	r3, #16
 800b4e4:	653b      	str	r3, [r7, #80]	; 0x50
 800b4e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b4e8:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b4ea:	69fb      	ldr	r3, [r7, #28]
 800b4ec:	f383 8810 	msr	PRIMASK, r3
}
 800b4f0:	e05d      	b.n	800b5ae <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800b4f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4f4:	4a32      	ldr	r2, [pc, #200]	; (800b5c0 <_tx_byte_allocate+0x188>)
 800b4f6:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800b4f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800b4fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b500:	68ba      	ldr	r2, [r7, #8]
 800b502:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800b504:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b506:	687a      	ldr	r2, [r7, #4]
 800b508:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800b50a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b50c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b510:	1c5a      	adds	r2, r3, #1
 800b512:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b514:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b518:	68fb      	ldr	r3, [r7, #12]
 800b51a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b51c:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800b51e:	68fb      	ldr	r3, [r7, #12]
 800b520:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b522:	1c5a      	adds	r2, r3, #1
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800b528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d109      	bne.n	800b542 <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b532:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800b534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b536:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b538:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800b53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b53c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b53e:	675a      	str	r2, [r3, #116]	; 0x74
 800b540:	e011      	b.n	800b566 <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b546:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800b548:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b54a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b54c:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800b54e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b550:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b552:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800b554:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b556:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b558:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800b55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b55c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b55e:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800b560:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800b562:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800b564:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800b566:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b568:	2209      	movs	r2, #9
 800b56a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800b56c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b56e:	2201      	movs	r2, #1
 800b570:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800b572:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b574:	683a      	ldr	r2, [r7, #0]
 800b576:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800b578:	4b10      	ldr	r3, [pc, #64]	; (800b5bc <_tx_byte_allocate+0x184>)
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	3301      	adds	r3, #1
 800b57e:	4a0f      	ldr	r2, [pc, #60]	; (800b5bc <_tx_byte_allocate+0x184>)
 800b580:	6013      	str	r3, [r2, #0]
 800b582:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b584:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b586:	69bb      	ldr	r3, [r7, #24]
 800b588:	f383 8810 	msr	PRIMASK, r3
}
 800b58c:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800b58e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800b590:	f000 fdde 	bl	800c150 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800b594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b596:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b59a:	653b      	str	r3, [r7, #80]	; 0x50
 800b59c:	e007      	b.n	800b5ae <_tx_byte_allocate+0x176>
 800b59e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b5a0:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f383 8810 	msr	PRIMASK, r3
}
 800b5a8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800b5aa:	2310      	movs	r3, #16
 800b5ac:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800b5ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b5b0:	4618      	mov	r0, r3
 800b5b2:	3758      	adds	r7, #88	; 0x58
 800b5b4:	46bd      	mov	sp, r7
 800b5b6:	bd80      	pop	{r7, pc}
 800b5b8:	20005e04 	.word	0x20005e04
 800b5bc:	20005e9c 	.word	0x20005e9c
 800b5c0:	0800b5c5 	.word	0x0800b5c5

0800b5c4 <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800b5c4:	b580      	push	{r7, lr}
 800b5c6:	b08e      	sub	sp, #56	; 0x38
 800b5c8:	af00      	add	r7, sp, #0
 800b5ca:	6078      	str	r0, [r7, #4]
 800b5cc:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b5ce:	f3ef 8310 	mrs	r3, PRIMASK
 800b5d2:	623b      	str	r3, [r7, #32]
    return(posture);
 800b5d4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800b5d6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b5d8:	b672      	cpsid	i
    return(int_posture);
 800b5da:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800b5dc:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b5e2:	4a33      	ldr	r2, [pc, #204]	; (800b6b0 <_tx_byte_pool_cleanup+0xec>)
 800b5e4:	4293      	cmp	r3, r2
 800b5e6:	d158      	bne.n	800b69a <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b5ee:	683a      	ldr	r2, [r7, #0]
 800b5f0:	429a      	cmp	r2, r3
 800b5f2:	d152      	bne.n	800b69a <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b5f8:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800b5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d04c      	beq.n	800b69a <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800b600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a2b      	ldr	r2, [pc, #172]	; (800b6b4 <_tx_byte_pool_cleanup+0xf0>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d147      	bne.n	800b69a <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800b60a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b60c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d043      	beq.n	800b69a <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800b618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b61a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b61c:	1e5a      	subs	r2, r3, #1
 800b61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b620:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800b622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b624:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b626:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800b628:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d103      	bne.n	800b636 <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800b62e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b630:	2200      	movs	r2, #0
 800b632:	625a      	str	r2, [r3, #36]	; 0x24
 800b634:	e013      	b.n	800b65e <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b63a:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b640:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800b642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b644:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b646:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b64c:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800b64e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b652:	687a      	ldr	r2, [r7, #4]
 800b654:	429a      	cmp	r2, r3
 800b656:	d102      	bne.n	800b65e <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800b658:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b65a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b65c:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b662:	2b09      	cmp	r3, #9
 800b664:	d119      	bne.n	800b69a <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800b666:	687b      	ldr	r3, [r7, #4]
 800b668:	2210      	movs	r2, #16
 800b66a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800b66e:	4b12      	ldr	r3, [pc, #72]	; (800b6b8 <_tx_byte_pool_cleanup+0xf4>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	3301      	adds	r3, #1
 800b674:	4a10      	ldr	r2, [pc, #64]	; (800b6b8 <_tx_byte_pool_cleanup+0xf4>)
 800b676:	6013      	str	r3, [r2, #0]
 800b678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b67a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b67c:	693b      	ldr	r3, [r7, #16]
 800b67e:	f383 8810 	msr	PRIMASK, r3
}
 800b682:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fc63 	bl	800bf50 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b68a:	f3ef 8310 	mrs	r3, PRIMASK
 800b68e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b690:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b692:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b694:	b672      	cpsid	i
    return(int_posture);
 800b696:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800b698:	637b      	str	r3, [r7, #52]	; 0x34
 800b69a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b69c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b69e:	68fb      	ldr	r3, [r7, #12]
 800b6a0:	f383 8810 	msr	PRIMASK, r3
}
 800b6a4:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800b6a6:	bf00      	nop
 800b6a8:	3738      	adds	r7, #56	; 0x38
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bd80      	pop	{r7, pc}
 800b6ae:	bf00      	nop
 800b6b0:	0800b5c5 	.word	0x0800b5c5
 800b6b4:	42595445 	.word	0x42595445
 800b6b8:	20005e9c 	.word	0x20005e9c

0800b6bc <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b08e      	sub	sp, #56	; 0x38
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	60f8      	str	r0, [r7, #12]
 800b6c4:	60b9      	str	r1, [r7, #8]
 800b6c6:	607a      	str	r2, [r7, #4]
 800b6c8:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800b6ca:	2234      	movs	r2, #52	; 0x34
 800b6cc:	2100      	movs	r1, #0
 800b6ce:	68f8      	ldr	r0, [r7, #12]
 800b6d0:	f001 fe4b 	bl	800d36a <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800b6d4:	683b      	ldr	r3, [r7, #0]
 800b6d6:	f023 0303 	bic.w	r3, r3, #3
 800b6da:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800b6dc:	68fb      	ldr	r3, [r7, #12]
 800b6de:	68ba      	ldr	r2, [r7, #8]
 800b6e0:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6e2:	68fb      	ldr	r3, [r7, #12]
 800b6e4:	687a      	ldr	r2, [r7, #4]
 800b6e6:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800b6e8:	68fb      	ldr	r3, [r7, #12]
 800b6ea:	683a      	ldr	r2, [r7, #0]
 800b6ec:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6ee:	68fb      	ldr	r3, [r7, #12]
 800b6f0:	687a      	ldr	r2, [r7, #4]
 800b6f2:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b6f4:	68fb      	ldr	r3, [r7, #12]
 800b6f6:	687a      	ldr	r2, [r7, #4]
 800b6f8:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800b6fa:	683b      	ldr	r3, [r7, #0]
 800b6fc:	f1a3 0208 	sub.w	r2, r3, #8
 800b700:	68fb      	ldr	r3, [r7, #12]
 800b702:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800b704:	68fb      	ldr	r3, [r7, #12]
 800b706:	2202      	movs	r2, #2
 800b708:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800b70e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b710:	683b      	ldr	r3, [r7, #0]
 800b712:	4413      	add	r3, r2
 800b714:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800b716:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b718:	3b04      	subs	r3, #4
 800b71a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b720:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b722:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800b724:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b726:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b728:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800b72a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b72c:	3b04      	subs	r3, #4
 800b72e:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800b730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b732:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b734:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b736:	687a      	ldr	r2, [r7, #4]
 800b738:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b740:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800b742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b744:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b746:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800b748:	687b      	ldr	r3, [r7, #4]
 800b74a:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800b74c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b74e:	3304      	adds	r3, #4
 800b750:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800b752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b754:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800b756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b758:	4a1f      	ldr	r2, [pc, #124]	; (800b7d8 <_tx_byte_pool_create+0x11c>)
 800b75a:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	2200      	movs	r2, #0
 800b760:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b762:	f3ef 8310 	mrs	r3, PRIMASK
 800b766:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b768:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b76a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b76c:	b672      	cpsid	i
    return(int_posture);
 800b76e:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800b770:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	4a19      	ldr	r2, [pc, #100]	; (800b7dc <_tx_byte_pool_create+0x120>)
 800b776:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800b778:	4b19      	ldr	r3, [pc, #100]	; (800b7e0 <_tx_byte_pool_create+0x124>)
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d109      	bne.n	800b794 <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800b780:	4a18      	ldr	r2, [pc, #96]	; (800b7e4 <_tx_byte_pool_create+0x128>)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800b786:	68fb      	ldr	r3, [r7, #12]
 800b788:	68fa      	ldr	r2, [r7, #12]
 800b78a:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	68fa      	ldr	r2, [r7, #12]
 800b790:	631a      	str	r2, [r3, #48]	; 0x30
 800b792:	e011      	b.n	800b7b8 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800b794:	4b13      	ldr	r3, [pc, #76]	; (800b7e4 <_tx_byte_pool_create+0x128>)
 800b796:	681b      	ldr	r3, [r3, #0]
 800b798:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800b79a:	6a3b      	ldr	r3, [r7, #32]
 800b79c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b79e:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800b7a0:	6a3b      	ldr	r3, [r7, #32]
 800b7a2:	68fa      	ldr	r2, [r7, #12]
 800b7a4:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800b7a6:	69fb      	ldr	r3, [r7, #28]
 800b7a8:	68fa      	ldr	r2, [r7, #12]
 800b7aa:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	69fa      	ldr	r2, [r7, #28]
 800b7b0:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
 800b7b4:	6a3a      	ldr	r2, [r7, #32]
 800b7b6:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800b7b8:	4b09      	ldr	r3, [pc, #36]	; (800b7e0 <_tx_byte_pool_create+0x124>)
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	3301      	adds	r3, #1
 800b7be:	4a08      	ldr	r2, [pc, #32]	; (800b7e0 <_tx_byte_pool_create+0x124>)
 800b7c0:	6013      	str	r3, [r2, #0]
 800b7c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b7c4:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	f383 8810 	msr	PRIMASK, r3
}
 800b7cc:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800b7ce:	2300      	movs	r3, #0
}
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	3738      	adds	r7, #56	; 0x38
 800b7d4:	46bd      	mov	sp, r7
 800b7d6:	bd80      	pop	{r7, pc}
 800b7d8:	ffffeeee 	.word	0xffffeeee
 800b7dc:	42595445 	.word	0x42595445
 800b7e0:	20005df8 	.word	0x20005df8
 800b7e4:	20005df4 	.word	0x20005df4

0800b7e8 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800b7e8:	b480      	push	{r7}
 800b7ea:	b097      	sub	sp, #92	; 0x5c
 800b7ec:	af00      	add	r7, sp, #0
 800b7ee:	6078      	str	r0, [r7, #4]
 800b7f0:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800b7f2:	2300      	movs	r3, #0
 800b7f4:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b7f6:	f3ef 8310 	mrs	r3, PRIMASK
 800b7fa:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800b7fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800b7fe:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b800:	b672      	cpsid	i
    return(int_posture);
 800b802:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800b804:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	689a      	ldr	r2, [r3, #8]
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68db      	ldr	r3, [r3, #12]
 800b80e:	3b02      	subs	r3, #2
 800b810:	00db      	lsls	r3, r3, #3
 800b812:	4413      	add	r3, r2
 800b814:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800b816:	683a      	ldr	r2, [r7, #0]
 800b818:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800b81a:	429a      	cmp	r2, r3
 800b81c:	d308      	bcc.n	800b830 <_tx_byte_pool_search+0x48>
 800b81e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b820:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b822:	69fb      	ldr	r3, [r7, #28]
 800b824:	f383 8810 	msr	PRIMASK, r3
}
 800b828:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	653b      	str	r3, [r7, #80]	; 0x50
 800b82e:	e0dd      	b.n	800b9ec <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800b830:	4b72      	ldr	r3, [pc, #456]	; (800b9fc <_tx_byte_pool_search+0x214>)
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b83a:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	695b      	ldr	r3, [r3, #20]
 800b840:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	68db      	ldr	r3, [r3, #12]
 800b846:	3301      	adds	r3, #1
 800b848:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800b84a:	2300      	movs	r3, #0
 800b84c:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b84e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b850:	3304      	adds	r3, #4
 800b852:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b854:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b856:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	4a68      	ldr	r2, [pc, #416]	; (800ba00 <_tx_byte_pool_search+0x218>)
 800b85e:	4293      	cmp	r3, r2
 800b860:	d143      	bne.n	800b8ea <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800b862:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800b864:	2b00      	cmp	r3, #0
 800b866:	d104      	bne.n	800b872 <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b86c:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800b86e:	2301      	movs	r3, #1
 800b870:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b872:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b874:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800b876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800b87c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b87e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b880:	1ad3      	subs	r3, r2, r3
 800b882:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b884:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b886:	3b08      	subs	r3, #8
 800b888:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800b88a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b88c:	683b      	ldr	r3, [r7, #0]
 800b88e:	429a      	cmp	r2, r3
 800b890:	d257      	bcs.n	800b942 <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800b892:	2300      	movs	r3, #0
 800b894:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b896:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b898:	3304      	adds	r3, #4
 800b89a:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b89e:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	4a56      	ldr	r2, [pc, #344]	; (800ba00 <_tx_byte_pool_search+0x218>)
 800b8a6:	4293      	cmp	r3, r2
 800b8a8:	d113      	bne.n	800b8d2 <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b8aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8ac:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800b8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8b4:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	68db      	ldr	r3, [r3, #12]
 800b8ba:	1e5a      	subs	r2, r3, #1
 800b8bc:	687b      	ldr	r3, [r7, #4]
 800b8be:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	695b      	ldr	r3, [r3, #20]
 800b8c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b8c6:	429a      	cmp	r2, r3
 800b8c8:	d114      	bne.n	800b8f4 <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b8ce:	615a      	str	r2, [r3, #20]
 800b8d0:	e010      	b.n	800b8f4 <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b8d4:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800b8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8d8:	681b      	ldr	r3, [r3, #0]
 800b8da:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800b8dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8de:	2b00      	cmp	r3, #0
 800b8e0:	d008      	beq.n	800b8f4 <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800b8e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8e4:	3b01      	subs	r3, #1
 800b8e6:	64bb      	str	r3, [r7, #72]	; 0x48
 800b8e8:	e004      	b.n	800b8f4 <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b8ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b8ec:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800b8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800b8f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8f6:	2b00      	cmp	r3, #0
 800b8f8:	d002      	beq.n	800b900 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800b8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b8fc:	3b01      	subs	r3, #1
 800b8fe:	64bb      	str	r3, [r7, #72]	; 0x48
 800b900:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b902:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b904:	693b      	ldr	r3, [r7, #16]
 800b906:	f383 8810 	msr	PRIMASK, r3
}
 800b90a:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800b90c:	f3ef 8310 	mrs	r3, PRIMASK
 800b910:	61bb      	str	r3, [r7, #24]
    return(posture);
 800b912:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800b914:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800b916:	b672      	cpsid	i
    return(int_posture);
 800b918:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800b91a:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a1b      	ldr	r3, [r3, #32]
 800b920:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b922:	429a      	cmp	r2, r3
 800b924:	d009      	beq.n	800b93a <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	695b      	ldr	r3, [r3, #20]
 800b92a:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	3301      	adds	r3, #1
 800b932:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800b938:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800b93a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d186      	bne.n	800b84e <_tx_byte_pool_search+0x66>
 800b940:	e000      	b.n	800b944 <_tx_byte_pool_search+0x15c>
                    break;
 800b942:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800b944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b946:	2b00      	cmp	r3, #0
 800b948:	d048      	beq.n	800b9dc <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800b94a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800b94c:	683b      	ldr	r3, [r7, #0]
 800b94e:	1ad3      	subs	r3, r2, r3
 800b950:	2b13      	cmp	r3, #19
 800b952:	d91e      	bls.n	800b992 <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b954:	683b      	ldr	r3, [r7, #0]
 800b956:	3308      	adds	r3, #8
 800b958:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b95a:	4413      	add	r3, r2
 800b95c:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800b95e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b960:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b962:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b964:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800b966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b968:	681a      	ldr	r2, [r3, #0]
 800b96a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b96c:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	3304      	adds	r3, #4
 800b972:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800b974:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b976:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800b978:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b97a:	4a21      	ldr	r2, [pc, #132]	; (800ba00 <_tx_byte_pool_search+0x218>)
 800b97c:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	68db      	ldr	r3, [r3, #12]
 800b982:	1c5a      	adds	r2, r3, #1
 800b984:	687b      	ldr	r3, [r7, #4]
 800b986:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800b988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b98a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b98c:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800b98e:	683b      	ldr	r3, [r7, #0]
 800b990:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800b992:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b994:	3304      	adds	r3, #4
 800b996:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800b998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b99a:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800b99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b99e:	687a      	ldr	r2, [r7, #4]
 800b9a0:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	689a      	ldr	r2, [r3, #8]
 800b9a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b9a8:	1ad3      	subs	r3, r2, r3
 800b9aa:	f1a3 0208 	sub.w	r2, r3, #8
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	695b      	ldr	r3, [r3, #20]
 800b9b6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d105      	bne.n	800b9c8 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800b9bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9be:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800b9c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b9c2:	681a      	ldr	r2, [r3, #0]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	615a      	str	r2, [r3, #20]
 800b9c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9ca:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9cc:	68fb      	ldr	r3, [r7, #12]
 800b9ce:	f383 8810 	msr	PRIMASK, r3
}
 800b9d2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800b9d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b9d6:	3308      	adds	r3, #8
 800b9d8:	653b      	str	r3, [r7, #80]	; 0x50
 800b9da:	e007      	b.n	800b9ec <_tx_byte_pool_search+0x204>
 800b9dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b9de:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	f383 8810 	msr	PRIMASK, r3
}
 800b9e6:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800b9e8:	2300      	movs	r3, #0
 800b9ea:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800b9ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	375c      	adds	r7, #92	; 0x5c
 800b9f2:	46bd      	mov	sp, r7
 800b9f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f8:	4770      	bx	lr
 800b9fa:	bf00      	nop
 800b9fc:	20005e04 	.word	0x20005e04
 800ba00:	ffffeeee 	.word	0xffffeeee

0800ba04 <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ba04:	b580      	push	{r7, lr}
 800ba06:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ba08:	f000 f960 	bl	800bccc <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ba0c:	f000 fe14 	bl	800c638 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ba10:	4b12      	ldr	r3, [pc, #72]	; (800ba5c <_tx_initialize_high_level+0x58>)
 800ba12:	2200      	movs	r2, #0
 800ba14:	601a      	str	r2, [r3, #0]
 800ba16:	4b12      	ldr	r3, [pc, #72]	; (800ba60 <_tx_initialize_high_level+0x5c>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ba1c:	4b11      	ldr	r3, [pc, #68]	; (800ba64 <_tx_initialize_high_level+0x60>)
 800ba1e:	2200      	movs	r2, #0
 800ba20:	601a      	str	r2, [r3, #0]
 800ba22:	4b11      	ldr	r3, [pc, #68]	; (800ba68 <_tx_initialize_high_level+0x64>)
 800ba24:	2200      	movs	r2, #0
 800ba26:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ba28:	4b10      	ldr	r3, [pc, #64]	; (800ba6c <_tx_initialize_high_level+0x68>)
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	601a      	str	r2, [r3, #0]
 800ba2e:	4b10      	ldr	r3, [pc, #64]	; (800ba70 <_tx_initialize_high_level+0x6c>)
 800ba30:	2200      	movs	r2, #0
 800ba32:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ba34:	4b0f      	ldr	r3, [pc, #60]	; (800ba74 <_tx_initialize_high_level+0x70>)
 800ba36:	2200      	movs	r2, #0
 800ba38:	601a      	str	r2, [r3, #0]
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <_tx_initialize_high_level+0x74>)
 800ba3c:	2200      	movs	r2, #0
 800ba3e:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ba40:	4b0e      	ldr	r3, [pc, #56]	; (800ba7c <_tx_initialize_high_level+0x78>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	601a      	str	r2, [r3, #0]
 800ba46:	4b0e      	ldr	r3, [pc, #56]	; (800ba80 <_tx_initialize_high_level+0x7c>)
 800ba48:	2200      	movs	r2, #0
 800ba4a:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ba4c:	4b0d      	ldr	r3, [pc, #52]	; (800ba84 <_tx_initialize_high_level+0x80>)
 800ba4e:	2200      	movs	r2, #0
 800ba50:	601a      	str	r2, [r3, #0]
 800ba52:	4b0d      	ldr	r3, [pc, #52]	; (800ba88 <_tx_initialize_high_level+0x84>)
 800ba54:	2200      	movs	r2, #0
 800ba56:	601a      	str	r2, [r3, #0]
#endif
}
 800ba58:	bf00      	nop
 800ba5a:	bd80      	pop	{r7, pc}
 800ba5c:	20005dcc 	.word	0x20005dcc
 800ba60:	20005dd0 	.word	0x20005dd0
 800ba64:	20005dd4 	.word	0x20005dd4
 800ba68:	20005dd8 	.word	0x20005dd8
 800ba6c:	20005ddc 	.word	0x20005ddc
 800ba70:	20005de0 	.word	0x20005de0
 800ba74:	20005dec 	.word	0x20005dec
 800ba78:	20005df0 	.word	0x20005df0
 800ba7c:	20005df4 	.word	0x20005df4
 800ba80:	20005df8 	.word	0x20005df8
 800ba84:	20005de4 	.word	0x20005de4
 800ba88:	20005de8 	.word	0x20005de8

0800ba8c <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800ba8c:	b580      	push	{r7, lr}
 800ba8e:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800ba90:	4b10      	ldr	r3, [pc, #64]	; (800bad4 <_tx_initialize_kernel_enter+0x48>)
 800ba92:	681b      	ldr	r3, [r3, #0]
 800ba94:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800ba98:	d00c      	beq.n	800bab4 <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800ba9a:	4b0e      	ldr	r3, [pc, #56]	; (800bad4 <_tx_initialize_kernel_enter+0x48>)
 800ba9c:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800baa0:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800baa2:	f7f4 fbe9 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800baa6:	f7ff ffad 	bl	800ba04 <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800baaa:	4b0b      	ldr	r3, [pc, #44]	; (800bad8 <_tx_initialize_kernel_enter+0x4c>)
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	3301      	adds	r3, #1
 800bab0:	4a09      	ldr	r2, [pc, #36]	; (800bad8 <_tx_initialize_kernel_enter+0x4c>)
 800bab2:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800bab4:	4b07      	ldr	r3, [pc, #28]	; (800bad4 <_tx_initialize_kernel_enter+0x48>)
 800bab6:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800baba:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800babc:	4b07      	ldr	r3, [pc, #28]	; (800badc <_tx_initialize_kernel_enter+0x50>)
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	4618      	mov	r0, r3
 800bac2:	f7f5 fb35 	bl	8001130 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800bac6:	4b03      	ldr	r3, [pc, #12]	; (800bad4 <_tx_initialize_kernel_enter+0x48>)
 800bac8:	2200      	movs	r2, #0
 800baca:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800bacc:	f7f4 fc10 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bad0:	bf00      	nop
 800bad2:	bd80      	pop	{r7, pc}
 800bad4:	2000000c 	.word	0x2000000c
 800bad8:	20005e9c 	.word	0x20005e9c
 800badc:	20005dfc 	.word	0x20005dfc

0800bae0 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800bae0:	b580      	push	{r7, lr}
 800bae2:	b092      	sub	sp, #72	; 0x48
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	60f8      	str	r0, [r7, #12]
 800bae8:	60b9      	str	r1, [r7, #8]
 800baea:	607a      	str	r2, [r7, #4]
 800baec:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800baee:	2300      	movs	r3, #0
 800baf0:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800baf2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800baf4:	21ef      	movs	r1, #239	; 0xef
 800baf6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800baf8:	f001 fc37 	bl	800d36a <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800bafc:	22b0      	movs	r2, #176	; 0xb0
 800bafe:	2100      	movs	r1, #0
 800bb00:	68f8      	ldr	r0, [r7, #12]
 800bb02:	f001 fc32 	bl	800d36a <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800bb06:	68fb      	ldr	r3, [r7, #12]
 800bb08:	68ba      	ldr	r2, [r7, #8]
 800bb0a:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	687a      	ldr	r2, [r7, #4]
 800bb10:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800bb12:	68fb      	ldr	r3, [r7, #12]
 800bb14:	683a      	ldr	r2, [r7, #0]
 800bb16:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bb1c:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800bb22:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb28:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800bb2a:	68fb      	ldr	r3, [r7, #12]
 800bb2c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb2e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800bb32:	68fb      	ldr	r3, [r7, #12]
 800bb34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb36:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800bb3c:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bb3e:	68fb      	ldr	r3, [r7, #12]
 800bb40:	2220      	movs	r2, #32
 800bb42:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800bb46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800bb4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bb4c:	3b01      	subs	r3, #1
 800bb4e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb50:	4413      	add	r3, r2
 800bb52:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800bb54:	68fb      	ldr	r3, [r7, #12]
 800bb56:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bb58:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800bb5a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bb5e:	429a      	cmp	r2, r3
 800bb60:	d007      	beq.n	800bb72 <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800bb70:	e006      	b.n	800bb80 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb76:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bb7c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	2203      	movs	r2, #3
 800bb84:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	4a48      	ldr	r2, [pc, #288]	; (800bcac <_tx_thread_create+0x1cc>)
 800bb8a:	655a      	str	r2, [r3, #84]	; 0x54
 800bb8c:	68fa      	ldr	r2, [r7, #12]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800bb92:	4947      	ldr	r1, [pc, #284]	; (800bcb0 <_tx_thread_create+0x1d0>)
 800bb94:	68f8      	ldr	r0, [r7, #12]
 800bb96:	f7f4 fc19 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bb9a:	f3ef 8310 	mrs	r3, PRIMASK
 800bb9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800bba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800bba2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800bba4:	b672      	cpsid	i
    return(int_posture);
 800bba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800bba8:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800bbaa:	68fb      	ldr	r3, [r7, #12]
 800bbac:	4a41      	ldr	r2, [pc, #260]	; (800bcb4 <_tx_thread_create+0x1d4>)
 800bbae:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800bbb0:	4b41      	ldr	r3, [pc, #260]	; (800bcb8 <_tx_thread_create+0x1d8>)
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d10b      	bne.n	800bbd0 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800bbb8:	4a40      	ldr	r2, [pc, #256]	; (800bcbc <_tx_thread_create+0x1dc>)
 800bbba:	68fb      	ldr	r3, [r7, #12]
 800bbbc:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800bbbe:	68fb      	ldr	r3, [r7, #12]
 800bbc0:	68fa      	ldr	r2, [r7, #12]
 800bbc2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800bbc6:	68fb      	ldr	r3, [r7, #12]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800bbce:	e016      	b.n	800bbfe <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800bbd0:	4b3a      	ldr	r3, [pc, #232]	; (800bcbc <_tx_thread_create+0x1dc>)
 800bbd2:	681b      	ldr	r3, [r3, #0]
 800bbd4:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800bbd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbd8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bbdc:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800bbde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bbe0:	68fa      	ldr	r2, [r7, #12]
 800bbe2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800bbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bbe8:	68fa      	ldr	r2, [r7, #12]
 800bbea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800bbf6:	68fb      	ldr	r3, [r7, #12]
 800bbf8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bbfa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800bbfe:	4b2e      	ldr	r3, [pc, #184]	; (800bcb8 <_tx_thread_create+0x1d8>)
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	3301      	adds	r3, #1
 800bc04:	4a2c      	ldr	r2, [pc, #176]	; (800bcb8 <_tx_thread_create+0x1d8>)
 800bc06:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bc08:	4b2d      	ldr	r3, [pc, #180]	; (800bcc0 <_tx_thread_create+0x1e0>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	3301      	adds	r3, #1
 800bc0e:	4a2c      	ldr	r2, [pc, #176]	; (800bcc0 <_tx_thread_create+0x1e0>)
 800bc10:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800bc12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bc14:	2b01      	cmp	r3, #1
 800bc16:	d129      	bne.n	800bc6c <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bc18:	f3ef 8305 	mrs	r3, IPSR
 800bc1c:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800bc1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800bc20:	4b28      	ldr	r3, [pc, #160]	; (800bcc4 <_tx_thread_create+0x1e4>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	4313      	orrs	r3, r2
 800bc26:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800bc2a:	d30d      	bcc.n	800bc48 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800bc2c:	4b26      	ldr	r3, [pc, #152]	; (800bcc8 <_tx_thread_create+0x1e8>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800bc32:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d009      	beq.n	800bc4c <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800bc38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc3c:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800bc3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bc42:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc44:	63da      	str	r2, [r3, #60]	; 0x3c
 800bc46:	e001      	b.n	800bc4c <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800bc48:	2300      	movs	r3, #0
 800bc4a:	647b      	str	r3, [r7, #68]	; 0x44
 800bc4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc4e:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc50:	6a3b      	ldr	r3, [r7, #32]
 800bc52:	f383 8810 	msr	PRIMASK, r3
}
 800bc56:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800bc58:	68f8      	ldr	r0, [r7, #12]
 800bc5a:	f000 f979 	bl	800bf50 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800bc5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d01e      	beq.n	800bca2 <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800bc64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bc66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800bc68:	63da      	str	r2, [r3, #60]	; 0x3c
 800bc6a:	e01a      	b.n	800bca2 <_tx_thread_create+0x1c2>
 800bc6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc6e:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc70:	693b      	ldr	r3, [r7, #16]
 800bc72:	f383 8810 	msr	PRIMASK, r3
}
 800bc76:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bc78:	f3ef 8310 	mrs	r3, PRIMASK
 800bc7c:	61bb      	str	r3, [r7, #24]
    return(posture);
 800bc7e:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800bc80:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bc82:	b672      	cpsid	i
    return(int_posture);
 800bc84:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800bc86:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800bc88:	4b0d      	ldr	r3, [pc, #52]	; (800bcc0 <_tx_thread_create+0x1e0>)
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	3b01      	subs	r3, #1
 800bc8e:	4a0c      	ldr	r2, [pc, #48]	; (800bcc0 <_tx_thread_create+0x1e0>)
 800bc90:	6013      	str	r3, [r2, #0]
 800bc92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bc94:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bc96:	69fb      	ldr	r3, [r7, #28]
 800bc98:	f383 8810 	msr	PRIMASK, r3
}
 800bc9c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800bc9e:	f000 f91d 	bl	800bedc <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800bca2:	2300      	movs	r3, #0
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	3748      	adds	r7, #72	; 0x48
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd80      	pop	{r7, pc}
 800bcac:	0800c425 	.word	0x0800c425
 800bcb0:	0800bd45 	.word	0x0800bd45
 800bcb4:	54485244 	.word	0x54485244
 800bcb8:	20005e10 	.word	0x20005e10
 800bcbc:	20005e0c 	.word	0x20005e0c
 800bcc0:	20005e9c 	.word	0x20005e9c
 800bcc4:	2000000c 	.word	0x2000000c
 800bcc8:	20005e08 	.word	0x20005e08

0800bccc <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800bcd0:	4b12      	ldr	r3, [pc, #72]	; (800bd1c <_tx_thread_initialize+0x50>)
 800bcd2:	2200      	movs	r2, #0
 800bcd4:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800bcd6:	4b12      	ldr	r3, [pc, #72]	; (800bd20 <_tx_thread_initialize+0x54>)
 800bcd8:	2200      	movs	r2, #0
 800bcda:	601a      	str	r2, [r3, #0]
 800bcdc:	4b11      	ldr	r3, [pc, #68]	; (800bd24 <_tx_thread_initialize+0x58>)
 800bcde:	2200      	movs	r2, #0
 800bce0:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800bce2:	4b11      	ldr	r3, [pc, #68]	; (800bd28 <_tx_thread_initialize+0x5c>)
 800bce4:	2220      	movs	r2, #32
 800bce6:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800bce8:	2280      	movs	r2, #128	; 0x80
 800bcea:	2100      	movs	r1, #0
 800bcec:	480f      	ldr	r0, [pc, #60]	; (800bd2c <_tx_thread_initialize+0x60>)
 800bcee:	f001 fb3c 	bl	800d36a <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <_tx_thread_initialize+0x64>)
 800bcf4:	2200      	movs	r2, #0
 800bcf6:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800bcf8:	4b0e      	ldr	r3, [pc, #56]	; (800bd34 <_tx_thread_initialize+0x68>)
 800bcfa:	2200      	movs	r2, #0
 800bcfc:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800bcfe:	4b0e      	ldr	r3, [pc, #56]	; (800bd38 <_tx_thread_initialize+0x6c>)
 800bd00:	2200      	movs	r2, #0
 800bd02:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800bd04:	4b0d      	ldr	r3, [pc, #52]	; (800bd3c <_tx_thread_initialize+0x70>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800bd0a:	4b0d      	ldr	r3, [pc, #52]	; (800bd40 <_tx_thread_initialize+0x74>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800bd12:	4a0b      	ldr	r2, [pc, #44]	; (800bd40 <_tx_thread_initialize+0x74>)
 800bd14:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800bd16:	bf00      	nop
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	20005e04 	.word	0x20005e04
 800bd20:	20005e08 	.word	0x20005e08
 800bd24:	20005e14 	.word	0x20005e14
 800bd28:	20005e18 	.word	0x20005e18
 800bd2c:	20005e1c 	.word	0x20005e1c
 800bd30:	20005e0c 	.word	0x20005e0c
 800bd34:	20005e10 	.word	0x20005e10
 800bd38:	20005e9c 	.word	0x20005e9c
 800bd3c:	20005ea0 	.word	0x20005ea0
 800bd40:	20005ea4 	.word	0x20005ea4

0800bd44 <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800bd44:	b580      	push	{r7, lr}
 800bd46:	b088      	sub	sp, #32
 800bd48:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bd4a:	4b21      	ldr	r3, [pc, #132]	; (800bdd0 <_tx_thread_shell_entry+0x8c>)
 800bd4c:	681b      	ldr	r3, [r3, #0]
 800bd4e:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800bd50:	69fb      	ldr	r3, [r7, #28]
 800bd52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bd54:	69fa      	ldr	r2, [r7, #28]
 800bd56:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800bd58:	4610      	mov	r0, r2
 800bd5a:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800bd5c:	4b1d      	ldr	r3, [pc, #116]	; (800bdd4 <_tx_thread_shell_entry+0x90>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d003      	beq.n	800bd6c <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800bd64:	4b1b      	ldr	r3, [pc, #108]	; (800bdd4 <_tx_thread_shell_entry+0x90>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	69f8      	ldr	r0, [r7, #28]
 800bd6a:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bd6c:	f3ef 8310 	mrs	r3, PRIMASK
 800bd70:	607b      	str	r3, [r7, #4]
    return(posture);
 800bd72:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800bd74:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800bd76:	b672      	cpsid	i
    return(int_posture);
 800bd78:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800bd7a:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800bd7c:	69fb      	ldr	r3, [r7, #28]
 800bd7e:	2201      	movs	r2, #1
 800bd80:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800bd82:	69fb      	ldr	r3, [r7, #28]
 800bd84:	2201      	movs	r2, #1
 800bd86:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bd88:	69fb      	ldr	r3, [r7, #28]
 800bd8a:	2200      	movs	r2, #0
 800bd8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800bd8e:	4b12      	ldr	r3, [pc, #72]	; (800bdd8 <_tx_thread_shell_entry+0x94>)
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	3301      	adds	r3, #1
 800bd94:	4a10      	ldr	r2, [pc, #64]	; (800bdd8 <_tx_thread_shell_entry+0x94>)
 800bd96:	6013      	str	r3, [r2, #0]
 800bd98:	69bb      	ldr	r3, [r7, #24]
 800bd9a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bd9c:	68bb      	ldr	r3, [r7, #8]
 800bd9e:	f383 8810 	msr	PRIMASK, r3
}
 800bda2:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800bda4:	f3ef 8314 	mrs	r3, CONTROL
 800bda8:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800bdaa:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800bdac:	617b      	str	r3, [r7, #20]
 800bdae:	697b      	ldr	r3, [r7, #20]
 800bdb0:	f023 0304 	bic.w	r3, r3, #4
 800bdb4:	617b      	str	r3, [r7, #20]
 800bdb6:	697b      	ldr	r3, [r7, #20]
 800bdb8:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	f383 8814 	msr	CONTROL, r3
}
 800bdc0:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800bdc2:	69f8      	ldr	r0, [r7, #28]
 800bdc4:	f000 f9c4 	bl	800c150 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800bdc8:	bf00      	nop
 800bdca:	3720      	adds	r7, #32
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}
 800bdd0:	20005e04 	.word	0x20005e04
 800bdd4:	20005ea0 	.word	0x20005ea0
 800bdd8:	20005e9c 	.word	0x20005e9c

0800bddc <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800bddc:	b580      	push	{r7, lr}
 800bdde:	b08e      	sub	sp, #56	; 0x38
 800bde0:	af00      	add	r7, sp, #0
 800bde2:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bde4:	f3ef 8310 	mrs	r3, PRIMASK
 800bde8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800bdea:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800bdec:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800bdee:	b672      	cpsid	i
    return(int_posture);
 800bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bdf2:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800bdf4:	4b35      	ldr	r3, [pc, #212]	; (800becc <_tx_thread_sleep+0xf0>)
 800bdf6:	681b      	ldr	r3, [r3, #0]
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d108      	bne.n	800be12 <_tx_thread_sleep+0x36>
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be04:	6a3b      	ldr	r3, [r7, #32]
 800be06:	f383 8810 	msr	PRIMASK, r3
}
 800be0a:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800be0c:	2313      	movs	r3, #19
 800be0e:	637b      	str	r3, [r7, #52]	; 0x34
 800be10:	e056      	b.n	800bec0 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800be12:	f3ef 8305 	mrs	r3, IPSR
 800be16:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800be18:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800be1a:	4b2d      	ldr	r3, [pc, #180]	; (800bed0 <_tx_thread_sleep+0xf4>)
 800be1c:	681b      	ldr	r3, [r3, #0]
 800be1e:	4313      	orrs	r3, r2
 800be20:	2b00      	cmp	r3, #0
 800be22:	d008      	beq.n	800be36 <_tx_thread_sleep+0x5a>
 800be24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be26:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be28:	69bb      	ldr	r3, [r7, #24]
 800be2a:	f383 8810 	msr	PRIMASK, r3
}
 800be2e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800be30:	2313      	movs	r3, #19
 800be32:	637b      	str	r3, [r7, #52]	; 0x34
 800be34:	e044      	b.n	800bec0 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	4a26      	ldr	r2, [pc, #152]	; (800bed4 <_tx_thread_sleep+0xf8>)
 800be3a:	4293      	cmp	r3, r2
 800be3c:	d108      	bne.n	800be50 <_tx_thread_sleep+0x74>
 800be3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be40:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be42:	697b      	ldr	r3, [r7, #20]
 800be44:	f383 8810 	msr	PRIMASK, r3
}
 800be48:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800be4a:	2313      	movs	r3, #19
 800be4c:	637b      	str	r3, [r7, #52]	; 0x34
 800be4e:	e037      	b.n	800bec0 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d108      	bne.n	800be68 <_tx_thread_sleep+0x8c>
 800be56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be58:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be5a:	693b      	ldr	r3, [r7, #16]
 800be5c:	f383 8810 	msr	PRIMASK, r3
}
 800be60:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800be62:	2300      	movs	r3, #0
 800be64:	637b      	str	r3, [r7, #52]	; 0x34
 800be66:	e02b      	b.n	800bec0 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800be68:	4b1b      	ldr	r3, [pc, #108]	; (800bed8 <_tx_thread_sleep+0xfc>)
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d008      	beq.n	800be82 <_tx_thread_sleep+0xa6>
 800be70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be72:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	f383 8810 	msr	PRIMASK, r3
}
 800be7a:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800be7c:	2313      	movs	r3, #19
 800be7e:	637b      	str	r3, [r7, #52]	; 0x34
 800be80:	e01e      	b.n	800bec0 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800be82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be84:	2204      	movs	r2, #4
 800be86:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800be88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be8a:	2201      	movs	r2, #1
 800be8c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800be8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be90:	2200      	movs	r2, #0
 800be92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800be96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800be9c:	4b0e      	ldr	r3, [pc, #56]	; (800bed8 <_tx_thread_sleep+0xfc>)
 800be9e:	681b      	ldr	r3, [r3, #0]
 800bea0:	3301      	adds	r3, #1
 800bea2:	4a0d      	ldr	r2, [pc, #52]	; (800bed8 <_tx_thread_sleep+0xfc>)
 800bea4:	6013      	str	r3, [r2, #0]
 800bea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bea8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	f383 8810 	msr	PRIMASK, r3
}
 800beb0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800beb2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800beb4:	f000 f94c 	bl	800c150 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800beb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bebe:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800bec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800bec2:	4618      	mov	r0, r3
 800bec4:	3738      	adds	r7, #56	; 0x38
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20005e04 	.word	0x20005e04
 800bed0:	2000000c 	.word	0x2000000c
 800bed4:	20005f4c 	.word	0x20005f4c
 800bed8:	20005e9c 	.word	0x20005e9c

0800bedc <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800bedc:	b480      	push	{r7}
 800bede:	b089      	sub	sp, #36	; 0x24
 800bee0:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800bee2:	4b17      	ldr	r3, [pc, #92]	; (800bf40 <_tx_thread_system_preempt_check+0x64>)
 800bee4:	681b      	ldr	r3, [r3, #0]
 800bee6:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800bee8:	69fb      	ldr	r3, [r7, #28]
 800beea:	2b00      	cmp	r3, #0
 800beec:	d121      	bne.n	800bf32 <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800beee:	4b15      	ldr	r3, [pc, #84]	; (800bf44 <_tx_thread_system_preempt_check+0x68>)
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800bef4:	4b14      	ldr	r3, [pc, #80]	; (800bf48 <_tx_thread_system_preempt_check+0x6c>)
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	697b      	ldr	r3, [r7, #20]
 800befe:	429a      	cmp	r2, r3
 800bf00:	d017      	beq.n	800bf32 <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800bf02:	4b12      	ldr	r3, [pc, #72]	; (800bf4c <_tx_thread_system_preempt_check+0x70>)
 800bf04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf08:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800bf0a:	f3ef 8305 	mrs	r3, IPSR
 800bf0e:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800bf10:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	d10c      	bne.n	800bf30 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf16:	f3ef 8310 	mrs	r3, PRIMASK
 800bf1a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800bf1c:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800bf1e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800bf20:	b662      	cpsie	i
}
 800bf22:	bf00      	nop
 800bf24:	68bb      	ldr	r3, [r7, #8]
 800bf26:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f383 8810 	msr	PRIMASK, r3
}
 800bf2e:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800bf30:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800bf32:	bf00      	nop
 800bf34:	3724      	adds	r7, #36	; 0x24
 800bf36:	46bd      	mov	sp, r7
 800bf38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3c:	4770      	bx	lr
 800bf3e:	bf00      	nop
 800bf40:	20005e9c 	.word	0x20005e9c
 800bf44:	20005e04 	.word	0x20005e04
 800bf48:	20005e08 	.word	0x20005e08
 800bf4c:	e000ed04 	.word	0xe000ed04

0800bf50 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800bf50:	b580      	push	{r7, lr}
 800bf52:	b096      	sub	sp, #88	; 0x58
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800bf58:	f3ef 8310 	mrs	r3, PRIMASK
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800bf5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800bf60:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800bf62:	b672      	cpsid	i
    return(int_posture);
 800bf64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800bf66:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	d005      	beq.n	800bf7c <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	334c      	adds	r3, #76	; 0x4c
 800bf74:	4618      	mov	r0, r3
 800bf76:	f000 fc3d 	bl	800c7f4 <_tx_timer_system_deactivate>
 800bf7a:	e002      	b.n	800bf82 <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	2200      	movs	r2, #0
 800bf80:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800bf82:	4b6c      	ldr	r3, [pc, #432]	; (800c134 <_tx_thread_system_resume+0x1e4>)
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	3b01      	subs	r3, #1
 800bf88:	4a6a      	ldr	r2, [pc, #424]	; (800c134 <_tx_thread_system_resume+0x1e4>)
 800bf8a:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bf90:	2b00      	cmp	r3, #0
 800bf92:	f040 8083 	bne.w	800c09c <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf9a:	2b00      	cmp	r3, #0
 800bf9c:	f000 8097 	beq.w	800c0ce <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bfa4:	2b00      	cmp	r3, #0
 800bfa6:	d172      	bne.n	800c08e <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	2200      	movs	r2, #0
 800bfac:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800bfae:	687b      	ldr	r3, [r7, #4]
 800bfb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfb2:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800bfb4:	4a60      	ldr	r2, [pc, #384]	; (800c138 <_tx_thread_system_resume+0x1e8>)
 800bfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800bfbc:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800bfbe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d154      	bne.n	800c06e <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800bfc4:	495c      	ldr	r1, [pc, #368]	; (800c138 <_tx_thread_system_resume+0x1e8>)
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc8:	687a      	ldr	r2, [r7, #4]
 800bfca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800bfce:	687b      	ldr	r3, [r7, #4]
 800bfd0:	687a      	ldr	r2, [r7, #4]
 800bfd2:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	687a      	ldr	r2, [r7, #4]
 800bfd8:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800bfda:	2201      	movs	r2, #1
 800bfdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfde:	fa02 f303 	lsl.w	r3, r2, r3
 800bfe2:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800bfe4:	4b55      	ldr	r3, [pc, #340]	; (800c13c <_tx_thread_system_resume+0x1ec>)
 800bfe6:	681a      	ldr	r2, [r3, #0]
 800bfe8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800bfea:	4313      	orrs	r3, r2
 800bfec:	4a53      	ldr	r2, [pc, #332]	; (800c13c <_tx_thread_system_resume+0x1ec>)
 800bfee:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800bff0:	4b53      	ldr	r3, [pc, #332]	; (800c140 <_tx_thread_system_resume+0x1f0>)
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800bff6:	429a      	cmp	r2, r3
 800bff8:	d269      	bcs.n	800c0ce <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800bffa:	4a51      	ldr	r2, [pc, #324]	; (800c140 <_tx_thread_system_resume+0x1f0>)
 800bffc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bffe:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800c000:	4b50      	ldr	r3, [pc, #320]	; (800c144 <_tx_thread_system_resume+0x1f4>)
 800c002:	681b      	ldr	r3, [r3, #0]
 800c004:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800c006:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d103      	bne.n	800c014 <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800c00c:	4a4d      	ldr	r2, [pc, #308]	; (800c144 <_tx_thread_system_resume+0x1f4>)
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	6013      	str	r3, [r2, #0]
 800c012:	e05c      	b.n	800c0ce <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800c014:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c018:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c01a:	429a      	cmp	r2, r3
 800c01c:	d257      	bcs.n	800c0ce <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800c01e:	4a49      	ldr	r2, [pc, #292]	; (800c144 <_tx_thread_system_resume+0x1f4>)
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6013      	str	r3, [r2, #0]
 800c024:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c026:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	f383 8810 	msr	PRIMASK, r3
}
 800c02e:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c030:	4b40      	ldr	r3, [pc, #256]	; (800c134 <_tx_thread_system_resume+0x1e4>)
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800c036:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d174      	bne.n	800c126 <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c03c:	4b42      	ldr	r3, [pc, #264]	; (800c148 <_tx_thread_system_resume+0x1f8>)
 800c03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c042:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c044:	f3ef 8305 	mrs	r3, IPSR
 800c048:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800c04a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	d10c      	bne.n	800c06a <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c050:	f3ef 8310 	mrs	r3, PRIMASK
 800c054:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800c058:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c05a:	b662      	cpsie	i
}
 800c05c:	bf00      	nop
 800c05e:	6a3b      	ldr	r3, [r7, #32]
 800c060:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c062:	69fb      	ldr	r3, [r7, #28]
 800c064:	f383 8810 	msr	PRIMASK, r3
}
 800c068:	bf00      	nop
}
 800c06a:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800c06c:	e05b      	b.n	800c126 <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800c06e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c072:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800c074:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c076:	687a      	ldr	r2, [r7, #4]
 800c078:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800c07a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c07c:	687a      	ldr	r2, [r7, #4]
 800c07e:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c084:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c08a:	621a      	str	r2, [r3, #32]
 800c08c:	e01f      	b.n	800c0ce <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c08e:	687b      	ldr	r3, [r7, #4]
 800c090:	2200      	movs	r2, #0
 800c092:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2203      	movs	r2, #3
 800c098:	631a      	str	r2, [r3, #48]	; 0x30
 800c09a:	e018      	b.n	800c0ce <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800c09c:	687b      	ldr	r3, [r7, #4]
 800c09e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a0:	2b01      	cmp	r3, #1
 800c0a2:	d014      	beq.n	800c0ce <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800c0a4:	687b      	ldr	r3, [r7, #4]
 800c0a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c0a8:	2b02      	cmp	r3, #2
 800c0aa:	d010      	beq.n	800c0ce <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800c0ac:	687b      	ldr	r3, [r7, #4]
 800c0ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800c0b4:	687b      	ldr	r3, [r7, #4]
 800c0b6:	2200      	movs	r2, #0
 800c0b8:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	2200      	movs	r2, #0
 800c0be:	631a      	str	r2, [r3, #48]	; 0x30
 800c0c0:	e005      	b.n	800c0ce <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	2203      	movs	r2, #3
 800c0cc:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c0ce:	4b1f      	ldr	r3, [pc, #124]	; (800c14c <_tx_thread_system_resume+0x1fc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	63bb      	str	r3, [r7, #56]	; 0x38
 800c0d4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0d6:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c0d8:	69bb      	ldr	r3, [r7, #24]
 800c0da:	f383 8810 	msr	PRIMASK, r3
}
 800c0de:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c0e0:	4b18      	ldr	r3, [pc, #96]	; (800c144 <_tx_thread_system_resume+0x1f4>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d020      	beq.n	800c12c <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c0ea:	4b12      	ldr	r3, [pc, #72]	; (800c134 <_tx_thread_system_resume+0x1e4>)
 800c0ec:	681b      	ldr	r3, [r3, #0]
 800c0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800c0f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d11a      	bne.n	800c12c <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c0f6:	4b14      	ldr	r3, [pc, #80]	; (800c148 <_tx_thread_system_resume+0x1f8>)
 800c0f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c0fc:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c0fe:	f3ef 8305 	mrs	r3, IPSR
 800c102:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800c104:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800c106:	2b00      	cmp	r3, #0
 800c108:	d10f      	bne.n	800c12a <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c10a:	f3ef 8310 	mrs	r3, PRIMASK
 800c10e:	613b      	str	r3, [r7, #16]
    return(posture);
 800c110:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800c112:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c114:	b662      	cpsie	i
}
 800c116:	bf00      	nop
 800c118:	68fb      	ldr	r3, [r7, #12]
 800c11a:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c11c:	68bb      	ldr	r3, [r7, #8]
 800c11e:	f383 8810 	msr	PRIMASK, r3
}
 800c122:	bf00      	nop
}
 800c124:	e001      	b.n	800c12a <_tx_thread_system_resume+0x1da>
                                return;
 800c126:	bf00      	nop
 800c128:	e000      	b.n	800c12c <_tx_thread_system_resume+0x1dc>
 800c12a:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800c12c:	3758      	adds	r7, #88	; 0x58
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	20005e9c 	.word	0x20005e9c
 800c138:	20005e1c 	.word	0x20005e1c
 800c13c:	20005e14 	.word	0x20005e14
 800c140:	20005e18 	.word	0x20005e18
 800c144:	20005e08 	.word	0x20005e08
 800c148:	e000ed04 	.word	0xe000ed04
 800c14c:	20005e04 	.word	0x20005e04

0800c150 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800c150:	b580      	push	{r7, lr}
 800c152:	b09e      	sub	sp, #120	; 0x78
 800c154:	af00      	add	r7, sp, #0
 800c156:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800c158:	4b81      	ldr	r3, [pc, #516]	; (800c360 <_tx_thread_system_suspend+0x210>)
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c15e:	f3ef 8310 	mrs	r3, PRIMASK
 800c162:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800c164:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800c166:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800c168:	b672      	cpsid	i
    return(int_posture);
 800c16a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800c16c:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800c16e:	687a      	ldr	r2, [r7, #4]
 800c170:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c172:	429a      	cmp	r2, r3
 800c174:	d112      	bne.n	800c19c <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c17a:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800c17c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d008      	beq.n	800c194 <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800c182:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800c184:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c188:	d004      	beq.n	800c194 <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	334c      	adds	r3, #76	; 0x4c
 800c18e:	4618      	mov	r0, r3
 800c190:	f000 face 	bl	800c730 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	69db      	ldr	r3, [r3, #28]
 800c198:	4a72      	ldr	r2, [pc, #456]	; (800c364 <_tx_thread_system_suspend+0x214>)
 800c19a:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800c19c:	4b72      	ldr	r3, [pc, #456]	; (800c368 <_tx_thread_system_suspend+0x218>)
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	3b01      	subs	r3, #1
 800c1a2:	4a71      	ldr	r2, [pc, #452]	; (800c368 <_tx_thread_system_suspend+0x218>)
 800c1a4:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	f040 80a6 	bne.w	800c2fc <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	2200      	movs	r2, #0
 800c1b4:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800c1b6:	687b      	ldr	r3, [r7, #4]
 800c1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1ba:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	6a1b      	ldr	r3, [r3, #32]
 800c1c0:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800c1c2:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	429a      	cmp	r2, r3
 800c1c8:	d015      	beq.n	800c1f6 <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1ce:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800c1d0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c1d2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c1d4:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800c1d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c1d8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1da:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800c1dc:	4a63      	ldr	r2, [pc, #396]	; (800c36c <_tx_thread_system_suspend+0x21c>)
 800c1de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c1e4:	687a      	ldr	r2, [r7, #4]
 800c1e6:	429a      	cmp	r2, r3
 800c1e8:	d157      	bne.n	800c29a <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800c1ea:	4960      	ldr	r1, [pc, #384]	; (800c36c <_tx_thread_system_suspend+0x21c>)
 800c1ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1ee:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800c1f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800c1f4:	e051      	b.n	800c29a <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800c1f6:	4a5d      	ldr	r2, [pc, #372]	; (800c36c <_tx_thread_system_suspend+0x21c>)
 800c1f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c1fa:	2100      	movs	r1, #0
 800c1fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800c200:	2201      	movs	r2, #1
 800c202:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c204:	fa02 f303 	lsl.w	r3, r2, r3
 800c208:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800c20a:	4b59      	ldr	r3, [pc, #356]	; (800c370 <_tx_thread_system_suspend+0x220>)
 800c20c:	681a      	ldr	r2, [r3, #0]
 800c20e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c210:	43db      	mvns	r3, r3
 800c212:	4013      	ands	r3, r2
 800c214:	4a56      	ldr	r2, [pc, #344]	; (800c370 <_tx_thread_system_suspend+0x220>)
 800c216:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800c218:	2300      	movs	r3, #0
 800c21a:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800c21c:	4b54      	ldr	r3, [pc, #336]	; (800c370 <_tx_thread_system_suspend+0x220>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800c222:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c224:	2b00      	cmp	r3, #0
 800c226:	d12b      	bne.n	800c280 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800c228:	4b52      	ldr	r3, [pc, #328]	; (800c374 <_tx_thread_system_suspend+0x224>)
 800c22a:	2220      	movs	r2, #32
 800c22c:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800c22e:	4b52      	ldr	r3, [pc, #328]	; (800c378 <_tx_thread_system_suspend+0x228>)
 800c230:	2200      	movs	r2, #0
 800c232:	601a      	str	r2, [r3, #0]
 800c234:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c236:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c23a:	f383 8810 	msr	PRIMASK, r3
}
 800c23e:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c240:	4b49      	ldr	r3, [pc, #292]	; (800c368 <_tx_thread_system_suspend+0x218>)
 800c242:	681b      	ldr	r3, [r3, #0]
 800c244:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800c246:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c248:	2b00      	cmp	r3, #0
 800c24a:	f040 8081 	bne.w	800c350 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c24e:	4b4b      	ldr	r3, [pc, #300]	; (800c37c <_tx_thread_system_suspend+0x22c>)
 800c250:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c254:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c256:	f3ef 8305 	mrs	r3, IPSR
 800c25a:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800c25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800c25e:	2b00      	cmp	r3, #0
 800c260:	d10c      	bne.n	800c27c <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c262:	f3ef 8310 	mrs	r3, PRIMASK
 800c266:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800c268:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800c26a:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c26c:	b662      	cpsie	i
}
 800c26e:	bf00      	nop
 800c270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c272:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c274:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c276:	f383 8810 	msr	PRIMASK, r3
}
 800c27a:	bf00      	nop
}
 800c27c:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800c27e:	e067      	b.n	800c350 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800c280:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c282:	fa93 f3a3 	rbit	r3, r3
 800c286:	65bb      	str	r3, [r7, #88]	; 0x58
 800c288:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c28a:	fab3 f383 	clz	r3, r3
 800c28e:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800c290:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800c292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c294:	4413      	add	r3, r2
 800c296:	4a37      	ldr	r2, [pc, #220]	; (800c374 <_tx_thread_system_suspend+0x224>)
 800c298:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800c29a:	4b37      	ldr	r3, [pc, #220]	; (800c378 <_tx_thread_system_suspend+0x228>)
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	687a      	ldr	r2, [r7, #4]
 800c2a0:	429a      	cmp	r2, r3
 800c2a2:	d12b      	bne.n	800c2fc <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c2a4:	4b33      	ldr	r3, [pc, #204]	; (800c374 <_tx_thread_system_suspend+0x224>)
 800c2a6:	681b      	ldr	r3, [r3, #0]
 800c2a8:	4a30      	ldr	r2, [pc, #192]	; (800c36c <_tx_thread_system_suspend+0x21c>)
 800c2aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c2ae:	4a32      	ldr	r2, [pc, #200]	; (800c378 <_tx_thread_system_suspend+0x228>)
 800c2b0:	6013      	str	r3, [r2, #0]
 800c2b2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2b4:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b8:	f383 8810 	msr	PRIMASK, r3
}
 800c2bc:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c2be:	4b2a      	ldr	r3, [pc, #168]	; (800c368 <_tx_thread_system_suspend+0x218>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800c2c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d144      	bne.n	800c354 <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c2ca:	4b2c      	ldr	r3, [pc, #176]	; (800c37c <_tx_thread_system_suspend+0x22c>)
 800c2cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2d0:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c2d2:	f3ef 8305 	mrs	r3, IPSR
 800c2d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800c2d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d10c      	bne.n	800c2f8 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c2de:	f3ef 8310 	mrs	r3, PRIMASK
 800c2e2:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c2e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800c2e6:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c2e8:	b662      	cpsie	i
}
 800c2ea:	bf00      	nop
 800c2ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2ee:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c2f0:	6a3b      	ldr	r3, [r7, #32]
 800c2f2:	f383 8810 	msr	PRIMASK, r3
}
 800c2f6:	bf00      	nop
}
 800c2f8:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800c2fa:	e02b      	b.n	800c354 <_tx_thread_system_suspend+0x204>
 800c2fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c2fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c300:	69fb      	ldr	r3, [r7, #28]
 800c302:	f383 8810 	msr	PRIMASK, r3
}
 800c306:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800c308:	4b1b      	ldr	r3, [pc, #108]	; (800c378 <_tx_thread_system_suspend+0x228>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c30e:	429a      	cmp	r2, r3
 800c310:	d022      	beq.n	800c358 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800c312:	4b15      	ldr	r3, [pc, #84]	; (800c368 <_tx_thread_system_suspend+0x218>)
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800c318:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d11c      	bne.n	800c358 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800c31e:	4b17      	ldr	r3, [pc, #92]	; (800c37c <_tx_thread_system_suspend+0x22c>)
 800c320:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c324:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800c326:	f3ef 8305 	mrs	r3, IPSR
 800c32a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800c32c:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d10c      	bne.n	800c34c <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c332:	f3ef 8310 	mrs	r3, PRIMASK
 800c336:	617b      	str	r3, [r7, #20]
    return(posture);
 800c338:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800c33a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800c33c:	b662      	cpsie	i
}
 800c33e:	bf00      	nop
 800c340:	693b      	ldr	r3, [r7, #16]
 800c342:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c344:	68fb      	ldr	r3, [r7, #12]
 800c346:	f383 8810 	msr	PRIMASK, r3
}
 800c34a:	bf00      	nop
}
 800c34c:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800c34e:	e003      	b.n	800c358 <_tx_thread_system_suspend+0x208>
                return;
 800c350:	bf00      	nop
 800c352:	e002      	b.n	800c35a <_tx_thread_system_suspend+0x20a>
            return;
 800c354:	bf00      	nop
 800c356:	e000      	b.n	800c35a <_tx_thread_system_suspend+0x20a>
    return;
 800c358:	bf00      	nop
}
 800c35a:	3778      	adds	r7, #120	; 0x78
 800c35c:	46bd      	mov	sp, r7
 800c35e:	bd80      	pop	{r7, pc}
 800c360:	20005e04 	.word	0x20005e04
 800c364:	20006408 	.word	0x20006408
 800c368:	20005e9c 	.word	0x20005e9c
 800c36c:	20005e1c 	.word	0x20005e1c
 800c370:	20005e14 	.word	0x20005e14
 800c374:	20005e18 	.word	0x20005e18
 800c378:	20005e08 	.word	0x20005e08
 800c37c:	e000ed04 	.word	0xe000ed04

0800c380 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800c380:	b480      	push	{r7}
 800c382:	b087      	sub	sp, #28
 800c384:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c386:	4b21      	ldr	r3, [pc, #132]	; (800c40c <_tx_thread_time_slice+0x8c>)
 800c388:	681b      	ldr	r3, [r3, #0]
 800c38a:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c38c:	f3ef 8310 	mrs	r3, PRIMASK
 800c390:	60fb      	str	r3, [r7, #12]
    return(posture);
 800c392:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800c394:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c396:	b672      	cpsid	i
    return(int_posture);
 800c398:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800c39a:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c39c:	4b1c      	ldr	r3, [pc, #112]	; (800c410 <_tx_thread_time_slice+0x90>)
 800c39e:	2200      	movs	r2, #0
 800c3a0:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800c3a2:	697b      	ldr	r3, [r7, #20]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	d024      	beq.n	800c3f2 <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d120      	bne.n	800c3f2 <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800c3b0:	697b      	ldr	r3, [r7, #20]
 800c3b2:	69da      	ldr	r2, [r3, #28]
 800c3b4:	697b      	ldr	r3, [r7, #20]
 800c3b6:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	699b      	ldr	r3, [r3, #24]
 800c3bc:	4a15      	ldr	r2, [pc, #84]	; (800c414 <_tx_thread_time_slice+0x94>)
 800c3be:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800c3c0:	697b      	ldr	r3, [r7, #20]
 800c3c2:	6a1b      	ldr	r3, [r3, #32]
 800c3c4:	697a      	ldr	r2, [r7, #20]
 800c3c6:	429a      	cmp	r2, r3
 800c3c8:	d013      	beq.n	800c3f2 <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800c3ca:	697b      	ldr	r3, [r7, #20]
 800c3cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c3ce:	697b      	ldr	r3, [r7, #20]
 800c3d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3d2:	429a      	cmp	r2, r3
 800c3d4:	d10d      	bne.n	800c3f2 <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800c3d6:	697b      	ldr	r3, [r7, #20]
 800c3d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c3da:	697a      	ldr	r2, [r7, #20]
 800c3dc:	6a12      	ldr	r2, [r2, #32]
 800c3de:	490e      	ldr	r1, [pc, #56]	; (800c418 <_tx_thread_time_slice+0x98>)
 800c3e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800c3e4:	4b0d      	ldr	r3, [pc, #52]	; (800c41c <_tx_thread_time_slice+0x9c>)
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	4a0b      	ldr	r2, [pc, #44]	; (800c418 <_tx_thread_time_slice+0x98>)
 800c3ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c3ee:	4a0c      	ldr	r2, [pc, #48]	; (800c420 <_tx_thread_time_slice+0xa0>)
 800c3f0:	6013      	str	r3, [r2, #0]
 800c3f2:	693b      	ldr	r3, [r7, #16]
 800c3f4:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c3f6:	687b      	ldr	r3, [r7, #4]
 800c3f8:	f383 8810 	msr	PRIMASK, r3
}
 800c3fc:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800c3fe:	bf00      	nop
 800c400:	371c      	adds	r7, #28
 800c402:	46bd      	mov	sp, r7
 800c404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c408:	4770      	bx	lr
 800c40a:	bf00      	nop
 800c40c:	20005e04 	.word	0x20005e04
 800c410:	20005eac 	.word	0x20005eac
 800c414:	20006408 	.word	0x20006408
 800c418:	20005e1c 	.word	0x20005e1c
 800c41c:	20005e18 	.word	0x20005e18
 800c420:	20005e08 	.word	0x20005e08

0800c424 <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800c424:	b580      	push	{r7, lr}
 800c426:	b08a      	sub	sp, #40	; 0x28
 800c428:	af00      	add	r7, sp, #0
 800c42a:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c430:	f3ef 8310 	mrs	r3, PRIMASK
 800c434:	617b      	str	r3, [r7, #20]
    return(posture);
 800c436:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800c438:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c43a:	b672      	cpsid	i
    return(int_posture);
 800c43c:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800c43e:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800c440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c442:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c444:	2b04      	cmp	r3, #4
 800c446:	d10e      	bne.n	800c466 <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800c448:	4b13      	ldr	r3, [pc, #76]	; (800c498 <_tx_thread_timeout+0x74>)
 800c44a:	681b      	ldr	r3, [r3, #0]
 800c44c:	3301      	adds	r3, #1
 800c44e:	4a12      	ldr	r2, [pc, #72]	; (800c498 <_tx_thread_timeout+0x74>)
 800c450:	6013      	str	r3, [r2, #0]
 800c452:	6a3b      	ldr	r3, [r7, #32]
 800c454:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f383 8810 	msr	PRIMASK, r3
}
 800c45c:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800c45e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c460:	f7ff fd76 	bl	800bf50 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800c464:	e013      	b.n	800c48e <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800c466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c46a:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800c46c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c46e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c472:	61bb      	str	r3, [r7, #24]
 800c474:	6a3b      	ldr	r3, [r7, #32]
 800c476:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c478:	68bb      	ldr	r3, [r7, #8]
 800c47a:	f383 8810 	msr	PRIMASK, r3
}
 800c47e:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800c480:	69fb      	ldr	r3, [r7, #28]
 800c482:	2b00      	cmp	r3, #0
 800c484:	d003      	beq.n	800c48e <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800c486:	69fb      	ldr	r3, [r7, #28]
 800c488:	69b9      	ldr	r1, [r7, #24]
 800c48a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c48c:	4798      	blx	r3
}
 800c48e:	bf00      	nop
 800c490:	3728      	adds	r7, #40	; 0x28
 800c492:	46bd      	mov	sp, r7
 800c494:	bd80      	pop	{r7, pc}
 800c496:	bf00      	nop
 800c498:	20005e9c 	.word	0x20005e9c

0800c49c <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800c49c:	b580      	push	{r7, lr}
 800c49e:	b08a      	sub	sp, #40	; 0x28
 800c4a0:	af00      	add	r7, sp, #0
 800c4a2:	60f8      	str	r0, [r7, #12]
 800c4a4:	60b9      	str	r1, [r7, #8]
 800c4a6:	607a      	str	r2, [r7, #4]
 800c4a8:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800c4aa:	222c      	movs	r2, #44	; 0x2c
 800c4ac:	2100      	movs	r1, #0
 800c4ae:	68f8      	ldr	r0, [r7, #12]
 800c4b0:	f000 ff5b 	bl	800d36a <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800c4b4:	68fb      	ldr	r3, [r7, #12]
 800c4b6:	68ba      	ldr	r2, [r7, #8]
 800c4b8:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4be:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800c4c0:	68fb      	ldr	r3, [r7, #12]
 800c4c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c4c4:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800c4c6:	68fb      	ldr	r3, [r7, #12]
 800c4c8:	687a      	ldr	r2, [r7, #4]
 800c4ca:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800c4cc:	68fb      	ldr	r3, [r7, #12]
 800c4ce:	683a      	ldr	r2, [r7, #0]
 800c4d0:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4d2:	f3ef 8310 	mrs	r3, PRIMASK
 800c4d6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c4d8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c4da:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4dc:	b672      	cpsid	i
    return(int_posture);
 800c4de:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800c4e0:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800c4e2:	68fb      	ldr	r3, [r7, #12]
 800c4e4:	4a1c      	ldr	r2, [pc, #112]	; (800c558 <_tx_timer_create+0xbc>)
 800c4e6:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800c4e8:	4b1c      	ldr	r3, [pc, #112]	; (800c55c <_tx_timer_create+0xc0>)
 800c4ea:	681b      	ldr	r3, [r3, #0]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d109      	bne.n	800c504 <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800c4f0:	4a1b      	ldr	r2, [pc, #108]	; (800c560 <_tx_timer_create+0xc4>)
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68fa      	ldr	r2, [r7, #12]
 800c4fa:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	68fa      	ldr	r2, [r7, #12]
 800c500:	629a      	str	r2, [r3, #40]	; 0x28
 800c502:	e011      	b.n	800c528 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800c504:	4b16      	ldr	r3, [pc, #88]	; (800c560 <_tx_timer_create+0xc4>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800c50a:	6a3b      	ldr	r3, [r7, #32]
 800c50c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c50e:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800c510:	6a3b      	ldr	r3, [r7, #32]
 800c512:	68fa      	ldr	r2, [r7, #12]
 800c514:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800c516:	69fb      	ldr	r3, [r7, #28]
 800c518:	68fa      	ldr	r2, [r7, #12]
 800c51a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	69fa      	ldr	r2, [r7, #28]
 800c520:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800c522:	68fb      	ldr	r3, [r7, #12]
 800c524:	6a3a      	ldr	r2, [r7, #32]
 800c526:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800c528:	4b0c      	ldr	r3, [pc, #48]	; (800c55c <_tx_timer_create+0xc0>)
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	3301      	adds	r3, #1
 800c52e:	4a0b      	ldr	r2, [pc, #44]	; (800c55c <_tx_timer_create+0xc0>)
 800c530:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800c532:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c534:	2b01      	cmp	r3, #1
 800c536:	d104      	bne.n	800c542 <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	3308      	adds	r3, #8
 800c53c:	4618      	mov	r0, r3
 800c53e:	f000 f8f7 	bl	800c730 <_tx_timer_system_activate>
 800c542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c544:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	f383 8810 	msr	PRIMASK, r3
}
 800c54c:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c54e:	2300      	movs	r3, #0
}
 800c550:	4618      	mov	r0, r3
 800c552:	3728      	adds	r7, #40	; 0x28
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}
 800c558:	4154494d 	.word	0x4154494d
 800c55c:	20005f44 	.word	0x20005f44
 800c560:	20005f40 	.word	0x20005f40

0800c564 <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b088      	sub	sp, #32
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c56c:	f3ef 8310 	mrs	r3, PRIMASK
 800c570:	613b      	str	r3, [r7, #16]
    return(posture);
 800c572:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800c574:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c576:	b672      	cpsid	i
    return(int_posture);
 800c578:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 800c57a:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	2b00      	cmp	r3, #0
 800c582:	d004      	beq.n	800c58e <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	3308      	adds	r3, #8
 800c588:	4618      	mov	r0, r3
 800c58a:	f000 f933 	bl	800c7f4 <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	2200      	movs	r2, #0
 800c592:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 800c594:	4b15      	ldr	r3, [pc, #84]	; (800c5ec <_tx_timer_delete+0x88>)
 800c596:	681b      	ldr	r3, [r3, #0]
 800c598:	3b01      	subs	r3, #1
 800c59a:	4a14      	ldr	r2, [pc, #80]	; (800c5ec <_tx_timer_delete+0x88>)
 800c59c:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800c59e:	4b13      	ldr	r3, [pc, #76]	; (800c5ec <_tx_timer_delete+0x88>)
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d103      	bne.n	800c5ae <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 800c5a6:	4b12      	ldr	r3, [pc, #72]	; (800c5f0 <_tx_timer_delete+0x8c>)
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	601a      	str	r2, [r3, #0]
 800c5ac:	e013      	b.n	800c5d6 <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5b2:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b8:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 800c5ba:	69bb      	ldr	r3, [r7, #24]
 800c5bc:	697a      	ldr	r2, [r7, #20]
 800c5be:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 800c5c0:	697b      	ldr	r3, [r7, #20]
 800c5c2:	69ba      	ldr	r2, [r7, #24]
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 800c5c6:	4b0a      	ldr	r3, [pc, #40]	; (800c5f0 <_tx_timer_delete+0x8c>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	687a      	ldr	r2, [r7, #4]
 800c5cc:	429a      	cmp	r2, r3
 800c5ce:	d102      	bne.n	800c5d6 <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 800c5d0:	4a07      	ldr	r2, [pc, #28]	; (800c5f0 <_tx_timer_delete+0x8c>)
 800c5d2:	69bb      	ldr	r3, [r7, #24]
 800c5d4:	6013      	str	r3, [r2, #0]
 800c5d6:	69fb      	ldr	r3, [r7, #28]
 800c5d8:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5da:	68bb      	ldr	r3, [r7, #8]
 800c5dc:	f383 8810 	msr	PRIMASK, r3
}
 800c5e0:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c5e2:	2300      	movs	r3, #0
}
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	3720      	adds	r7, #32
 800c5e8:	46bd      	mov	sp, r7
 800c5ea:	bd80      	pop	{r7, pc}
 800c5ec:	20005f44 	.word	0x20005f44
 800c5f0:	20005f40 	.word	0x20005f40

0800c5f4 <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b084      	sub	sp, #16
 800c5f8:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5fa:	f3ef 8310 	mrs	r3, PRIMASK
 800c5fe:	607b      	str	r3, [r7, #4]
    return(posture);
 800c600:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800c602:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c604:	b672      	cpsid	i
    return(int_posture);
 800c606:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800c608:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800c60a:	4b09      	ldr	r3, [pc, #36]	; (800c630 <_tx_timer_expiration_process+0x3c>)
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	3301      	adds	r3, #1
 800c610:	4a07      	ldr	r2, [pc, #28]	; (800c630 <_tx_timer_expiration_process+0x3c>)
 800c612:	6013      	str	r3, [r2, #0]
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c618:	68bb      	ldr	r3, [r7, #8]
 800c61a:	f383 8810 	msr	PRIMASK, r3
}
 800c61e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800c620:	4804      	ldr	r0, [pc, #16]	; (800c634 <_tx_timer_expiration_process+0x40>)
 800c622:	f7ff fc95 	bl	800bf50 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c626:	bf00      	nop
 800c628:	3710      	adds	r7, #16
 800c62a:	46bd      	mov	sp, r7
 800c62c:	bd80      	pop	{r7, pc}
 800c62e:	bf00      	nop
 800c630:	20005e9c 	.word	0x20005e9c
 800c634:	20005f4c 	.word	0x20005f4c

0800c638 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800c638:	b590      	push	{r4, r7, lr}
 800c63a:	b089      	sub	sp, #36	; 0x24
 800c63c:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800c63e:	4b28      	ldr	r3, [pc, #160]	; (800c6e0 <_tx_timer_initialize+0xa8>)
 800c640:	2200      	movs	r2, #0
 800c642:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800c644:	4b27      	ldr	r3, [pc, #156]	; (800c6e4 <_tx_timer_initialize+0xac>)
 800c646:	2200      	movs	r2, #0
 800c648:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800c64a:	4b27      	ldr	r3, [pc, #156]	; (800c6e8 <_tx_timer_initialize+0xb0>)
 800c64c:	2200      	movs	r2, #0
 800c64e:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800c650:	4b26      	ldr	r3, [pc, #152]	; (800c6ec <_tx_timer_initialize+0xb4>)
 800c652:	2200      	movs	r2, #0
 800c654:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800c656:	4b26      	ldr	r3, [pc, #152]	; (800c6f0 <_tx_timer_initialize+0xb8>)
 800c658:	2200      	movs	r2, #0
 800c65a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800c65c:	2280      	movs	r2, #128	; 0x80
 800c65e:	2100      	movs	r1, #0
 800c660:	4824      	ldr	r0, [pc, #144]	; (800c6f4 <_tx_timer_initialize+0xbc>)
 800c662:	f000 fe82 	bl	800d36a <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800c666:	4b24      	ldr	r3, [pc, #144]	; (800c6f8 <_tx_timer_initialize+0xc0>)
 800c668:	4a22      	ldr	r2, [pc, #136]	; (800c6f4 <_tx_timer_initialize+0xbc>)
 800c66a:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800c66c:	4b23      	ldr	r3, [pc, #140]	; (800c6fc <_tx_timer_initialize+0xc4>)
 800c66e:	4a21      	ldr	r2, [pc, #132]	; (800c6f4 <_tx_timer_initialize+0xbc>)
 800c670:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800c672:	4b23      	ldr	r3, [pc, #140]	; (800c700 <_tx_timer_initialize+0xc8>)
 800c674:	4a23      	ldr	r2, [pc, #140]	; (800c704 <_tx_timer_initialize+0xcc>)
 800c676:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800c678:	4b21      	ldr	r3, [pc, #132]	; (800c700 <_tx_timer_initialize+0xc8>)
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	3304      	adds	r3, #4
 800c67e:	4a20      	ldr	r2, [pc, #128]	; (800c700 <_tx_timer_initialize+0xc8>)
 800c680:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800c682:	4b21      	ldr	r3, [pc, #132]	; (800c708 <_tx_timer_initialize+0xd0>)
 800c684:	4a21      	ldr	r2, [pc, #132]	; (800c70c <_tx_timer_initialize+0xd4>)
 800c686:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800c688:	4b21      	ldr	r3, [pc, #132]	; (800c710 <_tx_timer_initialize+0xd8>)
 800c68a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c68e:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800c690:	4b20      	ldr	r3, [pc, #128]	; (800c714 <_tx_timer_initialize+0xdc>)
 800c692:	2200      	movs	r2, #0
 800c694:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800c696:	4b1c      	ldr	r3, [pc, #112]	; (800c708 <_tx_timer_initialize+0xd0>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	4a1d      	ldr	r2, [pc, #116]	; (800c710 <_tx_timer_initialize+0xd8>)
 800c69c:	6812      	ldr	r2, [r2, #0]
 800c69e:	491d      	ldr	r1, [pc, #116]	; (800c714 <_tx_timer_initialize+0xdc>)
 800c6a0:	6809      	ldr	r1, [r1, #0]
 800c6a2:	481c      	ldr	r0, [pc, #112]	; (800c714 <_tx_timer_initialize+0xdc>)
 800c6a4:	6800      	ldr	r0, [r0, #0]
 800c6a6:	2400      	movs	r4, #0
 800c6a8:	9405      	str	r4, [sp, #20]
 800c6aa:	2400      	movs	r4, #0
 800c6ac:	9404      	str	r4, [sp, #16]
 800c6ae:	9003      	str	r0, [sp, #12]
 800c6b0:	9102      	str	r1, [sp, #8]
 800c6b2:	9201      	str	r2, [sp, #4]
 800c6b4:	9300      	str	r3, [sp, #0]
 800c6b6:	4b18      	ldr	r3, [pc, #96]	; (800c718 <_tx_timer_initialize+0xe0>)
 800c6b8:	4a18      	ldr	r2, [pc, #96]	; (800c71c <_tx_timer_initialize+0xe4>)
 800c6ba:	4919      	ldr	r1, [pc, #100]	; (800c720 <_tx_timer_initialize+0xe8>)
 800c6bc:	4819      	ldr	r0, [pc, #100]	; (800c724 <_tx_timer_initialize+0xec>)
 800c6be:	f7ff fa0f 	bl	800bae0 <_tx_thread_create>
 800c6c2:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d1e5      	bne.n	800c696 <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800c6ca:	4b17      	ldr	r3, [pc, #92]	; (800c728 <_tx_timer_initialize+0xf0>)
 800c6cc:	2200      	movs	r2, #0
 800c6ce:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800c6d0:	4b16      	ldr	r3, [pc, #88]	; (800c72c <_tx_timer_initialize+0xf4>)
 800c6d2:	2200      	movs	r2, #0
 800c6d4:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800c6d6:	bf00      	nop
 800c6d8:	370c      	adds	r7, #12
 800c6da:	46bd      	mov	sp, r7
 800c6dc:	bd90      	pop	{r4, r7, pc}
 800c6de:	bf00      	nop
 800c6e0:	20005ea8 	.word	0x20005ea8
 800c6e4:	20006408 	.word	0x20006408
 800c6e8:	20005eac 	.word	0x20005eac
 800c6ec:	20005f3c 	.word	0x20005f3c
 800c6f0:	20005f48 	.word	0x20005f48
 800c6f4:	20005eb0 	.word	0x20005eb0
 800c6f8:	20005f30 	.word	0x20005f30
 800c6fc:	20005f38 	.word	0x20005f38
 800c700:	20005f34 	.word	0x20005f34
 800c704:	20005f2c 	.word	0x20005f2c
 800c708:	20005ffc 	.word	0x20005ffc
 800c70c:	20006008 	.word	0x20006008
 800c710:	20006000 	.word	0x20006000
 800c714:	20006004 	.word	0x20006004
 800c718:	4154494d 	.word	0x4154494d
 800c71c:	0800c865 	.word	0x0800c865
 800c720:	0800fa50 	.word	0x0800fa50
 800c724:	20005f4c 	.word	0x20005f4c
 800c728:	20005f40 	.word	0x20005f40
 800c72c:	20005f44 	.word	0x20005f44

0800c730 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c730:	b480      	push	{r7}
 800c732:	b089      	sub	sp, #36	; 0x24
 800c734:	af00      	add	r7, sp, #0
 800c736:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800c73e:	697b      	ldr	r3, [r7, #20]
 800c740:	2b00      	cmp	r3, #0
 800c742:	d04a      	beq.n	800c7da <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800c744:	697b      	ldr	r3, [r7, #20]
 800c746:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c74a:	d046      	beq.n	800c7da <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800c74c:	687b      	ldr	r3, [r7, #4]
 800c74e:	699b      	ldr	r3, [r3, #24]
 800c750:	2b00      	cmp	r3, #0
 800c752:	d142      	bne.n	800c7da <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800c754:	697b      	ldr	r3, [r7, #20]
 800c756:	2b20      	cmp	r3, #32
 800c758:	d902      	bls.n	800c760 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800c75a:	231f      	movs	r3, #31
 800c75c:	61bb      	str	r3, [r7, #24]
 800c75e:	e002      	b.n	800c766 <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	3b01      	subs	r3, #1
 800c764:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800c766:	4b20      	ldr	r3, [pc, #128]	; (800c7e8 <_tx_timer_system_activate+0xb8>)
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	69bb      	ldr	r3, [r7, #24]
 800c76c:	009b      	lsls	r3, r3, #2
 800c76e:	4413      	add	r3, r2
 800c770:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800c772:	4b1e      	ldr	r3, [pc, #120]	; (800c7ec <_tx_timer_system_activate+0xbc>)
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	69fa      	ldr	r2, [r7, #28]
 800c778:	429a      	cmp	r2, r3
 800c77a:	d30b      	bcc.n	800c794 <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800c77c:	4b1b      	ldr	r3, [pc, #108]	; (800c7ec <_tx_timer_system_activate+0xbc>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	69fa      	ldr	r2, [r7, #28]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	109b      	asrs	r3, r3, #2
 800c786:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800c788:	4b19      	ldr	r3, [pc, #100]	; (800c7f0 <_tx_timer_system_activate+0xc0>)
 800c78a:	681a      	ldr	r2, [r3, #0]
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	009b      	lsls	r3, r3, #2
 800c790:	4413      	add	r3, r2
 800c792:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800c794:	69fb      	ldr	r3, [r7, #28]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	2b00      	cmp	r3, #0
 800c79a:	d109      	bne.n	800c7b0 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	687a      	ldr	r2, [r7, #4]
 800c7a0:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	687a      	ldr	r2, [r7, #4]
 800c7a6:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800c7a8:	69fb      	ldr	r3, [r7, #28]
 800c7aa:	687a      	ldr	r2, [r7, #4]
 800c7ac:	601a      	str	r2, [r3, #0]
 800c7ae:	e011      	b.n	800c7d4 <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800c7b0:	69fb      	ldr	r3, [r7, #28]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	695b      	ldr	r3, [r3, #20]
 800c7ba:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	687a      	ldr	r2, [r7, #4]
 800c7c0:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800c7c2:	68fb      	ldr	r3, [r7, #12]
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800c7ce:	687b      	ldr	r3, [r7, #4]
 800c7d0:	68ba      	ldr	r2, [r7, #8]
 800c7d2:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800c7da:	bf00      	nop
 800c7dc:	3724      	adds	r7, #36	; 0x24
 800c7de:	46bd      	mov	sp, r7
 800c7e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e4:	4770      	bx	lr
 800c7e6:	bf00      	nop
 800c7e8:	20005f38 	.word	0x20005f38
 800c7ec:	20005f34 	.word	0x20005f34
 800c7f0:	20005f30 	.word	0x20005f30

0800c7f4 <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800c7f4:	b480      	push	{r7}
 800c7f6:	b087      	sub	sp, #28
 800c7f8:	af00      	add	r7, sp, #0
 800c7fa:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	699b      	ldr	r3, [r3, #24]
 800c800:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800c802:	697b      	ldr	r3, [r7, #20]
 800c804:	2b00      	cmp	r3, #0
 800c806:	d026      	beq.n	800c856 <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	691b      	ldr	r3, [r3, #16]
 800c80c:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800c80e:	687a      	ldr	r2, [r7, #4]
 800c810:	693b      	ldr	r3, [r7, #16]
 800c812:	429a      	cmp	r2, r3
 800c814:	d108      	bne.n	800c828 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c816:	697b      	ldr	r3, [r7, #20]
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	687a      	ldr	r2, [r7, #4]
 800c81c:	429a      	cmp	r2, r3
 800c81e:	d117      	bne.n	800c850 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	2200      	movs	r2, #0
 800c824:	601a      	str	r2, [r3, #0]
 800c826:	e013      	b.n	800c850 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	695b      	ldr	r3, [r3, #20]
 800c82c:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	68fa      	ldr	r2, [r7, #12]
 800c832:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800c83a:	697b      	ldr	r3, [r7, #20]
 800c83c:	681b      	ldr	r3, [r3, #0]
 800c83e:	687a      	ldr	r2, [r7, #4]
 800c840:	429a      	cmp	r2, r3
 800c842:	d105      	bne.n	800c850 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800c844:	693b      	ldr	r3, [r7, #16]
 800c846:	697a      	ldr	r2, [r7, #20]
 800c848:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800c84a:	697b      	ldr	r3, [r7, #20]
 800c84c:	693a      	ldr	r2, [r7, #16]
 800c84e:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2200      	movs	r2, #0
 800c854:	619a      	str	r2, [r3, #24]
    }
}
 800c856:	bf00      	nop
 800c858:	371c      	adds	r7, #28
 800c85a:	46bd      	mov	sp, r7
 800c85c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c860:	4770      	bx	lr
	...

0800c864 <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800c864:	b580      	push	{r7, lr}
 800c866:	b098      	sub	sp, #96	; 0x60
 800c868:	af00      	add	r7, sp, #0
 800c86a:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800c86c:	2300      	movs	r3, #0
 800c86e:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	4a73      	ldr	r2, [pc, #460]	; (800ca40 <_tx_timer_thread_entry+0x1dc>)
 800c874:	4293      	cmp	r3, r2
 800c876:	f040 80de 	bne.w	800ca36 <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c87a:	f3ef 8310 	mrs	r3, PRIMASK
 800c87e:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800c880:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800c882:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800c884:	b672      	cpsid	i
    return(int_posture);
 800c886:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800c888:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800c88a:	4b6e      	ldr	r3, [pc, #440]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	681b      	ldr	r3, [r3, #0]
 800c890:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d003      	beq.n	800c8a0 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800c898:	68fb      	ldr	r3, [r7, #12]
 800c89a:	f107 020c 	add.w	r2, r7, #12
 800c89e:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800c8a0:	4b68      	ldr	r3, [pc, #416]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c8a2:	681b      	ldr	r3, [r3, #0]
 800c8a4:	2200      	movs	r2, #0
 800c8a6:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800c8a8:	4b66      	ldr	r3, [pc, #408]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c8aa:	681b      	ldr	r3, [r3, #0]
 800c8ac:	3304      	adds	r3, #4
 800c8ae:	4a65      	ldr	r2, [pc, #404]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c8b0:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800c8b2:	4b64      	ldr	r3, [pc, #400]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c8b4:	681a      	ldr	r2, [r3, #0]
 800c8b6:	4b64      	ldr	r3, [pc, #400]	; (800ca48 <_tx_timer_thread_entry+0x1e4>)
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	429a      	cmp	r2, r3
 800c8bc:	d103      	bne.n	800c8c6 <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800c8be:	4b63      	ldr	r3, [pc, #396]	; (800ca4c <_tx_timer_thread_entry+0x1e8>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	4a60      	ldr	r2, [pc, #384]	; (800ca44 <_tx_timer_thread_entry+0x1e0>)
 800c8c4:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800c8c6:	4b62      	ldr	r3, [pc, #392]	; (800ca50 <_tx_timer_thread_entry+0x1ec>)
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	601a      	str	r2, [r3, #0]
 800c8cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c8ce:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c8d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d2:	f383 8810 	msr	PRIMASK, r3
}
 800c8d6:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c8d8:	f3ef 8310 	mrs	r3, PRIMASK
 800c8dc:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800c8de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800c8e0:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800c8e2:	b672      	cpsid	i
    return(int_posture);
 800c8e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800c8e6:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800c8e8:	e07f      	b.n	800c9ea <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	691b      	ldr	r3, [r3, #16]
 800c8f2:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800c8f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8fc:	429a      	cmp	r2, r3
 800c8fe:	d102      	bne.n	800c906 <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800c900:	2300      	movs	r3, #0
 800c902:	60fb      	str	r3, [r7, #12]
 800c904:	e00e      	b.n	800c924 <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800c906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c908:	695b      	ldr	r3, [r3, #20]
 800c90a:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800c90c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c90e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c910:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800c912:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c916:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800c918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c91a:	f107 020c 	add.w	r2, r7, #12
 800c91e:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800c920:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c922:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800c924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b20      	cmp	r3, #32
 800c92a:	d911      	bls.n	800c950 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800c92c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800c934:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c936:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c93c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c93e:	f107 0208 	add.w	r2, r7, #8
 800c942:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800c944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c946:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c948:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800c94a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c94c:	60bb      	str	r3, [r7, #8]
 800c94e:	e01a      	b.n	800c986 <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800c950:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c952:	689b      	ldr	r3, [r3, #8]
 800c954:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800c956:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c958:	68db      	ldr	r3, [r3, #12]
 800c95a:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800c95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c95e:	685a      	ldr	r2, [r3, #4]
 800c960:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c962:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800c964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d009      	beq.n	800c980 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800c96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96e:	f107 0208 	add.w	r2, r7, #8
 800c972:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800c974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c976:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c978:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800c97a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c97c:	60bb      	str	r3, [r7, #8]
 800c97e:	e002      	b.n	800c986 <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800c980:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c982:	2200      	movs	r2, #0
 800c984:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800c986:	4a33      	ldr	r2, [pc, #204]	; (800ca54 <_tx_timer_thread_entry+0x1f0>)
 800c988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c98e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c992:	f383 8810 	msr	PRIMASK, r3
}
 800c996:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800c998:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d002      	beq.n	800c9a4 <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800c99e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800c9a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800c9a2:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9a4:	f3ef 8310 	mrs	r3, PRIMASK
 800c9a8:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800c9ac:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9ae:	b672      	cpsid	i
    return(int_posture);
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c9b2:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800c9b4:	4b27      	ldr	r3, [pc, #156]	; (800ca54 <_tx_timer_thread_entry+0x1f0>)
 800c9b6:	2200      	movs	r2, #0
 800c9b8:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800c9ba:	68bb      	ldr	r3, [r7, #8]
 800c9bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c9be:	429a      	cmp	r2, r3
 800c9c0:	d105      	bne.n	800c9ce <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800c9c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800c9c8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800c9ca:	f7ff feb1 	bl	800c730 <_tx_timer_system_activate>
 800c9ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c9d0:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9d2:	69bb      	ldr	r3, [r7, #24]
 800c9d4:	f383 8810 	msr	PRIMASK, r3
}
 800c9d8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c9da:	f3ef 8310 	mrs	r3, PRIMASK
 800c9de:	623b      	str	r3, [r7, #32]
    return(posture);
 800c9e0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c9e2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c9e4:	b672      	cpsid	i
    return(int_posture);
 800c9e6:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800c9e8:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800c9ea:	68fb      	ldr	r3, [r7, #12]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	f47f af7c 	bne.w	800c8ea <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800c9f2:	4b17      	ldr	r3, [pc, #92]	; (800ca50 <_tx_timer_thread_entry+0x1ec>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d116      	bne.n	800ca28 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800c9fa:	4b17      	ldr	r3, [pc, #92]	; (800ca58 <_tx_timer_thread_entry+0x1f4>)
 800c9fc:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800c9fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca00:	2203      	movs	r2, #3
 800ca02:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ca04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ca06:	2201      	movs	r2, #1
 800ca08:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800ca0a:	4b14      	ldr	r3, [pc, #80]	; (800ca5c <_tx_timer_thread_entry+0x1f8>)
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	3301      	adds	r3, #1
 800ca10:	4a12      	ldr	r2, [pc, #72]	; (800ca5c <_tx_timer_thread_entry+0x1f8>)
 800ca12:	6013      	str	r3, [r2, #0]
 800ca14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca16:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca18:	697b      	ldr	r3, [r7, #20]
 800ca1a:	f383 8810 	msr	PRIMASK, r3
}
 800ca1e:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800ca20:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ca22:	f7ff fb95 	bl	800c150 <_tx_thread_system_suspend>
 800ca26:	e728      	b.n	800c87a <_tx_timer_thread_entry+0x16>
 800ca28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ca2a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca2c:	693b      	ldr	r3, [r7, #16]
 800ca2e:	f383 8810 	msr	PRIMASK, r3
}
 800ca32:	bf00      	nop
            TX_DISABLE
 800ca34:	e721      	b.n	800c87a <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800ca36:	bf00      	nop
 800ca38:	3760      	adds	r7, #96	; 0x60
 800ca3a:	46bd      	mov	sp, r7
 800ca3c:	bd80      	pop	{r7, pc}
 800ca3e:	bf00      	nop
 800ca40:	4154494d 	.word	0x4154494d
 800ca44:	20005f38 	.word	0x20005f38
 800ca48:	20005f34 	.word	0x20005f34
 800ca4c:	20005f30 	.word	0x20005f30
 800ca50:	20005f3c 	.word	0x20005f3c
 800ca54:	20005f48 	.word	0x20005f48
 800ca58:	20005f4c 	.word	0x20005f4c
 800ca5c:	20005e9c 	.word	0x20005e9c

0800ca60 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b08a      	sub	sp, #40	; 0x28
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	60f8      	str	r0, [r7, #12]
 800ca68:	60b9      	str	r1, [r7, #8]
 800ca6a:	607a      	str	r2, [r7, #4]
 800ca6c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ca6e:	2300      	movs	r3, #0
 800ca70:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d102      	bne.n	800ca7e <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ca78:	2302      	movs	r3, #2
 800ca7a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca7c:	e029      	b.n	800cad2 <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800ca7e:	68fb      	ldr	r3, [r7, #12]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	4a2d      	ldr	r2, [pc, #180]	; (800cb38 <_txe_byte_allocate+0xd8>)
 800ca84:	4293      	cmp	r3, r2
 800ca86:	d002      	beq.n	800ca8e <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800ca88:	2302      	movs	r3, #2
 800ca8a:	627b      	str	r3, [r7, #36]	; 0x24
 800ca8c:	e021      	b.n	800cad2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800ca8e:	68bb      	ldr	r3, [r7, #8]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d102      	bne.n	800ca9a <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800ca94:	2303      	movs	r3, #3
 800ca96:	627b      	str	r3, [r7, #36]	; 0x24
 800ca98:	e01b      	b.n	800cad2 <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	2b00      	cmp	r3, #0
 800ca9e:	d102      	bne.n	800caa6 <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800caa0:	2305      	movs	r3, #5
 800caa2:	627b      	str	r3, [r7, #36]	; 0x24
 800caa4:	e015      	b.n	800cad2 <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	687a      	ldr	r2, [r7, #4]
 800caac:	429a      	cmp	r2, r3
 800caae:	d902      	bls.n	800cab6 <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800cab0:	2305      	movs	r3, #5
 800cab2:	627b      	str	r3, [r7, #36]	; 0x24
 800cab4:	e00d      	b.n	800cad2 <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800cab6:	683b      	ldr	r3, [r7, #0]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d00a      	beq.n	800cad2 <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cabc:	f3ef 8305 	mrs	r3, IPSR
 800cac0:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800cac2:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cac4:	4b1d      	ldr	r3, [pc, #116]	; (800cb3c <_txe_byte_allocate+0xdc>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	4313      	orrs	r3, r2
 800caca:	2b00      	cmp	r3, #0
 800cacc:	d001      	beq.n	800cad2 <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800cace:	2304      	movs	r3, #4
 800cad0:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800cad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d108      	bne.n	800caea <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cad8:	4b19      	ldr	r3, [pc, #100]	; (800cb40 <_txe_byte_allocate+0xe0>)
 800cada:	681b      	ldr	r3, [r3, #0]
 800cadc:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cade:	6a3b      	ldr	r3, [r7, #32]
 800cae0:	4a18      	ldr	r2, [pc, #96]	; (800cb44 <_txe_byte_allocate+0xe4>)
 800cae2:	4293      	cmp	r3, r2
 800cae4:	d101      	bne.n	800caea <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cae6:	2313      	movs	r3, #19
 800cae8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800caea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800caec:	2b00      	cmp	r3, #0
 800caee:	d114      	bne.n	800cb1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800caf0:	f3ef 8305 	mrs	r3, IPSR
 800caf4:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800caf6:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800caf8:	4b10      	ldr	r3, [pc, #64]	; (800cb3c <_txe_byte_allocate+0xdc>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	4313      	orrs	r3, r2
 800cafe:	2b00      	cmp	r3, #0
 800cb00:	d00b      	beq.n	800cb1a <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cb02:	f3ef 8305 	mrs	r3, IPSR
 800cb06:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cb08:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cb0a:	4b0c      	ldr	r3, [pc, #48]	; (800cb3c <_txe_byte_allocate+0xdc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	4313      	orrs	r3, r2
 800cb10:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cb14:	d201      	bcs.n	800cb1a <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cb16:	2313      	movs	r3, #19
 800cb18:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cb1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d106      	bne.n	800cb2e <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800cb20:	683b      	ldr	r3, [r7, #0]
 800cb22:	687a      	ldr	r2, [r7, #4]
 800cb24:	68b9      	ldr	r1, [r7, #8]
 800cb26:	68f8      	ldr	r0, [r7, #12]
 800cb28:	f7fe fc86 	bl	800b438 <_tx_byte_allocate>
 800cb2c:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800cb2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800cb30:	4618      	mov	r0, r3
 800cb32:	3728      	adds	r7, #40	; 0x28
 800cb34:	46bd      	mov	sp, r7
 800cb36:	bd80      	pop	{r7, pc}
 800cb38:	42595445 	.word	0x42595445
 800cb3c:	2000000c 	.word	0x2000000c
 800cb40:	20005e04 	.word	0x20005e04
 800cb44:	20005f4c 	.word	0x20005f4c

0800cb48 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b092      	sub	sp, #72	; 0x48
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	60f8      	str	r0, [r7, #12]
 800cb50:	60b9      	str	r1, [r7, #8]
 800cb52:	607a      	str	r2, [r7, #4]
 800cb54:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cb56:	2300      	movs	r3, #0
 800cb58:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	2b00      	cmp	r3, #0
 800cb5e:	d102      	bne.n	800cb66 <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cb60:	2302      	movs	r3, #2
 800cb62:	647b      	str	r3, [r7, #68]	; 0x44
 800cb64:	e075      	b.n	800cc52 <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800cb66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb68:	2b34      	cmp	r3, #52	; 0x34
 800cb6a:	d002      	beq.n	800cb72 <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800cb6c:	2302      	movs	r3, #2
 800cb6e:	647b      	str	r3, [r7, #68]	; 0x44
 800cb70:	e06f      	b.n	800cc52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cb72:	f3ef 8310 	mrs	r3, PRIMASK
 800cb76:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cb78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cb7a:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cb7c:	b672      	cpsid	i
    return(int_posture);
 800cb7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cb80:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cb82:	4b3b      	ldr	r3, [pc, #236]	; (800cc70 <_txe_byte_pool_create+0x128>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	3301      	adds	r3, #1
 800cb88:	4a39      	ldr	r2, [pc, #228]	; (800cc70 <_txe_byte_pool_create+0x128>)
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8e:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cb90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb92:	f383 8810 	msr	PRIMASK, r3
}
 800cb96:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800cb98:	4b36      	ldr	r3, [pc, #216]	; (800cc74 <_txe_byte_pool_create+0x12c>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cb9e:	2300      	movs	r3, #0
 800cba0:	643b      	str	r3, [r7, #64]	; 0x40
 800cba2:	e009      	b.n	800cbb8 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800cba4:	68fa      	ldr	r2, [r7, #12]
 800cba6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cba8:	429a      	cmp	r2, r3
 800cbaa:	d00b      	beq.n	800cbc4 <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800cbac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cbb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800cbb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cbb4:	3301      	adds	r3, #1
 800cbb6:	643b      	str	r3, [r7, #64]	; 0x40
 800cbb8:	4b2f      	ldr	r3, [pc, #188]	; (800cc78 <_txe_byte_pool_create+0x130>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cbbe:	429a      	cmp	r2, r3
 800cbc0:	d3f0      	bcc.n	800cba4 <_txe_byte_pool_create+0x5c>
 800cbc2:	e000      	b.n	800cbc6 <_txe_byte_pool_create+0x7e>
                break;
 800cbc4:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbc6:	f3ef 8310 	mrs	r3, PRIMASK
 800cbca:	623b      	str	r3, [r7, #32]
    return(posture);
 800cbcc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cbce:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbd0:	b672      	cpsid	i
    return(int_posture);
 800cbd2:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cbd4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cbd6:	4b26      	ldr	r3, [pc, #152]	; (800cc70 <_txe_byte_pool_create+0x128>)
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3b01      	subs	r3, #1
 800cbdc:	4a24      	ldr	r2, [pc, #144]	; (800cc70 <_txe_byte_pool_create+0x128>)
 800cbde:	6013      	str	r3, [r2, #0]
 800cbe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cbe2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cbe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cbe6:	f383 8810 	msr	PRIMASK, r3
}
 800cbea:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cbec:	f7ff f976 	bl	800bedc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cbf4:	429a      	cmp	r2, r3
 800cbf6:	d102      	bne.n	800cbfe <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800cbf8:	2302      	movs	r3, #2
 800cbfa:	647b      	str	r3, [r7, #68]	; 0x44
 800cbfc:	e029      	b.n	800cc52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d102      	bne.n	800cc0a <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800cc04:	2303      	movs	r3, #3
 800cc06:	647b      	str	r3, [r7, #68]	; 0x44
 800cc08:	e023      	b.n	800cc52 <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	2b63      	cmp	r3, #99	; 0x63
 800cc0e:	d802      	bhi.n	800cc16 <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800cc10:	2305      	movs	r3, #5
 800cc12:	647b      	str	r3, [r7, #68]	; 0x44
 800cc14:	e01d      	b.n	800cc52 <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800cc16:	4b19      	ldr	r3, [pc, #100]	; (800cc7c <_txe_byte_pool_create+0x134>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800cc1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc1e:	4a18      	ldr	r2, [pc, #96]	; (800cc80 <_txe_byte_pool_create+0x138>)
 800cc20:	4293      	cmp	r3, r2
 800cc22:	d101      	bne.n	800cc28 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cc24:	2313      	movs	r3, #19
 800cc26:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc28:	f3ef 8305 	mrs	r3, IPSR
 800cc2c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cc2e:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cc30:	4b14      	ldr	r3, [pc, #80]	; (800cc84 <_txe_byte_pool_create+0x13c>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	4313      	orrs	r3, r2
 800cc36:	2b00      	cmp	r3, #0
 800cc38:	d00b      	beq.n	800cc52 <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc3a:	f3ef 8305 	mrs	r3, IPSR
 800cc3e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cc40:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cc42:	4b10      	ldr	r3, [pc, #64]	; (800cc84 <_txe_byte_pool_create+0x13c>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	4313      	orrs	r3, r2
 800cc48:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc4c:	d201      	bcs.n	800cc52 <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800cc4e:	2313      	movs	r3, #19
 800cc50:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cc52:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	d106      	bne.n	800cc66 <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800cc58:	683b      	ldr	r3, [r7, #0]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	68b9      	ldr	r1, [r7, #8]
 800cc5e:	68f8      	ldr	r0, [r7, #12]
 800cc60:	f7fe fd2c 	bl	800b6bc <_tx_byte_pool_create>
 800cc64:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800cc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cc68:	4618      	mov	r0, r3
 800cc6a:	3748      	adds	r7, #72	; 0x48
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	20005e9c 	.word	0x20005e9c
 800cc74:	20005df4 	.word	0x20005df4
 800cc78:	20005df8 	.word	0x20005df8
 800cc7c:	20005e04 	.word	0x20005e04
 800cc80:	20005f4c 	.word	0x20005f4c
 800cc84:	2000000c 	.word	0x2000000c

0800cc88 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b09a      	sub	sp, #104	; 0x68
 800cc8c:	af06      	add	r7, sp, #24
 800cc8e:	60f8      	str	r0, [r7, #12]
 800cc90:	60b9      	str	r1, [r7, #8]
 800cc92:	607a      	str	r2, [r7, #4]
 800cc94:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cc96:	2300      	movs	r3, #0
 800cc98:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800cc9a:	68fb      	ldr	r3, [r7, #12]
 800cc9c:	2b00      	cmp	r3, #0
 800cc9e:	d102      	bne.n	800cca6 <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800cca0:	230e      	movs	r3, #14
 800cca2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cca4:	e0bb      	b.n	800ce1e <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800cca6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cca8:	2bb0      	cmp	r3, #176	; 0xb0
 800ccaa:	d002      	beq.n	800ccb2 <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800ccac:	230e      	movs	r3, #14
 800ccae:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ccb0:	e0b5      	b.n	800ce1e <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ccb2:	f3ef 8310 	mrs	r3, PRIMASK
 800ccb6:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ccb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ccba:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccbc:	b672      	cpsid	i
    return(int_posture);
 800ccbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800ccc0:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800ccc2:	4b64      	ldr	r3, [pc, #400]	; (800ce54 <_txe_thread_create+0x1cc>)
 800ccc4:	681b      	ldr	r3, [r3, #0]
 800ccc6:	3301      	adds	r3, #1
 800ccc8:	4a62      	ldr	r2, [pc, #392]	; (800ce54 <_txe_thread_create+0x1cc>)
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ccce:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd2:	f383 8810 	msr	PRIMASK, r3
}
 800ccd6:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800ccd8:	2300      	movs	r3, #0
 800ccda:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800ccdc:	4b5e      	ldr	r3, [pc, #376]	; (800ce58 <_txe_thread_create+0x1d0>)
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cce2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cce4:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800cce6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cce8:	3b01      	subs	r3, #1
 800ccea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800ccec:	4413      	add	r3, r2
 800ccee:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800ccf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf2:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	647b      	str	r3, [r7, #68]	; 0x44
 800ccf8:	e02b      	b.n	800cd52 <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800ccfa:	68fa      	ldr	r2, [r7, #12]
 800ccfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ccfe:	429a      	cmp	r2, r3
 800cd00:	d101      	bne.n	800cd06 <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800cd02:	2301      	movs	r3, #1
 800cd04:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800cd06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cd08:	2b01      	cmp	r3, #1
 800cd0a:	d028      	beq.n	800cd5e <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800cd0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd12:	429a      	cmp	r2, r3
 800cd14:	d308      	bcc.n	800cd28 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800cd16:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd18:	691b      	ldr	r3, [r3, #16]
 800cd1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cd1c:	429a      	cmp	r2, r3
 800cd1e:	d203      	bcs.n	800cd28 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cd24:	2301      	movs	r3, #1
 800cd26:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800cd28:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd2a:	68db      	ldr	r3, [r3, #12]
 800cd2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd2e:	429a      	cmp	r2, r3
 800cd30:	d308      	bcc.n	800cd44 <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800cd32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd34:	691b      	ldr	r3, [r3, #16]
 800cd36:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d203      	bcs.n	800cd44 <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800cd40:	2301      	movs	r3, #1
 800cd42:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800cd44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cd4a:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800cd4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cd4e:	3301      	adds	r3, #1
 800cd50:	647b      	str	r3, [r7, #68]	; 0x44
 800cd52:	4b42      	ldr	r3, [pc, #264]	; (800ce5c <_txe_thread_create+0x1d4>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	d3ce      	bcc.n	800ccfa <_txe_thread_create+0x72>
 800cd5c:	e000      	b.n	800cd60 <_txe_thread_create+0xd8>
                break;
 800cd5e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd60:	f3ef 8310 	mrs	r3, PRIMASK
 800cd64:	61fb      	str	r3, [r7, #28]
    return(posture);
 800cd66:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800cd68:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd6a:	b672      	cpsid	i
    return(int_posture);
 800cd6c:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cd6e:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cd70:	4b38      	ldr	r3, [pc, #224]	; (800ce54 <_txe_thread_create+0x1cc>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3b01      	subs	r3, #1
 800cd76:	4a37      	ldr	r2, [pc, #220]	; (800ce54 <_txe_thread_create+0x1cc>)
 800cd78:	6013      	str	r3, [r2, #0]
 800cd7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cd7c:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cd7e:	6a3b      	ldr	r3, [r7, #32]
 800cd80:	f383 8810 	msr	PRIMASK, r3
}
 800cd84:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cd86:	f7ff f8a9 	bl	800bedc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800cd8a:	68fa      	ldr	r2, [r7, #12]
 800cd8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cd8e:	429a      	cmp	r2, r3
 800cd90:	d102      	bne.n	800cd98 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800cd92:	230e      	movs	r3, #14
 800cd94:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cd96:	e042      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800cd98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cd9a:	2b00      	cmp	r3, #0
 800cd9c:	d102      	bne.n	800cda4 <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cd9e:	2303      	movs	r3, #3
 800cda0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cda2:	e03c      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800cda4:	687b      	ldr	r3, [r7, #4]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d102      	bne.n	800cdb0 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800cdaa:	2303      	movs	r3, #3
 800cdac:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdae:	e036      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800cdb0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cdb2:	2bc7      	cmp	r3, #199	; 0xc7
 800cdb4:	d802      	bhi.n	800cdbc <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800cdb6:	2305      	movs	r3, #5
 800cdb8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdba:	e030      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800cdbc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdbe:	2b1f      	cmp	r3, #31
 800cdc0:	d902      	bls.n	800cdc8 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800cdc2:	230f      	movs	r3, #15
 800cdc4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdc6:	e02a      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800cdc8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800cdca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d902      	bls.n	800cdd6 <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800cdd0:	2318      	movs	r3, #24
 800cdd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cdd4:	e023      	b.n	800ce1e <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800cdd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d902      	bls.n	800cde2 <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800cddc:	2310      	movs	r3, #16
 800cdde:	64fb      	str	r3, [r7, #76]	; 0x4c
 800cde0:	e01d      	b.n	800ce1e <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800cde2:	4b1f      	ldr	r3, [pc, #124]	; (800ce60 <_txe_thread_create+0x1d8>)
 800cde4:	681b      	ldr	r3, [r3, #0]
 800cde6:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800cde8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cdea:	4a1e      	ldr	r2, [pc, #120]	; (800ce64 <_txe_thread_create+0x1dc>)
 800cdec:	4293      	cmp	r3, r2
 800cdee:	d101      	bne.n	800cdf4 <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cdf0:	2313      	movs	r3, #19
 800cdf2:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cdf4:	f3ef 8305 	mrs	r3, IPSR
 800cdf8:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cdfa:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cdfc:	4b1a      	ldr	r3, [pc, #104]	; (800ce68 <_txe_thread_create+0x1e0>)
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	4313      	orrs	r3, r2
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d00b      	beq.n	800ce1e <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce06:	f3ef 8305 	mrs	r3, IPSR
 800ce0a:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800ce0c:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800ce0e:	4b16      	ldr	r3, [pc, #88]	; (800ce68 <_txe_thread_create+0x1e0>)
 800ce10:	681b      	ldr	r3, [r3, #0]
 800ce12:	4313      	orrs	r3, r2
 800ce14:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800ce18:	d201      	bcs.n	800ce1e <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800ce1a:	2313      	movs	r3, #19
 800ce1c:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800ce1e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d112      	bne.n	800ce4a <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800ce24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ce26:	9305      	str	r3, [sp, #20]
 800ce28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ce2a:	9304      	str	r3, [sp, #16]
 800ce2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ce2e:	9303      	str	r3, [sp, #12]
 800ce30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ce32:	9302      	str	r3, [sp, #8]
 800ce34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce36:	9301      	str	r3, [sp, #4]
 800ce38:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ce3a:	9300      	str	r3, [sp, #0]
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	687a      	ldr	r2, [r7, #4]
 800ce40:	68b9      	ldr	r1, [r7, #8]
 800ce42:	68f8      	ldr	r0, [r7, #12]
 800ce44:	f7fe fe4c 	bl	800bae0 <_tx_thread_create>
 800ce48:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800ce4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3750      	adds	r7, #80	; 0x50
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}
 800ce54:	20005e9c 	.word	0x20005e9c
 800ce58:	20005e0c 	.word	0x20005e0c
 800ce5c:	20005e10 	.word	0x20005e10
 800ce60:	20005e04 	.word	0x20005e04
 800ce64:	20005f4c 	.word	0x20005f4c
 800ce68:	2000000c 	.word	0x2000000c

0800ce6c <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b096      	sub	sp, #88	; 0x58
 800ce70:	af04      	add	r7, sp, #16
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	607a      	str	r2, [r7, #4]
 800ce78:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800ce7e:	68fb      	ldr	r3, [r7, #12]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d102      	bne.n	800ce8a <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800ce84:	2315      	movs	r3, #21
 800ce86:	647b      	str	r3, [r7, #68]	; 0x44
 800ce88:	e059      	b.n	800cf3e <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800ce8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ce8c:	2b2c      	cmp	r3, #44	; 0x2c
 800ce8e:	d002      	beq.n	800ce96 <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800ce90:	2315      	movs	r3, #21
 800ce92:	647b      	str	r3, [r7, #68]	; 0x44
 800ce94:	e053      	b.n	800cf3e <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce96:	f3ef 8310 	mrs	r3, PRIMASK
 800ce9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800ce9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800ce9e:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cea0:	b672      	cpsid	i
    return(int_posture);
 800cea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800cea4:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800cea6:	4b41      	ldr	r3, [pc, #260]	; (800cfac <_txe_timer_create+0x140>)
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3301      	adds	r3, #1
 800ceac:	4a3f      	ldr	r2, [pc, #252]	; (800cfac <_txe_timer_create+0x140>)
 800ceae:	6013      	str	r3, [r2, #0]
 800ceb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ceb2:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ceb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb6:	f383 8810 	msr	PRIMASK, r3
}
 800ceba:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800cebc:	4b3c      	ldr	r3, [pc, #240]	; (800cfb0 <_txe_timer_create+0x144>)
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800cec2:	2300      	movs	r3, #0
 800cec4:	643b      	str	r3, [r7, #64]	; 0x40
 800cec6:	e009      	b.n	800cedc <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800cec8:	68fa      	ldr	r2, [r7, #12]
 800ceca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cecc:	429a      	cmp	r2, r3
 800cece:	d00b      	beq.n	800cee8 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800ced0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ced2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ced4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800ced6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ced8:	3301      	adds	r3, #1
 800ceda:	643b      	str	r3, [r7, #64]	; 0x40
 800cedc:	4b35      	ldr	r3, [pc, #212]	; (800cfb4 <_txe_timer_create+0x148>)
 800cede:	681b      	ldr	r3, [r3, #0]
 800cee0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cee2:	429a      	cmp	r2, r3
 800cee4:	d3f0      	bcc.n	800cec8 <_txe_timer_create+0x5c>
 800cee6:	e000      	b.n	800ceea <_txe_timer_create+0x7e>
                break;
 800cee8:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ceea:	f3ef 8310 	mrs	r3, PRIMASK
 800ceee:	623b      	str	r3, [r7, #32]
    return(posture);
 800cef0:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800cef2:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cef4:	b672      	cpsid	i
    return(int_posture);
 800cef6:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800cef8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800cefa:	4b2c      	ldr	r3, [pc, #176]	; (800cfac <_txe_timer_create+0x140>)
 800cefc:	681b      	ldr	r3, [r3, #0]
 800cefe:	3b01      	subs	r3, #1
 800cf00:	4a2a      	ldr	r2, [pc, #168]	; (800cfac <_txe_timer_create+0x140>)
 800cf02:	6013      	str	r3, [r2, #0]
 800cf04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cf06:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf0a:	f383 8810 	msr	PRIMASK, r3
}
 800cf0e:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800cf10:	f7fe ffe4 	bl	800bedc <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800cf18:	429a      	cmp	r2, r3
 800cf1a:	d102      	bne.n	800cf22 <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800cf1c:	2315      	movs	r3, #21
 800cf1e:	647b      	str	r3, [r7, #68]	; 0x44
 800cf20:	e00d      	b.n	800cf3e <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800cf22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d102      	bne.n	800cf2e <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800cf28:	2316      	movs	r3, #22
 800cf2a:	647b      	str	r3, [r7, #68]	; 0x44
 800cf2c:	e007      	b.n	800cf3e <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800cf2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf30:	2b01      	cmp	r3, #1
 800cf32:	d004      	beq.n	800cf3e <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800cf34:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d001      	beq.n	800cf3e <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800cf3a:	2317      	movs	r3, #23
 800cf3c:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d11d      	bne.n	800cf80 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800cf44:	4b1c      	ldr	r3, [pc, #112]	; (800cfb8 <_txe_timer_create+0x14c>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800cf4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cf4c:	4a1b      	ldr	r2, [pc, #108]	; (800cfbc <_txe_timer_create+0x150>)
 800cf4e:	4293      	cmp	r3, r2
 800cf50:	d101      	bne.n	800cf56 <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800cf52:	2313      	movs	r3, #19
 800cf54:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf56:	f3ef 8305 	mrs	r3, IPSR
 800cf5a:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800cf5c:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cf5e:	4b18      	ldr	r3, [pc, #96]	; (800cfc0 <_txe_timer_create+0x154>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	4313      	orrs	r3, r2
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d00b      	beq.n	800cf80 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf68:	f3ef 8305 	mrs	r3, IPSR
 800cf6c:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800cf6e:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800cf70:	4b13      	ldr	r3, [pc, #76]	; (800cfc0 <_txe_timer_create+0x154>)
 800cf72:	681b      	ldr	r3, [r3, #0]
 800cf74:	4313      	orrs	r3, r2
 800cf76:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cf7a:	d201      	bcs.n	800cf80 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800cf7c:	2313      	movs	r3, #19
 800cf7e:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800cf80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf82:	2b00      	cmp	r3, #0
 800cf84:	d10c      	bne.n	800cfa0 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800cf86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800cf88:	9302      	str	r3, [sp, #8]
 800cf8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cf8c:	9301      	str	r3, [sp, #4]
 800cf8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf90:	9300      	str	r3, [sp, #0]
 800cf92:	683b      	ldr	r3, [r7, #0]
 800cf94:	687a      	ldr	r2, [r7, #4]
 800cf96:	68b9      	ldr	r1, [r7, #8]
 800cf98:	68f8      	ldr	r0, [r7, #12]
 800cf9a:	f7ff fa7f 	bl	800c49c <_tx_timer_create>
 800cf9e:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800cfa0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3748      	adds	r7, #72	; 0x48
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	20005e9c 	.word	0x20005e9c
 800cfb0:	20005f40 	.word	0x20005f40
 800cfb4:	20005f44 	.word	0x20005f44
 800cfb8:	20005e04 	.word	0x20005e04
 800cfbc:	20005f4c 	.word	0x20005f4c
 800cfc0:	2000000c 	.word	0x2000000c

0800cfc4 <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 800cfc4:	b580      	push	{r7, lr}
 800cfc6:	b086      	sub	sp, #24
 800cfc8:	af00      	add	r7, sp, #0
 800cfca:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800cfcc:	2300      	movs	r3, #0
 800cfce:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d102      	bne.n	800cfdc <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800cfd6:	2315      	movs	r3, #21
 800cfd8:	617b      	str	r3, [r7, #20]
 800cfda:	e023      	b.n	800d024 <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800cfdc:	687b      	ldr	r3, [r7, #4]
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	4a13      	ldr	r2, [pc, #76]	; (800d030 <_txe_timer_delete+0x6c>)
 800cfe2:	4293      	cmp	r3, r2
 800cfe4:	d002      	beq.n	800cfec <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800cfe6:	2315      	movs	r3, #21
 800cfe8:	617b      	str	r3, [r7, #20]
 800cfea:	e01b      	b.n	800d024 <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cfec:	f3ef 8305 	mrs	r3, IPSR
 800cff0:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800cff2:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800cff4:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <_txe_timer_delete+0x70>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d002      	beq.n	800d004 <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800cffe:	2313      	movs	r3, #19
 800d000:	617b      	str	r3, [r7, #20]
 800d002:	e00f      	b.n	800d024 <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800d004:	4b0c      	ldr	r3, [pc, #48]	; (800d038 <_txe_timer_delete+0x74>)
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800d00a:	693b      	ldr	r3, [r7, #16]
 800d00c:	4a0b      	ldr	r2, [pc, #44]	; (800d03c <_txe_timer_delete+0x78>)
 800d00e:	4293      	cmp	r3, r2
 800d010:	d101      	bne.n	800d016 <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800d012:	2313      	movs	r3, #19
 800d014:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800d016:	697b      	ldr	r3, [r7, #20]
 800d018:	2b00      	cmp	r3, #0
 800d01a:	d103      	bne.n	800d024 <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 800d01c:	6878      	ldr	r0, [r7, #4]
 800d01e:	f7ff faa1 	bl	800c564 <_tx_timer_delete>
 800d022:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800d024:	697b      	ldr	r3, [r7, #20]
}
 800d026:	4618      	mov	r0, r3
 800d028:	3718      	adds	r7, #24
 800d02a:	46bd      	mov	sp, r7
 800d02c:	bd80      	pop	{r7, pc}
 800d02e:	bf00      	nop
 800d030:	4154494d 	.word	0x4154494d
 800d034:	2000000c 	.word	0x2000000c
 800d038:	20005e04 	.word	0x20005e04
 800d03c:	20005f4c 	.word	0x20005f4c

0800d040 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800d040:	b580      	push	{r7, lr}
 800d042:	b086      	sub	sp, #24
 800d044:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d046:	f3ef 8310 	mrs	r3, PRIMASK
 800d04a:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d04c:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d04e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d050:	b672      	cpsid	i
    return(int_posture);
 800d052:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800d054:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800d056:	463b      	mov	r3, r7
 800d058:	4618      	mov	r0, r3
 800d05a:	f000 f835 	bl	800d0c8 <tx_timer_get_next>
 800d05e:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800d060:	693b      	ldr	r3, [r7, #16]
 800d062:	2b01      	cmp	r3, #1
 800d064:	d103      	bne.n	800d06e <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800d066:	683b      	ldr	r3, [r7, #0]
 800d068:	4618      	mov	r0, r3
 800d06a:	f7f4 ff3f 	bl	8001eec <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800d06e:	4b07      	ldr	r3, [pc, #28]	; (800d08c <tx_low_power_enter+0x4c>)
 800d070:	2201      	movs	r2, #1
 800d072:	601a      	str	r2, [r3, #0]
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f383 8810 	msr	PRIMASK, r3
}
 800d07e:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800d080:	f7f4 ff3e 	bl	8001f00 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800d084:	bf00      	nop
 800d086:	3718      	adds	r7, #24
 800d088:	46bd      	mov	sp, r7
 800d08a:	bd80      	pop	{r7, pc}
 800d08c:	2000640c 	.word	0x2000640c

0800d090 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b082      	sub	sp, #8
 800d094:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800d096:	4b0b      	ldr	r3, [pc, #44]	; (800d0c4 <tx_low_power_exit+0x34>)
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	2b00      	cmp	r3, #0
 800d09c:	d00d      	beq.n	800d0ba <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800d09e:	4b09      	ldr	r3, [pc, #36]	; (800d0c4 <tx_low_power_exit+0x34>)
 800d0a0:	2200      	movs	r2, #0
 800d0a2:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800d0a4:	f7f4 ff33 	bl	8001f0e <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800d0a8:	f7f4 ff38 	bl	8001f1c <App_ThreadX_LowPower_Timer_Adjust>
 800d0ac:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d002      	beq.n	800d0ba <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800d0b4:	6878      	ldr	r0, [r7, #4]
 800d0b6:	f000 f86f 	bl	800d198 <tx_time_increment>
        }
    }
}
 800d0ba:	bf00      	nop
 800d0bc:	3708      	adds	r7, #8
 800d0be:	46bd      	mov	sp, r7
 800d0c0:	bd80      	pop	{r7, pc}
 800d0c2:	bf00      	nop
 800d0c4:	2000640c 	.word	0x2000640c

0800d0c8 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800d0c8:	b480      	push	{r7}
 800d0ca:	b08d      	sub	sp, #52	; 0x34
 800d0cc:	af00      	add	r7, sp, #0
 800d0ce:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800d0d0:	f04f 33ff 	mov.w	r3, #4294967295
 800d0d4:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d0d6:	f3ef 8310 	mrs	r3, PRIMASK
 800d0da:	617b      	str	r3, [r7, #20]
    return(posture);
 800d0dc:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d0de:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d0e0:	b672      	cpsid	i
    return(int_posture);
 800d0e2:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800d0e4:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800d0e6:	4b29      	ldr	r3, [pc, #164]	; (800d18c <tx_timer_get_next+0xc4>)
 800d0e8:	681b      	ldr	r3, [r3, #0]
 800d0ea:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800d0ec:	2300      	movs	r3, #0
 800d0ee:	627b      	str	r3, [r7, #36]	; 0x24
 800d0f0:	e02f      	b.n	800d152 <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800d0f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d01d      	beq.n	800d136 <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800d0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d102:	681b      	ldr	r3, [r3, #0]
 800d104:	2b20      	cmp	r3, #32
 800d106:	d906      	bls.n	800d116 <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800d108:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d10a:	681a      	ldr	r2, [r3, #0]
 800d10c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d10e:	4413      	add	r3, r2
 800d110:	3b20      	subs	r3, #32
 800d112:	623b      	str	r3, [r7, #32]
 800d114:	e001      	b.n	800d11a <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800d116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d118:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800d11a:	69fa      	ldr	r2, [r7, #28]
 800d11c:	6a3b      	ldr	r3, [r7, #32]
 800d11e:	429a      	cmp	r2, r3
 800d120:	d901      	bls.n	800d126 <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800d122:	6a3b      	ldr	r3, [r7, #32]
 800d124:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800d126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d128:	691b      	ldr	r3, [r3, #16]
 800d12a:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800d12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d132:	429a      	cmp	r2, r3
 800d134:	d1e4      	bne.n	800d100 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800d136:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d138:	3304      	adds	r3, #4
 800d13a:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800d13c:	4b14      	ldr	r3, [pc, #80]	; (800d190 <tx_timer_get_next+0xc8>)
 800d13e:	681b      	ldr	r3, [r3, #0]
 800d140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d142:	429a      	cmp	r2, r3
 800d144:	d302      	bcc.n	800d14c <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800d146:	4b13      	ldr	r3, [pc, #76]	; (800d194 <tx_timer_get_next+0xcc>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800d14c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d14e:	3301      	adds	r3, #1
 800d150:	627b      	str	r3, [r7, #36]	; 0x24
 800d152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d154:	2b1f      	cmp	r3, #31
 800d156:	d9cc      	bls.n	800d0f2 <tx_timer_get_next+0x2a>
 800d158:	69bb      	ldr	r3, [r7, #24]
 800d15a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	f383 8810 	msr	PRIMASK, r3
}
 800d162:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800d164:	69fb      	ldr	r3, [r7, #28]
 800d166:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d16a:	d004      	beq.n	800d176 <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	69fa      	ldr	r2, [r7, #28]
 800d170:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800d172:	2301      	movs	r3, #1
 800d174:	e003      	b.n	800d17e <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	2200      	movs	r2, #0
 800d17a:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800d17c:	2300      	movs	r3, #0
    }
}
 800d17e:	4618      	mov	r0, r3
 800d180:	3734      	adds	r7, #52	; 0x34
 800d182:	46bd      	mov	sp, r7
 800d184:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d188:	4770      	bx	lr
 800d18a:	bf00      	nop
 800d18c:	20005f38 	.word	0x20005f38
 800d190:	20005f34 	.word	0x20005f34
 800d194:	20005f30 	.word	0x20005f30

0800d198 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800d198:	b580      	push	{r7, lr}
 800d19a:	b08a      	sub	sp, #40	; 0x28
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	f000 809b 	beq.w	800d2de <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d1a8:	f3ef 8310 	mrs	r3, PRIMASK
 800d1ac:	613b      	str	r3, [r7, #16]
    return(posture);
 800d1ae:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d1b0:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d1b2:	b672      	cpsid	i
    return(int_posture);
 800d1b4:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800d1b6:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800d1b8:	4b4b      	ldr	r3, [pc, #300]	; (800d2e8 <tx_time_increment+0x150>)
 800d1ba:	681a      	ldr	r2, [r3, #0]
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	4413      	add	r3, r2
 800d1c0:	4a49      	ldr	r2, [pc, #292]	; (800d2e8 <tx_time_increment+0x150>)
 800d1c2:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800d1c4:	4b49      	ldr	r3, [pc, #292]	; (800d2ec <tx_time_increment+0x154>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d00e      	beq.n	800d1ea <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800d1cc:	4b47      	ldr	r3, [pc, #284]	; (800d2ec <tx_time_increment+0x154>)
 800d1ce:	681b      	ldr	r3, [r3, #0]
 800d1d0:	687a      	ldr	r2, [r7, #4]
 800d1d2:	429a      	cmp	r2, r3
 800d1d4:	d206      	bcs.n	800d1e4 <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800d1d6:	4b45      	ldr	r3, [pc, #276]	; (800d2ec <tx_time_increment+0x154>)
 800d1d8:	681a      	ldr	r2, [r3, #0]
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	1ad3      	subs	r3, r2, r3
 800d1de:	4a43      	ldr	r2, [pc, #268]	; (800d2ec <tx_time_increment+0x154>)
 800d1e0:	6013      	str	r3, [r2, #0]
 800d1e2:	e002      	b.n	800d1ea <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800d1e4:	4b41      	ldr	r3, [pc, #260]	; (800d2ec <tx_time_increment+0x154>)
 800d1e6:	2201      	movs	r2, #1
 800d1e8:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800d1ea:	4b41      	ldr	r3, [pc, #260]	; (800d2f0 <tx_time_increment+0x158>)
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800d1f0:	2300      	movs	r3, #0
 800d1f2:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	627b      	str	r3, [r7, #36]	; 0x24
 800d1f8:	e046      	b.n	800d288 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800d1fa:	6a3b      	ldr	r3, [r7, #32]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	d034      	beq.n	800d26c <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800d202:	6a3b      	ldr	r3, [r7, #32]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d208:	69fb      	ldr	r3, [r7, #28]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	2b20      	cmp	r3, #32
 800d20e:	d908      	bls.n	800d222 <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800d210:	69fb      	ldr	r3, [r7, #28]
 800d212:	681a      	ldr	r2, [r3, #0]
 800d214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d216:	4413      	add	r3, r2
 800d218:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800d21c:	69fb      	ldr	r3, [r7, #28]
 800d21e:	601a      	str	r2, [r3, #0]
 800d220:	e003      	b.n	800d22a <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800d222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d224:	1c5a      	adds	r2, r3, #1
 800d226:	69fb      	ldr	r3, [r7, #28]
 800d228:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800d22a:	69fb      	ldr	r3, [r7, #28]
 800d22c:	691b      	ldr	r3, [r3, #16]
 800d22e:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800d230:	6a3b      	ldr	r3, [r7, #32]
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	69fa      	ldr	r2, [r7, #28]
 800d236:	429a      	cmp	r2, r3
 800d238:	d1e6      	bne.n	800d208 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800d23a:	6a3b      	ldr	r3, [r7, #32]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	695b      	ldr	r3, [r3, #20]
 800d240:	2200      	movs	r2, #0
 800d242:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800d244:	69bb      	ldr	r3, [r7, #24]
 800d246:	2b00      	cmp	r3, #0
 800d248:	d103      	bne.n	800d252 <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800d24a:	6a3b      	ldr	r3, [r7, #32]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	61bb      	str	r3, [r7, #24]
 800d250:	e009      	b.n	800d266 <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800d252:	69bb      	ldr	r3, [r7, #24]
 800d254:	695b      	ldr	r3, [r3, #20]
 800d256:	6a3a      	ldr	r2, [r7, #32]
 800d258:	6812      	ldr	r2, [r2, #0]
 800d25a:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800d25c:	6a3b      	ldr	r3, [r7, #32]
 800d25e:	681b      	ldr	r3, [r3, #0]
 800d260:	695a      	ldr	r2, [r3, #20]
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800d266:	6a3b      	ldr	r3, [r7, #32]
 800d268:	2200      	movs	r2, #0
 800d26a:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800d26c:	6a3b      	ldr	r3, [r7, #32]
 800d26e:	3304      	adds	r3, #4
 800d270:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800d272:	4b20      	ldr	r3, [pc, #128]	; (800d2f4 <tx_time_increment+0x15c>)
 800d274:	681b      	ldr	r3, [r3, #0]
 800d276:	6a3a      	ldr	r2, [r7, #32]
 800d278:	429a      	cmp	r2, r3
 800d27a:	d302      	bcc.n	800d282 <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800d27c:	4b1e      	ldr	r3, [pc, #120]	; (800d2f8 <tx_time_increment+0x160>)
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800d282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d284:	3301      	adds	r3, #1
 800d286:	627b      	str	r3, [r7, #36]	; 0x24
 800d288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d28a:	2b1f      	cmp	r3, #31
 800d28c:	d9b5      	bls.n	800d1fa <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800d28e:	4b1a      	ldr	r3, [pc, #104]	; (800d2f8 <tx_time_increment+0x160>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4a17      	ldr	r2, [pc, #92]	; (800d2f0 <tx_time_increment+0x158>)
 800d294:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800d296:	e019      	b.n	800d2cc <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800d298:	69bb      	ldr	r3, [r7, #24]
 800d29a:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800d29c:	69fb      	ldr	r3, [r7, #28]
 800d29e:	691b      	ldr	r3, [r3, #16]
 800d2a0:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800d2a2:	69fb      	ldr	r3, [r7, #28]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	687a      	ldr	r2, [r7, #4]
 800d2a8:	429a      	cmp	r2, r3
 800d2aa:	d206      	bcs.n	800d2ba <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800d2ac:	69fb      	ldr	r3, [r7, #28]
 800d2ae:	681a      	ldr	r2, [r3, #0]
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	1ad2      	subs	r2, r2, r3
 800d2b4:	69fb      	ldr	r3, [r7, #28]
 800d2b6:	601a      	str	r2, [r3, #0]
 800d2b8:	e002      	b.n	800d2c0 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800d2ba:	69fb      	ldr	r3, [r7, #28]
 800d2bc:	2201      	movs	r2, #1
 800d2be:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800d2c0:	69fb      	ldr	r3, [r7, #28]
 800d2c2:	2200      	movs	r2, #0
 800d2c4:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800d2c6:	69f8      	ldr	r0, [r7, #28]
 800d2c8:	f7ff fa32 	bl	800c730 <_tx_timer_system_activate>
    while (temp_list_head)
 800d2cc:	69bb      	ldr	r3, [r7, #24]
 800d2ce:	2b00      	cmp	r3, #0
 800d2d0:	d1e2      	bne.n	800d298 <tx_time_increment+0x100>
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2d6:	68bb      	ldr	r3, [r7, #8]
 800d2d8:	f383 8810 	msr	PRIMASK, r3
}
 800d2dc:	e000      	b.n	800d2e0 <tx_time_increment+0x148>
        return;
 800d2de:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800d2e0:	3728      	adds	r7, #40	; 0x28
 800d2e2:	46bd      	mov	sp, r7
 800d2e4:	bd80      	pop	{r7, pc}
 800d2e6:	bf00      	nop
 800d2e8:	20005ea8 	.word	0x20005ea8
 800d2ec:	20006408 	.word	0x20006408
 800d2f0:	20005f38 	.word	0x20005f38
 800d2f4:	20005f34 	.word	0x20005f34
 800d2f8:	20005f30 	.word	0x20005f30

0800d2fc <__errno>:
 800d2fc:	4b01      	ldr	r3, [pc, #4]	; (800d304 <__errno+0x8>)
 800d2fe:	6818      	ldr	r0, [r3, #0]
 800d300:	4770      	bx	lr
 800d302:	bf00      	nop
 800d304:	20000010 	.word	0x20000010

0800d308 <__libc_init_array>:
 800d308:	b570      	push	{r4, r5, r6, lr}
 800d30a:	4d0d      	ldr	r5, [pc, #52]	; (800d340 <__libc_init_array+0x38>)
 800d30c:	2600      	movs	r6, #0
 800d30e:	4c0d      	ldr	r4, [pc, #52]	; (800d344 <__libc_init_array+0x3c>)
 800d310:	1b64      	subs	r4, r4, r5
 800d312:	10a4      	asrs	r4, r4, #2
 800d314:	42a6      	cmp	r6, r4
 800d316:	d109      	bne.n	800d32c <__libc_init_array+0x24>
 800d318:	4d0b      	ldr	r5, [pc, #44]	; (800d348 <__libc_init_array+0x40>)
 800d31a:	2600      	movs	r6, #0
 800d31c:	4c0b      	ldr	r4, [pc, #44]	; (800d34c <__libc_init_array+0x44>)
 800d31e:	f002 fad9 	bl	800f8d4 <_init>
 800d322:	1b64      	subs	r4, r4, r5
 800d324:	10a4      	asrs	r4, r4, #2
 800d326:	42a6      	cmp	r6, r4
 800d328:	d105      	bne.n	800d336 <__libc_init_array+0x2e>
 800d32a:	bd70      	pop	{r4, r5, r6, pc}
 800d32c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d330:	3601      	adds	r6, #1
 800d332:	4798      	blx	r3
 800d334:	e7ee      	b.n	800d314 <__libc_init_array+0xc>
 800d336:	f855 3b04 	ldr.w	r3, [r5], #4
 800d33a:	3601      	adds	r6, #1
 800d33c:	4798      	blx	r3
 800d33e:	e7f2      	b.n	800d326 <__libc_init_array+0x1e>
 800d340:	0800fe90 	.word	0x0800fe90
 800d344:	0800fe90 	.word	0x0800fe90
 800d348:	0800fe90 	.word	0x0800fe90
 800d34c:	0800fe94 	.word	0x0800fe94

0800d350 <memcpy>:
 800d350:	440a      	add	r2, r1
 800d352:	1e43      	subs	r3, r0, #1
 800d354:	4291      	cmp	r1, r2
 800d356:	d100      	bne.n	800d35a <memcpy+0xa>
 800d358:	4770      	bx	lr
 800d35a:	b510      	push	{r4, lr}
 800d35c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d360:	4291      	cmp	r1, r2
 800d362:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d366:	d1f9      	bne.n	800d35c <memcpy+0xc>
 800d368:	bd10      	pop	{r4, pc}

0800d36a <memset>:
 800d36a:	4402      	add	r2, r0
 800d36c:	4603      	mov	r3, r0
 800d36e:	4293      	cmp	r3, r2
 800d370:	d100      	bne.n	800d374 <memset+0xa>
 800d372:	4770      	bx	lr
 800d374:	f803 1b01 	strb.w	r1, [r3], #1
 800d378:	e7f9      	b.n	800d36e <memset+0x4>
	...

0800d37c <rand>:
 800d37c:	4b16      	ldr	r3, [pc, #88]	; (800d3d8 <rand+0x5c>)
 800d37e:	b510      	push	{r4, lr}
 800d380:	681c      	ldr	r4, [r3, #0]
 800d382:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d384:	b9b3      	cbnz	r3, 800d3b4 <rand+0x38>
 800d386:	2018      	movs	r0, #24
 800d388:	f000 f8ce 	bl	800d528 <malloc>
 800d38c:	63a0      	str	r0, [r4, #56]	; 0x38
 800d38e:	b928      	cbnz	r0, 800d39c <rand+0x20>
 800d390:	4602      	mov	r2, r0
 800d392:	4b12      	ldr	r3, [pc, #72]	; (800d3dc <rand+0x60>)
 800d394:	214e      	movs	r1, #78	; 0x4e
 800d396:	4812      	ldr	r0, [pc, #72]	; (800d3e0 <rand+0x64>)
 800d398:	f000 f896 	bl	800d4c8 <__assert_func>
 800d39c:	4a11      	ldr	r2, [pc, #68]	; (800d3e4 <rand+0x68>)
 800d39e:	4b12      	ldr	r3, [pc, #72]	; (800d3e8 <rand+0x6c>)
 800d3a0:	e9c0 2300 	strd	r2, r3, [r0]
 800d3a4:	4b11      	ldr	r3, [pc, #68]	; (800d3ec <rand+0x70>)
 800d3a6:	2201      	movs	r2, #1
 800d3a8:	6083      	str	r3, [r0, #8]
 800d3aa:	230b      	movs	r3, #11
 800d3ac:	8183      	strh	r3, [r0, #12]
 800d3ae:	2300      	movs	r3, #0
 800d3b0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800d3b4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800d3b6:	4a0e      	ldr	r2, [pc, #56]	; (800d3f0 <rand+0x74>)
 800d3b8:	6920      	ldr	r0, [r4, #16]
 800d3ba:	6963      	ldr	r3, [r4, #20]
 800d3bc:	490d      	ldr	r1, [pc, #52]	; (800d3f4 <rand+0x78>)
 800d3be:	4342      	muls	r2, r0
 800d3c0:	fb01 2203 	mla	r2, r1, r3, r2
 800d3c4:	fba0 0101 	umull	r0, r1, r0, r1
 800d3c8:	1c43      	adds	r3, r0, #1
 800d3ca:	eb42 0001 	adc.w	r0, r2, r1
 800d3ce:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800d3d2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800d3d6:	bd10      	pop	{r4, pc}
 800d3d8:	20000010 	.word	0x20000010
 800d3dc:	0800fb68 	.word	0x0800fb68
 800d3e0:	0800fb7f 	.word	0x0800fb7f
 800d3e4:	abcd330e 	.word	0xabcd330e
 800d3e8:	e66d1234 	.word	0xe66d1234
 800d3ec:	0005deec 	.word	0x0005deec
 800d3f0:	5851f42d 	.word	0x5851f42d
 800d3f4:	4c957f2d 	.word	0x4c957f2d

0800d3f8 <sniprintf>:
 800d3f8:	b40c      	push	{r2, r3}
 800d3fa:	4b18      	ldr	r3, [pc, #96]	; (800d45c <sniprintf+0x64>)
 800d3fc:	b530      	push	{r4, r5, lr}
 800d3fe:	1e0c      	subs	r4, r1, #0
 800d400:	b09d      	sub	sp, #116	; 0x74
 800d402:	681d      	ldr	r5, [r3, #0]
 800d404:	da08      	bge.n	800d418 <sniprintf+0x20>
 800d406:	238b      	movs	r3, #139	; 0x8b
 800d408:	f04f 30ff 	mov.w	r0, #4294967295
 800d40c:	602b      	str	r3, [r5, #0]
 800d40e:	b01d      	add	sp, #116	; 0x74
 800d410:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d414:	b002      	add	sp, #8
 800d416:	4770      	bx	lr
 800d418:	f44f 7302 	mov.w	r3, #520	; 0x208
 800d41c:	9002      	str	r0, [sp, #8]
 800d41e:	9006      	str	r0, [sp, #24]
 800d420:	a902      	add	r1, sp, #8
 800d422:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d426:	bf14      	ite	ne
 800d428:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d42c:	4623      	moveq	r3, r4
 800d42e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800d430:	4628      	mov	r0, r5
 800d432:	9304      	str	r3, [sp, #16]
 800d434:	9307      	str	r3, [sp, #28]
 800d436:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800d43a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d43e:	ab21      	add	r3, sp, #132	; 0x84
 800d440:	9301      	str	r3, [sp, #4]
 800d442:	f000 f9b5 	bl	800d7b0 <_svfiprintf_r>
 800d446:	1c43      	adds	r3, r0, #1
 800d448:	bfbc      	itt	lt
 800d44a:	238b      	movlt	r3, #139	; 0x8b
 800d44c:	602b      	strlt	r3, [r5, #0]
 800d44e:	2c00      	cmp	r4, #0
 800d450:	d0dd      	beq.n	800d40e <sniprintf+0x16>
 800d452:	9b02      	ldr	r3, [sp, #8]
 800d454:	2200      	movs	r2, #0
 800d456:	701a      	strb	r2, [r3, #0]
 800d458:	e7d9      	b.n	800d40e <sniprintf+0x16>
 800d45a:	bf00      	nop
 800d45c:	20000010 	.word	0x20000010

0800d460 <siprintf>:
 800d460:	b40e      	push	{r1, r2, r3}
 800d462:	b500      	push	{lr}
 800d464:	b09c      	sub	sp, #112	; 0x70
 800d466:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800d46a:	ab1d      	add	r3, sp, #116	; 0x74
 800d46c:	9002      	str	r0, [sp, #8]
 800d46e:	9006      	str	r0, [sp, #24]
 800d470:	9107      	str	r1, [sp, #28]
 800d472:	9104      	str	r1, [sp, #16]
 800d474:	4808      	ldr	r0, [pc, #32]	; (800d498 <siprintf+0x38>)
 800d476:	4909      	ldr	r1, [pc, #36]	; (800d49c <siprintf+0x3c>)
 800d478:	f853 2b04 	ldr.w	r2, [r3], #4
 800d47c:	9105      	str	r1, [sp, #20]
 800d47e:	a902      	add	r1, sp, #8
 800d480:	6800      	ldr	r0, [r0, #0]
 800d482:	9301      	str	r3, [sp, #4]
 800d484:	f000 f994 	bl	800d7b0 <_svfiprintf_r>
 800d488:	9b02      	ldr	r3, [sp, #8]
 800d48a:	2200      	movs	r2, #0
 800d48c:	701a      	strb	r2, [r3, #0]
 800d48e:	b01c      	add	sp, #112	; 0x70
 800d490:	f85d eb04 	ldr.w	lr, [sp], #4
 800d494:	b003      	add	sp, #12
 800d496:	4770      	bx	lr
 800d498:	20000010 	.word	0x20000010
 800d49c:	ffff0208 	.word	0xffff0208

0800d4a0 <strncmp>:
 800d4a0:	b510      	push	{r4, lr}
 800d4a2:	b17a      	cbz	r2, 800d4c4 <strncmp+0x24>
 800d4a4:	4603      	mov	r3, r0
 800d4a6:	3901      	subs	r1, #1
 800d4a8:	1884      	adds	r4, r0, r2
 800d4aa:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d4ae:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d4b2:	4290      	cmp	r0, r2
 800d4b4:	d101      	bne.n	800d4ba <strncmp+0x1a>
 800d4b6:	42a3      	cmp	r3, r4
 800d4b8:	d101      	bne.n	800d4be <strncmp+0x1e>
 800d4ba:	1a80      	subs	r0, r0, r2
 800d4bc:	bd10      	pop	{r4, pc}
 800d4be:	2800      	cmp	r0, #0
 800d4c0:	d1f3      	bne.n	800d4aa <strncmp+0xa>
 800d4c2:	e7fa      	b.n	800d4ba <strncmp+0x1a>
 800d4c4:	4610      	mov	r0, r2
 800d4c6:	e7f9      	b.n	800d4bc <strncmp+0x1c>

0800d4c8 <__assert_func>:
 800d4c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d4ca:	4614      	mov	r4, r2
 800d4cc:	461a      	mov	r2, r3
 800d4ce:	4b09      	ldr	r3, [pc, #36]	; (800d4f4 <__assert_func+0x2c>)
 800d4d0:	4605      	mov	r5, r0
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	68d8      	ldr	r0, [r3, #12]
 800d4d6:	b14c      	cbz	r4, 800d4ec <__assert_func+0x24>
 800d4d8:	4b07      	ldr	r3, [pc, #28]	; (800d4f8 <__assert_func+0x30>)
 800d4da:	9100      	str	r1, [sp, #0]
 800d4dc:	4907      	ldr	r1, [pc, #28]	; (800d4fc <__assert_func+0x34>)
 800d4de:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d4e2:	462b      	mov	r3, r5
 800d4e4:	f000 f80e 	bl	800d504 <fiprintf>
 800d4e8:	f000 fe22 	bl	800e130 <abort>
 800d4ec:	4b04      	ldr	r3, [pc, #16]	; (800d500 <__assert_func+0x38>)
 800d4ee:	461c      	mov	r4, r3
 800d4f0:	e7f3      	b.n	800d4da <__assert_func+0x12>
 800d4f2:	bf00      	nop
 800d4f4:	20000010 	.word	0x20000010
 800d4f8:	0800fbda 	.word	0x0800fbda
 800d4fc:	0800fbe7 	.word	0x0800fbe7
 800d500:	0800fc15 	.word	0x0800fc15

0800d504 <fiprintf>:
 800d504:	b40e      	push	{r1, r2, r3}
 800d506:	b503      	push	{r0, r1, lr}
 800d508:	ab03      	add	r3, sp, #12
 800d50a:	4601      	mov	r1, r0
 800d50c:	4805      	ldr	r0, [pc, #20]	; (800d524 <fiprintf+0x20>)
 800d50e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d512:	6800      	ldr	r0, [r0, #0]
 800d514:	9301      	str	r3, [sp, #4]
 800d516:	f000 fa75 	bl	800da04 <_vfiprintf_r>
 800d51a:	b002      	add	sp, #8
 800d51c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d520:	b003      	add	sp, #12
 800d522:	4770      	bx	lr
 800d524:	20000010 	.word	0x20000010

0800d528 <malloc>:
 800d528:	4b02      	ldr	r3, [pc, #8]	; (800d534 <malloc+0xc>)
 800d52a:	4601      	mov	r1, r0
 800d52c:	6818      	ldr	r0, [r3, #0]
 800d52e:	f000 b86f 	b.w	800d610 <_malloc_r>
 800d532:	bf00      	nop
 800d534:	20000010 	.word	0x20000010

0800d538 <_free_r>:
 800d538:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d53a:	2900      	cmp	r1, #0
 800d53c:	d043      	beq.n	800d5c6 <_free_r+0x8e>
 800d53e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d542:	1f0c      	subs	r4, r1, #4
 800d544:	9001      	str	r0, [sp, #4]
 800d546:	2b00      	cmp	r3, #0
 800d548:	bfb8      	it	lt
 800d54a:	18e4      	addlt	r4, r4, r3
 800d54c:	f001 f83e 	bl	800e5cc <__malloc_lock>
 800d550:	4a1e      	ldr	r2, [pc, #120]	; (800d5cc <_free_r+0x94>)
 800d552:	9801      	ldr	r0, [sp, #4]
 800d554:	6813      	ldr	r3, [r2, #0]
 800d556:	b933      	cbnz	r3, 800d566 <_free_r+0x2e>
 800d558:	6063      	str	r3, [r4, #4]
 800d55a:	6014      	str	r4, [r2, #0]
 800d55c:	b003      	add	sp, #12
 800d55e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d562:	f001 b839 	b.w	800e5d8 <__malloc_unlock>
 800d566:	42a3      	cmp	r3, r4
 800d568:	d908      	bls.n	800d57c <_free_r+0x44>
 800d56a:	6825      	ldr	r5, [r4, #0]
 800d56c:	1961      	adds	r1, r4, r5
 800d56e:	428b      	cmp	r3, r1
 800d570:	bf01      	itttt	eq
 800d572:	6819      	ldreq	r1, [r3, #0]
 800d574:	685b      	ldreq	r3, [r3, #4]
 800d576:	1949      	addeq	r1, r1, r5
 800d578:	6021      	streq	r1, [r4, #0]
 800d57a:	e7ed      	b.n	800d558 <_free_r+0x20>
 800d57c:	461a      	mov	r2, r3
 800d57e:	685b      	ldr	r3, [r3, #4]
 800d580:	b10b      	cbz	r3, 800d586 <_free_r+0x4e>
 800d582:	42a3      	cmp	r3, r4
 800d584:	d9fa      	bls.n	800d57c <_free_r+0x44>
 800d586:	6811      	ldr	r1, [r2, #0]
 800d588:	1855      	adds	r5, r2, r1
 800d58a:	42a5      	cmp	r5, r4
 800d58c:	d10b      	bne.n	800d5a6 <_free_r+0x6e>
 800d58e:	6824      	ldr	r4, [r4, #0]
 800d590:	4421      	add	r1, r4
 800d592:	1854      	adds	r4, r2, r1
 800d594:	6011      	str	r1, [r2, #0]
 800d596:	42a3      	cmp	r3, r4
 800d598:	d1e0      	bne.n	800d55c <_free_r+0x24>
 800d59a:	681c      	ldr	r4, [r3, #0]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	4421      	add	r1, r4
 800d5a0:	6053      	str	r3, [r2, #4]
 800d5a2:	6011      	str	r1, [r2, #0]
 800d5a4:	e7da      	b.n	800d55c <_free_r+0x24>
 800d5a6:	d902      	bls.n	800d5ae <_free_r+0x76>
 800d5a8:	230c      	movs	r3, #12
 800d5aa:	6003      	str	r3, [r0, #0]
 800d5ac:	e7d6      	b.n	800d55c <_free_r+0x24>
 800d5ae:	6825      	ldr	r5, [r4, #0]
 800d5b0:	1961      	adds	r1, r4, r5
 800d5b2:	428b      	cmp	r3, r1
 800d5b4:	bf02      	ittt	eq
 800d5b6:	6819      	ldreq	r1, [r3, #0]
 800d5b8:	685b      	ldreq	r3, [r3, #4]
 800d5ba:	1949      	addeq	r1, r1, r5
 800d5bc:	6063      	str	r3, [r4, #4]
 800d5be:	bf08      	it	eq
 800d5c0:	6021      	streq	r1, [r4, #0]
 800d5c2:	6054      	str	r4, [r2, #4]
 800d5c4:	e7ca      	b.n	800d55c <_free_r+0x24>
 800d5c6:	b003      	add	sp, #12
 800d5c8:	bd30      	pop	{r4, r5, pc}
 800d5ca:	bf00      	nop
 800d5cc:	20006410 	.word	0x20006410

0800d5d0 <sbrk_aligned>:
 800d5d0:	b570      	push	{r4, r5, r6, lr}
 800d5d2:	4e0e      	ldr	r6, [pc, #56]	; (800d60c <sbrk_aligned+0x3c>)
 800d5d4:	460c      	mov	r4, r1
 800d5d6:	4605      	mov	r5, r0
 800d5d8:	6831      	ldr	r1, [r6, #0]
 800d5da:	b911      	cbnz	r1, 800d5e2 <sbrk_aligned+0x12>
 800d5dc:	f000 fcd8 	bl	800df90 <_sbrk_r>
 800d5e0:	6030      	str	r0, [r6, #0]
 800d5e2:	4621      	mov	r1, r4
 800d5e4:	4628      	mov	r0, r5
 800d5e6:	f000 fcd3 	bl	800df90 <_sbrk_r>
 800d5ea:	1c43      	adds	r3, r0, #1
 800d5ec:	d00a      	beq.n	800d604 <sbrk_aligned+0x34>
 800d5ee:	1cc4      	adds	r4, r0, #3
 800d5f0:	f024 0403 	bic.w	r4, r4, #3
 800d5f4:	42a0      	cmp	r0, r4
 800d5f6:	d007      	beq.n	800d608 <sbrk_aligned+0x38>
 800d5f8:	1a21      	subs	r1, r4, r0
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	f000 fcc8 	bl	800df90 <_sbrk_r>
 800d600:	3001      	adds	r0, #1
 800d602:	d101      	bne.n	800d608 <sbrk_aligned+0x38>
 800d604:	f04f 34ff 	mov.w	r4, #4294967295
 800d608:	4620      	mov	r0, r4
 800d60a:	bd70      	pop	{r4, r5, r6, pc}
 800d60c:	20006414 	.word	0x20006414

0800d610 <_malloc_r>:
 800d610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d614:	1ccd      	adds	r5, r1, #3
 800d616:	4607      	mov	r7, r0
 800d618:	f025 0503 	bic.w	r5, r5, #3
 800d61c:	3508      	adds	r5, #8
 800d61e:	2d0c      	cmp	r5, #12
 800d620:	bf38      	it	cc
 800d622:	250c      	movcc	r5, #12
 800d624:	2d00      	cmp	r5, #0
 800d626:	db01      	blt.n	800d62c <_malloc_r+0x1c>
 800d628:	42a9      	cmp	r1, r5
 800d62a:	d905      	bls.n	800d638 <_malloc_r+0x28>
 800d62c:	230c      	movs	r3, #12
 800d62e:	2600      	movs	r6, #0
 800d630:	603b      	str	r3, [r7, #0]
 800d632:	4630      	mov	r0, r6
 800d634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d638:	4e2e      	ldr	r6, [pc, #184]	; (800d6f4 <_malloc_r+0xe4>)
 800d63a:	f000 ffc7 	bl	800e5cc <__malloc_lock>
 800d63e:	6833      	ldr	r3, [r6, #0]
 800d640:	461c      	mov	r4, r3
 800d642:	bb34      	cbnz	r4, 800d692 <_malloc_r+0x82>
 800d644:	4629      	mov	r1, r5
 800d646:	4638      	mov	r0, r7
 800d648:	f7ff ffc2 	bl	800d5d0 <sbrk_aligned>
 800d64c:	1c43      	adds	r3, r0, #1
 800d64e:	4604      	mov	r4, r0
 800d650:	d14d      	bne.n	800d6ee <_malloc_r+0xde>
 800d652:	6834      	ldr	r4, [r6, #0]
 800d654:	4626      	mov	r6, r4
 800d656:	2e00      	cmp	r6, #0
 800d658:	d140      	bne.n	800d6dc <_malloc_r+0xcc>
 800d65a:	6823      	ldr	r3, [r4, #0]
 800d65c:	4631      	mov	r1, r6
 800d65e:	4638      	mov	r0, r7
 800d660:	eb04 0803 	add.w	r8, r4, r3
 800d664:	f000 fc94 	bl	800df90 <_sbrk_r>
 800d668:	4580      	cmp	r8, r0
 800d66a:	d13a      	bne.n	800d6e2 <_malloc_r+0xd2>
 800d66c:	6821      	ldr	r1, [r4, #0]
 800d66e:	3503      	adds	r5, #3
 800d670:	4638      	mov	r0, r7
 800d672:	1a6d      	subs	r5, r5, r1
 800d674:	f025 0503 	bic.w	r5, r5, #3
 800d678:	3508      	adds	r5, #8
 800d67a:	2d0c      	cmp	r5, #12
 800d67c:	bf38      	it	cc
 800d67e:	250c      	movcc	r5, #12
 800d680:	4629      	mov	r1, r5
 800d682:	f7ff ffa5 	bl	800d5d0 <sbrk_aligned>
 800d686:	3001      	adds	r0, #1
 800d688:	d02b      	beq.n	800d6e2 <_malloc_r+0xd2>
 800d68a:	6823      	ldr	r3, [r4, #0]
 800d68c:	442b      	add	r3, r5
 800d68e:	6023      	str	r3, [r4, #0]
 800d690:	e00e      	b.n	800d6b0 <_malloc_r+0xa0>
 800d692:	6822      	ldr	r2, [r4, #0]
 800d694:	1b52      	subs	r2, r2, r5
 800d696:	d41e      	bmi.n	800d6d6 <_malloc_r+0xc6>
 800d698:	2a0b      	cmp	r2, #11
 800d69a:	d916      	bls.n	800d6ca <_malloc_r+0xba>
 800d69c:	1961      	adds	r1, r4, r5
 800d69e:	42a3      	cmp	r3, r4
 800d6a0:	6025      	str	r5, [r4, #0]
 800d6a2:	bf18      	it	ne
 800d6a4:	6059      	strne	r1, [r3, #4]
 800d6a6:	6863      	ldr	r3, [r4, #4]
 800d6a8:	bf08      	it	eq
 800d6aa:	6031      	streq	r1, [r6, #0]
 800d6ac:	5162      	str	r2, [r4, r5]
 800d6ae:	604b      	str	r3, [r1, #4]
 800d6b0:	f104 060b 	add.w	r6, r4, #11
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f000 ff8f 	bl	800e5d8 <__malloc_unlock>
 800d6ba:	1d23      	adds	r3, r4, #4
 800d6bc:	f026 0607 	bic.w	r6, r6, #7
 800d6c0:	1af2      	subs	r2, r6, r3
 800d6c2:	d0b6      	beq.n	800d632 <_malloc_r+0x22>
 800d6c4:	1b9b      	subs	r3, r3, r6
 800d6c6:	50a3      	str	r3, [r4, r2]
 800d6c8:	e7b3      	b.n	800d632 <_malloc_r+0x22>
 800d6ca:	6862      	ldr	r2, [r4, #4]
 800d6cc:	42a3      	cmp	r3, r4
 800d6ce:	bf0c      	ite	eq
 800d6d0:	6032      	streq	r2, [r6, #0]
 800d6d2:	605a      	strne	r2, [r3, #4]
 800d6d4:	e7ec      	b.n	800d6b0 <_malloc_r+0xa0>
 800d6d6:	4623      	mov	r3, r4
 800d6d8:	6864      	ldr	r4, [r4, #4]
 800d6da:	e7b2      	b.n	800d642 <_malloc_r+0x32>
 800d6dc:	4634      	mov	r4, r6
 800d6de:	6876      	ldr	r6, [r6, #4]
 800d6e0:	e7b9      	b.n	800d656 <_malloc_r+0x46>
 800d6e2:	230c      	movs	r3, #12
 800d6e4:	4638      	mov	r0, r7
 800d6e6:	603b      	str	r3, [r7, #0]
 800d6e8:	f000 ff76 	bl	800e5d8 <__malloc_unlock>
 800d6ec:	e7a1      	b.n	800d632 <_malloc_r+0x22>
 800d6ee:	6025      	str	r5, [r4, #0]
 800d6f0:	e7de      	b.n	800d6b0 <_malloc_r+0xa0>
 800d6f2:	bf00      	nop
 800d6f4:	20006410 	.word	0x20006410

0800d6f8 <__ssputs_r>:
 800d6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6fc:	688e      	ldr	r6, [r1, #8]
 800d6fe:	4682      	mov	sl, r0
 800d700:	460c      	mov	r4, r1
 800d702:	4690      	mov	r8, r2
 800d704:	429e      	cmp	r6, r3
 800d706:	461f      	mov	r7, r3
 800d708:	d838      	bhi.n	800d77c <__ssputs_r+0x84>
 800d70a:	898a      	ldrh	r2, [r1, #12]
 800d70c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d710:	d032      	beq.n	800d778 <__ssputs_r+0x80>
 800d712:	6825      	ldr	r5, [r4, #0]
 800d714:	3301      	adds	r3, #1
 800d716:	6909      	ldr	r1, [r1, #16]
 800d718:	eba5 0901 	sub.w	r9, r5, r1
 800d71c:	6965      	ldr	r5, [r4, #20]
 800d71e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d722:	444b      	add	r3, r9
 800d724:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d728:	106d      	asrs	r5, r5, #1
 800d72a:	429d      	cmp	r5, r3
 800d72c:	bf38      	it	cc
 800d72e:	461d      	movcc	r5, r3
 800d730:	0553      	lsls	r3, r2, #21
 800d732:	d531      	bpl.n	800d798 <__ssputs_r+0xa0>
 800d734:	4629      	mov	r1, r5
 800d736:	f7ff ff6b 	bl	800d610 <_malloc_r>
 800d73a:	4606      	mov	r6, r0
 800d73c:	b950      	cbnz	r0, 800d754 <__ssputs_r+0x5c>
 800d73e:	230c      	movs	r3, #12
 800d740:	f04f 30ff 	mov.w	r0, #4294967295
 800d744:	f8ca 3000 	str.w	r3, [sl]
 800d748:	89a3      	ldrh	r3, [r4, #12]
 800d74a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d74e:	81a3      	strh	r3, [r4, #12]
 800d750:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d754:	464a      	mov	r2, r9
 800d756:	6921      	ldr	r1, [r4, #16]
 800d758:	f7ff fdfa 	bl	800d350 <memcpy>
 800d75c:	89a3      	ldrh	r3, [r4, #12]
 800d75e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d762:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d766:	81a3      	strh	r3, [r4, #12]
 800d768:	6126      	str	r6, [r4, #16]
 800d76a:	444e      	add	r6, r9
 800d76c:	6165      	str	r5, [r4, #20]
 800d76e:	eba5 0509 	sub.w	r5, r5, r9
 800d772:	6026      	str	r6, [r4, #0]
 800d774:	463e      	mov	r6, r7
 800d776:	60a5      	str	r5, [r4, #8]
 800d778:	42be      	cmp	r6, r7
 800d77a:	d900      	bls.n	800d77e <__ssputs_r+0x86>
 800d77c:	463e      	mov	r6, r7
 800d77e:	4632      	mov	r2, r6
 800d780:	4641      	mov	r1, r8
 800d782:	6820      	ldr	r0, [r4, #0]
 800d784:	f000 ff08 	bl	800e598 <memmove>
 800d788:	68a3      	ldr	r3, [r4, #8]
 800d78a:	2000      	movs	r0, #0
 800d78c:	1b9b      	subs	r3, r3, r6
 800d78e:	60a3      	str	r3, [r4, #8]
 800d790:	6823      	ldr	r3, [r4, #0]
 800d792:	4433      	add	r3, r6
 800d794:	6023      	str	r3, [r4, #0]
 800d796:	e7db      	b.n	800d750 <__ssputs_r+0x58>
 800d798:	462a      	mov	r2, r5
 800d79a:	f000 ff23 	bl	800e5e4 <_realloc_r>
 800d79e:	4606      	mov	r6, r0
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	d1e1      	bne.n	800d768 <__ssputs_r+0x70>
 800d7a4:	6921      	ldr	r1, [r4, #16]
 800d7a6:	4650      	mov	r0, sl
 800d7a8:	f7ff fec6 	bl	800d538 <_free_r>
 800d7ac:	e7c7      	b.n	800d73e <__ssputs_r+0x46>
	...

0800d7b0 <_svfiprintf_r>:
 800d7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7b4:	4698      	mov	r8, r3
 800d7b6:	898b      	ldrh	r3, [r1, #12]
 800d7b8:	b09d      	sub	sp, #116	; 0x74
 800d7ba:	4607      	mov	r7, r0
 800d7bc:	061b      	lsls	r3, r3, #24
 800d7be:	460d      	mov	r5, r1
 800d7c0:	4614      	mov	r4, r2
 800d7c2:	d50e      	bpl.n	800d7e2 <_svfiprintf_r+0x32>
 800d7c4:	690b      	ldr	r3, [r1, #16]
 800d7c6:	b963      	cbnz	r3, 800d7e2 <_svfiprintf_r+0x32>
 800d7c8:	2140      	movs	r1, #64	; 0x40
 800d7ca:	f7ff ff21 	bl	800d610 <_malloc_r>
 800d7ce:	6028      	str	r0, [r5, #0]
 800d7d0:	6128      	str	r0, [r5, #16]
 800d7d2:	b920      	cbnz	r0, 800d7de <_svfiprintf_r+0x2e>
 800d7d4:	230c      	movs	r3, #12
 800d7d6:	603b      	str	r3, [r7, #0]
 800d7d8:	f04f 30ff 	mov.w	r0, #4294967295
 800d7dc:	e0d1      	b.n	800d982 <_svfiprintf_r+0x1d2>
 800d7de:	2340      	movs	r3, #64	; 0x40
 800d7e0:	616b      	str	r3, [r5, #20]
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800d7e8:	f04f 0901 	mov.w	r9, #1
 800d7ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800d99c <_svfiprintf_r+0x1ec>
 800d7f0:	9309      	str	r3, [sp, #36]	; 0x24
 800d7f2:	2320      	movs	r3, #32
 800d7f4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d7f8:	2330      	movs	r3, #48	; 0x30
 800d7fa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d7fe:	4623      	mov	r3, r4
 800d800:	469a      	mov	sl, r3
 800d802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d806:	b10a      	cbz	r2, 800d80c <_svfiprintf_r+0x5c>
 800d808:	2a25      	cmp	r2, #37	; 0x25
 800d80a:	d1f9      	bne.n	800d800 <_svfiprintf_r+0x50>
 800d80c:	ebba 0b04 	subs.w	fp, sl, r4
 800d810:	d00b      	beq.n	800d82a <_svfiprintf_r+0x7a>
 800d812:	465b      	mov	r3, fp
 800d814:	4622      	mov	r2, r4
 800d816:	4629      	mov	r1, r5
 800d818:	4638      	mov	r0, r7
 800d81a:	f7ff ff6d 	bl	800d6f8 <__ssputs_r>
 800d81e:	3001      	adds	r0, #1
 800d820:	f000 80aa 	beq.w	800d978 <_svfiprintf_r+0x1c8>
 800d824:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d826:	445a      	add	r2, fp
 800d828:	9209      	str	r2, [sp, #36]	; 0x24
 800d82a:	f89a 3000 	ldrb.w	r3, [sl]
 800d82e:	2b00      	cmp	r3, #0
 800d830:	f000 80a2 	beq.w	800d978 <_svfiprintf_r+0x1c8>
 800d834:	2300      	movs	r3, #0
 800d836:	f04f 32ff 	mov.w	r2, #4294967295
 800d83a:	f10a 0a01 	add.w	sl, sl, #1
 800d83e:	9304      	str	r3, [sp, #16]
 800d840:	9307      	str	r3, [sp, #28]
 800d842:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d846:	931a      	str	r3, [sp, #104]	; 0x68
 800d848:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d84c:	4654      	mov	r4, sl
 800d84e:	2205      	movs	r2, #5
 800d850:	4852      	ldr	r0, [pc, #328]	; (800d99c <_svfiprintf_r+0x1ec>)
 800d852:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d856:	f000 fe91 	bl	800e57c <memchr>
 800d85a:	9a04      	ldr	r2, [sp, #16]
 800d85c:	b9d8      	cbnz	r0, 800d896 <_svfiprintf_r+0xe6>
 800d85e:	06d0      	lsls	r0, r2, #27
 800d860:	bf44      	itt	mi
 800d862:	2320      	movmi	r3, #32
 800d864:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d868:	0711      	lsls	r1, r2, #28
 800d86a:	bf44      	itt	mi
 800d86c:	232b      	movmi	r3, #43	; 0x2b
 800d86e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d872:	f89a 3000 	ldrb.w	r3, [sl]
 800d876:	2b2a      	cmp	r3, #42	; 0x2a
 800d878:	d015      	beq.n	800d8a6 <_svfiprintf_r+0xf6>
 800d87a:	9a07      	ldr	r2, [sp, #28]
 800d87c:	4654      	mov	r4, sl
 800d87e:	2000      	movs	r0, #0
 800d880:	f04f 0c0a 	mov.w	ip, #10
 800d884:	4621      	mov	r1, r4
 800d886:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d88a:	3b30      	subs	r3, #48	; 0x30
 800d88c:	2b09      	cmp	r3, #9
 800d88e:	d94e      	bls.n	800d92e <_svfiprintf_r+0x17e>
 800d890:	b1b0      	cbz	r0, 800d8c0 <_svfiprintf_r+0x110>
 800d892:	9207      	str	r2, [sp, #28]
 800d894:	e014      	b.n	800d8c0 <_svfiprintf_r+0x110>
 800d896:	eba0 0308 	sub.w	r3, r0, r8
 800d89a:	46a2      	mov	sl, r4
 800d89c:	fa09 f303 	lsl.w	r3, r9, r3
 800d8a0:	4313      	orrs	r3, r2
 800d8a2:	9304      	str	r3, [sp, #16]
 800d8a4:	e7d2      	b.n	800d84c <_svfiprintf_r+0x9c>
 800d8a6:	9b03      	ldr	r3, [sp, #12]
 800d8a8:	1d19      	adds	r1, r3, #4
 800d8aa:	681b      	ldr	r3, [r3, #0]
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	9103      	str	r1, [sp, #12]
 800d8b0:	bfbb      	ittet	lt
 800d8b2:	425b      	neglt	r3, r3
 800d8b4:	f042 0202 	orrlt.w	r2, r2, #2
 800d8b8:	9307      	strge	r3, [sp, #28]
 800d8ba:	9307      	strlt	r3, [sp, #28]
 800d8bc:	bfb8      	it	lt
 800d8be:	9204      	strlt	r2, [sp, #16]
 800d8c0:	7823      	ldrb	r3, [r4, #0]
 800d8c2:	2b2e      	cmp	r3, #46	; 0x2e
 800d8c4:	d10c      	bne.n	800d8e0 <_svfiprintf_r+0x130>
 800d8c6:	7863      	ldrb	r3, [r4, #1]
 800d8c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d8ca:	d135      	bne.n	800d938 <_svfiprintf_r+0x188>
 800d8cc:	9b03      	ldr	r3, [sp, #12]
 800d8ce:	3402      	adds	r4, #2
 800d8d0:	1d1a      	adds	r2, r3, #4
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	9203      	str	r2, [sp, #12]
 800d8d8:	bfb8      	it	lt
 800d8da:	f04f 33ff 	movlt.w	r3, #4294967295
 800d8de:	9305      	str	r3, [sp, #20]
 800d8e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d9ac <_svfiprintf_r+0x1fc>
 800d8e4:	2203      	movs	r2, #3
 800d8e6:	7821      	ldrb	r1, [r4, #0]
 800d8e8:	4650      	mov	r0, sl
 800d8ea:	f000 fe47 	bl	800e57c <memchr>
 800d8ee:	b140      	cbz	r0, 800d902 <_svfiprintf_r+0x152>
 800d8f0:	2340      	movs	r3, #64	; 0x40
 800d8f2:	eba0 000a 	sub.w	r0, r0, sl
 800d8f6:	3401      	adds	r4, #1
 800d8f8:	fa03 f000 	lsl.w	r0, r3, r0
 800d8fc:	9b04      	ldr	r3, [sp, #16]
 800d8fe:	4303      	orrs	r3, r0
 800d900:	9304      	str	r3, [sp, #16]
 800d902:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d906:	2206      	movs	r2, #6
 800d908:	4825      	ldr	r0, [pc, #148]	; (800d9a0 <_svfiprintf_r+0x1f0>)
 800d90a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d90e:	f000 fe35 	bl	800e57c <memchr>
 800d912:	2800      	cmp	r0, #0
 800d914:	d038      	beq.n	800d988 <_svfiprintf_r+0x1d8>
 800d916:	4b23      	ldr	r3, [pc, #140]	; (800d9a4 <_svfiprintf_r+0x1f4>)
 800d918:	bb1b      	cbnz	r3, 800d962 <_svfiprintf_r+0x1b2>
 800d91a:	9b03      	ldr	r3, [sp, #12]
 800d91c:	3307      	adds	r3, #7
 800d91e:	f023 0307 	bic.w	r3, r3, #7
 800d922:	3308      	adds	r3, #8
 800d924:	9303      	str	r3, [sp, #12]
 800d926:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d928:	4433      	add	r3, r6
 800d92a:	9309      	str	r3, [sp, #36]	; 0x24
 800d92c:	e767      	b.n	800d7fe <_svfiprintf_r+0x4e>
 800d92e:	fb0c 3202 	mla	r2, ip, r2, r3
 800d932:	460c      	mov	r4, r1
 800d934:	2001      	movs	r0, #1
 800d936:	e7a5      	b.n	800d884 <_svfiprintf_r+0xd4>
 800d938:	2300      	movs	r3, #0
 800d93a:	3401      	adds	r4, #1
 800d93c:	f04f 0c0a 	mov.w	ip, #10
 800d940:	4619      	mov	r1, r3
 800d942:	9305      	str	r3, [sp, #20]
 800d944:	4620      	mov	r0, r4
 800d946:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d94a:	3a30      	subs	r2, #48	; 0x30
 800d94c:	2a09      	cmp	r2, #9
 800d94e:	d903      	bls.n	800d958 <_svfiprintf_r+0x1a8>
 800d950:	2b00      	cmp	r3, #0
 800d952:	d0c5      	beq.n	800d8e0 <_svfiprintf_r+0x130>
 800d954:	9105      	str	r1, [sp, #20]
 800d956:	e7c3      	b.n	800d8e0 <_svfiprintf_r+0x130>
 800d958:	fb0c 2101 	mla	r1, ip, r1, r2
 800d95c:	4604      	mov	r4, r0
 800d95e:	2301      	movs	r3, #1
 800d960:	e7f0      	b.n	800d944 <_svfiprintf_r+0x194>
 800d962:	ab03      	add	r3, sp, #12
 800d964:	462a      	mov	r2, r5
 800d966:	a904      	add	r1, sp, #16
 800d968:	4638      	mov	r0, r7
 800d96a:	9300      	str	r3, [sp, #0]
 800d96c:	4b0e      	ldr	r3, [pc, #56]	; (800d9a8 <_svfiprintf_r+0x1f8>)
 800d96e:	e000      	b.n	800d972 <_svfiprintf_r+0x1c2>
 800d970:	bf00      	nop
 800d972:	1c42      	adds	r2, r0, #1
 800d974:	4606      	mov	r6, r0
 800d976:	d1d6      	bne.n	800d926 <_svfiprintf_r+0x176>
 800d978:	89ab      	ldrh	r3, [r5, #12]
 800d97a:	065b      	lsls	r3, r3, #25
 800d97c:	f53f af2c 	bmi.w	800d7d8 <_svfiprintf_r+0x28>
 800d980:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d982:	b01d      	add	sp, #116	; 0x74
 800d984:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d988:	ab03      	add	r3, sp, #12
 800d98a:	462a      	mov	r2, r5
 800d98c:	a904      	add	r1, sp, #16
 800d98e:	4638      	mov	r0, r7
 800d990:	9300      	str	r3, [sp, #0]
 800d992:	4b05      	ldr	r3, [pc, #20]	; (800d9a8 <_svfiprintf_r+0x1f8>)
 800d994:	f000 f9d6 	bl	800dd44 <_printf_i>
 800d998:	e7eb      	b.n	800d972 <_svfiprintf_r+0x1c2>
 800d99a:	bf00      	nop
 800d99c:	0800fc16 	.word	0x0800fc16
 800d9a0:	0800fc20 	.word	0x0800fc20
 800d9a4:	00000000 	.word	0x00000000
 800d9a8:	0800d6f9 	.word	0x0800d6f9
 800d9ac:	0800fc1c 	.word	0x0800fc1c

0800d9b0 <__sfputc_r>:
 800d9b0:	6893      	ldr	r3, [r2, #8]
 800d9b2:	3b01      	subs	r3, #1
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	6093      	str	r3, [r2, #8]
 800d9b8:	b410      	push	{r4}
 800d9ba:	da08      	bge.n	800d9ce <__sfputc_r+0x1e>
 800d9bc:	6994      	ldr	r4, [r2, #24]
 800d9be:	42a3      	cmp	r3, r4
 800d9c0:	db01      	blt.n	800d9c6 <__sfputc_r+0x16>
 800d9c2:	290a      	cmp	r1, #10
 800d9c4:	d103      	bne.n	800d9ce <__sfputc_r+0x1e>
 800d9c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9ca:	f000 baf1 	b.w	800dfb0 <__swbuf_r>
 800d9ce:	6813      	ldr	r3, [r2, #0]
 800d9d0:	1c58      	adds	r0, r3, #1
 800d9d2:	6010      	str	r0, [r2, #0]
 800d9d4:	4608      	mov	r0, r1
 800d9d6:	7019      	strb	r1, [r3, #0]
 800d9d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d9dc:	4770      	bx	lr

0800d9de <__sfputs_r>:
 800d9de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d9e0:	4606      	mov	r6, r0
 800d9e2:	460f      	mov	r7, r1
 800d9e4:	4614      	mov	r4, r2
 800d9e6:	18d5      	adds	r5, r2, r3
 800d9e8:	42ac      	cmp	r4, r5
 800d9ea:	d101      	bne.n	800d9f0 <__sfputs_r+0x12>
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	e007      	b.n	800da00 <__sfputs_r+0x22>
 800d9f0:	463a      	mov	r2, r7
 800d9f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9f6:	4630      	mov	r0, r6
 800d9f8:	f7ff ffda 	bl	800d9b0 <__sfputc_r>
 800d9fc:	1c43      	adds	r3, r0, #1
 800d9fe:	d1f3      	bne.n	800d9e8 <__sfputs_r+0xa>
 800da00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da04 <_vfiprintf_r>:
 800da04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da08:	460d      	mov	r5, r1
 800da0a:	b09d      	sub	sp, #116	; 0x74
 800da0c:	4614      	mov	r4, r2
 800da0e:	4698      	mov	r8, r3
 800da10:	4606      	mov	r6, r0
 800da12:	b118      	cbz	r0, 800da1c <_vfiprintf_r+0x18>
 800da14:	6983      	ldr	r3, [r0, #24]
 800da16:	b90b      	cbnz	r3, 800da1c <_vfiprintf_r+0x18>
 800da18:	f000 fcaa 	bl	800e370 <__sinit>
 800da1c:	4b89      	ldr	r3, [pc, #548]	; (800dc44 <_vfiprintf_r+0x240>)
 800da1e:	429d      	cmp	r5, r3
 800da20:	d11b      	bne.n	800da5a <_vfiprintf_r+0x56>
 800da22:	6875      	ldr	r5, [r6, #4]
 800da24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da26:	07d9      	lsls	r1, r3, #31
 800da28:	d405      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	059a      	lsls	r2, r3, #22
 800da2e:	d402      	bmi.n	800da36 <_vfiprintf_r+0x32>
 800da30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da32:	f000 fd3b 	bl	800e4ac <__retarget_lock_acquire_recursive>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	071b      	lsls	r3, r3, #28
 800da3a:	d501      	bpl.n	800da40 <_vfiprintf_r+0x3c>
 800da3c:	692b      	ldr	r3, [r5, #16]
 800da3e:	b9eb      	cbnz	r3, 800da7c <_vfiprintf_r+0x78>
 800da40:	4629      	mov	r1, r5
 800da42:	4630      	mov	r0, r6
 800da44:	f000 fb06 	bl	800e054 <__swsetup_r>
 800da48:	b1c0      	cbz	r0, 800da7c <_vfiprintf_r+0x78>
 800da4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da4c:	07dc      	lsls	r4, r3, #31
 800da4e:	d50e      	bpl.n	800da6e <_vfiprintf_r+0x6a>
 800da50:	f04f 30ff 	mov.w	r0, #4294967295
 800da54:	b01d      	add	sp, #116	; 0x74
 800da56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800da5a:	4b7b      	ldr	r3, [pc, #492]	; (800dc48 <_vfiprintf_r+0x244>)
 800da5c:	429d      	cmp	r5, r3
 800da5e:	d101      	bne.n	800da64 <_vfiprintf_r+0x60>
 800da60:	68b5      	ldr	r5, [r6, #8]
 800da62:	e7df      	b.n	800da24 <_vfiprintf_r+0x20>
 800da64:	4b79      	ldr	r3, [pc, #484]	; (800dc4c <_vfiprintf_r+0x248>)
 800da66:	429d      	cmp	r5, r3
 800da68:	bf08      	it	eq
 800da6a:	68f5      	ldreq	r5, [r6, #12]
 800da6c:	e7da      	b.n	800da24 <_vfiprintf_r+0x20>
 800da6e:	89ab      	ldrh	r3, [r5, #12]
 800da70:	0598      	lsls	r0, r3, #22
 800da72:	d4ed      	bmi.n	800da50 <_vfiprintf_r+0x4c>
 800da74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da76:	f000 fd1a 	bl	800e4ae <__retarget_lock_release_recursive>
 800da7a:	e7e9      	b.n	800da50 <_vfiprintf_r+0x4c>
 800da7c:	2300      	movs	r3, #0
 800da7e:	f8cd 800c 	str.w	r8, [sp, #12]
 800da82:	f04f 0901 	mov.w	r9, #1
 800da86:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800dc50 <_vfiprintf_r+0x24c>
 800da8a:	9309      	str	r3, [sp, #36]	; 0x24
 800da8c:	2320      	movs	r3, #32
 800da8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800da92:	2330      	movs	r3, #48	; 0x30
 800da94:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800da98:	4623      	mov	r3, r4
 800da9a:	469a      	mov	sl, r3
 800da9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800daa0:	b10a      	cbz	r2, 800daa6 <_vfiprintf_r+0xa2>
 800daa2:	2a25      	cmp	r2, #37	; 0x25
 800daa4:	d1f9      	bne.n	800da9a <_vfiprintf_r+0x96>
 800daa6:	ebba 0b04 	subs.w	fp, sl, r4
 800daaa:	d00b      	beq.n	800dac4 <_vfiprintf_r+0xc0>
 800daac:	465b      	mov	r3, fp
 800daae:	4622      	mov	r2, r4
 800dab0:	4629      	mov	r1, r5
 800dab2:	4630      	mov	r0, r6
 800dab4:	f7ff ff93 	bl	800d9de <__sfputs_r>
 800dab8:	3001      	adds	r0, #1
 800daba:	f000 80aa 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dabe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dac0:	445a      	add	r2, fp
 800dac2:	9209      	str	r2, [sp, #36]	; 0x24
 800dac4:	f89a 3000 	ldrb.w	r3, [sl]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	f000 80a2 	beq.w	800dc12 <_vfiprintf_r+0x20e>
 800dace:	2300      	movs	r3, #0
 800dad0:	f04f 32ff 	mov.w	r2, #4294967295
 800dad4:	f10a 0a01 	add.w	sl, sl, #1
 800dad8:	9304      	str	r3, [sp, #16]
 800dada:	9307      	str	r3, [sp, #28]
 800dadc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dae0:	931a      	str	r3, [sp, #104]	; 0x68
 800dae2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dae6:	4654      	mov	r4, sl
 800dae8:	2205      	movs	r2, #5
 800daea:	4859      	ldr	r0, [pc, #356]	; (800dc50 <_vfiprintf_r+0x24c>)
 800daec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800daf0:	f000 fd44 	bl	800e57c <memchr>
 800daf4:	9a04      	ldr	r2, [sp, #16]
 800daf6:	b9d8      	cbnz	r0, 800db30 <_vfiprintf_r+0x12c>
 800daf8:	06d1      	lsls	r1, r2, #27
 800dafa:	bf44      	itt	mi
 800dafc:	2320      	movmi	r3, #32
 800dafe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db02:	0713      	lsls	r3, r2, #28
 800db04:	bf44      	itt	mi
 800db06:	232b      	movmi	r3, #43	; 0x2b
 800db08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db0c:	f89a 3000 	ldrb.w	r3, [sl]
 800db10:	2b2a      	cmp	r3, #42	; 0x2a
 800db12:	d015      	beq.n	800db40 <_vfiprintf_r+0x13c>
 800db14:	9a07      	ldr	r2, [sp, #28]
 800db16:	4654      	mov	r4, sl
 800db18:	2000      	movs	r0, #0
 800db1a:	f04f 0c0a 	mov.w	ip, #10
 800db1e:	4621      	mov	r1, r4
 800db20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db24:	3b30      	subs	r3, #48	; 0x30
 800db26:	2b09      	cmp	r3, #9
 800db28:	d94e      	bls.n	800dbc8 <_vfiprintf_r+0x1c4>
 800db2a:	b1b0      	cbz	r0, 800db5a <_vfiprintf_r+0x156>
 800db2c:	9207      	str	r2, [sp, #28]
 800db2e:	e014      	b.n	800db5a <_vfiprintf_r+0x156>
 800db30:	eba0 0308 	sub.w	r3, r0, r8
 800db34:	46a2      	mov	sl, r4
 800db36:	fa09 f303 	lsl.w	r3, r9, r3
 800db3a:	4313      	orrs	r3, r2
 800db3c:	9304      	str	r3, [sp, #16]
 800db3e:	e7d2      	b.n	800dae6 <_vfiprintf_r+0xe2>
 800db40:	9b03      	ldr	r3, [sp, #12]
 800db42:	1d19      	adds	r1, r3, #4
 800db44:	681b      	ldr	r3, [r3, #0]
 800db46:	2b00      	cmp	r3, #0
 800db48:	9103      	str	r1, [sp, #12]
 800db4a:	bfbb      	ittet	lt
 800db4c:	425b      	neglt	r3, r3
 800db4e:	f042 0202 	orrlt.w	r2, r2, #2
 800db52:	9307      	strge	r3, [sp, #28]
 800db54:	9307      	strlt	r3, [sp, #28]
 800db56:	bfb8      	it	lt
 800db58:	9204      	strlt	r2, [sp, #16]
 800db5a:	7823      	ldrb	r3, [r4, #0]
 800db5c:	2b2e      	cmp	r3, #46	; 0x2e
 800db5e:	d10c      	bne.n	800db7a <_vfiprintf_r+0x176>
 800db60:	7863      	ldrb	r3, [r4, #1]
 800db62:	2b2a      	cmp	r3, #42	; 0x2a
 800db64:	d135      	bne.n	800dbd2 <_vfiprintf_r+0x1ce>
 800db66:	9b03      	ldr	r3, [sp, #12]
 800db68:	3402      	adds	r4, #2
 800db6a:	1d1a      	adds	r2, r3, #4
 800db6c:	681b      	ldr	r3, [r3, #0]
 800db6e:	2b00      	cmp	r3, #0
 800db70:	9203      	str	r2, [sp, #12]
 800db72:	bfb8      	it	lt
 800db74:	f04f 33ff 	movlt.w	r3, #4294967295
 800db78:	9305      	str	r3, [sp, #20]
 800db7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dc60 <_vfiprintf_r+0x25c>
 800db7e:	2203      	movs	r2, #3
 800db80:	7821      	ldrb	r1, [r4, #0]
 800db82:	4650      	mov	r0, sl
 800db84:	f000 fcfa 	bl	800e57c <memchr>
 800db88:	b140      	cbz	r0, 800db9c <_vfiprintf_r+0x198>
 800db8a:	2340      	movs	r3, #64	; 0x40
 800db8c:	eba0 000a 	sub.w	r0, r0, sl
 800db90:	3401      	adds	r4, #1
 800db92:	fa03 f000 	lsl.w	r0, r3, r0
 800db96:	9b04      	ldr	r3, [sp, #16]
 800db98:	4303      	orrs	r3, r0
 800db9a:	9304      	str	r3, [sp, #16]
 800db9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dba0:	2206      	movs	r2, #6
 800dba2:	482c      	ldr	r0, [pc, #176]	; (800dc54 <_vfiprintf_r+0x250>)
 800dba4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dba8:	f000 fce8 	bl	800e57c <memchr>
 800dbac:	2800      	cmp	r0, #0
 800dbae:	d03f      	beq.n	800dc30 <_vfiprintf_r+0x22c>
 800dbb0:	4b29      	ldr	r3, [pc, #164]	; (800dc58 <_vfiprintf_r+0x254>)
 800dbb2:	bb1b      	cbnz	r3, 800dbfc <_vfiprintf_r+0x1f8>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	3307      	adds	r3, #7
 800dbb8:	f023 0307 	bic.w	r3, r3, #7
 800dbbc:	3308      	adds	r3, #8
 800dbbe:	9303      	str	r3, [sp, #12]
 800dbc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dbc2:	443b      	add	r3, r7
 800dbc4:	9309      	str	r3, [sp, #36]	; 0x24
 800dbc6:	e767      	b.n	800da98 <_vfiprintf_r+0x94>
 800dbc8:	fb0c 3202 	mla	r2, ip, r2, r3
 800dbcc:	460c      	mov	r4, r1
 800dbce:	2001      	movs	r0, #1
 800dbd0:	e7a5      	b.n	800db1e <_vfiprintf_r+0x11a>
 800dbd2:	2300      	movs	r3, #0
 800dbd4:	3401      	adds	r4, #1
 800dbd6:	f04f 0c0a 	mov.w	ip, #10
 800dbda:	4619      	mov	r1, r3
 800dbdc:	9305      	str	r3, [sp, #20]
 800dbde:	4620      	mov	r0, r4
 800dbe0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dbe4:	3a30      	subs	r2, #48	; 0x30
 800dbe6:	2a09      	cmp	r2, #9
 800dbe8:	d903      	bls.n	800dbf2 <_vfiprintf_r+0x1ee>
 800dbea:	2b00      	cmp	r3, #0
 800dbec:	d0c5      	beq.n	800db7a <_vfiprintf_r+0x176>
 800dbee:	9105      	str	r1, [sp, #20]
 800dbf0:	e7c3      	b.n	800db7a <_vfiprintf_r+0x176>
 800dbf2:	fb0c 2101 	mla	r1, ip, r1, r2
 800dbf6:	4604      	mov	r4, r0
 800dbf8:	2301      	movs	r3, #1
 800dbfa:	e7f0      	b.n	800dbde <_vfiprintf_r+0x1da>
 800dbfc:	ab03      	add	r3, sp, #12
 800dbfe:	462a      	mov	r2, r5
 800dc00:	a904      	add	r1, sp, #16
 800dc02:	4630      	mov	r0, r6
 800dc04:	9300      	str	r3, [sp, #0]
 800dc06:	4b15      	ldr	r3, [pc, #84]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc08:	e000      	b.n	800dc0c <_vfiprintf_r+0x208>
 800dc0a:	bf00      	nop
 800dc0c:	4607      	mov	r7, r0
 800dc0e:	1c78      	adds	r0, r7, #1
 800dc10:	d1d6      	bne.n	800dbc0 <_vfiprintf_r+0x1bc>
 800dc12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc14:	07d9      	lsls	r1, r3, #31
 800dc16:	d405      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc18:	89ab      	ldrh	r3, [r5, #12]
 800dc1a:	059a      	lsls	r2, r3, #22
 800dc1c:	d402      	bmi.n	800dc24 <_vfiprintf_r+0x220>
 800dc1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc20:	f000 fc45 	bl	800e4ae <__retarget_lock_release_recursive>
 800dc24:	89ab      	ldrh	r3, [r5, #12]
 800dc26:	065b      	lsls	r3, r3, #25
 800dc28:	f53f af12 	bmi.w	800da50 <_vfiprintf_r+0x4c>
 800dc2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dc2e:	e711      	b.n	800da54 <_vfiprintf_r+0x50>
 800dc30:	ab03      	add	r3, sp, #12
 800dc32:	462a      	mov	r2, r5
 800dc34:	a904      	add	r1, sp, #16
 800dc36:	4630      	mov	r0, r6
 800dc38:	9300      	str	r3, [sp, #0]
 800dc3a:	4b08      	ldr	r3, [pc, #32]	; (800dc5c <_vfiprintf_r+0x258>)
 800dc3c:	f000 f882 	bl	800dd44 <_printf_i>
 800dc40:	e7e4      	b.n	800dc0c <_vfiprintf_r+0x208>
 800dc42:	bf00      	nop
 800dc44:	0800fc6c 	.word	0x0800fc6c
 800dc48:	0800fc8c 	.word	0x0800fc8c
 800dc4c:	0800fc4c 	.word	0x0800fc4c
 800dc50:	0800fc16 	.word	0x0800fc16
 800dc54:	0800fc20 	.word	0x0800fc20
 800dc58:	00000000 	.word	0x00000000
 800dc5c:	0800d9df 	.word	0x0800d9df
 800dc60:	0800fc1c 	.word	0x0800fc1c

0800dc64 <_printf_common>:
 800dc64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc68:	4616      	mov	r6, r2
 800dc6a:	4699      	mov	r9, r3
 800dc6c:	688a      	ldr	r2, [r1, #8]
 800dc6e:	4607      	mov	r7, r0
 800dc70:	690b      	ldr	r3, [r1, #16]
 800dc72:	460c      	mov	r4, r1
 800dc74:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	bfb8      	it	lt
 800dc7c:	4613      	movlt	r3, r2
 800dc7e:	6033      	str	r3, [r6, #0]
 800dc80:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800dc84:	b10a      	cbz	r2, 800dc8a <_printf_common+0x26>
 800dc86:	3301      	adds	r3, #1
 800dc88:	6033      	str	r3, [r6, #0]
 800dc8a:	6823      	ldr	r3, [r4, #0]
 800dc8c:	0699      	lsls	r1, r3, #26
 800dc8e:	bf42      	ittt	mi
 800dc90:	6833      	ldrmi	r3, [r6, #0]
 800dc92:	3302      	addmi	r3, #2
 800dc94:	6033      	strmi	r3, [r6, #0]
 800dc96:	6825      	ldr	r5, [r4, #0]
 800dc98:	f015 0506 	ands.w	r5, r5, #6
 800dc9c:	d106      	bne.n	800dcac <_printf_common+0x48>
 800dc9e:	f104 0a19 	add.w	sl, r4, #25
 800dca2:	68e3      	ldr	r3, [r4, #12]
 800dca4:	6832      	ldr	r2, [r6, #0]
 800dca6:	1a9b      	subs	r3, r3, r2
 800dca8:	42ab      	cmp	r3, r5
 800dcaa:	dc29      	bgt.n	800dd00 <_printf_common+0x9c>
 800dcac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800dcb0:	1e13      	subs	r3, r2, #0
 800dcb2:	6822      	ldr	r2, [r4, #0]
 800dcb4:	bf18      	it	ne
 800dcb6:	2301      	movne	r3, #1
 800dcb8:	0692      	lsls	r2, r2, #26
 800dcba:	d42e      	bmi.n	800dd1a <_printf_common+0xb6>
 800dcbc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800dcc0:	4649      	mov	r1, r9
 800dcc2:	4638      	mov	r0, r7
 800dcc4:	47c0      	blx	r8
 800dcc6:	3001      	adds	r0, #1
 800dcc8:	d021      	beq.n	800dd0e <_printf_common+0xaa>
 800dcca:	6823      	ldr	r3, [r4, #0]
 800dccc:	341a      	adds	r4, #26
 800dcce:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800dcd2:	f003 0306 	and.w	r3, r3, #6
 800dcd6:	6832      	ldr	r2, [r6, #0]
 800dcd8:	2600      	movs	r6, #0
 800dcda:	2b04      	cmp	r3, #4
 800dcdc:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800dce0:	bf08      	it	eq
 800dce2:	1aad      	subeq	r5, r5, r2
 800dce4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800dce8:	bf14      	ite	ne
 800dcea:	2500      	movne	r5, #0
 800dcec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	bfc4      	itt	gt
 800dcf4:	1a9b      	subgt	r3, r3, r2
 800dcf6:	18ed      	addgt	r5, r5, r3
 800dcf8:	42b5      	cmp	r5, r6
 800dcfa:	d11a      	bne.n	800dd32 <_printf_common+0xce>
 800dcfc:	2000      	movs	r0, #0
 800dcfe:	e008      	b.n	800dd12 <_printf_common+0xae>
 800dd00:	2301      	movs	r3, #1
 800dd02:	4652      	mov	r2, sl
 800dd04:	4649      	mov	r1, r9
 800dd06:	4638      	mov	r0, r7
 800dd08:	47c0      	blx	r8
 800dd0a:	3001      	adds	r0, #1
 800dd0c:	d103      	bne.n	800dd16 <_printf_common+0xb2>
 800dd0e:	f04f 30ff 	mov.w	r0, #4294967295
 800dd12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dd16:	3501      	adds	r5, #1
 800dd18:	e7c3      	b.n	800dca2 <_printf_common+0x3e>
 800dd1a:	18e1      	adds	r1, r4, r3
 800dd1c:	1c5a      	adds	r2, r3, #1
 800dd1e:	2030      	movs	r0, #48	; 0x30
 800dd20:	3302      	adds	r3, #2
 800dd22:	4422      	add	r2, r4
 800dd24:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800dd28:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800dd2c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800dd30:	e7c4      	b.n	800dcbc <_printf_common+0x58>
 800dd32:	2301      	movs	r3, #1
 800dd34:	4622      	mov	r2, r4
 800dd36:	4649      	mov	r1, r9
 800dd38:	4638      	mov	r0, r7
 800dd3a:	47c0      	blx	r8
 800dd3c:	3001      	adds	r0, #1
 800dd3e:	d0e6      	beq.n	800dd0e <_printf_common+0xaa>
 800dd40:	3601      	adds	r6, #1
 800dd42:	e7d9      	b.n	800dcf8 <_printf_common+0x94>

0800dd44 <_printf_i>:
 800dd44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800dd48:	7e0f      	ldrb	r7, [r1, #24]
 800dd4a:	4691      	mov	r9, r2
 800dd4c:	4680      	mov	r8, r0
 800dd4e:	460c      	mov	r4, r1
 800dd50:	2f78      	cmp	r7, #120	; 0x78
 800dd52:	469a      	mov	sl, r3
 800dd54:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800dd56:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800dd5a:	d807      	bhi.n	800dd6c <_printf_i+0x28>
 800dd5c:	2f62      	cmp	r7, #98	; 0x62
 800dd5e:	d80a      	bhi.n	800dd76 <_printf_i+0x32>
 800dd60:	2f00      	cmp	r7, #0
 800dd62:	f000 80d8 	beq.w	800df16 <_printf_i+0x1d2>
 800dd66:	2f58      	cmp	r7, #88	; 0x58
 800dd68:	f000 80a3 	beq.w	800deb2 <_printf_i+0x16e>
 800dd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dd70:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800dd74:	e03a      	b.n	800ddec <_printf_i+0xa8>
 800dd76:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800dd7a:	2b15      	cmp	r3, #21
 800dd7c:	d8f6      	bhi.n	800dd6c <_printf_i+0x28>
 800dd7e:	a101      	add	r1, pc, #4	; (adr r1, 800dd84 <_printf_i+0x40>)
 800dd80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800dd84:	0800dddd 	.word	0x0800dddd
 800dd88:	0800ddf1 	.word	0x0800ddf1
 800dd8c:	0800dd6d 	.word	0x0800dd6d
 800dd90:	0800dd6d 	.word	0x0800dd6d
 800dd94:	0800dd6d 	.word	0x0800dd6d
 800dd98:	0800dd6d 	.word	0x0800dd6d
 800dd9c:	0800ddf1 	.word	0x0800ddf1
 800dda0:	0800dd6d 	.word	0x0800dd6d
 800dda4:	0800dd6d 	.word	0x0800dd6d
 800dda8:	0800dd6d 	.word	0x0800dd6d
 800ddac:	0800dd6d 	.word	0x0800dd6d
 800ddb0:	0800defd 	.word	0x0800defd
 800ddb4:	0800de21 	.word	0x0800de21
 800ddb8:	0800dedf 	.word	0x0800dedf
 800ddbc:	0800dd6d 	.word	0x0800dd6d
 800ddc0:	0800dd6d 	.word	0x0800dd6d
 800ddc4:	0800df1f 	.word	0x0800df1f
 800ddc8:	0800dd6d 	.word	0x0800dd6d
 800ddcc:	0800de21 	.word	0x0800de21
 800ddd0:	0800dd6d 	.word	0x0800dd6d
 800ddd4:	0800dd6d 	.word	0x0800dd6d
 800ddd8:	0800dee7 	.word	0x0800dee7
 800dddc:	682b      	ldr	r3, [r5, #0]
 800ddde:	1d1a      	adds	r2, r3, #4
 800dde0:	681b      	ldr	r3, [r3, #0]
 800dde2:	602a      	str	r2, [r5, #0]
 800dde4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800dde8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ddec:	2301      	movs	r3, #1
 800ddee:	e0a3      	b.n	800df38 <_printf_i+0x1f4>
 800ddf0:	6820      	ldr	r0, [r4, #0]
 800ddf2:	6829      	ldr	r1, [r5, #0]
 800ddf4:	0606      	lsls	r6, r0, #24
 800ddf6:	f101 0304 	add.w	r3, r1, #4
 800ddfa:	d50a      	bpl.n	800de12 <_printf_i+0xce>
 800ddfc:	680e      	ldr	r6, [r1, #0]
 800ddfe:	602b      	str	r3, [r5, #0]
 800de00:	2e00      	cmp	r6, #0
 800de02:	da03      	bge.n	800de0c <_printf_i+0xc8>
 800de04:	232d      	movs	r3, #45	; 0x2d
 800de06:	4276      	negs	r6, r6
 800de08:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800de0c:	485e      	ldr	r0, [pc, #376]	; (800df88 <_printf_i+0x244>)
 800de0e:	230a      	movs	r3, #10
 800de10:	e019      	b.n	800de46 <_printf_i+0x102>
 800de12:	680e      	ldr	r6, [r1, #0]
 800de14:	f010 0f40 	tst.w	r0, #64	; 0x40
 800de18:	602b      	str	r3, [r5, #0]
 800de1a:	bf18      	it	ne
 800de1c:	b236      	sxthne	r6, r6
 800de1e:	e7ef      	b.n	800de00 <_printf_i+0xbc>
 800de20:	682b      	ldr	r3, [r5, #0]
 800de22:	6820      	ldr	r0, [r4, #0]
 800de24:	1d19      	adds	r1, r3, #4
 800de26:	6029      	str	r1, [r5, #0]
 800de28:	0601      	lsls	r1, r0, #24
 800de2a:	d501      	bpl.n	800de30 <_printf_i+0xec>
 800de2c:	681e      	ldr	r6, [r3, #0]
 800de2e:	e002      	b.n	800de36 <_printf_i+0xf2>
 800de30:	0646      	lsls	r6, r0, #25
 800de32:	d5fb      	bpl.n	800de2c <_printf_i+0xe8>
 800de34:	881e      	ldrh	r6, [r3, #0]
 800de36:	2f6f      	cmp	r7, #111	; 0x6f
 800de38:	4853      	ldr	r0, [pc, #332]	; (800df88 <_printf_i+0x244>)
 800de3a:	bf0c      	ite	eq
 800de3c:	2308      	moveq	r3, #8
 800de3e:	230a      	movne	r3, #10
 800de40:	2100      	movs	r1, #0
 800de42:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800de46:	6865      	ldr	r5, [r4, #4]
 800de48:	2d00      	cmp	r5, #0
 800de4a:	60a5      	str	r5, [r4, #8]
 800de4c:	bfa2      	ittt	ge
 800de4e:	6821      	ldrge	r1, [r4, #0]
 800de50:	f021 0104 	bicge.w	r1, r1, #4
 800de54:	6021      	strge	r1, [r4, #0]
 800de56:	b90e      	cbnz	r6, 800de5c <_printf_i+0x118>
 800de58:	2d00      	cmp	r5, #0
 800de5a:	d04d      	beq.n	800def8 <_printf_i+0x1b4>
 800de5c:	4615      	mov	r5, r2
 800de5e:	fbb6 f1f3 	udiv	r1, r6, r3
 800de62:	fb03 6711 	mls	r7, r3, r1, r6
 800de66:	5dc7      	ldrb	r7, [r0, r7]
 800de68:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800de6c:	4637      	mov	r7, r6
 800de6e:	460e      	mov	r6, r1
 800de70:	42bb      	cmp	r3, r7
 800de72:	d9f4      	bls.n	800de5e <_printf_i+0x11a>
 800de74:	2b08      	cmp	r3, #8
 800de76:	d10b      	bne.n	800de90 <_printf_i+0x14c>
 800de78:	6823      	ldr	r3, [r4, #0]
 800de7a:	07de      	lsls	r6, r3, #31
 800de7c:	d508      	bpl.n	800de90 <_printf_i+0x14c>
 800de7e:	6923      	ldr	r3, [r4, #16]
 800de80:	6861      	ldr	r1, [r4, #4]
 800de82:	4299      	cmp	r1, r3
 800de84:	bfde      	ittt	le
 800de86:	2330      	movle	r3, #48	; 0x30
 800de88:	f805 3c01 	strble.w	r3, [r5, #-1]
 800de8c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800de90:	1b52      	subs	r2, r2, r5
 800de92:	6122      	str	r2, [r4, #16]
 800de94:	464b      	mov	r3, r9
 800de96:	aa03      	add	r2, sp, #12
 800de98:	4621      	mov	r1, r4
 800de9a:	4640      	mov	r0, r8
 800de9c:	f8cd a000 	str.w	sl, [sp]
 800dea0:	f7ff fee0 	bl	800dc64 <_printf_common>
 800dea4:	3001      	adds	r0, #1
 800dea6:	d14c      	bne.n	800df42 <_printf_i+0x1fe>
 800dea8:	f04f 30ff 	mov.w	r0, #4294967295
 800deac:	b004      	add	sp, #16
 800deae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800deb2:	4835      	ldr	r0, [pc, #212]	; (800df88 <_printf_i+0x244>)
 800deb4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800deb8:	6829      	ldr	r1, [r5, #0]
 800deba:	6823      	ldr	r3, [r4, #0]
 800debc:	f851 6b04 	ldr.w	r6, [r1], #4
 800dec0:	6029      	str	r1, [r5, #0]
 800dec2:	061d      	lsls	r5, r3, #24
 800dec4:	d514      	bpl.n	800def0 <_printf_i+0x1ac>
 800dec6:	07df      	lsls	r7, r3, #31
 800dec8:	bf44      	itt	mi
 800deca:	f043 0320 	orrmi.w	r3, r3, #32
 800dece:	6023      	strmi	r3, [r4, #0]
 800ded0:	b91e      	cbnz	r6, 800deda <_printf_i+0x196>
 800ded2:	6823      	ldr	r3, [r4, #0]
 800ded4:	f023 0320 	bic.w	r3, r3, #32
 800ded8:	6023      	str	r3, [r4, #0]
 800deda:	2310      	movs	r3, #16
 800dedc:	e7b0      	b.n	800de40 <_printf_i+0xfc>
 800dede:	6823      	ldr	r3, [r4, #0]
 800dee0:	f043 0320 	orr.w	r3, r3, #32
 800dee4:	6023      	str	r3, [r4, #0]
 800dee6:	2378      	movs	r3, #120	; 0x78
 800dee8:	4828      	ldr	r0, [pc, #160]	; (800df8c <_printf_i+0x248>)
 800deea:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800deee:	e7e3      	b.n	800deb8 <_printf_i+0x174>
 800def0:	0659      	lsls	r1, r3, #25
 800def2:	bf48      	it	mi
 800def4:	b2b6      	uxthmi	r6, r6
 800def6:	e7e6      	b.n	800dec6 <_printf_i+0x182>
 800def8:	4615      	mov	r5, r2
 800defa:	e7bb      	b.n	800de74 <_printf_i+0x130>
 800defc:	682b      	ldr	r3, [r5, #0]
 800defe:	6826      	ldr	r6, [r4, #0]
 800df00:	1d18      	adds	r0, r3, #4
 800df02:	6961      	ldr	r1, [r4, #20]
 800df04:	6028      	str	r0, [r5, #0]
 800df06:	0635      	lsls	r5, r6, #24
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	d501      	bpl.n	800df10 <_printf_i+0x1cc>
 800df0c:	6019      	str	r1, [r3, #0]
 800df0e:	e002      	b.n	800df16 <_printf_i+0x1d2>
 800df10:	0670      	lsls	r0, r6, #25
 800df12:	d5fb      	bpl.n	800df0c <_printf_i+0x1c8>
 800df14:	8019      	strh	r1, [r3, #0]
 800df16:	2300      	movs	r3, #0
 800df18:	4615      	mov	r5, r2
 800df1a:	6123      	str	r3, [r4, #16]
 800df1c:	e7ba      	b.n	800de94 <_printf_i+0x150>
 800df1e:	682b      	ldr	r3, [r5, #0]
 800df20:	2100      	movs	r1, #0
 800df22:	1d1a      	adds	r2, r3, #4
 800df24:	602a      	str	r2, [r5, #0]
 800df26:	681d      	ldr	r5, [r3, #0]
 800df28:	6862      	ldr	r2, [r4, #4]
 800df2a:	4628      	mov	r0, r5
 800df2c:	f000 fb26 	bl	800e57c <memchr>
 800df30:	b108      	cbz	r0, 800df36 <_printf_i+0x1f2>
 800df32:	1b40      	subs	r0, r0, r5
 800df34:	6060      	str	r0, [r4, #4]
 800df36:	6863      	ldr	r3, [r4, #4]
 800df38:	6123      	str	r3, [r4, #16]
 800df3a:	2300      	movs	r3, #0
 800df3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800df40:	e7a8      	b.n	800de94 <_printf_i+0x150>
 800df42:	6923      	ldr	r3, [r4, #16]
 800df44:	462a      	mov	r2, r5
 800df46:	4649      	mov	r1, r9
 800df48:	4640      	mov	r0, r8
 800df4a:	47d0      	blx	sl
 800df4c:	3001      	adds	r0, #1
 800df4e:	d0ab      	beq.n	800dea8 <_printf_i+0x164>
 800df50:	6823      	ldr	r3, [r4, #0]
 800df52:	079b      	lsls	r3, r3, #30
 800df54:	d413      	bmi.n	800df7e <_printf_i+0x23a>
 800df56:	68e0      	ldr	r0, [r4, #12]
 800df58:	9b03      	ldr	r3, [sp, #12]
 800df5a:	4298      	cmp	r0, r3
 800df5c:	bfb8      	it	lt
 800df5e:	4618      	movlt	r0, r3
 800df60:	e7a4      	b.n	800deac <_printf_i+0x168>
 800df62:	2301      	movs	r3, #1
 800df64:	4632      	mov	r2, r6
 800df66:	4649      	mov	r1, r9
 800df68:	4640      	mov	r0, r8
 800df6a:	47d0      	blx	sl
 800df6c:	3001      	adds	r0, #1
 800df6e:	d09b      	beq.n	800dea8 <_printf_i+0x164>
 800df70:	3501      	adds	r5, #1
 800df72:	68e3      	ldr	r3, [r4, #12]
 800df74:	9903      	ldr	r1, [sp, #12]
 800df76:	1a5b      	subs	r3, r3, r1
 800df78:	42ab      	cmp	r3, r5
 800df7a:	dcf2      	bgt.n	800df62 <_printf_i+0x21e>
 800df7c:	e7eb      	b.n	800df56 <_printf_i+0x212>
 800df7e:	2500      	movs	r5, #0
 800df80:	f104 0619 	add.w	r6, r4, #25
 800df84:	e7f5      	b.n	800df72 <_printf_i+0x22e>
 800df86:	bf00      	nop
 800df88:	0800fc27 	.word	0x0800fc27
 800df8c:	0800fc38 	.word	0x0800fc38

0800df90 <_sbrk_r>:
 800df90:	b538      	push	{r3, r4, r5, lr}
 800df92:	2300      	movs	r3, #0
 800df94:	4d05      	ldr	r5, [pc, #20]	; (800dfac <_sbrk_r+0x1c>)
 800df96:	4604      	mov	r4, r0
 800df98:	4608      	mov	r0, r1
 800df9a:	602b      	str	r3, [r5, #0]
 800df9c:	f7f4 fea0 	bl	8002ce0 <_sbrk>
 800dfa0:	1c43      	adds	r3, r0, #1
 800dfa2:	d102      	bne.n	800dfaa <_sbrk_r+0x1a>
 800dfa4:	682b      	ldr	r3, [r5, #0]
 800dfa6:	b103      	cbz	r3, 800dfaa <_sbrk_r+0x1a>
 800dfa8:	6023      	str	r3, [r4, #0]
 800dfaa:	bd38      	pop	{r3, r4, r5, pc}
 800dfac:	2000641c 	.word	0x2000641c

0800dfb0 <__swbuf_r>:
 800dfb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dfb2:	460e      	mov	r6, r1
 800dfb4:	4614      	mov	r4, r2
 800dfb6:	4605      	mov	r5, r0
 800dfb8:	b118      	cbz	r0, 800dfc2 <__swbuf_r+0x12>
 800dfba:	6983      	ldr	r3, [r0, #24]
 800dfbc:	b90b      	cbnz	r3, 800dfc2 <__swbuf_r+0x12>
 800dfbe:	f000 f9d7 	bl	800e370 <__sinit>
 800dfc2:	4b21      	ldr	r3, [pc, #132]	; (800e048 <__swbuf_r+0x98>)
 800dfc4:	429c      	cmp	r4, r3
 800dfc6:	d12b      	bne.n	800e020 <__swbuf_r+0x70>
 800dfc8:	686c      	ldr	r4, [r5, #4]
 800dfca:	69a3      	ldr	r3, [r4, #24]
 800dfcc:	60a3      	str	r3, [r4, #8]
 800dfce:	89a3      	ldrh	r3, [r4, #12]
 800dfd0:	071a      	lsls	r2, r3, #28
 800dfd2:	d52f      	bpl.n	800e034 <__swbuf_r+0x84>
 800dfd4:	6923      	ldr	r3, [r4, #16]
 800dfd6:	b36b      	cbz	r3, 800e034 <__swbuf_r+0x84>
 800dfd8:	6923      	ldr	r3, [r4, #16]
 800dfda:	b2f6      	uxtb	r6, r6
 800dfdc:	6820      	ldr	r0, [r4, #0]
 800dfde:	4637      	mov	r7, r6
 800dfe0:	1ac0      	subs	r0, r0, r3
 800dfe2:	6963      	ldr	r3, [r4, #20]
 800dfe4:	4283      	cmp	r3, r0
 800dfe6:	dc04      	bgt.n	800dff2 <__swbuf_r+0x42>
 800dfe8:	4621      	mov	r1, r4
 800dfea:	4628      	mov	r0, r5
 800dfec:	f000 f92c 	bl	800e248 <_fflush_r>
 800dff0:	bb30      	cbnz	r0, 800e040 <__swbuf_r+0x90>
 800dff2:	68a3      	ldr	r3, [r4, #8]
 800dff4:	3001      	adds	r0, #1
 800dff6:	3b01      	subs	r3, #1
 800dff8:	60a3      	str	r3, [r4, #8]
 800dffa:	6823      	ldr	r3, [r4, #0]
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	6022      	str	r2, [r4, #0]
 800e000:	701e      	strb	r6, [r3, #0]
 800e002:	6963      	ldr	r3, [r4, #20]
 800e004:	4283      	cmp	r3, r0
 800e006:	d004      	beq.n	800e012 <__swbuf_r+0x62>
 800e008:	89a3      	ldrh	r3, [r4, #12]
 800e00a:	07db      	lsls	r3, r3, #31
 800e00c:	d506      	bpl.n	800e01c <__swbuf_r+0x6c>
 800e00e:	2e0a      	cmp	r6, #10
 800e010:	d104      	bne.n	800e01c <__swbuf_r+0x6c>
 800e012:	4621      	mov	r1, r4
 800e014:	4628      	mov	r0, r5
 800e016:	f000 f917 	bl	800e248 <_fflush_r>
 800e01a:	b988      	cbnz	r0, 800e040 <__swbuf_r+0x90>
 800e01c:	4638      	mov	r0, r7
 800e01e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e020:	4b0a      	ldr	r3, [pc, #40]	; (800e04c <__swbuf_r+0x9c>)
 800e022:	429c      	cmp	r4, r3
 800e024:	d101      	bne.n	800e02a <__swbuf_r+0x7a>
 800e026:	68ac      	ldr	r4, [r5, #8]
 800e028:	e7cf      	b.n	800dfca <__swbuf_r+0x1a>
 800e02a:	4b09      	ldr	r3, [pc, #36]	; (800e050 <__swbuf_r+0xa0>)
 800e02c:	429c      	cmp	r4, r3
 800e02e:	bf08      	it	eq
 800e030:	68ec      	ldreq	r4, [r5, #12]
 800e032:	e7ca      	b.n	800dfca <__swbuf_r+0x1a>
 800e034:	4621      	mov	r1, r4
 800e036:	4628      	mov	r0, r5
 800e038:	f000 f80c 	bl	800e054 <__swsetup_r>
 800e03c:	2800      	cmp	r0, #0
 800e03e:	d0cb      	beq.n	800dfd8 <__swbuf_r+0x28>
 800e040:	f04f 37ff 	mov.w	r7, #4294967295
 800e044:	e7ea      	b.n	800e01c <__swbuf_r+0x6c>
 800e046:	bf00      	nop
 800e048:	0800fc6c 	.word	0x0800fc6c
 800e04c:	0800fc8c 	.word	0x0800fc8c
 800e050:	0800fc4c 	.word	0x0800fc4c

0800e054 <__swsetup_r>:
 800e054:	4b32      	ldr	r3, [pc, #200]	; (800e120 <__swsetup_r+0xcc>)
 800e056:	b570      	push	{r4, r5, r6, lr}
 800e058:	681d      	ldr	r5, [r3, #0]
 800e05a:	4606      	mov	r6, r0
 800e05c:	460c      	mov	r4, r1
 800e05e:	b125      	cbz	r5, 800e06a <__swsetup_r+0x16>
 800e060:	69ab      	ldr	r3, [r5, #24]
 800e062:	b913      	cbnz	r3, 800e06a <__swsetup_r+0x16>
 800e064:	4628      	mov	r0, r5
 800e066:	f000 f983 	bl	800e370 <__sinit>
 800e06a:	4b2e      	ldr	r3, [pc, #184]	; (800e124 <__swsetup_r+0xd0>)
 800e06c:	429c      	cmp	r4, r3
 800e06e:	d10f      	bne.n	800e090 <__swsetup_r+0x3c>
 800e070:	686c      	ldr	r4, [r5, #4]
 800e072:	89a3      	ldrh	r3, [r4, #12]
 800e074:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e078:	0719      	lsls	r1, r3, #28
 800e07a:	d42c      	bmi.n	800e0d6 <__swsetup_r+0x82>
 800e07c:	06dd      	lsls	r5, r3, #27
 800e07e:	d411      	bmi.n	800e0a4 <__swsetup_r+0x50>
 800e080:	2309      	movs	r3, #9
 800e082:	6033      	str	r3, [r6, #0]
 800e084:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e088:	f04f 30ff 	mov.w	r0, #4294967295
 800e08c:	81a3      	strh	r3, [r4, #12]
 800e08e:	e03e      	b.n	800e10e <__swsetup_r+0xba>
 800e090:	4b25      	ldr	r3, [pc, #148]	; (800e128 <__swsetup_r+0xd4>)
 800e092:	429c      	cmp	r4, r3
 800e094:	d101      	bne.n	800e09a <__swsetup_r+0x46>
 800e096:	68ac      	ldr	r4, [r5, #8]
 800e098:	e7eb      	b.n	800e072 <__swsetup_r+0x1e>
 800e09a:	4b24      	ldr	r3, [pc, #144]	; (800e12c <__swsetup_r+0xd8>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	bf08      	it	eq
 800e0a0:	68ec      	ldreq	r4, [r5, #12]
 800e0a2:	e7e6      	b.n	800e072 <__swsetup_r+0x1e>
 800e0a4:	0758      	lsls	r0, r3, #29
 800e0a6:	d512      	bpl.n	800e0ce <__swsetup_r+0x7a>
 800e0a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e0aa:	b141      	cbz	r1, 800e0be <__swsetup_r+0x6a>
 800e0ac:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e0b0:	4299      	cmp	r1, r3
 800e0b2:	d002      	beq.n	800e0ba <__swsetup_r+0x66>
 800e0b4:	4630      	mov	r0, r6
 800e0b6:	f7ff fa3f 	bl	800d538 <_free_r>
 800e0ba:	2300      	movs	r3, #0
 800e0bc:	6363      	str	r3, [r4, #52]	; 0x34
 800e0be:	89a3      	ldrh	r3, [r4, #12]
 800e0c0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e0c4:	81a3      	strh	r3, [r4, #12]
 800e0c6:	2300      	movs	r3, #0
 800e0c8:	6063      	str	r3, [r4, #4]
 800e0ca:	6923      	ldr	r3, [r4, #16]
 800e0cc:	6023      	str	r3, [r4, #0]
 800e0ce:	89a3      	ldrh	r3, [r4, #12]
 800e0d0:	f043 0308 	orr.w	r3, r3, #8
 800e0d4:	81a3      	strh	r3, [r4, #12]
 800e0d6:	6923      	ldr	r3, [r4, #16]
 800e0d8:	b94b      	cbnz	r3, 800e0ee <__swsetup_r+0x9a>
 800e0da:	89a3      	ldrh	r3, [r4, #12]
 800e0dc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e0e0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e0e4:	d003      	beq.n	800e0ee <__swsetup_r+0x9a>
 800e0e6:	4621      	mov	r1, r4
 800e0e8:	4630      	mov	r0, r6
 800e0ea:	f000 fa07 	bl	800e4fc <__smakebuf_r>
 800e0ee:	89a0      	ldrh	r0, [r4, #12]
 800e0f0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e0f4:	f010 0301 	ands.w	r3, r0, #1
 800e0f8:	d00a      	beq.n	800e110 <__swsetup_r+0xbc>
 800e0fa:	2300      	movs	r3, #0
 800e0fc:	60a3      	str	r3, [r4, #8]
 800e0fe:	6963      	ldr	r3, [r4, #20]
 800e100:	425b      	negs	r3, r3
 800e102:	61a3      	str	r3, [r4, #24]
 800e104:	6923      	ldr	r3, [r4, #16]
 800e106:	b943      	cbnz	r3, 800e11a <__swsetup_r+0xc6>
 800e108:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e10c:	d1ba      	bne.n	800e084 <__swsetup_r+0x30>
 800e10e:	bd70      	pop	{r4, r5, r6, pc}
 800e110:	0781      	lsls	r1, r0, #30
 800e112:	bf58      	it	pl
 800e114:	6963      	ldrpl	r3, [r4, #20]
 800e116:	60a3      	str	r3, [r4, #8]
 800e118:	e7f4      	b.n	800e104 <__swsetup_r+0xb0>
 800e11a:	2000      	movs	r0, #0
 800e11c:	e7f7      	b.n	800e10e <__swsetup_r+0xba>
 800e11e:	bf00      	nop
 800e120:	20000010 	.word	0x20000010
 800e124:	0800fc6c 	.word	0x0800fc6c
 800e128:	0800fc8c 	.word	0x0800fc8c
 800e12c:	0800fc4c 	.word	0x0800fc4c

0800e130 <abort>:
 800e130:	2006      	movs	r0, #6
 800e132:	b508      	push	{r3, lr}
 800e134:	f000 faae 	bl	800e694 <raise>
 800e138:	2001      	movs	r0, #1
 800e13a:	f7f4 fd59 	bl	8002bf0 <_exit>
	...

0800e140 <__sflush_r>:
 800e140:	898a      	ldrh	r2, [r1, #12]
 800e142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e146:	4605      	mov	r5, r0
 800e148:	0710      	lsls	r0, r2, #28
 800e14a:	460c      	mov	r4, r1
 800e14c:	d458      	bmi.n	800e200 <__sflush_r+0xc0>
 800e14e:	684b      	ldr	r3, [r1, #4]
 800e150:	2b00      	cmp	r3, #0
 800e152:	dc05      	bgt.n	800e160 <__sflush_r+0x20>
 800e154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e156:	2b00      	cmp	r3, #0
 800e158:	dc02      	bgt.n	800e160 <__sflush_r+0x20>
 800e15a:	2000      	movs	r0, #0
 800e15c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e162:	2e00      	cmp	r6, #0
 800e164:	d0f9      	beq.n	800e15a <__sflush_r+0x1a>
 800e166:	2300      	movs	r3, #0
 800e168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e16c:	682f      	ldr	r7, [r5, #0]
 800e16e:	602b      	str	r3, [r5, #0]
 800e170:	d032      	beq.n	800e1d8 <__sflush_r+0x98>
 800e172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e174:	89a3      	ldrh	r3, [r4, #12]
 800e176:	075a      	lsls	r2, r3, #29
 800e178:	d505      	bpl.n	800e186 <__sflush_r+0x46>
 800e17a:	6863      	ldr	r3, [r4, #4]
 800e17c:	1ac0      	subs	r0, r0, r3
 800e17e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e180:	b10b      	cbz	r3, 800e186 <__sflush_r+0x46>
 800e182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e184:	1ac0      	subs	r0, r0, r3
 800e186:	2300      	movs	r3, #0
 800e188:	4602      	mov	r2, r0
 800e18a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e18c:	4628      	mov	r0, r5
 800e18e:	6a21      	ldr	r1, [r4, #32]
 800e190:	47b0      	blx	r6
 800e192:	1c43      	adds	r3, r0, #1
 800e194:	89a3      	ldrh	r3, [r4, #12]
 800e196:	d106      	bne.n	800e1a6 <__sflush_r+0x66>
 800e198:	6829      	ldr	r1, [r5, #0]
 800e19a:	291d      	cmp	r1, #29
 800e19c:	d82c      	bhi.n	800e1f8 <__sflush_r+0xb8>
 800e19e:	4a29      	ldr	r2, [pc, #164]	; (800e244 <__sflush_r+0x104>)
 800e1a0:	40ca      	lsrs	r2, r1
 800e1a2:	07d6      	lsls	r6, r2, #31
 800e1a4:	d528      	bpl.n	800e1f8 <__sflush_r+0xb8>
 800e1a6:	2200      	movs	r2, #0
 800e1a8:	04d9      	lsls	r1, r3, #19
 800e1aa:	6062      	str	r2, [r4, #4]
 800e1ac:	6922      	ldr	r2, [r4, #16]
 800e1ae:	6022      	str	r2, [r4, #0]
 800e1b0:	d504      	bpl.n	800e1bc <__sflush_r+0x7c>
 800e1b2:	1c42      	adds	r2, r0, #1
 800e1b4:	d101      	bne.n	800e1ba <__sflush_r+0x7a>
 800e1b6:	682b      	ldr	r3, [r5, #0]
 800e1b8:	b903      	cbnz	r3, 800e1bc <__sflush_r+0x7c>
 800e1ba:	6560      	str	r0, [r4, #84]	; 0x54
 800e1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1be:	602f      	str	r7, [r5, #0]
 800e1c0:	2900      	cmp	r1, #0
 800e1c2:	d0ca      	beq.n	800e15a <__sflush_r+0x1a>
 800e1c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1c8:	4299      	cmp	r1, r3
 800e1ca:	d002      	beq.n	800e1d2 <__sflush_r+0x92>
 800e1cc:	4628      	mov	r0, r5
 800e1ce:	f7ff f9b3 	bl	800d538 <_free_r>
 800e1d2:	2000      	movs	r0, #0
 800e1d4:	6360      	str	r0, [r4, #52]	; 0x34
 800e1d6:	e7c1      	b.n	800e15c <__sflush_r+0x1c>
 800e1d8:	6a21      	ldr	r1, [r4, #32]
 800e1da:	2301      	movs	r3, #1
 800e1dc:	4628      	mov	r0, r5
 800e1de:	47b0      	blx	r6
 800e1e0:	1c41      	adds	r1, r0, #1
 800e1e2:	d1c7      	bne.n	800e174 <__sflush_r+0x34>
 800e1e4:	682b      	ldr	r3, [r5, #0]
 800e1e6:	2b00      	cmp	r3, #0
 800e1e8:	d0c4      	beq.n	800e174 <__sflush_r+0x34>
 800e1ea:	2b1d      	cmp	r3, #29
 800e1ec:	d001      	beq.n	800e1f2 <__sflush_r+0xb2>
 800e1ee:	2b16      	cmp	r3, #22
 800e1f0:	d101      	bne.n	800e1f6 <__sflush_r+0xb6>
 800e1f2:	602f      	str	r7, [r5, #0]
 800e1f4:	e7b1      	b.n	800e15a <__sflush_r+0x1a>
 800e1f6:	89a3      	ldrh	r3, [r4, #12]
 800e1f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1fc:	81a3      	strh	r3, [r4, #12]
 800e1fe:	e7ad      	b.n	800e15c <__sflush_r+0x1c>
 800e200:	690f      	ldr	r7, [r1, #16]
 800e202:	2f00      	cmp	r7, #0
 800e204:	d0a9      	beq.n	800e15a <__sflush_r+0x1a>
 800e206:	0793      	lsls	r3, r2, #30
 800e208:	680e      	ldr	r6, [r1, #0]
 800e20a:	600f      	str	r7, [r1, #0]
 800e20c:	bf0c      	ite	eq
 800e20e:	694b      	ldreq	r3, [r1, #20]
 800e210:	2300      	movne	r3, #0
 800e212:	eba6 0807 	sub.w	r8, r6, r7
 800e216:	608b      	str	r3, [r1, #8]
 800e218:	f1b8 0f00 	cmp.w	r8, #0
 800e21c:	dd9d      	ble.n	800e15a <__sflush_r+0x1a>
 800e21e:	4643      	mov	r3, r8
 800e220:	463a      	mov	r2, r7
 800e222:	6a21      	ldr	r1, [r4, #32]
 800e224:	4628      	mov	r0, r5
 800e226:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e228:	47b0      	blx	r6
 800e22a:	2800      	cmp	r0, #0
 800e22c:	dc06      	bgt.n	800e23c <__sflush_r+0xfc>
 800e22e:	89a3      	ldrh	r3, [r4, #12]
 800e230:	f04f 30ff 	mov.w	r0, #4294967295
 800e234:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e238:	81a3      	strh	r3, [r4, #12]
 800e23a:	e78f      	b.n	800e15c <__sflush_r+0x1c>
 800e23c:	4407      	add	r7, r0
 800e23e:	eba8 0800 	sub.w	r8, r8, r0
 800e242:	e7e9      	b.n	800e218 <__sflush_r+0xd8>
 800e244:	20400001 	.word	0x20400001

0800e248 <_fflush_r>:
 800e248:	b538      	push	{r3, r4, r5, lr}
 800e24a:	690b      	ldr	r3, [r1, #16]
 800e24c:	4605      	mov	r5, r0
 800e24e:	460c      	mov	r4, r1
 800e250:	b913      	cbnz	r3, 800e258 <_fflush_r+0x10>
 800e252:	2500      	movs	r5, #0
 800e254:	4628      	mov	r0, r5
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	b118      	cbz	r0, 800e262 <_fflush_r+0x1a>
 800e25a:	6983      	ldr	r3, [r0, #24]
 800e25c:	b90b      	cbnz	r3, 800e262 <_fflush_r+0x1a>
 800e25e:	f000 f887 	bl	800e370 <__sinit>
 800e262:	4b14      	ldr	r3, [pc, #80]	; (800e2b4 <_fflush_r+0x6c>)
 800e264:	429c      	cmp	r4, r3
 800e266:	d11b      	bne.n	800e2a0 <_fflush_r+0x58>
 800e268:	686c      	ldr	r4, [r5, #4]
 800e26a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d0ef      	beq.n	800e252 <_fflush_r+0xa>
 800e272:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e274:	07d0      	lsls	r0, r2, #31
 800e276:	d404      	bmi.n	800e282 <_fflush_r+0x3a>
 800e278:	0599      	lsls	r1, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_fflush_r+0x3a>
 800e27c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e27e:	f000 f915 	bl	800e4ac <__retarget_lock_acquire_recursive>
 800e282:	4628      	mov	r0, r5
 800e284:	4621      	mov	r1, r4
 800e286:	f7ff ff5b 	bl	800e140 <__sflush_r>
 800e28a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e28c:	4605      	mov	r5, r0
 800e28e:	07da      	lsls	r2, r3, #31
 800e290:	d4e0      	bmi.n	800e254 <_fflush_r+0xc>
 800e292:	89a3      	ldrh	r3, [r4, #12]
 800e294:	059b      	lsls	r3, r3, #22
 800e296:	d4dd      	bmi.n	800e254 <_fflush_r+0xc>
 800e298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e29a:	f000 f908 	bl	800e4ae <__retarget_lock_release_recursive>
 800e29e:	e7d9      	b.n	800e254 <_fflush_r+0xc>
 800e2a0:	4b05      	ldr	r3, [pc, #20]	; (800e2b8 <_fflush_r+0x70>)
 800e2a2:	429c      	cmp	r4, r3
 800e2a4:	d101      	bne.n	800e2aa <_fflush_r+0x62>
 800e2a6:	68ac      	ldr	r4, [r5, #8]
 800e2a8:	e7df      	b.n	800e26a <_fflush_r+0x22>
 800e2aa:	4b04      	ldr	r3, [pc, #16]	; (800e2bc <_fflush_r+0x74>)
 800e2ac:	429c      	cmp	r4, r3
 800e2ae:	bf08      	it	eq
 800e2b0:	68ec      	ldreq	r4, [r5, #12]
 800e2b2:	e7da      	b.n	800e26a <_fflush_r+0x22>
 800e2b4:	0800fc6c 	.word	0x0800fc6c
 800e2b8:	0800fc8c 	.word	0x0800fc8c
 800e2bc:	0800fc4c 	.word	0x0800fc4c

0800e2c0 <std>:
 800e2c0:	2300      	movs	r3, #0
 800e2c2:	b510      	push	{r4, lr}
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	6083      	str	r3, [r0, #8]
 800e2c8:	8181      	strh	r1, [r0, #12]
 800e2ca:	4619      	mov	r1, r3
 800e2cc:	6643      	str	r3, [r0, #100]	; 0x64
 800e2ce:	81c2      	strh	r2, [r0, #14]
 800e2d0:	2208      	movs	r2, #8
 800e2d2:	6183      	str	r3, [r0, #24]
 800e2d4:	e9c0 3300 	strd	r3, r3, [r0]
 800e2d8:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e2dc:	305c      	adds	r0, #92	; 0x5c
 800e2de:	f7ff f844 	bl	800d36a <memset>
 800e2e2:	4b05      	ldr	r3, [pc, #20]	; (800e2f8 <std+0x38>)
 800e2e4:	6224      	str	r4, [r4, #32]
 800e2e6:	6263      	str	r3, [r4, #36]	; 0x24
 800e2e8:	4b04      	ldr	r3, [pc, #16]	; (800e2fc <std+0x3c>)
 800e2ea:	62a3      	str	r3, [r4, #40]	; 0x28
 800e2ec:	4b04      	ldr	r3, [pc, #16]	; (800e300 <std+0x40>)
 800e2ee:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e2f0:	4b04      	ldr	r3, [pc, #16]	; (800e304 <std+0x44>)
 800e2f2:	6323      	str	r3, [r4, #48]	; 0x30
 800e2f4:	bd10      	pop	{r4, pc}
 800e2f6:	bf00      	nop
 800e2f8:	0800e6cd 	.word	0x0800e6cd
 800e2fc:	0800e6ef 	.word	0x0800e6ef
 800e300:	0800e727 	.word	0x0800e727
 800e304:	0800e74b 	.word	0x0800e74b

0800e308 <_cleanup_r>:
 800e308:	4901      	ldr	r1, [pc, #4]	; (800e310 <_cleanup_r+0x8>)
 800e30a:	f000 b8af 	b.w	800e46c <_fwalk_reent>
 800e30e:	bf00      	nop
 800e310:	0800e249 	.word	0x0800e249

0800e314 <__sfmoreglue>:
 800e314:	b570      	push	{r4, r5, r6, lr}
 800e316:	2268      	movs	r2, #104	; 0x68
 800e318:	1e4d      	subs	r5, r1, #1
 800e31a:	460e      	mov	r6, r1
 800e31c:	4355      	muls	r5, r2
 800e31e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e322:	f7ff f975 	bl	800d610 <_malloc_r>
 800e326:	4604      	mov	r4, r0
 800e328:	b140      	cbz	r0, 800e33c <__sfmoreglue+0x28>
 800e32a:	2100      	movs	r1, #0
 800e32c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e330:	e9c0 1600 	strd	r1, r6, [r0]
 800e334:	300c      	adds	r0, #12
 800e336:	60a0      	str	r0, [r4, #8]
 800e338:	f7ff f817 	bl	800d36a <memset>
 800e33c:	4620      	mov	r0, r4
 800e33e:	bd70      	pop	{r4, r5, r6, pc}

0800e340 <__sfp_lock_acquire>:
 800e340:	4801      	ldr	r0, [pc, #4]	; (800e348 <__sfp_lock_acquire+0x8>)
 800e342:	f000 b8b3 	b.w	800e4ac <__retarget_lock_acquire_recursive>
 800e346:	bf00      	nop
 800e348:	20006419 	.word	0x20006419

0800e34c <__sfp_lock_release>:
 800e34c:	4801      	ldr	r0, [pc, #4]	; (800e354 <__sfp_lock_release+0x8>)
 800e34e:	f000 b8ae 	b.w	800e4ae <__retarget_lock_release_recursive>
 800e352:	bf00      	nop
 800e354:	20006419 	.word	0x20006419

0800e358 <__sinit_lock_acquire>:
 800e358:	4801      	ldr	r0, [pc, #4]	; (800e360 <__sinit_lock_acquire+0x8>)
 800e35a:	f000 b8a7 	b.w	800e4ac <__retarget_lock_acquire_recursive>
 800e35e:	bf00      	nop
 800e360:	2000641a 	.word	0x2000641a

0800e364 <__sinit_lock_release>:
 800e364:	4801      	ldr	r0, [pc, #4]	; (800e36c <__sinit_lock_release+0x8>)
 800e366:	f000 b8a2 	b.w	800e4ae <__retarget_lock_release_recursive>
 800e36a:	bf00      	nop
 800e36c:	2000641a 	.word	0x2000641a

0800e370 <__sinit>:
 800e370:	b510      	push	{r4, lr}
 800e372:	4604      	mov	r4, r0
 800e374:	f7ff fff0 	bl	800e358 <__sinit_lock_acquire>
 800e378:	69a3      	ldr	r3, [r4, #24]
 800e37a:	b11b      	cbz	r3, 800e384 <__sinit+0x14>
 800e37c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e380:	f7ff bff0 	b.w	800e364 <__sinit_lock_release>
 800e384:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e388:	6523      	str	r3, [r4, #80]	; 0x50
 800e38a:	4620      	mov	r0, r4
 800e38c:	4b12      	ldr	r3, [pc, #72]	; (800e3d8 <__sinit+0x68>)
 800e38e:	4a13      	ldr	r2, [pc, #76]	; (800e3dc <__sinit+0x6c>)
 800e390:	681b      	ldr	r3, [r3, #0]
 800e392:	62a2      	str	r2, [r4, #40]	; 0x28
 800e394:	42a3      	cmp	r3, r4
 800e396:	bf04      	itt	eq
 800e398:	2301      	moveq	r3, #1
 800e39a:	61a3      	streq	r3, [r4, #24]
 800e39c:	f000 f820 	bl	800e3e0 <__sfp>
 800e3a0:	6060      	str	r0, [r4, #4]
 800e3a2:	4620      	mov	r0, r4
 800e3a4:	f000 f81c 	bl	800e3e0 <__sfp>
 800e3a8:	60a0      	str	r0, [r4, #8]
 800e3aa:	4620      	mov	r0, r4
 800e3ac:	f000 f818 	bl	800e3e0 <__sfp>
 800e3b0:	2200      	movs	r2, #0
 800e3b2:	2104      	movs	r1, #4
 800e3b4:	60e0      	str	r0, [r4, #12]
 800e3b6:	6860      	ldr	r0, [r4, #4]
 800e3b8:	f7ff ff82 	bl	800e2c0 <std>
 800e3bc:	2201      	movs	r2, #1
 800e3be:	2109      	movs	r1, #9
 800e3c0:	68a0      	ldr	r0, [r4, #8]
 800e3c2:	f7ff ff7d 	bl	800e2c0 <std>
 800e3c6:	2202      	movs	r2, #2
 800e3c8:	2112      	movs	r1, #18
 800e3ca:	68e0      	ldr	r0, [r4, #12]
 800e3cc:	f7ff ff78 	bl	800e2c0 <std>
 800e3d0:	2301      	movs	r3, #1
 800e3d2:	61a3      	str	r3, [r4, #24]
 800e3d4:	e7d2      	b.n	800e37c <__sinit+0xc>
 800e3d6:	bf00      	nop
 800e3d8:	0800fb64 	.word	0x0800fb64
 800e3dc:	0800e309 	.word	0x0800e309

0800e3e0 <__sfp>:
 800e3e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3e2:	4607      	mov	r7, r0
 800e3e4:	f7ff ffac 	bl	800e340 <__sfp_lock_acquire>
 800e3e8:	4b1e      	ldr	r3, [pc, #120]	; (800e464 <__sfp+0x84>)
 800e3ea:	681e      	ldr	r6, [r3, #0]
 800e3ec:	69b3      	ldr	r3, [r6, #24]
 800e3ee:	b913      	cbnz	r3, 800e3f6 <__sfp+0x16>
 800e3f0:	4630      	mov	r0, r6
 800e3f2:	f7ff ffbd 	bl	800e370 <__sinit>
 800e3f6:	3648      	adds	r6, #72	; 0x48
 800e3f8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e3fc:	3b01      	subs	r3, #1
 800e3fe:	d503      	bpl.n	800e408 <__sfp+0x28>
 800e400:	6833      	ldr	r3, [r6, #0]
 800e402:	b30b      	cbz	r3, 800e448 <__sfp+0x68>
 800e404:	6836      	ldr	r6, [r6, #0]
 800e406:	e7f7      	b.n	800e3f8 <__sfp+0x18>
 800e408:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e40c:	b9d5      	cbnz	r5, 800e444 <__sfp+0x64>
 800e40e:	4b16      	ldr	r3, [pc, #88]	; (800e468 <__sfp+0x88>)
 800e410:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e414:	6665      	str	r5, [r4, #100]	; 0x64
 800e416:	60e3      	str	r3, [r4, #12]
 800e418:	f000 f847 	bl	800e4aa <__retarget_lock_init_recursive>
 800e41c:	f7ff ff96 	bl	800e34c <__sfp_lock_release>
 800e420:	2208      	movs	r2, #8
 800e422:	4629      	mov	r1, r5
 800e424:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e428:	6025      	str	r5, [r4, #0]
 800e42a:	61a5      	str	r5, [r4, #24]
 800e42c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e430:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e434:	f7fe ff99 	bl	800d36a <memset>
 800e438:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e43c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e440:	4620      	mov	r0, r4
 800e442:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e444:	3468      	adds	r4, #104	; 0x68
 800e446:	e7d9      	b.n	800e3fc <__sfp+0x1c>
 800e448:	2104      	movs	r1, #4
 800e44a:	4638      	mov	r0, r7
 800e44c:	f7ff ff62 	bl	800e314 <__sfmoreglue>
 800e450:	4604      	mov	r4, r0
 800e452:	6030      	str	r0, [r6, #0]
 800e454:	2800      	cmp	r0, #0
 800e456:	d1d5      	bne.n	800e404 <__sfp+0x24>
 800e458:	f7ff ff78 	bl	800e34c <__sfp_lock_release>
 800e45c:	230c      	movs	r3, #12
 800e45e:	603b      	str	r3, [r7, #0]
 800e460:	e7ee      	b.n	800e440 <__sfp+0x60>
 800e462:	bf00      	nop
 800e464:	0800fb64 	.word	0x0800fb64
 800e468:	ffff0001 	.word	0xffff0001

0800e46c <_fwalk_reent>:
 800e46c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e470:	4606      	mov	r6, r0
 800e472:	4688      	mov	r8, r1
 800e474:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e478:	2700      	movs	r7, #0
 800e47a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e47e:	f1b9 0901 	subs.w	r9, r9, #1
 800e482:	d505      	bpl.n	800e490 <_fwalk_reent+0x24>
 800e484:	6824      	ldr	r4, [r4, #0]
 800e486:	2c00      	cmp	r4, #0
 800e488:	d1f7      	bne.n	800e47a <_fwalk_reent+0xe>
 800e48a:	4638      	mov	r0, r7
 800e48c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e490:	89ab      	ldrh	r3, [r5, #12]
 800e492:	2b01      	cmp	r3, #1
 800e494:	d907      	bls.n	800e4a6 <_fwalk_reent+0x3a>
 800e496:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e49a:	3301      	adds	r3, #1
 800e49c:	d003      	beq.n	800e4a6 <_fwalk_reent+0x3a>
 800e49e:	4629      	mov	r1, r5
 800e4a0:	4630      	mov	r0, r6
 800e4a2:	47c0      	blx	r8
 800e4a4:	4307      	orrs	r7, r0
 800e4a6:	3568      	adds	r5, #104	; 0x68
 800e4a8:	e7e9      	b.n	800e47e <_fwalk_reent+0x12>

0800e4aa <__retarget_lock_init_recursive>:
 800e4aa:	4770      	bx	lr

0800e4ac <__retarget_lock_acquire_recursive>:
 800e4ac:	4770      	bx	lr

0800e4ae <__retarget_lock_release_recursive>:
 800e4ae:	4770      	bx	lr

0800e4b0 <__swhatbuf_r>:
 800e4b0:	b570      	push	{r4, r5, r6, lr}
 800e4b2:	460e      	mov	r6, r1
 800e4b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e4b8:	b096      	sub	sp, #88	; 0x58
 800e4ba:	4614      	mov	r4, r2
 800e4bc:	2900      	cmp	r1, #0
 800e4be:	461d      	mov	r5, r3
 800e4c0:	da08      	bge.n	800e4d4 <__swhatbuf_r+0x24>
 800e4c2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e4c6:	2200      	movs	r2, #0
 800e4c8:	602a      	str	r2, [r5, #0]
 800e4ca:	061a      	lsls	r2, r3, #24
 800e4cc:	d410      	bmi.n	800e4f0 <__swhatbuf_r+0x40>
 800e4ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e4d2:	e00e      	b.n	800e4f2 <__swhatbuf_r+0x42>
 800e4d4:	466a      	mov	r2, sp
 800e4d6:	f000 f95f 	bl	800e798 <_fstat_r>
 800e4da:	2800      	cmp	r0, #0
 800e4dc:	dbf1      	blt.n	800e4c2 <__swhatbuf_r+0x12>
 800e4de:	9a01      	ldr	r2, [sp, #4]
 800e4e0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e4e4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e4e8:	425a      	negs	r2, r3
 800e4ea:	415a      	adcs	r2, r3
 800e4ec:	602a      	str	r2, [r5, #0]
 800e4ee:	e7ee      	b.n	800e4ce <__swhatbuf_r+0x1e>
 800e4f0:	2340      	movs	r3, #64	; 0x40
 800e4f2:	2000      	movs	r0, #0
 800e4f4:	6023      	str	r3, [r4, #0]
 800e4f6:	b016      	add	sp, #88	; 0x58
 800e4f8:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e4fc <__smakebuf_r>:
 800e4fc:	898b      	ldrh	r3, [r1, #12]
 800e4fe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e500:	079d      	lsls	r5, r3, #30
 800e502:	4606      	mov	r6, r0
 800e504:	460c      	mov	r4, r1
 800e506:	d507      	bpl.n	800e518 <__smakebuf_r+0x1c>
 800e508:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e50c:	6023      	str	r3, [r4, #0]
 800e50e:	6123      	str	r3, [r4, #16]
 800e510:	2301      	movs	r3, #1
 800e512:	6163      	str	r3, [r4, #20]
 800e514:	b002      	add	sp, #8
 800e516:	bd70      	pop	{r4, r5, r6, pc}
 800e518:	ab01      	add	r3, sp, #4
 800e51a:	466a      	mov	r2, sp
 800e51c:	f7ff ffc8 	bl	800e4b0 <__swhatbuf_r>
 800e520:	9900      	ldr	r1, [sp, #0]
 800e522:	4605      	mov	r5, r0
 800e524:	4630      	mov	r0, r6
 800e526:	f7ff f873 	bl	800d610 <_malloc_r>
 800e52a:	b948      	cbnz	r0, 800e540 <__smakebuf_r+0x44>
 800e52c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e530:	059a      	lsls	r2, r3, #22
 800e532:	d4ef      	bmi.n	800e514 <__smakebuf_r+0x18>
 800e534:	f023 0303 	bic.w	r3, r3, #3
 800e538:	f043 0302 	orr.w	r3, r3, #2
 800e53c:	81a3      	strh	r3, [r4, #12]
 800e53e:	e7e3      	b.n	800e508 <__smakebuf_r+0xc>
 800e540:	4b0d      	ldr	r3, [pc, #52]	; (800e578 <__smakebuf_r+0x7c>)
 800e542:	62b3      	str	r3, [r6, #40]	; 0x28
 800e544:	89a3      	ldrh	r3, [r4, #12]
 800e546:	6020      	str	r0, [r4, #0]
 800e548:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e54c:	6120      	str	r0, [r4, #16]
 800e54e:	81a3      	strh	r3, [r4, #12]
 800e550:	9b00      	ldr	r3, [sp, #0]
 800e552:	6163      	str	r3, [r4, #20]
 800e554:	9b01      	ldr	r3, [sp, #4]
 800e556:	b15b      	cbz	r3, 800e570 <__smakebuf_r+0x74>
 800e558:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e55c:	4630      	mov	r0, r6
 800e55e:	f000 f92d 	bl	800e7bc <_isatty_r>
 800e562:	b128      	cbz	r0, 800e570 <__smakebuf_r+0x74>
 800e564:	89a3      	ldrh	r3, [r4, #12]
 800e566:	f023 0303 	bic.w	r3, r3, #3
 800e56a:	f043 0301 	orr.w	r3, r3, #1
 800e56e:	81a3      	strh	r3, [r4, #12]
 800e570:	89a0      	ldrh	r0, [r4, #12]
 800e572:	4305      	orrs	r5, r0
 800e574:	81a5      	strh	r5, [r4, #12]
 800e576:	e7cd      	b.n	800e514 <__smakebuf_r+0x18>
 800e578:	0800e309 	.word	0x0800e309

0800e57c <memchr>:
 800e57c:	b2c9      	uxtb	r1, r1
 800e57e:	4402      	add	r2, r0
 800e580:	b510      	push	{r4, lr}
 800e582:	4290      	cmp	r0, r2
 800e584:	4603      	mov	r3, r0
 800e586:	d101      	bne.n	800e58c <memchr+0x10>
 800e588:	2300      	movs	r3, #0
 800e58a:	e003      	b.n	800e594 <memchr+0x18>
 800e58c:	781c      	ldrb	r4, [r3, #0]
 800e58e:	3001      	adds	r0, #1
 800e590:	428c      	cmp	r4, r1
 800e592:	d1f6      	bne.n	800e582 <memchr+0x6>
 800e594:	4618      	mov	r0, r3
 800e596:	bd10      	pop	{r4, pc}

0800e598 <memmove>:
 800e598:	4288      	cmp	r0, r1
 800e59a:	b510      	push	{r4, lr}
 800e59c:	eb01 0402 	add.w	r4, r1, r2
 800e5a0:	d902      	bls.n	800e5a8 <memmove+0x10>
 800e5a2:	4284      	cmp	r4, r0
 800e5a4:	4623      	mov	r3, r4
 800e5a6:	d807      	bhi.n	800e5b8 <memmove+0x20>
 800e5a8:	1e43      	subs	r3, r0, #1
 800e5aa:	42a1      	cmp	r1, r4
 800e5ac:	d008      	beq.n	800e5c0 <memmove+0x28>
 800e5ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e5b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e5b6:	e7f8      	b.n	800e5aa <memmove+0x12>
 800e5b8:	4402      	add	r2, r0
 800e5ba:	4601      	mov	r1, r0
 800e5bc:	428a      	cmp	r2, r1
 800e5be:	d100      	bne.n	800e5c2 <memmove+0x2a>
 800e5c0:	bd10      	pop	{r4, pc}
 800e5c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e5c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e5ca:	e7f7      	b.n	800e5bc <memmove+0x24>

0800e5cc <__malloc_lock>:
 800e5cc:	4801      	ldr	r0, [pc, #4]	; (800e5d4 <__malloc_lock+0x8>)
 800e5ce:	f7ff bf6d 	b.w	800e4ac <__retarget_lock_acquire_recursive>
 800e5d2:	bf00      	nop
 800e5d4:	20006418 	.word	0x20006418

0800e5d8 <__malloc_unlock>:
 800e5d8:	4801      	ldr	r0, [pc, #4]	; (800e5e0 <__malloc_unlock+0x8>)
 800e5da:	f7ff bf68 	b.w	800e4ae <__retarget_lock_release_recursive>
 800e5de:	bf00      	nop
 800e5e0:	20006418 	.word	0x20006418

0800e5e4 <_realloc_r>:
 800e5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e5e8:	4680      	mov	r8, r0
 800e5ea:	4614      	mov	r4, r2
 800e5ec:	460e      	mov	r6, r1
 800e5ee:	b921      	cbnz	r1, 800e5fa <_realloc_r+0x16>
 800e5f0:	4611      	mov	r1, r2
 800e5f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e5f6:	f7ff b80b 	b.w	800d610 <_malloc_r>
 800e5fa:	b92a      	cbnz	r2, 800e608 <_realloc_r+0x24>
 800e5fc:	4625      	mov	r5, r4
 800e5fe:	f7fe ff9b 	bl	800d538 <_free_r>
 800e602:	4628      	mov	r0, r5
 800e604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e608:	f000 f8fa 	bl	800e800 <_malloc_usable_size_r>
 800e60c:	4284      	cmp	r4, r0
 800e60e:	4607      	mov	r7, r0
 800e610:	d802      	bhi.n	800e618 <_realloc_r+0x34>
 800e612:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e616:	d812      	bhi.n	800e63e <_realloc_r+0x5a>
 800e618:	4621      	mov	r1, r4
 800e61a:	4640      	mov	r0, r8
 800e61c:	f7fe fff8 	bl	800d610 <_malloc_r>
 800e620:	4605      	mov	r5, r0
 800e622:	2800      	cmp	r0, #0
 800e624:	d0ed      	beq.n	800e602 <_realloc_r+0x1e>
 800e626:	42bc      	cmp	r4, r7
 800e628:	4622      	mov	r2, r4
 800e62a:	4631      	mov	r1, r6
 800e62c:	bf28      	it	cs
 800e62e:	463a      	movcs	r2, r7
 800e630:	f7fe fe8e 	bl	800d350 <memcpy>
 800e634:	4631      	mov	r1, r6
 800e636:	4640      	mov	r0, r8
 800e638:	f7fe ff7e 	bl	800d538 <_free_r>
 800e63c:	e7e1      	b.n	800e602 <_realloc_r+0x1e>
 800e63e:	4635      	mov	r5, r6
 800e640:	e7df      	b.n	800e602 <_realloc_r+0x1e>

0800e642 <_raise_r>:
 800e642:	291f      	cmp	r1, #31
 800e644:	b538      	push	{r3, r4, r5, lr}
 800e646:	4604      	mov	r4, r0
 800e648:	460d      	mov	r5, r1
 800e64a:	d904      	bls.n	800e656 <_raise_r+0x14>
 800e64c:	2316      	movs	r3, #22
 800e64e:	6003      	str	r3, [r0, #0]
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	bd38      	pop	{r3, r4, r5, pc}
 800e656:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e658:	b112      	cbz	r2, 800e660 <_raise_r+0x1e>
 800e65a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e65e:	b94b      	cbnz	r3, 800e674 <_raise_r+0x32>
 800e660:	4620      	mov	r0, r4
 800e662:	f000 f831 	bl	800e6c8 <_getpid_r>
 800e666:	462a      	mov	r2, r5
 800e668:	4601      	mov	r1, r0
 800e66a:	4620      	mov	r0, r4
 800e66c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e670:	f000 b818 	b.w	800e6a4 <_kill_r>
 800e674:	2b01      	cmp	r3, #1
 800e676:	d00a      	beq.n	800e68e <_raise_r+0x4c>
 800e678:	1c59      	adds	r1, r3, #1
 800e67a:	d103      	bne.n	800e684 <_raise_r+0x42>
 800e67c:	2316      	movs	r3, #22
 800e67e:	6003      	str	r3, [r0, #0]
 800e680:	2001      	movs	r0, #1
 800e682:	e7e7      	b.n	800e654 <_raise_r+0x12>
 800e684:	2400      	movs	r4, #0
 800e686:	4628      	mov	r0, r5
 800e688:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e68c:	4798      	blx	r3
 800e68e:	2000      	movs	r0, #0
 800e690:	e7e0      	b.n	800e654 <_raise_r+0x12>
	...

0800e694 <raise>:
 800e694:	4b02      	ldr	r3, [pc, #8]	; (800e6a0 <raise+0xc>)
 800e696:	4601      	mov	r1, r0
 800e698:	6818      	ldr	r0, [r3, #0]
 800e69a:	f7ff bfd2 	b.w	800e642 <_raise_r>
 800e69e:	bf00      	nop
 800e6a0:	20000010 	.word	0x20000010

0800e6a4 <_kill_r>:
 800e6a4:	b538      	push	{r3, r4, r5, lr}
 800e6a6:	2300      	movs	r3, #0
 800e6a8:	4d06      	ldr	r5, [pc, #24]	; (800e6c4 <_kill_r+0x20>)
 800e6aa:	4604      	mov	r4, r0
 800e6ac:	4608      	mov	r0, r1
 800e6ae:	4611      	mov	r1, r2
 800e6b0:	602b      	str	r3, [r5, #0]
 800e6b2:	f7f4 fa8d 	bl	8002bd0 <_kill>
 800e6b6:	1c43      	adds	r3, r0, #1
 800e6b8:	d102      	bne.n	800e6c0 <_kill_r+0x1c>
 800e6ba:	682b      	ldr	r3, [r5, #0]
 800e6bc:	b103      	cbz	r3, 800e6c0 <_kill_r+0x1c>
 800e6be:	6023      	str	r3, [r4, #0]
 800e6c0:	bd38      	pop	{r3, r4, r5, pc}
 800e6c2:	bf00      	nop
 800e6c4:	2000641c 	.word	0x2000641c

0800e6c8 <_getpid_r>:
 800e6c8:	f7f4 ba7a 	b.w	8002bc0 <_getpid>

0800e6cc <__sread>:
 800e6cc:	b510      	push	{r4, lr}
 800e6ce:	460c      	mov	r4, r1
 800e6d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e6d4:	f000 f89c 	bl	800e810 <_read_r>
 800e6d8:	2800      	cmp	r0, #0
 800e6da:	bfab      	itete	ge
 800e6dc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e6de:	89a3      	ldrhlt	r3, [r4, #12]
 800e6e0:	181b      	addge	r3, r3, r0
 800e6e2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e6e6:	bfac      	ite	ge
 800e6e8:	6563      	strge	r3, [r4, #84]	; 0x54
 800e6ea:	81a3      	strhlt	r3, [r4, #12]
 800e6ec:	bd10      	pop	{r4, pc}

0800e6ee <__swrite>:
 800e6ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f2:	461f      	mov	r7, r3
 800e6f4:	898b      	ldrh	r3, [r1, #12]
 800e6f6:	4605      	mov	r5, r0
 800e6f8:	460c      	mov	r4, r1
 800e6fa:	05db      	lsls	r3, r3, #23
 800e6fc:	4616      	mov	r6, r2
 800e6fe:	d505      	bpl.n	800e70c <__swrite+0x1e>
 800e700:	2302      	movs	r3, #2
 800e702:	2200      	movs	r2, #0
 800e704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e708:	f000 f868 	bl	800e7dc <_lseek_r>
 800e70c:	89a3      	ldrh	r3, [r4, #12]
 800e70e:	4632      	mov	r2, r6
 800e710:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e714:	4628      	mov	r0, r5
 800e716:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e71a:	81a3      	strh	r3, [r4, #12]
 800e71c:	463b      	mov	r3, r7
 800e71e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e722:	f000 b817 	b.w	800e754 <_write_r>

0800e726 <__sseek>:
 800e726:	b510      	push	{r4, lr}
 800e728:	460c      	mov	r4, r1
 800e72a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e72e:	f000 f855 	bl	800e7dc <_lseek_r>
 800e732:	1c43      	adds	r3, r0, #1
 800e734:	89a3      	ldrh	r3, [r4, #12]
 800e736:	bf15      	itete	ne
 800e738:	6560      	strne	r0, [r4, #84]	; 0x54
 800e73a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e73e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e742:	81a3      	strheq	r3, [r4, #12]
 800e744:	bf18      	it	ne
 800e746:	81a3      	strhne	r3, [r4, #12]
 800e748:	bd10      	pop	{r4, pc}

0800e74a <__sclose>:
 800e74a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e74e:	f000 b813 	b.w	800e778 <_close_r>
	...

0800e754 <_write_r>:
 800e754:	b538      	push	{r3, r4, r5, lr}
 800e756:	4604      	mov	r4, r0
 800e758:	4d06      	ldr	r5, [pc, #24]	; (800e774 <_write_r+0x20>)
 800e75a:	4608      	mov	r0, r1
 800e75c:	4611      	mov	r1, r2
 800e75e:	2200      	movs	r2, #0
 800e760:	602a      	str	r2, [r5, #0]
 800e762:	461a      	mov	r2, r3
 800e764:	f7f4 fa6b 	bl	8002c3e <_write>
 800e768:	1c43      	adds	r3, r0, #1
 800e76a:	d102      	bne.n	800e772 <_write_r+0x1e>
 800e76c:	682b      	ldr	r3, [r5, #0]
 800e76e:	b103      	cbz	r3, 800e772 <_write_r+0x1e>
 800e770:	6023      	str	r3, [r4, #0]
 800e772:	bd38      	pop	{r3, r4, r5, pc}
 800e774:	2000641c 	.word	0x2000641c

0800e778 <_close_r>:
 800e778:	b538      	push	{r3, r4, r5, lr}
 800e77a:	2300      	movs	r3, #0
 800e77c:	4d05      	ldr	r5, [pc, #20]	; (800e794 <_close_r+0x1c>)
 800e77e:	4604      	mov	r4, r0
 800e780:	4608      	mov	r0, r1
 800e782:	602b      	str	r3, [r5, #0]
 800e784:	f7f4 fa77 	bl	8002c76 <_close>
 800e788:	1c43      	adds	r3, r0, #1
 800e78a:	d102      	bne.n	800e792 <_close_r+0x1a>
 800e78c:	682b      	ldr	r3, [r5, #0]
 800e78e:	b103      	cbz	r3, 800e792 <_close_r+0x1a>
 800e790:	6023      	str	r3, [r4, #0]
 800e792:	bd38      	pop	{r3, r4, r5, pc}
 800e794:	2000641c 	.word	0x2000641c

0800e798 <_fstat_r>:
 800e798:	b538      	push	{r3, r4, r5, lr}
 800e79a:	2300      	movs	r3, #0
 800e79c:	4d06      	ldr	r5, [pc, #24]	; (800e7b8 <_fstat_r+0x20>)
 800e79e:	4604      	mov	r4, r0
 800e7a0:	4608      	mov	r0, r1
 800e7a2:	4611      	mov	r1, r2
 800e7a4:	602b      	str	r3, [r5, #0]
 800e7a6:	f7f4 fa72 	bl	8002c8e <_fstat>
 800e7aa:	1c43      	adds	r3, r0, #1
 800e7ac:	d102      	bne.n	800e7b4 <_fstat_r+0x1c>
 800e7ae:	682b      	ldr	r3, [r5, #0]
 800e7b0:	b103      	cbz	r3, 800e7b4 <_fstat_r+0x1c>
 800e7b2:	6023      	str	r3, [r4, #0]
 800e7b4:	bd38      	pop	{r3, r4, r5, pc}
 800e7b6:	bf00      	nop
 800e7b8:	2000641c 	.word	0x2000641c

0800e7bc <_isatty_r>:
 800e7bc:	b538      	push	{r3, r4, r5, lr}
 800e7be:	2300      	movs	r3, #0
 800e7c0:	4d05      	ldr	r5, [pc, #20]	; (800e7d8 <_isatty_r+0x1c>)
 800e7c2:	4604      	mov	r4, r0
 800e7c4:	4608      	mov	r0, r1
 800e7c6:	602b      	str	r3, [r5, #0]
 800e7c8:	f7f4 fa71 	bl	8002cae <_isatty>
 800e7cc:	1c43      	adds	r3, r0, #1
 800e7ce:	d102      	bne.n	800e7d6 <_isatty_r+0x1a>
 800e7d0:	682b      	ldr	r3, [r5, #0]
 800e7d2:	b103      	cbz	r3, 800e7d6 <_isatty_r+0x1a>
 800e7d4:	6023      	str	r3, [r4, #0]
 800e7d6:	bd38      	pop	{r3, r4, r5, pc}
 800e7d8:	2000641c 	.word	0x2000641c

0800e7dc <_lseek_r>:
 800e7dc:	b538      	push	{r3, r4, r5, lr}
 800e7de:	4604      	mov	r4, r0
 800e7e0:	4d06      	ldr	r5, [pc, #24]	; (800e7fc <_lseek_r+0x20>)
 800e7e2:	4608      	mov	r0, r1
 800e7e4:	4611      	mov	r1, r2
 800e7e6:	2200      	movs	r2, #0
 800e7e8:	602a      	str	r2, [r5, #0]
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	f7f4 fa6a 	bl	8002cc4 <_lseek>
 800e7f0:	1c43      	adds	r3, r0, #1
 800e7f2:	d102      	bne.n	800e7fa <_lseek_r+0x1e>
 800e7f4:	682b      	ldr	r3, [r5, #0]
 800e7f6:	b103      	cbz	r3, 800e7fa <_lseek_r+0x1e>
 800e7f8:	6023      	str	r3, [r4, #0]
 800e7fa:	bd38      	pop	{r3, r4, r5, pc}
 800e7fc:	2000641c 	.word	0x2000641c

0800e800 <_malloc_usable_size_r>:
 800e800:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e804:	1f18      	subs	r0, r3, #4
 800e806:	2b00      	cmp	r3, #0
 800e808:	bfbc      	itt	lt
 800e80a:	580b      	ldrlt	r3, [r1, r0]
 800e80c:	18c0      	addlt	r0, r0, r3
 800e80e:	4770      	bx	lr

0800e810 <_read_r>:
 800e810:	b538      	push	{r3, r4, r5, lr}
 800e812:	4604      	mov	r4, r0
 800e814:	4d06      	ldr	r5, [pc, #24]	; (800e830 <_read_r+0x20>)
 800e816:	4608      	mov	r0, r1
 800e818:	4611      	mov	r1, r2
 800e81a:	2200      	movs	r2, #0
 800e81c:	602a      	str	r2, [r5, #0]
 800e81e:	461a      	mov	r2, r3
 800e820:	f7f4 f9f0 	bl	8002c04 <_read>
 800e824:	1c43      	adds	r3, r0, #1
 800e826:	d102      	bne.n	800e82e <_read_r+0x1e>
 800e828:	682b      	ldr	r3, [r5, #0]
 800e82a:	b103      	cbz	r3, 800e82e <_read_r+0x1e>
 800e82c:	6023      	str	r3, [r4, #0]
 800e82e:	bd38      	pop	{r3, r4, r5, pc}
 800e830:	2000641c 	.word	0x2000641c
 800e834:	00000000 	.word	0x00000000

0800e838 <sin>:
 800e838:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e83a:	ec53 2b10 	vmov	r2, r3, d0
 800e83e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e842:	4827      	ldr	r0, [pc, #156]	; (800e8e0 <sin+0xa8>)
 800e844:	4281      	cmp	r1, r0
 800e846:	dc07      	bgt.n	800e858 <sin+0x20>
 800e848:	2000      	movs	r0, #0
 800e84a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800e8d8 <sin+0xa0>
 800e84e:	b005      	add	sp, #20
 800e850:	f85d eb04 	ldr.w	lr, [sp], #4
 800e854:	f000 be6c 	b.w	800f530 <__kernel_sin>
 800e858:	4822      	ldr	r0, [pc, #136]	; (800e8e4 <sin+0xac>)
 800e85a:	4281      	cmp	r1, r0
 800e85c:	dd09      	ble.n	800e872 <sin+0x3a>
 800e85e:	ee10 0a10 	vmov	r0, s0
 800e862:	4619      	mov	r1, r3
 800e864:	f7f1 fe3a 	bl	80004dc <__aeabi_dsub>
 800e868:	ec41 0b10 	vmov	d0, r0, r1
 800e86c:	b005      	add	sp, #20
 800e86e:	f85d fb04 	ldr.w	pc, [sp], #4
 800e872:	4668      	mov	r0, sp
 800e874:	f000 f838 	bl	800e8e8 <__ieee754_rem_pio2>
 800e878:	f000 0003 	and.w	r0, r0, #3
 800e87c:	2801      	cmp	r0, #1
 800e87e:	d00c      	beq.n	800e89a <sin+0x62>
 800e880:	2802      	cmp	r0, #2
 800e882:	d011      	beq.n	800e8a8 <sin+0x70>
 800e884:	b9f0      	cbnz	r0, 800e8c4 <sin+0x8c>
 800e886:	2001      	movs	r0, #1
 800e888:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e88c:	ed9d 0b00 	vldr	d0, [sp]
 800e890:	f000 fe4e 	bl	800f530 <__kernel_sin>
 800e894:	ec51 0b10 	vmov	r0, r1, d0
 800e898:	e7e6      	b.n	800e868 <sin+0x30>
 800e89a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e89e:	ed9d 0b00 	vldr	d0, [sp]
 800e8a2:	f000 fa2d 	bl	800ed00 <__kernel_cos>
 800e8a6:	e7f5      	b.n	800e894 <sin+0x5c>
 800e8a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8ac:	ed9d 0b00 	vldr	d0, [sp]
 800e8b0:	2001      	movs	r0, #1
 800e8b2:	f000 fe3d 	bl	800f530 <__kernel_sin>
 800e8b6:	ee10 0a10 	vmov	r0, s0
 800e8ba:	ec53 2b10 	vmov	r2, r3, d0
 800e8be:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800e8c2:	e7d1      	b.n	800e868 <sin+0x30>
 800e8c4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800e8c8:	ed9d 0b00 	vldr	d0, [sp]
 800e8cc:	f000 fa18 	bl	800ed00 <__kernel_cos>
 800e8d0:	e7f1      	b.n	800e8b6 <sin+0x7e>
 800e8d2:	bf00      	nop
 800e8d4:	f3af 8000 	nop.w
	...
 800e8e0:	3fe921fb 	.word	0x3fe921fb
 800e8e4:	7fefffff 	.word	0x7fefffff

0800e8e8 <__ieee754_rem_pio2>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	ec55 4b10 	vmov	r4, r5, d0
 800e8f0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800e8f4:	4bca      	ldr	r3, [pc, #808]	; (800ec20 <__ieee754_rem_pio2+0x338>)
 800e8f6:	4682      	mov	sl, r0
 800e8f8:	4598      	cmp	r8, r3
 800e8fa:	ed2d 8b02 	vpush	{d8}
 800e8fe:	b08b      	sub	sp, #44	; 0x2c
 800e900:	9502      	str	r5, [sp, #8]
 800e902:	dc08      	bgt.n	800e916 <__ieee754_rem_pio2+0x2e>
 800e904:	2200      	movs	r2, #0
 800e906:	2300      	movs	r3, #0
 800e908:	ed80 0b00 	vstr	d0, [r0]
 800e90c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800e910:	f04f 0b00 	mov.w	fp, #0
 800e914:	e028      	b.n	800e968 <__ieee754_rem_pio2+0x80>
 800e916:	4bc3      	ldr	r3, [pc, #780]	; (800ec24 <__ieee754_rem_pio2+0x33c>)
 800e918:	4598      	cmp	r8, r3
 800e91a:	dc78      	bgt.n	800ea0e <__ieee754_rem_pio2+0x126>
 800e91c:	9b02      	ldr	r3, [sp, #8]
 800e91e:	ee10 0a10 	vmov	r0, s0
 800e922:	4ec1      	ldr	r6, [pc, #772]	; (800ec28 <__ieee754_rem_pio2+0x340>)
 800e924:	4629      	mov	r1, r5
 800e926:	2b00      	cmp	r3, #0
 800e928:	a3af      	add	r3, pc, #700	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x300>)
 800e92a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e92e:	dd39      	ble.n	800e9a4 <__ieee754_rem_pio2+0xbc>
 800e930:	f7f1 fdd4 	bl	80004dc <__aeabi_dsub>
 800e934:	45b0      	cmp	r8, r6
 800e936:	4604      	mov	r4, r0
 800e938:	460d      	mov	r5, r1
 800e93a:	d01b      	beq.n	800e974 <__ieee754_rem_pio2+0x8c>
 800e93c:	a3ac      	add	r3, pc, #688	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x308>)
 800e93e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e942:	f7f1 fdcb 	bl	80004dc <__aeabi_dsub>
 800e946:	4602      	mov	r2, r0
 800e948:	460b      	mov	r3, r1
 800e94a:	4620      	mov	r0, r4
 800e94c:	4629      	mov	r1, r5
 800e94e:	e9ca 2300 	strd	r2, r3, [sl]
 800e952:	f7f1 fdc3 	bl	80004dc <__aeabi_dsub>
 800e956:	a3a6      	add	r3, pc, #664	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x308>)
 800e958:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e95c:	f04f 0b01 	mov.w	fp, #1
 800e960:	f7f1 fdbc 	bl	80004dc <__aeabi_dsub>
 800e964:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e968:	4658      	mov	r0, fp
 800e96a:	b00b      	add	sp, #44	; 0x2c
 800e96c:	ecbd 8b02 	vpop	{d8}
 800e970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e974:	a3a0      	add	r3, pc, #640	; (adr r3, 800ebf8 <__ieee754_rem_pio2+0x310>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fdaf 	bl	80004dc <__aeabi_dsub>
 800e97e:	4604      	mov	r4, r0
 800e980:	460d      	mov	r5, r1
 800e982:	a39f      	add	r3, pc, #636	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x318>)
 800e984:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e988:	f7f1 fda8 	bl	80004dc <__aeabi_dsub>
 800e98c:	4602      	mov	r2, r0
 800e98e:	460b      	mov	r3, r1
 800e990:	4620      	mov	r0, r4
 800e992:	4629      	mov	r1, r5
 800e994:	e9ca 2300 	strd	r2, r3, [sl]
 800e998:	f7f1 fda0 	bl	80004dc <__aeabi_dsub>
 800e99c:	a398      	add	r3, pc, #608	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x318>)
 800e99e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9a2:	e7db      	b.n	800e95c <__ieee754_rem_pio2+0x74>
 800e9a4:	f7f1 fd9c 	bl	80004e0 <__adddf3>
 800e9a8:	45b0      	cmp	r8, r6
 800e9aa:	4604      	mov	r4, r0
 800e9ac:	460d      	mov	r5, r1
 800e9ae:	d016      	beq.n	800e9de <__ieee754_rem_pio2+0xf6>
 800e9b0:	a38f      	add	r3, pc, #572	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x308>)
 800e9b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b6:	f7f1 fd93 	bl	80004e0 <__adddf3>
 800e9ba:	4602      	mov	r2, r0
 800e9bc:	460b      	mov	r3, r1
 800e9be:	4620      	mov	r0, r4
 800e9c0:	4629      	mov	r1, r5
 800e9c2:	e9ca 2300 	strd	r2, r3, [sl]
 800e9c6:	f7f1 fd89 	bl	80004dc <__aeabi_dsub>
 800e9ca:	a389      	add	r3, pc, #548	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x308>)
 800e9cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9d0:	f7f1 fd86 	bl	80004e0 <__adddf3>
 800e9d4:	f04f 3bff 	mov.w	fp, #4294967295
 800e9d8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800e9dc:	e7c4      	b.n	800e968 <__ieee754_rem_pio2+0x80>
 800e9de:	a386      	add	r3, pc, #536	; (adr r3, 800ebf8 <__ieee754_rem_pio2+0x310>)
 800e9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9e4:	f7f1 fd7c 	bl	80004e0 <__adddf3>
 800e9e8:	4604      	mov	r4, r0
 800e9ea:	460d      	mov	r5, r1
 800e9ec:	a384      	add	r3, pc, #528	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x318>)
 800e9ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9f2:	f7f1 fd75 	bl	80004e0 <__adddf3>
 800e9f6:	4602      	mov	r2, r0
 800e9f8:	460b      	mov	r3, r1
 800e9fa:	4620      	mov	r0, r4
 800e9fc:	4629      	mov	r1, r5
 800e9fe:	e9ca 2300 	strd	r2, r3, [sl]
 800ea02:	f7f1 fd6b 	bl	80004dc <__aeabi_dsub>
 800ea06:	a37e      	add	r3, pc, #504	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x318>)
 800ea08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea0c:	e7e0      	b.n	800e9d0 <__ieee754_rem_pio2+0xe8>
 800ea0e:	4b87      	ldr	r3, [pc, #540]	; (800ec2c <__ieee754_rem_pio2+0x344>)
 800ea10:	4598      	cmp	r8, r3
 800ea12:	f300 80d9 	bgt.w	800ebc8 <__ieee754_rem_pio2+0x2e0>
 800ea16:	f000 fe49 	bl	800f6ac <fabs>
 800ea1a:	ee10 0a10 	vmov	r0, s0
 800ea1e:	ec55 4b10 	vmov	r4, r5, d0
 800ea22:	a379      	add	r3, pc, #484	; (adr r3, 800ec08 <__ieee754_rem_pio2+0x320>)
 800ea24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea28:	4629      	mov	r1, r5
 800ea2a:	f7f1 ff0f 	bl	800084c <__aeabi_dmul>
 800ea2e:	2200      	movs	r2, #0
 800ea30:	4b7f      	ldr	r3, [pc, #508]	; (800ec30 <__ieee754_rem_pio2+0x348>)
 800ea32:	f7f1 fd55 	bl	80004e0 <__adddf3>
 800ea36:	f7f2 f9a3 	bl	8000d80 <__aeabi_d2iz>
 800ea3a:	4683      	mov	fp, r0
 800ea3c:	f7f1 fe9c 	bl	8000778 <__aeabi_i2d>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	ec43 2b18 	vmov	d8, r2, r3
 800ea48:	a367      	add	r3, pc, #412	; (adr r3, 800ebe8 <__ieee754_rem_pio2+0x300>)
 800ea4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea4e:	f7f1 fefd 	bl	800084c <__aeabi_dmul>
 800ea52:	4602      	mov	r2, r0
 800ea54:	460b      	mov	r3, r1
 800ea56:	4620      	mov	r0, r4
 800ea58:	4629      	mov	r1, r5
 800ea5a:	f7f1 fd3f 	bl	80004dc <__aeabi_dsub>
 800ea5e:	4606      	mov	r6, r0
 800ea60:	460f      	mov	r7, r1
 800ea62:	a363      	add	r3, pc, #396	; (adr r3, 800ebf0 <__ieee754_rem_pio2+0x308>)
 800ea64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ea68:	ec51 0b18 	vmov	r0, r1, d8
 800ea6c:	f7f1 feee 	bl	800084c <__aeabi_dmul>
 800ea70:	f1bb 0f1f 	cmp.w	fp, #31
 800ea74:	4604      	mov	r4, r0
 800ea76:	460d      	mov	r5, r1
 800ea78:	dc0d      	bgt.n	800ea96 <__ieee754_rem_pio2+0x1ae>
 800ea7a:	f10b 32ff 	add.w	r2, fp, #4294967295
 800ea7e:	4b6d      	ldr	r3, [pc, #436]	; (800ec34 <__ieee754_rem_pio2+0x34c>)
 800ea80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ea84:	4543      	cmp	r3, r8
 800ea86:	d006      	beq.n	800ea96 <__ieee754_rem_pio2+0x1ae>
 800ea88:	4622      	mov	r2, r4
 800ea8a:	462b      	mov	r3, r5
 800ea8c:	4630      	mov	r0, r6
 800ea8e:	4639      	mov	r1, r7
 800ea90:	f7f1 fd24 	bl	80004dc <__aeabi_dsub>
 800ea94:	e00f      	b.n	800eab6 <__ieee754_rem_pio2+0x1ce>
 800ea96:	462b      	mov	r3, r5
 800ea98:	4622      	mov	r2, r4
 800ea9a:	4630      	mov	r0, r6
 800ea9c:	4639      	mov	r1, r7
 800ea9e:	f7f1 fd1d 	bl	80004dc <__aeabi_dsub>
 800eaa2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eaa6:	9303      	str	r3, [sp, #12]
 800eaa8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eaac:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800eab0:	f1b8 0f10 	cmp.w	r8, #16
 800eab4:	dc02      	bgt.n	800eabc <__ieee754_rem_pio2+0x1d4>
 800eab6:	e9ca 0100 	strd	r0, r1, [sl]
 800eaba:	e039      	b.n	800eb30 <__ieee754_rem_pio2+0x248>
 800eabc:	a34e      	add	r3, pc, #312	; (adr r3, 800ebf8 <__ieee754_rem_pio2+0x310>)
 800eabe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eac2:	ec51 0b18 	vmov	r0, r1, d8
 800eac6:	f7f1 fec1 	bl	800084c <__aeabi_dmul>
 800eaca:	4604      	mov	r4, r0
 800eacc:	460d      	mov	r5, r1
 800eace:	4602      	mov	r2, r0
 800ead0:	460b      	mov	r3, r1
 800ead2:	4630      	mov	r0, r6
 800ead4:	4639      	mov	r1, r7
 800ead6:	f7f1 fd01 	bl	80004dc <__aeabi_dsub>
 800eada:	4602      	mov	r2, r0
 800eadc:	460b      	mov	r3, r1
 800eade:	4680      	mov	r8, r0
 800eae0:	4689      	mov	r9, r1
 800eae2:	4630      	mov	r0, r6
 800eae4:	4639      	mov	r1, r7
 800eae6:	f7f1 fcf9 	bl	80004dc <__aeabi_dsub>
 800eaea:	4622      	mov	r2, r4
 800eaec:	462b      	mov	r3, r5
 800eaee:	f7f1 fcf5 	bl	80004dc <__aeabi_dsub>
 800eaf2:	4604      	mov	r4, r0
 800eaf4:	460d      	mov	r5, r1
 800eaf6:	a342      	add	r3, pc, #264	; (adr r3, 800ec00 <__ieee754_rem_pio2+0x318>)
 800eaf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eafc:	ec51 0b18 	vmov	r0, r1, d8
 800eb00:	f7f1 fea4 	bl	800084c <__aeabi_dmul>
 800eb04:	4622      	mov	r2, r4
 800eb06:	462b      	mov	r3, r5
 800eb08:	f7f1 fce8 	bl	80004dc <__aeabi_dsub>
 800eb0c:	4602      	mov	r2, r0
 800eb0e:	460b      	mov	r3, r1
 800eb10:	4604      	mov	r4, r0
 800eb12:	460d      	mov	r5, r1
 800eb14:	4640      	mov	r0, r8
 800eb16:	4649      	mov	r1, r9
 800eb18:	f7f1 fce0 	bl	80004dc <__aeabi_dsub>
 800eb1c:	9a03      	ldr	r2, [sp, #12]
 800eb1e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800eb22:	1ad3      	subs	r3, r2, r3
 800eb24:	2b31      	cmp	r3, #49	; 0x31
 800eb26:	dc24      	bgt.n	800eb72 <__ieee754_rem_pio2+0x28a>
 800eb28:	4646      	mov	r6, r8
 800eb2a:	464f      	mov	r7, r9
 800eb2c:	e9ca 0100 	strd	r0, r1, [sl]
 800eb30:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb34:	4630      	mov	r0, r6
 800eb36:	4639      	mov	r1, r7
 800eb38:	4642      	mov	r2, r8
 800eb3a:	464b      	mov	r3, r9
 800eb3c:	f7f1 fcce 	bl	80004dc <__aeabi_dsub>
 800eb40:	462b      	mov	r3, r5
 800eb42:	4622      	mov	r2, r4
 800eb44:	f7f1 fcca 	bl	80004dc <__aeabi_dsub>
 800eb48:	9b02      	ldr	r3, [sp, #8]
 800eb4a:	2b00      	cmp	r3, #0
 800eb4c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800eb50:	f6bf af0a 	bge.w	800e968 <__ieee754_rem_pio2+0x80>
 800eb54:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800eb58:	f8ca 8000 	str.w	r8, [sl]
 800eb5c:	f8ca 0008 	str.w	r0, [sl, #8]
 800eb60:	f8ca 3004 	str.w	r3, [sl, #4]
 800eb64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800eb68:	f8ca 300c 	str.w	r3, [sl, #12]
 800eb6c:	f1cb 0b00 	rsb	fp, fp, #0
 800eb70:	e6fa      	b.n	800e968 <__ieee754_rem_pio2+0x80>
 800eb72:	a327      	add	r3, pc, #156	; (adr r3, 800ec10 <__ieee754_rem_pio2+0x328>)
 800eb74:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eb78:	ec51 0b18 	vmov	r0, r1, d8
 800eb7c:	f7f1 fe66 	bl	800084c <__aeabi_dmul>
 800eb80:	4604      	mov	r4, r0
 800eb82:	460d      	mov	r5, r1
 800eb84:	4602      	mov	r2, r0
 800eb86:	460b      	mov	r3, r1
 800eb88:	4640      	mov	r0, r8
 800eb8a:	4649      	mov	r1, r9
 800eb8c:	f7f1 fca6 	bl	80004dc <__aeabi_dsub>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	4606      	mov	r6, r0
 800eb96:	460f      	mov	r7, r1
 800eb98:	4640      	mov	r0, r8
 800eb9a:	4649      	mov	r1, r9
 800eb9c:	f7f1 fc9e 	bl	80004dc <__aeabi_dsub>
 800eba0:	4622      	mov	r2, r4
 800eba2:	462b      	mov	r3, r5
 800eba4:	f7f1 fc9a 	bl	80004dc <__aeabi_dsub>
 800eba8:	4604      	mov	r4, r0
 800ebaa:	460d      	mov	r5, r1
 800ebac:	a31a      	add	r3, pc, #104	; (adr r3, 800ec18 <__ieee754_rem_pio2+0x330>)
 800ebae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebb2:	ec51 0b18 	vmov	r0, r1, d8
 800ebb6:	f7f1 fe49 	bl	800084c <__aeabi_dmul>
 800ebba:	4622      	mov	r2, r4
 800ebbc:	462b      	mov	r3, r5
 800ebbe:	f7f1 fc8d 	bl	80004dc <__aeabi_dsub>
 800ebc2:	4604      	mov	r4, r0
 800ebc4:	460d      	mov	r5, r1
 800ebc6:	e75f      	b.n	800ea88 <__ieee754_rem_pio2+0x1a0>
 800ebc8:	4b1b      	ldr	r3, [pc, #108]	; (800ec38 <__ieee754_rem_pio2+0x350>)
 800ebca:	4598      	cmp	r8, r3
 800ebcc:	dd36      	ble.n	800ec3c <__ieee754_rem_pio2+0x354>
 800ebce:	ee10 2a10 	vmov	r2, s0
 800ebd2:	462b      	mov	r3, r5
 800ebd4:	4620      	mov	r0, r4
 800ebd6:	4629      	mov	r1, r5
 800ebd8:	f7f1 fc80 	bl	80004dc <__aeabi_dsub>
 800ebdc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800ebe0:	e9ca 0100 	strd	r0, r1, [sl]
 800ebe4:	e694      	b.n	800e910 <__ieee754_rem_pio2+0x28>
 800ebe6:	bf00      	nop
 800ebe8:	54400000 	.word	0x54400000
 800ebec:	3ff921fb 	.word	0x3ff921fb
 800ebf0:	1a626331 	.word	0x1a626331
 800ebf4:	3dd0b461 	.word	0x3dd0b461
 800ebf8:	1a600000 	.word	0x1a600000
 800ebfc:	3dd0b461 	.word	0x3dd0b461
 800ec00:	2e037073 	.word	0x2e037073
 800ec04:	3ba3198a 	.word	0x3ba3198a
 800ec08:	6dc9c883 	.word	0x6dc9c883
 800ec0c:	3fe45f30 	.word	0x3fe45f30
 800ec10:	2e000000 	.word	0x2e000000
 800ec14:	3ba3198a 	.word	0x3ba3198a
 800ec18:	252049c1 	.word	0x252049c1
 800ec1c:	397b839a 	.word	0x397b839a
 800ec20:	3fe921fb 	.word	0x3fe921fb
 800ec24:	4002d97b 	.word	0x4002d97b
 800ec28:	3ff921fb 	.word	0x3ff921fb
 800ec2c:	413921fb 	.word	0x413921fb
 800ec30:	3fe00000 	.word	0x3fe00000
 800ec34:	0800fcac 	.word	0x0800fcac
 800ec38:	7fefffff 	.word	0x7fefffff
 800ec3c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800ec40:	ee10 0a10 	vmov	r0, s0
 800ec44:	ee10 6a10 	vmov	r6, s0
 800ec48:	ad04      	add	r5, sp, #16
 800ec4a:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800ec4e:	46a9      	mov	r9, r5
 800ec50:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800ec54:	f04f 0803 	mov.w	r8, #3
 800ec58:	460f      	mov	r7, r1
 800ec5a:	f7f2 f891 	bl	8000d80 <__aeabi_d2iz>
 800ec5e:	f7f1 fd8b 	bl	8000778 <__aeabi_i2d>
 800ec62:	4602      	mov	r2, r0
 800ec64:	460b      	mov	r3, r1
 800ec66:	4630      	mov	r0, r6
 800ec68:	4639      	mov	r1, r7
 800ec6a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ec6e:	f7f1 fc35 	bl	80004dc <__aeabi_dsub>
 800ec72:	2200      	movs	r2, #0
 800ec74:	4b20      	ldr	r3, [pc, #128]	; (800ecf8 <__ieee754_rem_pio2+0x410>)
 800ec76:	f7f1 fde9 	bl	800084c <__aeabi_dmul>
 800ec7a:	460f      	mov	r7, r1
 800ec7c:	4606      	mov	r6, r0
 800ec7e:	f7f2 f87f 	bl	8000d80 <__aeabi_d2iz>
 800ec82:	f7f1 fd79 	bl	8000778 <__aeabi_i2d>
 800ec86:	4602      	mov	r2, r0
 800ec88:	460b      	mov	r3, r1
 800ec8a:	4630      	mov	r0, r6
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	2600      	movs	r6, #0
 800ec90:	2700      	movs	r7, #0
 800ec92:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800ec96:	f7f1 fc21 	bl	80004dc <__aeabi_dsub>
 800ec9a:	2200      	movs	r2, #0
 800ec9c:	4b16      	ldr	r3, [pc, #88]	; (800ecf8 <__ieee754_rem_pio2+0x410>)
 800ec9e:	f7f1 fdd5 	bl	800084c <__aeabi_dmul>
 800eca2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eca6:	4632      	mov	r2, r6
 800eca8:	463b      	mov	r3, r7
 800ecaa:	46c3      	mov	fp, r8
 800ecac:	3d08      	subs	r5, #8
 800ecae:	f108 38ff 	add.w	r8, r8, #4294967295
 800ecb2:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800ecb6:	f7f2 f831 	bl	8000d1c <__aeabi_dcmpeq>
 800ecba:	2800      	cmp	r0, #0
 800ecbc:	d1f3      	bne.n	800eca6 <__ieee754_rem_pio2+0x3be>
 800ecbe:	4b0f      	ldr	r3, [pc, #60]	; (800ecfc <__ieee754_rem_pio2+0x414>)
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	4651      	mov	r1, sl
 800ecc4:	4648      	mov	r0, r9
 800ecc6:	9301      	str	r3, [sp, #4]
 800ecc8:	2302      	movs	r3, #2
 800ecca:	9300      	str	r3, [sp, #0]
 800eccc:	465b      	mov	r3, fp
 800ecce:	f000 f8df 	bl	800ee90 <__kernel_rem_pio2>
 800ecd2:	9b02      	ldr	r3, [sp, #8]
 800ecd4:	4683      	mov	fp, r0
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	f6bf ae46 	bge.w	800e968 <__ieee754_rem_pio2+0x80>
 800ecdc:	e9da 2100 	ldrd	r2, r1, [sl]
 800ece0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ece4:	e9ca 2300 	strd	r2, r3, [sl]
 800ece8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800ecec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ecf0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800ecf4:	e73a      	b.n	800eb6c <__ieee754_rem_pio2+0x284>
 800ecf6:	bf00      	nop
 800ecf8:	41700000 	.word	0x41700000
 800ecfc:	0800fd2c 	.word	0x0800fd2c

0800ed00 <__kernel_cos>:
 800ed00:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	ec57 6b10 	vmov	r6, r7, d0
 800ed08:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800ed0c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800ed10:	ed8d 1b00 	vstr	d1, [sp]
 800ed14:	da07      	bge.n	800ed26 <__kernel_cos+0x26>
 800ed16:	ee10 0a10 	vmov	r0, s0
 800ed1a:	4639      	mov	r1, r7
 800ed1c:	f7f2 f830 	bl	8000d80 <__aeabi_d2iz>
 800ed20:	2800      	cmp	r0, #0
 800ed22:	f000 8088 	beq.w	800ee36 <__kernel_cos+0x136>
 800ed26:	4632      	mov	r2, r6
 800ed28:	463b      	mov	r3, r7
 800ed2a:	4630      	mov	r0, r6
 800ed2c:	4639      	mov	r1, r7
 800ed2e:	f7f1 fd8d 	bl	800084c <__aeabi_dmul>
 800ed32:	4604      	mov	r4, r0
 800ed34:	460d      	mov	r5, r1
 800ed36:	2200      	movs	r2, #0
 800ed38:	4b4f      	ldr	r3, [pc, #316]	; (800ee78 <__kernel_cos+0x178>)
 800ed3a:	f7f1 fd87 	bl	800084c <__aeabi_dmul>
 800ed3e:	4682      	mov	sl, r0
 800ed40:	468b      	mov	fp, r1
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	a33e      	add	r3, pc, #248	; (adr r3, 800ee40 <__kernel_cos+0x140>)
 800ed48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed4c:	f7f1 fd7e 	bl	800084c <__aeabi_dmul>
 800ed50:	a33d      	add	r3, pc, #244	; (adr r3, 800ee48 <__kernel_cos+0x148>)
 800ed52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed56:	f7f1 fbc3 	bl	80004e0 <__adddf3>
 800ed5a:	4622      	mov	r2, r4
 800ed5c:	462b      	mov	r3, r5
 800ed5e:	f7f1 fd75 	bl	800084c <__aeabi_dmul>
 800ed62:	a33b      	add	r3, pc, #236	; (adr r3, 800ee50 <__kernel_cos+0x150>)
 800ed64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed68:	f7f1 fbb8 	bl	80004dc <__aeabi_dsub>
 800ed6c:	4622      	mov	r2, r4
 800ed6e:	462b      	mov	r3, r5
 800ed70:	f7f1 fd6c 	bl	800084c <__aeabi_dmul>
 800ed74:	a338      	add	r3, pc, #224	; (adr r3, 800ee58 <__kernel_cos+0x158>)
 800ed76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed7a:	f7f1 fbb1 	bl	80004e0 <__adddf3>
 800ed7e:	4622      	mov	r2, r4
 800ed80:	462b      	mov	r3, r5
 800ed82:	f7f1 fd63 	bl	800084c <__aeabi_dmul>
 800ed86:	a336      	add	r3, pc, #216	; (adr r3, 800ee60 <__kernel_cos+0x160>)
 800ed88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed8c:	f7f1 fba6 	bl	80004dc <__aeabi_dsub>
 800ed90:	4622      	mov	r2, r4
 800ed92:	462b      	mov	r3, r5
 800ed94:	f7f1 fd5a 	bl	800084c <__aeabi_dmul>
 800ed98:	a333      	add	r3, pc, #204	; (adr r3, 800ee68 <__kernel_cos+0x168>)
 800ed9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed9e:	f7f1 fb9f 	bl	80004e0 <__adddf3>
 800eda2:	4622      	mov	r2, r4
 800eda4:	462b      	mov	r3, r5
 800eda6:	f7f1 fd51 	bl	800084c <__aeabi_dmul>
 800edaa:	4622      	mov	r2, r4
 800edac:	462b      	mov	r3, r5
 800edae:	f7f1 fd4d 	bl	800084c <__aeabi_dmul>
 800edb2:	4604      	mov	r4, r0
 800edb4:	460d      	mov	r5, r1
 800edb6:	4630      	mov	r0, r6
 800edb8:	4639      	mov	r1, r7
 800edba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edbe:	f7f1 fd45 	bl	800084c <__aeabi_dmul>
 800edc2:	460b      	mov	r3, r1
 800edc4:	4602      	mov	r2, r0
 800edc6:	4629      	mov	r1, r5
 800edc8:	4620      	mov	r0, r4
 800edca:	f7f1 fb87 	bl	80004dc <__aeabi_dsub>
 800edce:	4b2b      	ldr	r3, [pc, #172]	; (800ee7c <__kernel_cos+0x17c>)
 800edd0:	4606      	mov	r6, r0
 800edd2:	460f      	mov	r7, r1
 800edd4:	4598      	cmp	r8, r3
 800edd6:	dc10      	bgt.n	800edfa <__kernel_cos+0xfa>
 800edd8:	4602      	mov	r2, r0
 800edda:	460b      	mov	r3, r1
 800eddc:	4650      	mov	r0, sl
 800edde:	4659      	mov	r1, fp
 800ede0:	f7f1 fb7c 	bl	80004dc <__aeabi_dsub>
 800ede4:	4602      	mov	r2, r0
 800ede6:	460b      	mov	r3, r1
 800ede8:	2000      	movs	r0, #0
 800edea:	4925      	ldr	r1, [pc, #148]	; (800ee80 <__kernel_cos+0x180>)
 800edec:	f7f1 fb76 	bl	80004dc <__aeabi_dsub>
 800edf0:	ec41 0b10 	vmov	d0, r0, r1
 800edf4:	b003      	add	sp, #12
 800edf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800edfa:	4b22      	ldr	r3, [pc, #136]	; (800ee84 <__kernel_cos+0x184>)
 800edfc:	2400      	movs	r4, #0
 800edfe:	2000      	movs	r0, #0
 800ee00:	491f      	ldr	r1, [pc, #124]	; (800ee80 <__kernel_cos+0x180>)
 800ee02:	4598      	cmp	r8, r3
 800ee04:	4622      	mov	r2, r4
 800ee06:	bfd4      	ite	le
 800ee08:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ee0c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ee88 <__kernel_cos+0x188>)
 800ee0e:	462b      	mov	r3, r5
 800ee10:	f7f1 fb64 	bl	80004dc <__aeabi_dsub>
 800ee14:	4622      	mov	r2, r4
 800ee16:	4680      	mov	r8, r0
 800ee18:	4689      	mov	r9, r1
 800ee1a:	462b      	mov	r3, r5
 800ee1c:	4650      	mov	r0, sl
 800ee1e:	4659      	mov	r1, fp
 800ee20:	f7f1 fb5c 	bl	80004dc <__aeabi_dsub>
 800ee24:	4632      	mov	r2, r6
 800ee26:	463b      	mov	r3, r7
 800ee28:	f7f1 fb58 	bl	80004dc <__aeabi_dsub>
 800ee2c:	4602      	mov	r2, r0
 800ee2e:	460b      	mov	r3, r1
 800ee30:	4640      	mov	r0, r8
 800ee32:	4649      	mov	r1, r9
 800ee34:	e7da      	b.n	800edec <__kernel_cos+0xec>
 800ee36:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ee70 <__kernel_cos+0x170>
 800ee3a:	e7db      	b.n	800edf4 <__kernel_cos+0xf4>
 800ee3c:	f3af 8000 	nop.w
 800ee40:	be8838d4 	.word	0xbe8838d4
 800ee44:	bda8fae9 	.word	0xbda8fae9
 800ee48:	bdb4b1c4 	.word	0xbdb4b1c4
 800ee4c:	3e21ee9e 	.word	0x3e21ee9e
 800ee50:	809c52ad 	.word	0x809c52ad
 800ee54:	3e927e4f 	.word	0x3e927e4f
 800ee58:	19cb1590 	.word	0x19cb1590
 800ee5c:	3efa01a0 	.word	0x3efa01a0
 800ee60:	16c15177 	.word	0x16c15177
 800ee64:	3f56c16c 	.word	0x3f56c16c
 800ee68:	5555554c 	.word	0x5555554c
 800ee6c:	3fa55555 	.word	0x3fa55555
 800ee70:	00000000 	.word	0x00000000
 800ee74:	3ff00000 	.word	0x3ff00000
 800ee78:	3fe00000 	.word	0x3fe00000
 800ee7c:	3fd33332 	.word	0x3fd33332
 800ee80:	3ff00000 	.word	0x3ff00000
 800ee84:	3fe90000 	.word	0x3fe90000
 800ee88:	3fd20000 	.word	0x3fd20000
 800ee8c:	00000000 	.word	0x00000000

0800ee90 <__kernel_rem_pio2>:
 800ee90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee94:	ed2d 8b02 	vpush	{d8}
 800ee98:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ee9c:	f112 0f14 	cmn.w	r2, #20
 800eea0:	f04f 0500 	mov.w	r5, #0
 800eea4:	9308      	str	r3, [sp, #32]
 800eea6:	bfa8      	it	ge
 800eea8:	1ed4      	subge	r4, r2, #3
 800eeaa:	4bc3      	ldr	r3, [pc, #780]	; (800f1b8 <__kernel_rem_pio2+0x328>)
 800eeac:	bfb8      	it	lt
 800eeae:	2400      	movlt	r4, #0
 800eeb0:	9101      	str	r1, [sp, #4]
 800eeb2:	ae22      	add	r6, sp, #136	; 0x88
 800eeb4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800eeb6:	900b      	str	r0, [sp, #44]	; 0x2c
 800eeb8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800eebc:	9302      	str	r3, [sp, #8]
 800eebe:	9b08      	ldr	r3, [sp, #32]
 800eec0:	f103 33ff 	add.w	r3, r3, #4294967295
 800eec4:	9306      	str	r3, [sp, #24]
 800eec6:	bfa4      	itt	ge
 800eec8:	2318      	movge	r3, #24
 800eeca:	fb94 f4f3 	sdivge	r4, r4, r3
 800eece:	f06f 0317 	mvn.w	r3, #23
 800eed2:	fb04 3303 	mla	r3, r4, r3, r3
 800eed6:	eb03 0a02 	add.w	sl, r3, r2
 800eeda:	9b02      	ldr	r3, [sp, #8]
 800eedc:	9a06      	ldr	r2, [sp, #24]
 800eede:	eb03 0802 	add.w	r8, r3, r2
 800eee2:	1aa7      	subs	r7, r4, r2
 800eee4:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800eee6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 800f1a8 <__kernel_rem_pio2+0x318>
 800eeea:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800eeee:	4545      	cmp	r5, r8
 800eef0:	dd13      	ble.n	800ef1a <__kernel_rem_pio2+0x8a>
 800eef2:	aa22      	add	r2, sp, #136	; 0x88
 800eef4:	9b08      	ldr	r3, [sp, #32]
 800eef6:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800eefa:	f04f 0800 	mov.w	r8, #0
 800eefe:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ef02:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 800f1a8 <__kernel_rem_pio2+0x318>
 800ef06:	9b02      	ldr	r3, [sp, #8]
 800ef08:	4598      	cmp	r8, r3
 800ef0a:	dc2e      	bgt.n	800ef6a <__kernel_rem_pio2+0xda>
 800ef0c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ef10:	462f      	mov	r7, r5
 800ef12:	2600      	movs	r6, #0
 800ef14:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ef18:	e01b      	b.n	800ef52 <__kernel_rem_pio2+0xc2>
 800ef1a:	42ef      	cmn	r7, r5
 800ef1c:	d407      	bmi.n	800ef2e <__kernel_rem_pio2+0x9e>
 800ef1e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ef22:	f7f1 fc29 	bl	8000778 <__aeabi_i2d>
 800ef26:	3501      	adds	r5, #1
 800ef28:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ef2c:	e7df      	b.n	800eeee <__kernel_rem_pio2+0x5e>
 800ef2e:	ec51 0b18 	vmov	r0, r1, d8
 800ef32:	e7f8      	b.n	800ef26 <__kernel_rem_pio2+0x96>
 800ef34:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ef38:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ef3c:	3601      	adds	r6, #1
 800ef3e:	f7f1 fc85 	bl	800084c <__aeabi_dmul>
 800ef42:	4602      	mov	r2, r0
 800ef44:	460b      	mov	r3, r1
 800ef46:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef4a:	f7f1 fac9 	bl	80004e0 <__adddf3>
 800ef4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ef52:	9b06      	ldr	r3, [sp, #24]
 800ef54:	3f08      	subs	r7, #8
 800ef56:	429e      	cmp	r6, r3
 800ef58:	ddec      	ble.n	800ef34 <__kernel_rem_pio2+0xa4>
 800ef5a:	f108 0801 	add.w	r8, r8, #1
 800ef5e:	3508      	adds	r5, #8
 800ef60:	ed9d 7b04 	vldr	d7, [sp, #16]
 800ef64:	ecab 7b02 	vstmia	fp!, {d7}
 800ef68:	e7cd      	b.n	800ef06 <__kernel_rem_pio2+0x76>
 800ef6a:	9b02      	ldr	r3, [sp, #8]
 800ef6c:	aa0e      	add	r2, sp, #56	; 0x38
 800ef6e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ef72:	930d      	str	r3, [sp, #52]	; 0x34
 800ef74:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ef76:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800ef7a:	9c02      	ldr	r4, [sp, #8]
 800ef7c:	930c      	str	r3, [sp, #48]	; 0x30
 800ef7e:	00e3      	lsls	r3, r4, #3
 800ef80:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800ef84:	46a1      	mov	r9, r4
 800ef86:	930a      	str	r3, [sp, #40]	; 0x28
 800ef88:	ab9a      	add	r3, sp, #616	; 0x268
 800ef8a:	46c3      	mov	fp, r8
 800ef8c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ef90:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800ef94:	ab72      	add	r3, sp, #456	; 0x1c8
 800ef96:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800ef9a:	f1b9 0f00 	cmp.w	r9, #0
 800ef9e:	f1a5 0508 	sub.w	r5, r5, #8
 800efa2:	dc77      	bgt.n	800f094 <__kernel_rem_pio2+0x204>
 800efa4:	4650      	mov	r0, sl
 800efa6:	ec47 6b10 	vmov	d0, r6, r7
 800efaa:	f000 fc0d 	bl	800f7c8 <scalbn>
 800efae:	2200      	movs	r2, #0
 800efb0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800efb4:	ee10 0a10 	vmov	r0, s0
 800efb8:	ec57 6b10 	vmov	r6, r7, d0
 800efbc:	4639      	mov	r1, r7
 800efbe:	f7f1 fc45 	bl	800084c <__aeabi_dmul>
 800efc2:	ec41 0b10 	vmov	d0, r0, r1
 800efc6:	f000 fb7b 	bl	800f6c0 <floor>
 800efca:	2200      	movs	r2, #0
 800efcc:	4b7b      	ldr	r3, [pc, #492]	; (800f1bc <__kernel_rem_pio2+0x32c>)
 800efce:	ec51 0b10 	vmov	r0, r1, d0
 800efd2:	f7f1 fc3b 	bl	800084c <__aeabi_dmul>
 800efd6:	4602      	mov	r2, r0
 800efd8:	460b      	mov	r3, r1
 800efda:	4630      	mov	r0, r6
 800efdc:	4639      	mov	r1, r7
 800efde:	f7f1 fa7d 	bl	80004dc <__aeabi_dsub>
 800efe2:	460f      	mov	r7, r1
 800efe4:	4606      	mov	r6, r0
 800efe6:	f7f1 fecb 	bl	8000d80 <__aeabi_d2iz>
 800efea:	9004      	str	r0, [sp, #16]
 800efec:	f7f1 fbc4 	bl	8000778 <__aeabi_i2d>
 800eff0:	4602      	mov	r2, r0
 800eff2:	460b      	mov	r3, r1
 800eff4:	4630      	mov	r0, r6
 800eff6:	4639      	mov	r1, r7
 800eff8:	f7f1 fa70 	bl	80004dc <__aeabi_dsub>
 800effc:	f1ba 0f00 	cmp.w	sl, #0
 800f000:	4606      	mov	r6, r0
 800f002:	460f      	mov	r7, r1
 800f004:	dd6d      	ble.n	800f0e2 <__kernel_rem_pio2+0x252>
 800f006:	1e62      	subs	r2, r4, #1
 800f008:	ab0e      	add	r3, sp, #56	; 0x38
 800f00a:	f1ca 0118 	rsb	r1, sl, #24
 800f00e:	9d04      	ldr	r5, [sp, #16]
 800f010:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800f014:	fa40 f301 	asr.w	r3, r0, r1
 800f018:	441d      	add	r5, r3
 800f01a:	408b      	lsls	r3, r1
 800f01c:	1ac0      	subs	r0, r0, r3
 800f01e:	ab0e      	add	r3, sp, #56	; 0x38
 800f020:	9504      	str	r5, [sp, #16]
 800f022:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800f026:	f1ca 0317 	rsb	r3, sl, #23
 800f02a:	fa40 fb03 	asr.w	fp, r0, r3
 800f02e:	f1bb 0f00 	cmp.w	fp, #0
 800f032:	dd65      	ble.n	800f100 <__kernel_rem_pio2+0x270>
 800f034:	9b04      	ldr	r3, [sp, #16]
 800f036:	2200      	movs	r2, #0
 800f038:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800f03c:	3301      	adds	r3, #1
 800f03e:	4615      	mov	r5, r2
 800f040:	9304      	str	r3, [sp, #16]
 800f042:	4294      	cmp	r4, r2
 800f044:	f300 809c 	bgt.w	800f180 <__kernel_rem_pio2+0x2f0>
 800f048:	f1ba 0f00 	cmp.w	sl, #0
 800f04c:	dd07      	ble.n	800f05e <__kernel_rem_pio2+0x1ce>
 800f04e:	f1ba 0f01 	cmp.w	sl, #1
 800f052:	f000 80bf 	beq.w	800f1d4 <__kernel_rem_pio2+0x344>
 800f056:	f1ba 0f02 	cmp.w	sl, #2
 800f05a:	f000 80c5 	beq.w	800f1e8 <__kernel_rem_pio2+0x358>
 800f05e:	f1bb 0f02 	cmp.w	fp, #2
 800f062:	d14d      	bne.n	800f100 <__kernel_rem_pio2+0x270>
 800f064:	4632      	mov	r2, r6
 800f066:	463b      	mov	r3, r7
 800f068:	2000      	movs	r0, #0
 800f06a:	4955      	ldr	r1, [pc, #340]	; (800f1c0 <__kernel_rem_pio2+0x330>)
 800f06c:	f7f1 fa36 	bl	80004dc <__aeabi_dsub>
 800f070:	4606      	mov	r6, r0
 800f072:	460f      	mov	r7, r1
 800f074:	2d00      	cmp	r5, #0
 800f076:	d043      	beq.n	800f100 <__kernel_rem_pio2+0x270>
 800f078:	4650      	mov	r0, sl
 800f07a:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800f1b0 <__kernel_rem_pio2+0x320>
 800f07e:	f000 fba3 	bl	800f7c8 <scalbn>
 800f082:	4630      	mov	r0, r6
 800f084:	4639      	mov	r1, r7
 800f086:	ec53 2b10 	vmov	r2, r3, d0
 800f08a:	f7f1 fa27 	bl	80004dc <__aeabi_dsub>
 800f08e:	4606      	mov	r6, r0
 800f090:	460f      	mov	r7, r1
 800f092:	e035      	b.n	800f100 <__kernel_rem_pio2+0x270>
 800f094:	2200      	movs	r2, #0
 800f096:	4b4b      	ldr	r3, [pc, #300]	; (800f1c4 <__kernel_rem_pio2+0x334>)
 800f098:	4630      	mov	r0, r6
 800f09a:	4639      	mov	r1, r7
 800f09c:	f7f1 fbd6 	bl	800084c <__aeabi_dmul>
 800f0a0:	f109 39ff 	add.w	r9, r9, #4294967295
 800f0a4:	f7f1 fe6c 	bl	8000d80 <__aeabi_d2iz>
 800f0a8:	f7f1 fb66 	bl	8000778 <__aeabi_i2d>
 800f0ac:	4602      	mov	r2, r0
 800f0ae:	460b      	mov	r3, r1
 800f0b0:	ec43 2b18 	vmov	d8, r2, r3
 800f0b4:	2200      	movs	r2, #0
 800f0b6:	4b44      	ldr	r3, [pc, #272]	; (800f1c8 <__kernel_rem_pio2+0x338>)
 800f0b8:	f7f1 fbc8 	bl	800084c <__aeabi_dmul>
 800f0bc:	4602      	mov	r2, r0
 800f0be:	460b      	mov	r3, r1
 800f0c0:	4630      	mov	r0, r6
 800f0c2:	4639      	mov	r1, r7
 800f0c4:	f7f1 fa0a 	bl	80004dc <__aeabi_dsub>
 800f0c8:	f7f1 fe5a 	bl	8000d80 <__aeabi_d2iz>
 800f0cc:	f84b 0b04 	str.w	r0, [fp], #4
 800f0d0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800f0d4:	ec51 0b18 	vmov	r0, r1, d8
 800f0d8:	f7f1 fa02 	bl	80004e0 <__adddf3>
 800f0dc:	4606      	mov	r6, r0
 800f0de:	460f      	mov	r7, r1
 800f0e0:	e75b      	b.n	800ef9a <__kernel_rem_pio2+0x10a>
 800f0e2:	d106      	bne.n	800f0f2 <__kernel_rem_pio2+0x262>
 800f0e4:	1e63      	subs	r3, r4, #1
 800f0e6:	aa0e      	add	r2, sp, #56	; 0x38
 800f0e8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800f0ec:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800f0f0:	e79d      	b.n	800f02e <__kernel_rem_pio2+0x19e>
 800f0f2:	2200      	movs	r2, #0
 800f0f4:	4b35      	ldr	r3, [pc, #212]	; (800f1cc <__kernel_rem_pio2+0x33c>)
 800f0f6:	f7f1 fe2f 	bl	8000d58 <__aeabi_dcmpge>
 800f0fa:	2800      	cmp	r0, #0
 800f0fc:	d13d      	bne.n	800f17a <__kernel_rem_pio2+0x2ea>
 800f0fe:	4683      	mov	fp, r0
 800f100:	2200      	movs	r2, #0
 800f102:	2300      	movs	r3, #0
 800f104:	4630      	mov	r0, r6
 800f106:	4639      	mov	r1, r7
 800f108:	f7f1 fe08 	bl	8000d1c <__aeabi_dcmpeq>
 800f10c:	2800      	cmp	r0, #0
 800f10e:	f000 80bf 	beq.w	800f290 <__kernel_rem_pio2+0x400>
 800f112:	1e65      	subs	r5, r4, #1
 800f114:	2200      	movs	r2, #0
 800f116:	462b      	mov	r3, r5
 800f118:	9902      	ldr	r1, [sp, #8]
 800f11a:	428b      	cmp	r3, r1
 800f11c:	da6b      	bge.n	800f1f6 <__kernel_rem_pio2+0x366>
 800f11e:	2a00      	cmp	r2, #0
 800f120:	f000 8088 	beq.w	800f234 <__kernel_rem_pio2+0x3a4>
 800f124:	ab0e      	add	r3, sp, #56	; 0x38
 800f126:	f1aa 0a18 	sub.w	sl, sl, #24
 800f12a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800f12e:	2b00      	cmp	r3, #0
 800f130:	f000 80ac 	beq.w	800f28c <__kernel_rem_pio2+0x3fc>
 800f134:	4650      	mov	r0, sl
 800f136:	00ec      	lsls	r4, r5, #3
 800f138:	46aa      	mov	sl, r5
 800f13a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 800f1b0 <__kernel_rem_pio2+0x320>
 800f13e:	f000 fb43 	bl	800f7c8 <scalbn>
 800f142:	ab9a      	add	r3, sp, #616	; 0x268
 800f144:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800f148:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800f14c:	ec57 6b10 	vmov	r6, r7, d0
 800f150:	f1ba 0f00 	cmp.w	sl, #0
 800f154:	f280 80d5 	bge.w	800f302 <__kernel_rem_pio2+0x472>
 800f158:	462e      	mov	r6, r5
 800f15a:	ed9f 8b13 	vldr	d8, [pc, #76]	; 800f1a8 <__kernel_rem_pio2+0x318>
 800f15e:	2e00      	cmp	r6, #0
 800f160:	f2c0 8103 	blt.w	800f36a <__kernel_rem_pio2+0x4da>
 800f164:	ab72      	add	r3, sp, #456	; 0x1c8
 800f166:	f8df a068 	ldr.w	sl, [pc, #104]	; 800f1d0 <__kernel_rem_pio2+0x340>
 800f16a:	f04f 0800 	mov.w	r8, #0
 800f16e:	1baf      	subs	r7, r5, r6
 800f170:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800f174:	ed8d 8b06 	vstr	d8, [sp, #24]
 800f178:	e0e9      	b.n	800f34e <__kernel_rem_pio2+0x4be>
 800f17a:	f04f 0b02 	mov.w	fp, #2
 800f17e:	e759      	b.n	800f034 <__kernel_rem_pio2+0x1a4>
 800f180:	f8d8 3000 	ldr.w	r3, [r8]
 800f184:	b955      	cbnz	r5, 800f19c <__kernel_rem_pio2+0x30c>
 800f186:	b123      	cbz	r3, 800f192 <__kernel_rem_pio2+0x302>
 800f188:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800f18c:	f8c8 3000 	str.w	r3, [r8]
 800f190:	2301      	movs	r3, #1
 800f192:	3201      	adds	r2, #1
 800f194:	f108 0804 	add.w	r8, r8, #4
 800f198:	461d      	mov	r5, r3
 800f19a:	e752      	b.n	800f042 <__kernel_rem_pio2+0x1b2>
 800f19c:	1acb      	subs	r3, r1, r3
 800f19e:	f8c8 3000 	str.w	r3, [r8]
 800f1a2:	462b      	mov	r3, r5
 800f1a4:	e7f5      	b.n	800f192 <__kernel_rem_pio2+0x302>
 800f1a6:	bf00      	nop
	...
 800f1b4:	3ff00000 	.word	0x3ff00000
 800f1b8:	0800fe78 	.word	0x0800fe78
 800f1bc:	40200000 	.word	0x40200000
 800f1c0:	3ff00000 	.word	0x3ff00000
 800f1c4:	3e700000 	.word	0x3e700000
 800f1c8:	41700000 	.word	0x41700000
 800f1cc:	3fe00000 	.word	0x3fe00000
 800f1d0:	0800fe38 	.word	0x0800fe38
 800f1d4:	1e62      	subs	r2, r4, #1
 800f1d6:	ab0e      	add	r3, sp, #56	; 0x38
 800f1d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1dc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f1e0:	a90e      	add	r1, sp, #56	; 0x38
 800f1e2:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f1e6:	e73a      	b.n	800f05e <__kernel_rem_pio2+0x1ce>
 800f1e8:	1e62      	subs	r2, r4, #1
 800f1ea:	ab0e      	add	r3, sp, #56	; 0x38
 800f1ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f1f0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800f1f4:	e7f4      	b.n	800f1e0 <__kernel_rem_pio2+0x350>
 800f1f6:	a90e      	add	r1, sp, #56	; 0x38
 800f1f8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800f1fc:	3b01      	subs	r3, #1
 800f1fe:	430a      	orrs	r2, r1
 800f200:	e78a      	b.n	800f118 <__kernel_rem_pio2+0x288>
 800f202:	3301      	adds	r3, #1
 800f204:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800f208:	2900      	cmp	r1, #0
 800f20a:	d0fa      	beq.n	800f202 <__kernel_rem_pio2+0x372>
 800f20c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800f20e:	18e3      	adds	r3, r4, r3
 800f210:	f104 0801 	add.w	r8, r4, #1
 800f214:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800f218:	9304      	str	r3, [sp, #16]
 800f21a:	446a      	add	r2, sp
 800f21c:	3a98      	subs	r2, #152	; 0x98
 800f21e:	920a      	str	r2, [sp, #40]	; 0x28
 800f220:	9a08      	ldr	r2, [sp, #32]
 800f222:	18a5      	adds	r5, r4, r2
 800f224:	aa22      	add	r2, sp, #136	; 0x88
 800f226:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800f22a:	9b04      	ldr	r3, [sp, #16]
 800f22c:	4543      	cmp	r3, r8
 800f22e:	da04      	bge.n	800f23a <__kernel_rem_pio2+0x3aa>
 800f230:	461c      	mov	r4, r3
 800f232:	e6a4      	b.n	800ef7e <__kernel_rem_pio2+0xee>
 800f234:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800f236:	2301      	movs	r3, #1
 800f238:	e7e4      	b.n	800f204 <__kernel_rem_pio2+0x374>
 800f23a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800f23c:	f04f 0900 	mov.w	r9, #0
 800f240:	2600      	movs	r6, #0
 800f242:	2700      	movs	r7, #0
 800f244:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800f248:	f7f1 fa96 	bl	8000778 <__aeabi_i2d>
 800f24c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f24e:	e8e5 0102 	strd	r0, r1, [r5], #8
 800f252:	461c      	mov	r4, r3
 800f254:	46ab      	mov	fp, r5
 800f256:	9b06      	ldr	r3, [sp, #24]
 800f258:	4599      	cmp	r9, r3
 800f25a:	dd06      	ble.n	800f26a <__kernel_rem_pio2+0x3da>
 800f25c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800f25e:	f108 0801 	add.w	r8, r8, #1
 800f262:	e8e3 6702 	strd	r6, r7, [r3], #8
 800f266:	930a      	str	r3, [sp, #40]	; 0x28
 800f268:	e7df      	b.n	800f22a <__kernel_rem_pio2+0x39a>
 800f26a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800f26e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800f272:	f7f1 faeb 	bl	800084c <__aeabi_dmul>
 800f276:	4602      	mov	r2, r0
 800f278:	460b      	mov	r3, r1
 800f27a:	4630      	mov	r0, r6
 800f27c:	4639      	mov	r1, r7
 800f27e:	f109 0901 	add.w	r9, r9, #1
 800f282:	f7f1 f92d 	bl	80004e0 <__adddf3>
 800f286:	4606      	mov	r6, r0
 800f288:	460f      	mov	r7, r1
 800f28a:	e7e4      	b.n	800f256 <__kernel_rem_pio2+0x3c6>
 800f28c:	3d01      	subs	r5, #1
 800f28e:	e749      	b.n	800f124 <__kernel_rem_pio2+0x294>
 800f290:	f1ca 0000 	rsb	r0, sl, #0
 800f294:	ec47 6b10 	vmov	d0, r6, r7
 800f298:	f000 fa96 	bl	800f7c8 <scalbn>
 800f29c:	2200      	movs	r2, #0
 800f29e:	4ba1      	ldr	r3, [pc, #644]	; (800f524 <__kernel_rem_pio2+0x694>)
 800f2a0:	ee10 0a10 	vmov	r0, s0
 800f2a4:	ec57 6b10 	vmov	r6, r7, d0
 800f2a8:	4639      	mov	r1, r7
 800f2aa:	f7f1 fd55 	bl	8000d58 <__aeabi_dcmpge>
 800f2ae:	b1f8      	cbz	r0, 800f2f0 <__kernel_rem_pio2+0x460>
 800f2b0:	2200      	movs	r2, #0
 800f2b2:	4b9d      	ldr	r3, [pc, #628]	; (800f528 <__kernel_rem_pio2+0x698>)
 800f2b4:	4630      	mov	r0, r6
 800f2b6:	4639      	mov	r1, r7
 800f2b8:	f7f1 fac8 	bl	800084c <__aeabi_dmul>
 800f2bc:	1c65      	adds	r5, r4, #1
 800f2be:	f7f1 fd5f 	bl	8000d80 <__aeabi_d2iz>
 800f2c2:	4680      	mov	r8, r0
 800f2c4:	f7f1 fa58 	bl	8000778 <__aeabi_i2d>
 800f2c8:	2200      	movs	r2, #0
 800f2ca:	4b96      	ldr	r3, [pc, #600]	; (800f524 <__kernel_rem_pio2+0x694>)
 800f2cc:	f10a 0a18 	add.w	sl, sl, #24
 800f2d0:	f7f1 fabc 	bl	800084c <__aeabi_dmul>
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4602      	mov	r2, r0
 800f2d8:	4639      	mov	r1, r7
 800f2da:	4630      	mov	r0, r6
 800f2dc:	f7f1 f8fe 	bl	80004dc <__aeabi_dsub>
 800f2e0:	f7f1 fd4e 	bl	8000d80 <__aeabi_d2iz>
 800f2e4:	ab0e      	add	r3, sp, #56	; 0x38
 800f2e6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f2ea:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800f2ee:	e721      	b.n	800f134 <__kernel_rem_pio2+0x2a4>
 800f2f0:	4630      	mov	r0, r6
 800f2f2:	4639      	mov	r1, r7
 800f2f4:	f7f1 fd44 	bl	8000d80 <__aeabi_d2iz>
 800f2f8:	ab0e      	add	r3, sp, #56	; 0x38
 800f2fa:	4625      	mov	r5, r4
 800f2fc:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800f300:	e718      	b.n	800f134 <__kernel_rem_pio2+0x2a4>
 800f302:	ab0e      	add	r3, sp, #56	; 0x38
 800f304:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800f308:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f30c:	f7f1 fa34 	bl	8000778 <__aeabi_i2d>
 800f310:	4632      	mov	r2, r6
 800f312:	463b      	mov	r3, r7
 800f314:	f7f1 fa9a 	bl	800084c <__aeabi_dmul>
 800f318:	2200      	movs	r2, #0
 800f31a:	4b83      	ldr	r3, [pc, #524]	; (800f528 <__kernel_rem_pio2+0x698>)
 800f31c:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800f320:	4630      	mov	r0, r6
 800f322:	4639      	mov	r1, r7
 800f324:	f7f1 fa92 	bl	800084c <__aeabi_dmul>
 800f328:	4606      	mov	r6, r0
 800f32a:	460f      	mov	r7, r1
 800f32c:	e710      	b.n	800f150 <__kernel_rem_pio2+0x2c0>
 800f32e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800f332:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800f336:	f108 0801 	add.w	r8, r8, #1
 800f33a:	f7f1 fa87 	bl	800084c <__aeabi_dmul>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f346:	f7f1 f8cb 	bl	80004e0 <__adddf3>
 800f34a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f34e:	9b02      	ldr	r3, [sp, #8]
 800f350:	4598      	cmp	r8, r3
 800f352:	dc01      	bgt.n	800f358 <__kernel_rem_pio2+0x4c8>
 800f354:	45b8      	cmp	r8, r7
 800f356:	ddea      	ble.n	800f32e <__kernel_rem_pio2+0x49e>
 800f358:	ab4a      	add	r3, sp, #296	; 0x128
 800f35a:	3e01      	subs	r6, #1
 800f35c:	ed9d 7b06 	vldr	d7, [sp, #24]
 800f360:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800f364:	ed87 7b00 	vstr	d7, [r7]
 800f368:	e6f9      	b.n	800f15e <__kernel_rem_pio2+0x2ce>
 800f36a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f36c:	2b02      	cmp	r3, #2
 800f36e:	dc0b      	bgt.n	800f388 <__kernel_rem_pio2+0x4f8>
 800f370:	2b00      	cmp	r3, #0
 800f372:	dc35      	bgt.n	800f3e0 <__kernel_rem_pio2+0x550>
 800f374:	d059      	beq.n	800f42a <__kernel_rem_pio2+0x59a>
 800f376:	9b04      	ldr	r3, [sp, #16]
 800f378:	f003 0007 	and.w	r0, r3, #7
 800f37c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800f380:	ecbd 8b02 	vpop	{d8}
 800f384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f388:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800f38a:	2b03      	cmp	r3, #3
 800f38c:	d1f3      	bne.n	800f376 <__kernel_rem_pio2+0x4e6>
 800f38e:	ab4a      	add	r3, sp, #296	; 0x128
 800f390:	9502      	str	r5, [sp, #8]
 800f392:	4423      	add	r3, r4
 800f394:	461c      	mov	r4, r3
 800f396:	469a      	mov	sl, r3
 800f398:	9306      	str	r3, [sp, #24]
 800f39a:	9b02      	ldr	r3, [sp, #8]
 800f39c:	f1aa 0a08 	sub.w	sl, sl, #8
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	dc6b      	bgt.n	800f47c <__kernel_rem_pio2+0x5ec>
 800f3a4:	46aa      	mov	sl, r5
 800f3a6:	f1ba 0f01 	cmp.w	sl, #1
 800f3aa:	f1a4 0408 	sub.w	r4, r4, #8
 800f3ae:	f300 8085 	bgt.w	800f4bc <__kernel_rem_pio2+0x62c>
 800f3b2:	9c06      	ldr	r4, [sp, #24]
 800f3b4:	2000      	movs	r0, #0
 800f3b6:	2100      	movs	r1, #0
 800f3b8:	3408      	adds	r4, #8
 800f3ba:	2d01      	cmp	r5, #1
 800f3bc:	f300 809d 	bgt.w	800f4fa <__kernel_rem_pio2+0x66a>
 800f3c0:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800f3c4:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800f3c8:	f1bb 0f00 	cmp.w	fp, #0
 800f3cc:	f040 809b 	bne.w	800f506 <__kernel_rem_pio2+0x676>
 800f3d0:	9b01      	ldr	r3, [sp, #4]
 800f3d2:	e9c3 5600 	strd	r5, r6, [r3]
 800f3d6:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800f3da:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800f3de:	e7ca      	b.n	800f376 <__kernel_rem_pio2+0x4e6>
 800f3e0:	3408      	adds	r4, #8
 800f3e2:	ab4a      	add	r3, sp, #296	; 0x128
 800f3e4:	462e      	mov	r6, r5
 800f3e6:	2000      	movs	r0, #0
 800f3e8:	441c      	add	r4, r3
 800f3ea:	2100      	movs	r1, #0
 800f3ec:	2e00      	cmp	r6, #0
 800f3ee:	da36      	bge.n	800f45e <__kernel_rem_pio2+0x5ce>
 800f3f0:	f1bb 0f00 	cmp.w	fp, #0
 800f3f4:	d039      	beq.n	800f46a <__kernel_rem_pio2+0x5da>
 800f3f6:	4602      	mov	r2, r0
 800f3f8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f3fc:	9c01      	ldr	r4, [sp, #4]
 800f3fe:	ae4c      	add	r6, sp, #304	; 0x130
 800f400:	e9c4 2300 	strd	r2, r3, [r4]
 800f404:	2401      	movs	r4, #1
 800f406:	4602      	mov	r2, r0
 800f408:	460b      	mov	r3, r1
 800f40a:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800f40e:	f7f1 f865 	bl	80004dc <__aeabi_dsub>
 800f412:	42a5      	cmp	r5, r4
 800f414:	da2c      	bge.n	800f470 <__kernel_rem_pio2+0x5e0>
 800f416:	f1bb 0f00 	cmp.w	fp, #0
 800f41a:	d002      	beq.n	800f422 <__kernel_rem_pio2+0x592>
 800f41c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f420:	4619      	mov	r1, r3
 800f422:	9b01      	ldr	r3, [sp, #4]
 800f424:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f428:	e7a5      	b.n	800f376 <__kernel_rem_pio2+0x4e6>
 800f42a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800f42e:	2000      	movs	r0, #0
 800f430:	2100      	movs	r1, #0
 800f432:	eb0d 0403 	add.w	r4, sp, r3
 800f436:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800f43a:	2d00      	cmp	r5, #0
 800f43c:	da09      	bge.n	800f452 <__kernel_rem_pio2+0x5c2>
 800f43e:	f1bb 0f00 	cmp.w	fp, #0
 800f442:	d002      	beq.n	800f44a <__kernel_rem_pio2+0x5ba>
 800f444:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f448:	4619      	mov	r1, r3
 800f44a:	9b01      	ldr	r3, [sp, #4]
 800f44c:	e9c3 0100 	strd	r0, r1, [r3]
 800f450:	e791      	b.n	800f376 <__kernel_rem_pio2+0x4e6>
 800f452:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f456:	3d01      	subs	r5, #1
 800f458:	f7f1 f842 	bl	80004e0 <__adddf3>
 800f45c:	e7ed      	b.n	800f43a <__kernel_rem_pio2+0x5aa>
 800f45e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f462:	3e01      	subs	r6, #1
 800f464:	f7f1 f83c 	bl	80004e0 <__adddf3>
 800f468:	e7c0      	b.n	800f3ec <__kernel_rem_pio2+0x55c>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	e7c5      	b.n	800f3fc <__kernel_rem_pio2+0x56c>
 800f470:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800f474:	3401      	adds	r4, #1
 800f476:	f7f1 f833 	bl	80004e0 <__adddf3>
 800f47a:	e7ca      	b.n	800f412 <__kernel_rem_pio2+0x582>
 800f47c:	9b02      	ldr	r3, [sp, #8]
 800f47e:	e9da 8900 	ldrd	r8, r9, [sl]
 800f482:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800f486:	3b01      	subs	r3, #1
 800f488:	4640      	mov	r0, r8
 800f48a:	4632      	mov	r2, r6
 800f48c:	4649      	mov	r1, r9
 800f48e:	9302      	str	r3, [sp, #8]
 800f490:	463b      	mov	r3, r7
 800f492:	f7f1 f825 	bl	80004e0 <__adddf3>
 800f496:	4602      	mov	r2, r0
 800f498:	460b      	mov	r3, r1
 800f49a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f49e:	4640      	mov	r0, r8
 800f4a0:	4649      	mov	r1, r9
 800f4a2:	f7f1 f81b 	bl	80004dc <__aeabi_dsub>
 800f4a6:	4632      	mov	r2, r6
 800f4a8:	463b      	mov	r3, r7
 800f4aa:	f7f1 f819 	bl	80004e0 <__adddf3>
 800f4ae:	ed9d 7b08 	vldr	d7, [sp, #32]
 800f4b2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f4b6:	ed8a 7b00 	vstr	d7, [sl]
 800f4ba:	e76e      	b.n	800f39a <__kernel_rem_pio2+0x50a>
 800f4bc:	e9d4 8900 	ldrd	r8, r9, [r4]
 800f4c0:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800f4c4:	4640      	mov	r0, r8
 800f4c6:	4649      	mov	r1, r9
 800f4c8:	4632      	mov	r2, r6
 800f4ca:	463b      	mov	r3, r7
 800f4cc:	f7f1 f808 	bl	80004e0 <__adddf3>
 800f4d0:	4602      	mov	r2, r0
 800f4d2:	460b      	mov	r3, r1
 800f4d4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800f4d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800f4dc:	4640      	mov	r0, r8
 800f4de:	4649      	mov	r1, r9
 800f4e0:	f7f0 fffc 	bl	80004dc <__aeabi_dsub>
 800f4e4:	4632      	mov	r2, r6
 800f4e6:	463b      	mov	r3, r7
 800f4e8:	f7f0 fffa 	bl	80004e0 <__adddf3>
 800f4ec:	ed9d 7b02 	vldr	d7, [sp, #8]
 800f4f0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800f4f4:	ed84 7b00 	vstr	d7, [r4]
 800f4f8:	e755      	b.n	800f3a6 <__kernel_rem_pio2+0x516>
 800f4fa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f4fe:	3d01      	subs	r5, #1
 800f500:	f7f0 ffee 	bl	80004e0 <__adddf3>
 800f504:	e759      	b.n	800f3ba <__kernel_rem_pio2+0x52a>
 800f506:	9b01      	ldr	r3, [sp, #4]
 800f508:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800f50c:	9a01      	ldr	r2, [sp, #4]
 800f50e:	601d      	str	r5, [r3, #0]
 800f510:	605c      	str	r4, [r3, #4]
 800f512:	609f      	str	r7, [r3, #8]
 800f514:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800f518:	6110      	str	r0, [r2, #16]
 800f51a:	60d3      	str	r3, [r2, #12]
 800f51c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f520:	6153      	str	r3, [r2, #20]
 800f522:	e728      	b.n	800f376 <__kernel_rem_pio2+0x4e6>
 800f524:	41700000 	.word	0x41700000
 800f528:	3e700000 	.word	0x3e700000
 800f52c:	00000000 	.word	0x00000000

0800f530 <__kernel_sin>:
 800f530:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f534:	ec55 4b10 	vmov	r4, r5, d0
 800f538:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f53c:	ed2d 8b04 	vpush	{d8-d9}
 800f540:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f544:	b083      	sub	sp, #12
 800f546:	eeb0 8a41 	vmov.f32	s16, s2
 800f54a:	eef0 8a61 	vmov.f32	s17, s3
 800f54e:	9001      	str	r0, [sp, #4]
 800f550:	da06      	bge.n	800f560 <__kernel_sin+0x30>
 800f552:	ee10 0a10 	vmov	r0, s0
 800f556:	4629      	mov	r1, r5
 800f558:	f7f1 fc12 	bl	8000d80 <__aeabi_d2iz>
 800f55c:	2800      	cmp	r0, #0
 800f55e:	d051      	beq.n	800f604 <__kernel_sin+0xd4>
 800f560:	4622      	mov	r2, r4
 800f562:	462b      	mov	r3, r5
 800f564:	4620      	mov	r0, r4
 800f566:	4629      	mov	r1, r5
 800f568:	f7f1 f970 	bl	800084c <__aeabi_dmul>
 800f56c:	4682      	mov	sl, r0
 800f56e:	468b      	mov	fp, r1
 800f570:	4602      	mov	r2, r0
 800f572:	460b      	mov	r3, r1
 800f574:	4620      	mov	r0, r4
 800f576:	4629      	mov	r1, r5
 800f578:	f7f1 f968 	bl	800084c <__aeabi_dmul>
 800f57c:	4680      	mov	r8, r0
 800f57e:	4689      	mov	r9, r1
 800f580:	4650      	mov	r0, sl
 800f582:	4659      	mov	r1, fp
 800f584:	a33f      	add	r3, pc, #252	; (adr r3, 800f684 <__kernel_sin+0x154>)
 800f586:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f58a:	f7f1 f95f 	bl	800084c <__aeabi_dmul>
 800f58e:	a33f      	add	r3, pc, #252	; (adr r3, 800f68c <__kernel_sin+0x15c>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f0 ffa2 	bl	80004dc <__aeabi_dsub>
 800f598:	4652      	mov	r2, sl
 800f59a:	465b      	mov	r3, fp
 800f59c:	f7f1 f956 	bl	800084c <__aeabi_dmul>
 800f5a0:	a33c      	add	r3, pc, #240	; (adr r3, 800f694 <__kernel_sin+0x164>)
 800f5a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a6:	f7f0 ff9b 	bl	80004e0 <__adddf3>
 800f5aa:	4652      	mov	r2, sl
 800f5ac:	465b      	mov	r3, fp
 800f5ae:	f7f1 f94d 	bl	800084c <__aeabi_dmul>
 800f5b2:	a33a      	add	r3, pc, #232	; (adr r3, 800f69c <__kernel_sin+0x16c>)
 800f5b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b8:	f7f0 ff90 	bl	80004dc <__aeabi_dsub>
 800f5bc:	4652      	mov	r2, sl
 800f5be:	465b      	mov	r3, fp
 800f5c0:	f7f1 f944 	bl	800084c <__aeabi_dmul>
 800f5c4:	a337      	add	r3, pc, #220	; (adr r3, 800f6a4 <__kernel_sin+0x174>)
 800f5c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ca:	f7f0 ff89 	bl	80004e0 <__adddf3>
 800f5ce:	9b01      	ldr	r3, [sp, #4]
 800f5d0:	4606      	mov	r6, r0
 800f5d2:	460f      	mov	r7, r1
 800f5d4:	b9eb      	cbnz	r3, 800f612 <__kernel_sin+0xe2>
 800f5d6:	4602      	mov	r2, r0
 800f5d8:	460b      	mov	r3, r1
 800f5da:	4650      	mov	r0, sl
 800f5dc:	4659      	mov	r1, fp
 800f5de:	f7f1 f935 	bl	800084c <__aeabi_dmul>
 800f5e2:	a325      	add	r3, pc, #148	; (adr r3, 800f678 <__kernel_sin+0x148>)
 800f5e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e8:	f7f0 ff78 	bl	80004dc <__aeabi_dsub>
 800f5ec:	4642      	mov	r2, r8
 800f5ee:	464b      	mov	r3, r9
 800f5f0:	f7f1 f92c 	bl	800084c <__aeabi_dmul>
 800f5f4:	4602      	mov	r2, r0
 800f5f6:	460b      	mov	r3, r1
 800f5f8:	4620      	mov	r0, r4
 800f5fa:	4629      	mov	r1, r5
 800f5fc:	f7f0 ff70 	bl	80004e0 <__adddf3>
 800f600:	4604      	mov	r4, r0
 800f602:	460d      	mov	r5, r1
 800f604:	ec45 4b10 	vmov	d0, r4, r5
 800f608:	b003      	add	sp, #12
 800f60a:	ecbd 8b04 	vpop	{d8-d9}
 800f60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f612:	2200      	movs	r2, #0
 800f614:	4b1a      	ldr	r3, [pc, #104]	; (800f680 <__kernel_sin+0x150>)
 800f616:	ec51 0b18 	vmov	r0, r1, d8
 800f61a:	f7f1 f917 	bl	800084c <__aeabi_dmul>
 800f61e:	4632      	mov	r2, r6
 800f620:	463b      	mov	r3, r7
 800f622:	ec41 0b19 	vmov	d9, r0, r1
 800f626:	4640      	mov	r0, r8
 800f628:	4649      	mov	r1, r9
 800f62a:	f7f1 f90f 	bl	800084c <__aeabi_dmul>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	ec51 0b19 	vmov	r0, r1, d9
 800f636:	f7f0 ff51 	bl	80004dc <__aeabi_dsub>
 800f63a:	4652      	mov	r2, sl
 800f63c:	465b      	mov	r3, fp
 800f63e:	f7f1 f905 	bl	800084c <__aeabi_dmul>
 800f642:	ec53 2b18 	vmov	r2, r3, d8
 800f646:	f7f0 ff49 	bl	80004dc <__aeabi_dsub>
 800f64a:	4606      	mov	r6, r0
 800f64c:	460f      	mov	r7, r1
 800f64e:	4640      	mov	r0, r8
 800f650:	4649      	mov	r1, r9
 800f652:	a309      	add	r3, pc, #36	; (adr r3, 800f678 <__kernel_sin+0x148>)
 800f654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f658:	f7f1 f8f8 	bl	800084c <__aeabi_dmul>
 800f65c:	4602      	mov	r2, r0
 800f65e:	460b      	mov	r3, r1
 800f660:	4630      	mov	r0, r6
 800f662:	4639      	mov	r1, r7
 800f664:	f7f0 ff3c 	bl	80004e0 <__adddf3>
 800f668:	4602      	mov	r2, r0
 800f66a:	460b      	mov	r3, r1
 800f66c:	4620      	mov	r0, r4
 800f66e:	4629      	mov	r1, r5
 800f670:	f7f0 ff34 	bl	80004dc <__aeabi_dsub>
 800f674:	e7c4      	b.n	800f600 <__kernel_sin+0xd0>
 800f676:	bf00      	nop
 800f678:	55555549 	.word	0x55555549
 800f67c:	3fc55555 	.word	0x3fc55555
 800f680:	3fe00000 	.word	0x3fe00000
 800f684:	5acfd57c 	.word	0x5acfd57c
 800f688:	3de5d93a 	.word	0x3de5d93a
 800f68c:	8a2b9ceb 	.word	0x8a2b9ceb
 800f690:	3e5ae5e6 	.word	0x3e5ae5e6
 800f694:	57b1fe7d 	.word	0x57b1fe7d
 800f698:	3ec71de3 	.word	0x3ec71de3
 800f69c:	19c161d5 	.word	0x19c161d5
 800f6a0:	3f2a01a0 	.word	0x3f2a01a0
 800f6a4:	1110f8a6 	.word	0x1110f8a6
 800f6a8:	3f811111 	.word	0x3f811111

0800f6ac <fabs>:
 800f6ac:	ec51 0b10 	vmov	r0, r1, d0
 800f6b0:	ee10 2a10 	vmov	r2, s0
 800f6b4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f6b8:	ec43 2b10 	vmov	d0, r2, r3
 800f6bc:	4770      	bx	lr
	...

0800f6c0 <floor>:
 800f6c0:	ec51 0b10 	vmov	r0, r1, d0
 800f6c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	ee10 5a10 	vmov	r5, s0
 800f6d2:	ee10 8a10 	vmov	r8, s0
 800f6d6:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800f6da:	2e13      	cmp	r6, #19
 800f6dc:	dc33      	bgt.n	800f746 <floor+0x86>
 800f6de:	2e00      	cmp	r6, #0
 800f6e0:	da14      	bge.n	800f70c <floor+0x4c>
 800f6e2:	a335      	add	r3, pc, #212	; (adr r3, 800f7b8 <floor+0xf8>)
 800f6e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e8:	f7f0 fefa 	bl	80004e0 <__adddf3>
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	2300      	movs	r3, #0
 800f6f0:	f7f1 fb3c 	bl	8000d6c <__aeabi_dcmpgt>
 800f6f4:	b138      	cbz	r0, 800f706 <floor+0x46>
 800f6f6:	2c00      	cmp	r4, #0
 800f6f8:	da58      	bge.n	800f7ac <floor+0xec>
 800f6fa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f6fe:	431d      	orrs	r5, r3
 800f700:	d001      	beq.n	800f706 <floor+0x46>
 800f702:	2500      	movs	r5, #0
 800f704:	4c2e      	ldr	r4, [pc, #184]	; (800f7c0 <floor+0x100>)
 800f706:	4621      	mov	r1, r4
 800f708:	4628      	mov	r0, r5
 800f70a:	e026      	b.n	800f75a <floor+0x9a>
 800f70c:	4f2d      	ldr	r7, [pc, #180]	; (800f7c4 <floor+0x104>)
 800f70e:	4137      	asrs	r7, r6
 800f710:	ea01 0307 	and.w	r3, r1, r7
 800f714:	4303      	orrs	r3, r0
 800f716:	d020      	beq.n	800f75a <floor+0x9a>
 800f718:	a327      	add	r3, pc, #156	; (adr r3, 800f7b8 <floor+0xf8>)
 800f71a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f71e:	f7f0 fedf 	bl	80004e0 <__adddf3>
 800f722:	2200      	movs	r2, #0
 800f724:	2300      	movs	r3, #0
 800f726:	f7f1 fb21 	bl	8000d6c <__aeabi_dcmpgt>
 800f72a:	2800      	cmp	r0, #0
 800f72c:	d0eb      	beq.n	800f706 <floor+0x46>
 800f72e:	2c00      	cmp	r4, #0
 800f730:	f04f 0500 	mov.w	r5, #0
 800f734:	bfbe      	ittt	lt
 800f736:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800f73a:	fa43 f606 	asrlt.w	r6, r3, r6
 800f73e:	19a4      	addlt	r4, r4, r6
 800f740:	ea24 0407 	bic.w	r4, r4, r7
 800f744:	e7df      	b.n	800f706 <floor+0x46>
 800f746:	2e33      	cmp	r6, #51	; 0x33
 800f748:	dd0b      	ble.n	800f762 <floor+0xa2>
 800f74a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800f74e:	d104      	bne.n	800f75a <floor+0x9a>
 800f750:	ee10 2a10 	vmov	r2, s0
 800f754:	460b      	mov	r3, r1
 800f756:	f7f0 fec3 	bl	80004e0 <__adddf3>
 800f75a:	ec41 0b10 	vmov	d0, r0, r1
 800f75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f762:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800f766:	f04f 33ff 	mov.w	r3, #4294967295
 800f76a:	fa23 f707 	lsr.w	r7, r3, r7
 800f76e:	4207      	tst	r7, r0
 800f770:	d0f3      	beq.n	800f75a <floor+0x9a>
 800f772:	a311      	add	r3, pc, #68	; (adr r3, 800f7b8 <floor+0xf8>)
 800f774:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f778:	f7f0 feb2 	bl	80004e0 <__adddf3>
 800f77c:	2200      	movs	r2, #0
 800f77e:	2300      	movs	r3, #0
 800f780:	f7f1 faf4 	bl	8000d6c <__aeabi_dcmpgt>
 800f784:	2800      	cmp	r0, #0
 800f786:	d0be      	beq.n	800f706 <floor+0x46>
 800f788:	2c00      	cmp	r4, #0
 800f78a:	da02      	bge.n	800f792 <floor+0xd2>
 800f78c:	2e14      	cmp	r6, #20
 800f78e:	d103      	bne.n	800f798 <floor+0xd8>
 800f790:	3401      	adds	r4, #1
 800f792:	ea25 0507 	bic.w	r5, r5, r7
 800f796:	e7b6      	b.n	800f706 <floor+0x46>
 800f798:	2301      	movs	r3, #1
 800f79a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800f79e:	fa03 f606 	lsl.w	r6, r3, r6
 800f7a2:	4435      	add	r5, r6
 800f7a4:	4545      	cmp	r5, r8
 800f7a6:	bf38      	it	cc
 800f7a8:	18e4      	addcc	r4, r4, r3
 800f7aa:	e7f2      	b.n	800f792 <floor+0xd2>
 800f7ac:	2500      	movs	r5, #0
 800f7ae:	462c      	mov	r4, r5
 800f7b0:	e7a9      	b.n	800f706 <floor+0x46>
 800f7b2:	bf00      	nop
 800f7b4:	f3af 8000 	nop.w
 800f7b8:	8800759c 	.word	0x8800759c
 800f7bc:	7e37e43c 	.word	0x7e37e43c
 800f7c0:	bff00000 	.word	0xbff00000
 800f7c4:	000fffff 	.word	0x000fffff

0800f7c8 <scalbn>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	ec55 4b10 	vmov	r4, r5, d0
 800f7ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f7d2:	4606      	mov	r6, r0
 800f7d4:	462b      	mov	r3, r5
 800f7d6:	b99a      	cbnz	r2, 800f800 <scalbn+0x38>
 800f7d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f7dc:	4323      	orrs	r3, r4
 800f7de:	d036      	beq.n	800f84e <scalbn+0x86>
 800f7e0:	4b39      	ldr	r3, [pc, #228]	; (800f8c8 <scalbn+0x100>)
 800f7e2:	4629      	mov	r1, r5
 800f7e4:	2200      	movs	r2, #0
 800f7e6:	ee10 0a10 	vmov	r0, s0
 800f7ea:	f7f1 f82f 	bl	800084c <__aeabi_dmul>
 800f7ee:	4b37      	ldr	r3, [pc, #220]	; (800f8cc <scalbn+0x104>)
 800f7f0:	4604      	mov	r4, r0
 800f7f2:	460d      	mov	r5, r1
 800f7f4:	429e      	cmp	r6, r3
 800f7f6:	da10      	bge.n	800f81a <scalbn+0x52>
 800f7f8:	a32b      	add	r3, pc, #172	; (adr r3, 800f8a8 <scalbn+0xe0>)
 800f7fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7fe:	e03a      	b.n	800f876 <scalbn+0xae>
 800f800:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f804:	428a      	cmp	r2, r1
 800f806:	d10c      	bne.n	800f822 <scalbn+0x5a>
 800f808:	ee10 2a10 	vmov	r2, s0
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fe66 	bl	80004e0 <__adddf3>
 800f814:	4604      	mov	r4, r0
 800f816:	460d      	mov	r5, r1
 800f818:	e019      	b.n	800f84e <scalbn+0x86>
 800f81a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f81e:	460b      	mov	r3, r1
 800f820:	3a36      	subs	r2, #54	; 0x36
 800f822:	4432      	add	r2, r6
 800f824:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f828:	428a      	cmp	r2, r1
 800f82a:	dd08      	ble.n	800f83e <scalbn+0x76>
 800f82c:	2d00      	cmp	r5, #0
 800f82e:	a120      	add	r1, pc, #128	; (adr r1, 800f8b0 <scalbn+0xe8>)
 800f830:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f834:	da1c      	bge.n	800f870 <scalbn+0xa8>
 800f836:	a120      	add	r1, pc, #128	; (adr r1, 800f8b8 <scalbn+0xf0>)
 800f838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f83c:	e018      	b.n	800f870 <scalbn+0xa8>
 800f83e:	2a00      	cmp	r2, #0
 800f840:	dd08      	ble.n	800f854 <scalbn+0x8c>
 800f842:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f846:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f84a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f84e:	ec45 4b10 	vmov	d0, r4, r5
 800f852:	bd70      	pop	{r4, r5, r6, pc}
 800f854:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f858:	da19      	bge.n	800f88e <scalbn+0xc6>
 800f85a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f85e:	429e      	cmp	r6, r3
 800f860:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f864:	dd0a      	ble.n	800f87c <scalbn+0xb4>
 800f866:	a112      	add	r1, pc, #72	; (adr r1, 800f8b0 <scalbn+0xe8>)
 800f868:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d1e2      	bne.n	800f836 <scalbn+0x6e>
 800f870:	a30f      	add	r3, pc, #60	; (adr r3, 800f8b0 <scalbn+0xe8>)
 800f872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f876:	f7f0 ffe9 	bl	800084c <__aeabi_dmul>
 800f87a:	e7cb      	b.n	800f814 <scalbn+0x4c>
 800f87c:	a10a      	add	r1, pc, #40	; (adr r1, 800f8a8 <scalbn+0xe0>)
 800f87e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f882:	2b00      	cmp	r3, #0
 800f884:	d0b8      	beq.n	800f7f8 <scalbn+0x30>
 800f886:	a10e      	add	r1, pc, #56	; (adr r1, 800f8c0 <scalbn+0xf8>)
 800f888:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f88c:	e7b4      	b.n	800f7f8 <scalbn+0x30>
 800f88e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f892:	3236      	adds	r2, #54	; 0x36
 800f894:	4620      	mov	r0, r4
 800f896:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f89a:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f89e:	2200      	movs	r2, #0
 800f8a0:	4b0b      	ldr	r3, [pc, #44]	; (800f8d0 <scalbn+0x108>)
 800f8a2:	e7e8      	b.n	800f876 <scalbn+0xae>
 800f8a4:	f3af 8000 	nop.w
 800f8a8:	c2f8f359 	.word	0xc2f8f359
 800f8ac:	01a56e1f 	.word	0x01a56e1f
 800f8b0:	8800759c 	.word	0x8800759c
 800f8b4:	7e37e43c 	.word	0x7e37e43c
 800f8b8:	8800759c 	.word	0x8800759c
 800f8bc:	fe37e43c 	.word	0xfe37e43c
 800f8c0:	c2f8f359 	.word	0xc2f8f359
 800f8c4:	81a56e1f 	.word	0x81a56e1f
 800f8c8:	43500000 	.word	0x43500000
 800f8cc:	ffff3cb0 	.word	0xffff3cb0
 800f8d0:	3c900000 	.word	0x3c900000

0800f8d4 <_init>:
 800f8d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8d6:	bf00      	nop
 800f8d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8da:	bc08      	pop	{r3}
 800f8dc:	469e      	mov	lr, r3
 800f8de:	4770      	bx	lr

0800f8e0 <_fini>:
 800f8e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8e2:	bf00      	nop
 800f8e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f8e6:	bc08      	pop	{r3}
 800f8e8:	469e      	mov	lr, r3
 800f8ea:	4770      	bx	lr
