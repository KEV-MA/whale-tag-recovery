
KaveetSakshamRecoveryBoard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000238  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000107f4  08000238  08000238  00010238  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000748  08010a30  08010a30  00020a30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08011178  08011178  00021178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08011180  08011180  00021180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08011184  08011184  00021184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000074  20000000  08011188  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000063ac  20000074  080111fc  00030074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20006420  080111fc  00036420  2**0
                  ALLOC
  9 .ARM.attributes 00000036  00000000  00000000  00030074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0002fe09  00000000  00000000  000300aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 00006e7d  00000000  00000000  0005feb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00002020  00000000  00000000  00066d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_ranges 00001dc8  00000000  00000000  00068d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003a328  00000000  00000000  0006ab18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   0002f74d  00000000  00000000  000a4e40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    00156e41  00000000  00000000  000d458d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .comment      00000050  00000000  00000000  0022b3ce  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00008e54  00000000  00000000  0022b420  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000238 <__do_global_dtors_aux>:
 8000238:	b510      	push	{r4, lr}
 800023a:	4c05      	ldr	r4, [pc, #20]	; (8000250 <__do_global_dtors_aux+0x18>)
 800023c:	7823      	ldrb	r3, [r4, #0]
 800023e:	b933      	cbnz	r3, 800024e <__do_global_dtors_aux+0x16>
 8000240:	4b04      	ldr	r3, [pc, #16]	; (8000254 <__do_global_dtors_aux+0x1c>)
 8000242:	b113      	cbz	r3, 800024a <__do_global_dtors_aux+0x12>
 8000244:	4804      	ldr	r0, [pc, #16]	; (8000258 <__do_global_dtors_aux+0x20>)
 8000246:	e000      	b.n	800024a <__do_global_dtors_aux+0x12>
 8000248:	bf00      	nop
 800024a:	2301      	movs	r3, #1
 800024c:	7023      	strb	r3, [r4, #0]
 800024e:	bd10      	pop	{r4, pc}
 8000250:	20000074 	.word	0x20000074
 8000254:	00000000 	.word	0x00000000
 8000258:	08010a14 	.word	0x08010a14

0800025c <frame_dummy>:
 800025c:	b508      	push	{r3, lr}
 800025e:	4b03      	ldr	r3, [pc, #12]	; (800026c <frame_dummy+0x10>)
 8000260:	b11b      	cbz	r3, 800026a <frame_dummy+0xe>
 8000262:	4903      	ldr	r1, [pc, #12]	; (8000270 <frame_dummy+0x14>)
 8000264:	4803      	ldr	r0, [pc, #12]	; (8000274 <frame_dummy+0x18>)
 8000266:	e000      	b.n	800026a <frame_dummy+0xe>
 8000268:	bf00      	nop
 800026a:	bd08      	pop	{r3, pc}
 800026c:	00000000 	.word	0x00000000
 8000270:	20000078 	.word	0x20000078
 8000274:	08010a14 	.word	0x08010a14

08000278 <_tx_initialize_low_level>:
    .thumb_func
.type _tx_initialize_low_level, function
_tx_initialize_low_level:

    /* Disable interrupts during ThreadX initialization.  */
    CPSID   i
 8000278:	b672      	cpsid	i
    LDR     r1, =__RAM_segment_used_end__           // Build first free address
    ADD     r1, r1, #4                              //
    STR     r1, [r0]                                // Setup first unused memory pointer
#endif
    /* Setup Vector Table Offset Register.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 800027a:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 800027e:	4918      	ldr	r1, [pc, #96]	; (80002e0 <__tx_DBGHandler+0x4>)
    STR     r1, [r0, #0xD08]                        // Set vector table address
 8000280:	f8c0 1d08 	str.w	r1, [r0, #3336]	; 0xd08

    /* Enable the cycle count register.  */
    LDR     r0, =0xE0001000                         // Build address of DWT register
 8000284:	4817      	ldr	r0, [pc, #92]	; (80002e4 <__tx_DBGHandler+0x8>)
    LDR     r1, [r0]                                // Pickup the current value
 8000286:	6801      	ldr	r1, [r0, #0]
    ORR     r1, r1, #1                              // Set the CYCCNTENA bit
 8000288:	f041 0101 	orr.w	r1, r1, #1
    STR     r1, [r0]                                // Enable the cycle count register
 800028c:	6001      	str	r1, [r0, #0]

    /* Set system stack pointer from vector value.  */
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 800028e:	4816      	ldr	r0, [pc, #88]	; (80002e8 <__tx_DBGHandler+0xc>)
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 8000290:	4913      	ldr	r1, [pc, #76]	; (80002e0 <__tx_DBGHandler+0x4>)
    LDR     r1, [r1]                                // Pickup reset stack pointer
 8000292:	6809      	ldr	r1, [r1, #0]
    STR     r1, [r0]                                // Save system stack pointer
 8000294:	6001      	str	r1, [r0, #0]

    /* Configure SysTick.  */
    MOV     r0, #0xE000E000                         // Build address of NVIC registers
 8000296:	f04f 20e0 	mov.w	r0, #3758153728	; 0xe000e000
    LDR     r1, =SYSTICK_CYCLES
 800029a:	f641 713f 	movw	r1, #7999	; 0x1f3f
    STR     r1, [r0, #0x14]                         // Setup SysTick Reload Value
 800029e:	6141      	str	r1, [r0, #20]
    MOV     r1, #0x7                                // Build SysTick Control Enable Value
 80002a0:	f04f 0107 	mov.w	r1, #7
    STR     r1, [r0, #0x10]                         // Setup SysTick Control
 80002a4:	6101      	str	r1, [r0, #16]

    /* Configure handler priorities.  */
    LDR     r1, =0x00000000                         // Rsrv, UsgF, BusF, MemM
 80002a6:	f04f 0100 	mov.w	r1, #0
    STR     r1, [r0, #0xD18]                        // Setup System Handlers 4-7 Priority Registers
 80002aa:	f8c0 1d18 	str.w	r1, [r0, #3352]	; 0xd18

    LDR     r1, =0xFF000000                         // SVCl, Rsrv, Rsrv, Rsrv
 80002ae:	f04f 417f 	mov.w	r1, #4278190080	; 0xff000000
    STR     r1, [r0, #0xD1C]                        // Setup System Handlers 8-11 Priority Registers
 80002b2:	f8c0 1d1c 	str.w	r1, [r0, #3356]	; 0xd1c
                                                    // Note: SVC must be lowest priority, which is 0xFF

    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002b6:	490d      	ldr	r1, [pc, #52]	; (80002ec <__tx_DBGHandler+0x10>)
    STR     r1, [r0, #0xD20]                        // Setup System Handlers 12-15 Priority Registers
 80002b8:	f8c0 1d20 	str.w	r1, [r0, #3360]	; 0xd20
                                                    // Note: PnSV must be lowest priority, which is 0xFF

    /* Return to caller.  */
    BX      lr
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__tx_BadHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_BadHandler
    .thumb_func
.type __tx_BadHandler, function
__tx_BadHandler:
    B       __tx_BadHandler
 80002c0:	f7ff bffe 	b.w	80002c0 <__tx_BadHandler>

080002c4 <__tx_IntHandler>:
    .thumb_func
.type __tx_IntHandler, function
__tx_IntHandler:
// VOID InterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002c4:	b501      	push	{r0, lr}
    /* Do interrupt handler work here */
    /* .... */
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002c6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002ca:	4770      	bx	lr

080002cc <SysTick_Handler>:
    .thumb_func
.type SysTick_Handler, function
SysTick_Handler:
// VOID TimerInterruptHandler (VOID)
// {
    PUSH    {r0,lr}     // Save LR (and dummy r0 to maintain stack alignment)
 80002cc:	b501      	push	{r0, lr}
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_enter             // Call the ISR enter function
#endif
    BL      _tx_timer_interrupt
 80002ce:	f000 f89d 	bl	800040c <_tx_timer_interrupt>
#if (defined(TX_ENABLE_EXECUTION_CHANGE_NOTIFY) || defined(TX_EXECUTION_PROFILE_ENABLE))
    BL      _tx_execution_isr_exit              // Call the ISR exit function
#endif
    POP     {r0,lr}
 80002d2:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
    BX      lr
 80002d6:	4770      	bx	lr

080002d8 <__tx_NMIHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_NMIHandler
    .thumb_func
.type __tx_NMIHandler, function
__tx_NMIHandler:
    B       __tx_NMIHandler
 80002d8:	f7ff bffe 	b.w	80002d8 <__tx_NMIHandler>

080002dc <__tx_DBGHandler>:
    .eabi_attribute Tag_ABI_align_preserved, 1
    .global  __tx_DBGHandler
    .thumb_func
.type __tx_DBGHandler, function
__tx_DBGHandler:
    B       __tx_DBGHandler
 80002dc:	f7ff bffe 	b.w	80002dc <__tx_DBGHandler>
    LDR     r1, =g_pfnVectors                       // Pickup address of vector table
 80002e0:	08000000 	.word	0x08000000
    LDR     r0, =0xE0001000                         // Build address of DWT register
 80002e4:	e0001000 	.word	0xe0001000
    LDR     r0, =_tx_thread_system_stack_ptr        // Build address of system stack pointer
 80002e8:	20005e00 	.word	0x20005e00
    LDR     r1, =0x40FF0000                         // SysT, PnSV, Rsrv, DbgM
 80002ec:	40ff0000 	.word	0x40ff0000

080002f0 <_tx_thread_schedule>:
    /* This function should only ever be called on Cortex-M
       from the first schedule request. Subsequent scheduling occurs
       from the PendSV handling routine below. */

    /* Clear the preempt-disable flag to enable rescheduling after initialization on Cortex-M targets.  */
    MOV     r0, #0                                  // Build value for TX_FALSE
 80002f0:	f04f 0000 	mov.w	r0, #0
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80002f4:	4a31      	ldr	r2, [pc, #196]	; (80003bc <_tx_vfp_access+0x4>)
    STR     r0, [r2, #0]                            // Clear preempt disable flag
 80002f6:	6010      	str	r0, [r2, #0]

#ifdef __ARM_FP
    /* Clear CONTROL.FPCA bit so VFP registers aren't unnecessarily stacked.  */
    MRS     r0, CONTROL                             // Pickup current CONTROL register
 80002f8:	f3ef 8014 	mrs	r0, CONTROL
    BIC     r0, r0, #4                              // Clear the FPCA bit
 80002fc:	f020 0004 	bic.w	r0, r0, #4
    MSR     CONTROL, r0                             // Setup new CONTROL register
 8000300:	f380 8814 	msr	CONTROL, r0
#endif

    /* Enable interrupts */
    CPSIE   i
 8000304:	b662      	cpsie	i

    /* Enter the scheduler for the first time.  */
    MOV     r0, #0x10000000                         // Load PENDSVSET bit
 8000306:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
    MOV     r1, #0xE000E000                         // Load NVIC base
 800030a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    STR     r0, [r1, #0xD04]                        // Set PENDSVBIT in ICSR
 800030e:	f8c1 0d04 	str.w	r0, [r1, #3332]	; 0xd04
    DSB                                             // Complete all memory accesses
 8000312:	f3bf 8f4f 	dsb	sy
    ISB                                             // Flush pipeline
 8000316:	f3bf 8f6f 	isb	sy

0800031a <__tx_wait_here>:

    /* Wait here for the PendSV to take place.  */

__tx_wait_here:
    B       __tx_wait_here                          // Wait for the PendSV to happen
 800031a:	e7fe      	b.n	800031a <__tx_wait_here>

0800031c <PendSV_Handler>:
#else
    CPSIE   i                                       // Enable interrupts
#endif  /* TX_PORT_USE_BASEPRI */
#endif  /* EXECUTION PROFILE */

    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 800031c:	4828      	ldr	r0, [pc, #160]	; (80003c0 <_tx_vfp_access+0x8>)
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800031e:	4a29      	ldr	r2, [pc, #164]	; (80003c4 <_tx_vfp_access+0xc>)
    MOV     r3, #0                                  // Build NULL value
 8000320:	f04f 0300 	mov.w	r3, #0
    LDR     r1, [r0]                                // Pickup current thread pointer
 8000324:	6801      	ldr	r1, [r0, #0]

    /* Determine if there is a current thread to finish preserving.  */

    CBZ     r1, __tx_ts_new                         // If NULL, skip preservation
 8000326:	b191      	cbz	r1, 800034e <__tx_ts_new>

    /* Recover PSP and preserve current thread context.  */

    STR     r3, [r0]                                // Set _tx_thread_current_ptr to NULL
 8000328:	6003      	str	r3, [r0, #0]
    MRS     r12, PSP                                // Pickup PSP pointer (thread's stack pointer)
 800032a:	f3ef 8c09 	mrs	ip, PSP
    STMDB   r12!, {r4-r11}                          // Save its remaining registers
 800032e:	e92c 0ff0 	stmdb	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000332:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_save
 8000336:	d101      	bne.n	800033c <_skip_vfp_save>
    VSTMDB  r12!,{s16-s31}                          // Yes, save additional VFP registers
 8000338:	ed2c 8a10 	vstmdb	ip!, {s16-s31}

0800033c <_skip_vfp_save>:
_skip_vfp_save:
#endif
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800033c:	4c22      	ldr	r4, [pc, #136]	; (80003c8 <_tx_vfp_access+0x10>)
    STMDB   r12!, {LR}                              // Save LR on the stack
 800033e:	f84c ed04 	str.w	lr, [ip, #-4]!
    STR     r12, [r1, #8]                           // Save the thread stack pointer
 8000342:	f8c1 c008 	str.w	ip, [r1, #8]
_skip_secure_save:
#endif

    /* Determine if time-slice is active. If it isn't, skip time handling processing.  */

    LDR     r5, [r4]                                // Pickup current time-slice
 8000346:	6825      	ldr	r5, [r4, #0]
    CBZ     r5, __tx_ts_new                         // If not active, skip processing
 8000348:	b10d      	cbz	r5, 800034e <__tx_ts_new>

    /* Time-slice is active, save the current thread's time-slice and clear the global time-slice variable.  */

    STR     r5, [r1, #24]                           // Save current time-slice
 800034a:	618d      	str	r5, [r1, #24]

    /* Clear the global time-slice.  */

    STR     r3, [r4]                                // Clear time-slice
 800034c:	6023      	str	r3, [r4, #0]

0800034e <__tx_ts_new>:

#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800034e:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Is there another thread ready to execute?
 8000350:	6811      	ldr	r1, [r2, #0]
    CBZ     r1, __tx_ts_wait                        // No, skip to the wait processing
 8000352:	b1d1      	cbz	r1, 800038a <__tx_ts_wait>

    /* Yes, another thread is ready for else, make the current thread the new thread.  */

    STR     r1, [r0]                                // Setup the current thread pointer to the new thread
 8000354:	6001      	str	r1, [r0, #0]
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 8000356:	b662      	cpsie	i

08000358 <__tx_ts_restore>:
#endif

    /* Increment the thread run count.  */

__tx_ts_restore:
    LDR     r7, [r1, #4]                            // Pickup the current thread run count
 8000358:	684f      	ldr	r7, [r1, #4]
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 800035a:	4c1b      	ldr	r4, [pc, #108]	; (80003c8 <_tx_vfp_access+0x10>)
    LDR     r5, [r1, #24]                           // Pickup thread's current time-slice
 800035c:	698d      	ldr	r5, [r1, #24]
    ADD     r7, r7, #1                              // Increment the thread run count
 800035e:	f107 0701 	add.w	r7, r7, #1
    STR     r7, [r1, #4]                            // Store the new run count
 8000362:	604f      	str	r7, [r1, #4]

    /* Setup global time-slice with thread's current time-slice.  */

    STR     r5, [r4]                                // Setup global time-slice
 8000364:	6025      	str	r5, [r4, #0]
    POP     {r0,r1}                                 // Restore r1 (and dummy r0)
_skip_secure_restore:
#endif

    /* Restore the thread context and PSP.  */
    LDR     r12, [r1, #12]                          // Get stack start
 8000366:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    MSR     PSPLIM, r12                             // Set stack limit
 800036a:	f38c 880b 	msr	PSPLIM, ip
    LDR     r12, [r1, #8]                           // Pickup thread's stack pointer
 800036e:	f8d1 c008 	ldr.w	ip, [r1, #8]
    LDMIA   r12!, {LR}                              // Pickup LR
 8000372:	f85c eb04 	ldr.w	lr, [ip], #4
#ifdef __ARM_FP
    TST     LR, #0x10                               // Determine if the VFP extended frame is present
 8000376:	f01e 0f10 	tst.w	lr, #16
    BNE     _skip_vfp_restore                       // If not, skip VFP restore
 800037a:	d101      	bne.n	8000380 <_skip_vfp_restore>
    VLDMIA  r12!, {s16-s31}                         // Yes, restore additional VFP registers
 800037c:	ecbc 8a10 	vldmia	ip!, {s16-s31}

08000380 <_skip_vfp_restore>:
_skip_vfp_restore:
#endif
    LDMIA   r12!, {r4-r11}                          // Recover thread's registers
 8000380:	e8bc 0ff0 	ldmia.w	ip!, {r4, r5, r6, r7, r8, r9, sl, fp}
    MSR     PSP, r12                                // Setup the thread's stack pointer
 8000384:	f38c 8809 	msr	PSP, ip

    BX      lr                                      // Return to thread!
 8000388:	4770      	bx	lr

0800038a <__tx_ts_wait>:
__tx_ts_wait:
#ifdef TX_PORT_USE_BASEPRI
    LDR     r1, =TX_PORT_BASEPRI                    // Mask interrupt priorities =< TX_PORT_BASEPRI
    MSR     BASEPRI, r1
#else
    CPSID   i                                       // Disable interrupts
 800038a:	b672      	cpsid	i
#endif
    LDR     r1, [r2]                                // Pickup the next thread to execute pointer
 800038c:	6811      	ldr	r1, [r2, #0]
    STR     r1, [r0]                                // Store it in the current pointer
 800038e:	6001      	str	r1, [r0, #0]
    CBNZ    r1, __tx_ts_ready                       // If non-NULL, a new thread is ready!
 8000390:	b949      	cbnz	r1, 80003a6 <__tx_ts_ready>

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 8000392:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_enter                      // Possibly enter low power mode
 8000394:	f00d fe68 	bl	800e068 <tx_low_power_enter>
    POP     {r0-r3}
 8000398:	bc0f      	pop	{r0, r1, r2, r3}
    WFI                                             // Wait for interrupt
    ISB                                             // Ensure pipeline is flushed
#endif

#ifdef TX_LOW_POWER
    PUSH    {r0-r3}
 800039a:	b40f      	push	{r0, r1, r2, r3}
    BL      tx_low_power_exit                       // Exit low power mode
 800039c:	f00d fe8c 	bl	800e0b8 <tx_low_power_exit>
    POP     {r0-r3}
 80003a0:	bc0f      	pop	{r0, r1, r2, r3}

#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003a2:	b662      	cpsie	i
#endif
    B       __tx_ts_wait                            // Loop to continue waiting
 80003a4:	e7f1      	b.n	800038a <__tx_ts_wait>

080003a6 <__tx_ts_ready>:

    /* At this point, we have a new thread ready to go. Clear any newly pended PendSV - since we are
       already in the handler!  */
__tx_ts_ready:
    MOV     r7, #0x08000000                         // Build clear PendSV value
 80003a6:	f04f 6700 	mov.w	r7, #134217728	; 0x8000000
    MOV     r8, #0xE000E000                         // Build base NVIC address
 80003aa:	f04f 28e0 	mov.w	r8, #3758153728	; 0xe000e000
    STR     r7, [r8, #0xD04]                        // Clear any PendSV
 80003ae:	f8c8 7d04 	str.w	r7, [r8, #3332]	; 0xd04
    /* Re-enable interrupts and restore new thread.  */
#ifdef TX_PORT_USE_BASEPRI
    MOV     r4, #0                                  // Disable BASEPRI masking (enable interrupts)
    MSR     BASEPRI, r4
#else
    CPSIE   i                                       // Enable interrupts
 80003b2:	b662      	cpsie	i
#endif
    B       __tx_ts_restore                         // Restore the thread
 80003b4:	e7d0      	b.n	8000358 <__tx_ts_restore>
 80003b6:	bf00      	nop

080003b8 <_tx_vfp_access>:
.type _tx_vfp_access, function
_tx_vfp_access:
#if TX_ENABLE_FPU_SUPPORT
    VMOV.F32 s0, s0                                 // Simply access the VFP
#endif
    BX       lr                                     // Return to caller
 80003b8:	4770      	bx	lr
 80003ba:	0000      	.short	0x0000
    LDR     r2, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80003bc:	20005e9c 	.word	0x20005e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80003c0:	20005e04 	.word	0x20005e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80003c4:	20005e08 	.word	0x20005e08
    LDR     r4, =_tx_timer_time_slice               // Build address of time-slice variable
 80003c8:	20006408 	.word	0x20006408

080003cc <_tx_thread_stack_build>:
                       pc          Initial value for pc
                       xPSR        Initial value for xPSR

    Stack Bottom: (higher memory address)  */

    LDR     r2, [r0, #16]                           // Pickup end of stack area
 80003cc:	6902      	ldr	r2, [r0, #16]
    BIC     r2, r2, #0x7                            // Align frame for 8-byte alignment
 80003ce:	f022 0207 	bic.w	r2, r2, #7
    SUB     r2, r2, #68                             // Subtract frame size
 80003d2:	f1a2 0244 	sub.w	r2, r2, #68	; 0x44
#ifdef TX_SINGLE_MODE_SECURE
    LDR     r3, =0xFFFFFFFD                         // Build initial LR value for secure mode
#else
    LDR     r3, =0xFFFFFFBC                         // Build initial LR value to return to non-secure PSP
 80003d6:	f06f 0343 	mvn.w	r3, #67	; 0x43
#endif
    STR     r3, [r2, #0]                            // Save on the stack
 80003da:	6013      	str	r3, [r2, #0]

    /* Actually build the stack frame.  */

    MOV     r3, #0                                  // Build initial register value
 80003dc:	f04f 0300 	mov.w	r3, #0
    STR     r3, [r2, #4]                            // Store initial r4
 80003e0:	6053      	str	r3, [r2, #4]
    STR     r3, [r2, #8]                            // Store initial r5
 80003e2:	6093      	str	r3, [r2, #8]
    STR     r3, [r2, #12]                           // Store initial r6
 80003e4:	60d3      	str	r3, [r2, #12]
    STR     r3, [r2, #16]                           // Store initial r7
 80003e6:	6113      	str	r3, [r2, #16]
    STR     r3, [r2, #20]                           // Store initial r8
 80003e8:	6153      	str	r3, [r2, #20]
    STR     r3, [r2, #24]                           // Store initial r9
 80003ea:	6193      	str	r3, [r2, #24]
    STR     r3, [r2, #28]                           // Store initial r10
 80003ec:	61d3      	str	r3, [r2, #28]
    STR     r3, [r2, #32]                           // Store initial r11
 80003ee:	6213      	str	r3, [r2, #32]

    /* Hardware stack follows.  */

    STR     r3, [r2, #36]                           // Store initial r0
 80003f0:	6253      	str	r3, [r2, #36]	; 0x24
    STR     r3, [r2, #40]                           // Store initial r1
 80003f2:	6293      	str	r3, [r2, #40]	; 0x28
    STR     r3, [r2, #44]                           // Store initial r2
 80003f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    STR     r3, [r2, #48]                           // Store initial r3
 80003f6:	6313      	str	r3, [r2, #48]	; 0x30
    STR     r3, [r2, #52]                           // Store initial r12
 80003f8:	6353      	str	r3, [r2, #52]	; 0x34
    MOV     r3, #0xFFFFFFFF                         // Poison EXC_RETURN value
 80003fa:	f04f 33ff 	mov.w	r3, #4294967295
    STR     r3, [r2, #56]                           // Store initial lr
 80003fe:	6393      	str	r3, [r2, #56]	; 0x38
    STR     r1, [r2, #60]                           // Store initial pc
 8000400:	63d1      	str	r1, [r2, #60]	; 0x3c
    MOV     r3, #0x01000000                         // Only T-bit need be set
 8000402:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    STR     r3, [r2, #64]                           // Store initial xPSR
 8000406:	6413      	str	r3, [r2, #64]	; 0x40

    /* Setup stack pointer.  */
    // thread_ptr -> tx_thread_stack_ptr =  r2;

    STR     r2, [r0, #8]                            // Save stack pointer in thread's
 8000408:	6082      	str	r2, [r0, #8]
                                                    //   control block
    BX      lr                                      // Return to caller
 800040a:	4770      	bx	lr

0800040c <_tx_timer_interrupt>:
       for use.  */

    /* Increment the system clock.  */
    // _tx_timer_system_clock++;

    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 800040c:	4922      	ldr	r1, [pc, #136]	; (8000498 <__tx_timer_nothing_expired+0x8>)
    LDR     r0, [r1, #0]                            // Pickup system clock
 800040e:	6808      	ldr	r0, [r1, #0]
    ADD     r0, r0, #1                              // Increment system clock
 8000410:	f100 0001 	add.w	r0, r0, #1
    STR     r0, [r1, #0]                            // Store new system clock
 8000414:	6008      	str	r0, [r1, #0]

    /* Test for time-slice expiration.  */
    // if (_tx_timer_time_slice)
    // {

    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 8000416:	4b21      	ldr	r3, [pc, #132]	; (800049c <__tx_timer_nothing_expired+0xc>)
    LDR     r2, [r3, #0]                            // Pickup time-slice
 8000418:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_no_time_slice            // Is it non-active?
 800041a:	b13a      	cbz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // Yes, skip time-slice processing

       /* Decrement the time_slice.  */
       // _tx_timer_time_slice--;

    SUB     r2, r2, #1                              // Decrement the time-slice
 800041c:	f1a2 0201 	sub.w	r2, r2, #1
    STR     r2, [r3, #0]                            // Store new time-slice value
 8000420:	601a      	str	r2, [r3, #0]

       /* Check for expiration.  */
       // if (__tx_timer_time_slice == 0)

    CBNZ    r2, __tx_timer_no_time_slice            // Has it expired?
 8000422:	b91a      	cbnz	r2, 800042c <__tx_timer_no_time_slice>
                                                    // No, skip expiration processing

       /* Set the time-slice expired flag.  */
       // _tx_timer_expired_time_slice =  TX_TRUE;

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 8000424:	4b1e      	ldr	r3, [pc, #120]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    MOV     r0, #1                                  // Build expired value
 8000426:	f04f 0001 	mov.w	r0, #1
    STR     r0, [r3, #0]                            // Set time-slice expiration flag
 800042a:	6018      	str	r0, [r3, #0]

0800042c <__tx_timer_no_time_slice>:

    /* Test for timer expiration.  */
    // if (*_tx_timer_current_ptr)
    // {

    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 800042c:	491d      	ldr	r1, [pc, #116]	; (80004a4 <__tx_timer_nothing_expired+0x14>)
    LDR     r0, [r1, #0]                            // Pickup current timer
 800042e:	6808      	ldr	r0, [r1, #0]
    LDR     r2, [r0, #0]                            // Pickup timer list entry
 8000430:	6802      	ldr	r2, [r0, #0]
    CBZ     r2, __tx_timer_no_timer                 // Is there anything in the list?
 8000432:	b122      	cbz	r2, 800043e <__tx_timer_no_timer>
                                                    // No, just increment the timer

        /* Set expiration flag.  */
        // _tx_timer_expired =  TX_TRUE;

    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 8000434:	4b1c      	ldr	r3, [pc, #112]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    MOV     r2, #1                                  // Build expired value
 8000436:	f04f 0201 	mov.w	r2, #1
    STR     r2, [r3, #0]                            // Set expired flag
 800043a:	601a      	str	r2, [r3, #0]
    B       __tx_timer_done                         // Finished timer processing
 800043c:	e008      	b.n	8000450 <__tx_timer_done>

0800043e <__tx_timer_no_timer>:
__tx_timer_no_timer:

        /* No timer expired, increment the timer pointer.  */
        // _tx_timer_current_ptr++;

    ADD     r0, r0, #4                              // Move to next timer
 800043e:	f100 0004 	add.w	r0, r0, #4

        /* Check for wrap-around.  */
        // if (_tx_timer_current_ptr == _tx_timer_list_end)

    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 8000442:	4b1a      	ldr	r3, [pc, #104]	; (80004ac <__tx_timer_nothing_expired+0x1c>)
    LDR     r2, [r3, #0]                            // Pickup list end
 8000444:	681a      	ldr	r2, [r3, #0]
    CMP     r0, r2                                  // Are we at list end?
 8000446:	4290      	cmp	r0, r2
    BNE     __tx_timer_skip_wrap                    // No, skip wrap-around logic
 8000448:	d101      	bne.n	800044e <__tx_timer_skip_wrap>

            /* Wrap to beginning of list.  */
            // _tx_timer_current_ptr =  _tx_timer_list_start;

    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 800044a:	4b19      	ldr	r3, [pc, #100]	; (80004b0 <__tx_timer_nothing_expired+0x20>)
    LDR     r0, [r3, #0]                            // Set current pointer to list start
 800044c:	6818      	ldr	r0, [r3, #0]

0800044e <__tx_timer_skip_wrap>:

__tx_timer_skip_wrap:

    STR     r0, [r1, #0]                            // Store new current timer pointer
 800044e:	6008      	str	r0, [r1, #0]

08000450 <__tx_timer_done>:

    /* See if anything has expired.  */
    // if ((_tx_timer_expired_time_slice) || (_tx_timer_expired))
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of expired flag
 8000450:	4b13      	ldr	r3, [pc, #76]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup time-slice expired flag
 8000452:	681a      	ldr	r2, [r3, #0]
    CBNZ    r2, __tx_something_expired              // Did a time-slice expire?
 8000454:	b912      	cbnz	r2, 800045c <__tx_something_expired>
                                                    // If non-zero, time-slice expired
    LDR     r1, =_tx_timer_expired                  // Pickup addr of other expired flag
 8000456:	4914      	ldr	r1, [pc, #80]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000458:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_nothing_expired          // Did a timer expire?
 800045a:	b1c8      	cbz	r0, 8000490 <__tx_timer_nothing_expired>

0800045c <__tx_something_expired>:
                                                    // No, nothing expired

__tx_something_expired:

    PUSH    {r0, lr}                                // Save the lr register on the stack
 800045c:	b501      	push	{r0, lr}

    /* Did a timer expire?  */
    // if (_tx_timer_expired)
    // {

    LDR     r1, =_tx_timer_expired                  // Pickup addr of expired flag
 800045e:	4912      	ldr	r1, [pc, #72]	; (80004a8 <__tx_timer_nothing_expired+0x18>)
    LDR     r0, [r1, #0]                            // Pickup timer expired flag
 8000460:	6808      	ldr	r0, [r1, #0]
    CBZ     r0, __tx_timer_dont_activate            // Check for timer expiration
 8000462:	b108      	cbz	r0, 8000468 <__tx_timer_dont_activate>
                                                    // If not set, skip timer activation

        /* Process timer expiration.  */
        // _tx_timer_expiration_process();

    BL      _tx_timer_expiration_process            // Call the timer expiration handling routine
 8000464:	f00d f8da 	bl	800d61c <_tx_timer_expiration_process>

08000468 <__tx_timer_dont_activate>:

    /* Did time slice expire?  */
    // if (_tx_timer_expired_time_slice)
    // {

    LDR     r3, =_tx_timer_expired_time_slice       // Pickup addr of time-slice expired
 8000468:	4b0d      	ldr	r3, [pc, #52]	; (80004a0 <__tx_timer_nothing_expired+0x10>)
    LDR     r2, [r3, #0]                            // Pickup the actual flag
 800046a:	681a      	ldr	r2, [r3, #0]
    CBZ     r2, __tx_timer_not_ts_expiration        // See if the flag is set
 800046c:	b172      	cbz	r2, 800048c <__tx_timer_not_ts_expiration>
                                                    // No, skip time-slice processing

        /* Time slice interrupted thread.  */
        // _tx_thread_time_slice();

    BL      _tx_thread_time_slice                   // Call time-slice processing
 800046e:	f00c ff9b 	bl	800d3a8 <_tx_thread_time_slice>
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 8000472:	4810      	ldr	r0, [pc, #64]	; (80004b4 <__tx_timer_nothing_expired+0x24>)
    LDR     r1, [r0]                                // Is the preempt disable flag set?
 8000474:	6801      	ldr	r1, [r0, #0]
    CBNZ    r1, __tx_timer_skip_time_slice          // Yes, skip the PendSV logic
 8000476:	b949      	cbnz	r1, 800048c <__tx_timer_not_ts_expiration>
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 8000478:	480f      	ldr	r0, [pc, #60]	; (80004b8 <__tx_timer_nothing_expired+0x28>)
    LDR     r1, [r0]                                // Pickup the current thread pointer
 800047a:	6801      	ldr	r1, [r0, #0]
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 800047c:	4a0f      	ldr	r2, [pc, #60]	; (80004bc <__tx_timer_nothing_expired+0x2c>)
    LDR     r3, [r2]                                // Pickup the execute thread pointer
 800047e:	6813      	ldr	r3, [r2, #0]
    LDR     r0, =0xE000ED04                         // Build address of control register
 8000480:	480f      	ldr	r0, [pc, #60]	; (80004c0 <__tx_timer_nothing_expired+0x30>)
    LDR     r2, =0x10000000                         // Build value for PendSV bit
 8000482:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    CMP     r1, r3                                  // Are they the same?
 8000486:	4299      	cmp	r1, r3
    BEQ     __tx_timer_skip_time_slice              // If the same, there was no time-slice performed
 8000488:	d000      	beq.n	800048c <__tx_timer_not_ts_expiration>
    STR     r2, [r0]                                // Not the same, issue the PendSV for preemption
 800048a:	6002      	str	r2, [r0, #0]

0800048c <__tx_timer_not_ts_expiration>:
__tx_timer_skip_time_slice:
    // }

__tx_timer_not_ts_expiration:

    POP     {r0, lr}                                // Recover lr register (r0 is just there for
 800048c:	e8bd 4001 	ldmia.w	sp!, {r0, lr}

08000490 <__tx_timer_nothing_expired>:

    // }

__tx_timer_nothing_expired:

    DSB                                             // Complete all memory access
 8000490:	f3bf 8f4f 	dsb	sy
    BX      lr                                      // Return to caller
 8000494:	4770      	bx	lr
 8000496:	0000      	.short	0x0000
    LDR     r1, =_tx_timer_system_clock             // Pickup address of system clock
 8000498:	20005ea8 	.word	0x20005ea8
    LDR     r3, =_tx_timer_time_slice               // Pickup address of time-slice
 800049c:	20006408 	.word	0x20006408
    LDR     r3, =_tx_timer_expired_time_slice       // Pickup address of expired flag
 80004a0:	20005eac 	.word	0x20005eac
    LDR     r1, =_tx_timer_current_ptr              // Pickup current timer pointer address
 80004a4:	20005f38 	.word	0x20005f38
    LDR     r3, =_tx_timer_expired                  // Pickup expiration flag address
 80004a8:	20005f3c 	.word	0x20005f3c
    LDR     r3, =_tx_timer_list_end                 // Pickup addr of timer list end
 80004ac:	20005f34 	.word	0x20005f34
    LDR     r3, =_tx_timer_list_start               // Pickup addr of timer list start
 80004b0:	20005f30 	.word	0x20005f30
    LDR     r0, =_tx_thread_preempt_disable         // Build address of preempt disable flag
 80004b4:	20005e9c 	.word	0x20005e9c
    LDR     r0, =_tx_thread_current_ptr             // Build current thread pointer address
 80004b8:	20005e04 	.word	0x20005e04
    LDR     r2, =_tx_thread_execute_ptr             // Build execute thread pointer address
 80004bc:	20005e08 	.word	0x20005e08
    LDR     r0, =0xE000ED04                         // Build address of control register
 80004c0:	e000ed04 	.word	0xe000ed04

080004c4 <strcmp>:
 80004c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80004c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80004cc:	2a01      	cmp	r2, #1
 80004ce:	bf28      	it	cs
 80004d0:	429a      	cmpcs	r2, r3
 80004d2:	d0f7      	beq.n	80004c4 <strcmp>
 80004d4:	1ad0      	subs	r0, r2, r3
 80004d6:	4770      	bx	lr

080004d8 <strlen>:
 80004d8:	4603      	mov	r3, r0
 80004da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80004de:	2a00      	cmp	r2, #0
 80004e0:	d1fb      	bne.n	80004da <strlen+0x2>
 80004e2:	1a18      	subs	r0, r3, r0
 80004e4:	3801      	subs	r0, #1
 80004e6:	4770      	bx	lr

080004e8 <__aeabi_drsub>:
 80004e8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004ec:	e002      	b.n	80004f4 <__adddf3>
 80004ee:	bf00      	nop

080004f0 <__aeabi_dsub>:
 80004f0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004f4 <__adddf3>:
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004fa:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004fe:	ea94 0f05 	teq	r4, r5
 8000502:	bf08      	it	eq
 8000504:	ea90 0f02 	teqeq	r0, r2
 8000508:	bf1f      	itttt	ne
 800050a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800050e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000512:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000516:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800051a:	f000 80e2 	beq.w	80006e2 <__adddf3+0x1ee>
 800051e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000522:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000526:	bfb8      	it	lt
 8000528:	426d      	neglt	r5, r5
 800052a:	dd0c      	ble.n	8000546 <__adddf3+0x52>
 800052c:	442c      	add	r4, r5
 800052e:	ea80 0202 	eor.w	r2, r0, r2
 8000532:	ea81 0303 	eor.w	r3, r1, r3
 8000536:	ea82 0000 	eor.w	r0, r2, r0
 800053a:	ea83 0101 	eor.w	r1, r3, r1
 800053e:	ea80 0202 	eor.w	r2, r0, r2
 8000542:	ea81 0303 	eor.w	r3, r1, r3
 8000546:	2d36      	cmp	r5, #54	; 0x36
 8000548:	bf88      	it	hi
 800054a:	bd30      	pophi	{r4, r5, pc}
 800054c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000550:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000554:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000558:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800055c:	d002      	beq.n	8000564 <__adddf3+0x70>
 800055e:	4240      	negs	r0, r0
 8000560:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000564:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000568:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800056c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000570:	d002      	beq.n	8000578 <__adddf3+0x84>
 8000572:	4252      	negs	r2, r2
 8000574:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000578:	ea94 0f05 	teq	r4, r5
 800057c:	f000 80a7 	beq.w	80006ce <__adddf3+0x1da>
 8000580:	f1a4 0401 	sub.w	r4, r4, #1
 8000584:	f1d5 0e20 	rsbs	lr, r5, #32
 8000588:	db0d      	blt.n	80005a6 <__adddf3+0xb2>
 800058a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800058e:	fa22 f205 	lsr.w	r2, r2, r5
 8000592:	1880      	adds	r0, r0, r2
 8000594:	f141 0100 	adc.w	r1, r1, #0
 8000598:	fa03 f20e 	lsl.w	r2, r3, lr
 800059c:	1880      	adds	r0, r0, r2
 800059e:	fa43 f305 	asr.w	r3, r3, r5
 80005a2:	4159      	adcs	r1, r3
 80005a4:	e00e      	b.n	80005c4 <__adddf3+0xd0>
 80005a6:	f1a5 0520 	sub.w	r5, r5, #32
 80005aa:	f10e 0e20 	add.w	lr, lr, #32
 80005ae:	2a01      	cmp	r2, #1
 80005b0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005b4:	bf28      	it	cs
 80005b6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005ba:	fa43 f305 	asr.w	r3, r3, r5
 80005be:	18c0      	adds	r0, r0, r3
 80005c0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c8:	d507      	bpl.n	80005da <__adddf3+0xe6>
 80005ca:	f04f 0e00 	mov.w	lr, #0
 80005ce:	f1dc 0c00 	rsbs	ip, ip, #0
 80005d2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005d6:	eb6e 0101 	sbc.w	r1, lr, r1
 80005da:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005de:	d31b      	bcc.n	8000618 <__adddf3+0x124>
 80005e0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005e4:	d30c      	bcc.n	8000600 <__adddf3+0x10c>
 80005e6:	0849      	lsrs	r1, r1, #1
 80005e8:	ea5f 0030 	movs.w	r0, r0, rrx
 80005ec:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005f0:	f104 0401 	add.w	r4, r4, #1
 80005f4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005f8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005fc:	f080 809a 	bcs.w	8000734 <__adddf3+0x240>
 8000600:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000604:	bf08      	it	eq
 8000606:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800060a:	f150 0000 	adcs.w	r0, r0, #0
 800060e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000612:	ea41 0105 	orr.w	r1, r1, r5
 8000616:	bd30      	pop	{r4, r5, pc}
 8000618:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800061c:	4140      	adcs	r0, r0
 800061e:	eb41 0101 	adc.w	r1, r1, r1
 8000622:	3c01      	subs	r4, #1
 8000624:	bf28      	it	cs
 8000626:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800062a:	d2e9      	bcs.n	8000600 <__adddf3+0x10c>
 800062c:	f091 0f00 	teq	r1, #0
 8000630:	bf04      	itt	eq
 8000632:	4601      	moveq	r1, r0
 8000634:	2000      	moveq	r0, #0
 8000636:	fab1 f381 	clz	r3, r1
 800063a:	bf08      	it	eq
 800063c:	3320      	addeq	r3, #32
 800063e:	f1a3 030b 	sub.w	r3, r3, #11
 8000642:	f1b3 0220 	subs.w	r2, r3, #32
 8000646:	da0c      	bge.n	8000662 <__adddf3+0x16e>
 8000648:	320c      	adds	r2, #12
 800064a:	dd08      	ble.n	800065e <__adddf3+0x16a>
 800064c:	f102 0c14 	add.w	ip, r2, #20
 8000650:	f1c2 020c 	rsb	r2, r2, #12
 8000654:	fa01 f00c 	lsl.w	r0, r1, ip
 8000658:	fa21 f102 	lsr.w	r1, r1, r2
 800065c:	e00c      	b.n	8000678 <__adddf3+0x184>
 800065e:	f102 0214 	add.w	r2, r2, #20
 8000662:	bfd8      	it	le
 8000664:	f1c2 0c20 	rsble	ip, r2, #32
 8000668:	fa01 f102 	lsl.w	r1, r1, r2
 800066c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000670:	bfdc      	itt	le
 8000672:	ea41 010c 	orrle.w	r1, r1, ip
 8000676:	4090      	lslle	r0, r2
 8000678:	1ae4      	subs	r4, r4, r3
 800067a:	bfa2      	ittt	ge
 800067c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000680:	4329      	orrge	r1, r5
 8000682:	bd30      	popge	{r4, r5, pc}
 8000684:	ea6f 0404 	mvn.w	r4, r4
 8000688:	3c1f      	subs	r4, #31
 800068a:	da1c      	bge.n	80006c6 <__adddf3+0x1d2>
 800068c:	340c      	adds	r4, #12
 800068e:	dc0e      	bgt.n	80006ae <__adddf3+0x1ba>
 8000690:	f104 0414 	add.w	r4, r4, #20
 8000694:	f1c4 0220 	rsb	r2, r4, #32
 8000698:	fa20 f004 	lsr.w	r0, r0, r4
 800069c:	fa01 f302 	lsl.w	r3, r1, r2
 80006a0:	ea40 0003 	orr.w	r0, r0, r3
 80006a4:	fa21 f304 	lsr.w	r3, r1, r4
 80006a8:	ea45 0103 	orr.w	r1, r5, r3
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	f1c4 040c 	rsb	r4, r4, #12
 80006b2:	f1c4 0220 	rsb	r2, r4, #32
 80006b6:	fa20 f002 	lsr.w	r0, r0, r2
 80006ba:	fa01 f304 	lsl.w	r3, r1, r4
 80006be:	ea40 0003 	orr.w	r0, r0, r3
 80006c2:	4629      	mov	r1, r5
 80006c4:	bd30      	pop	{r4, r5, pc}
 80006c6:	fa21 f004 	lsr.w	r0, r1, r4
 80006ca:	4629      	mov	r1, r5
 80006cc:	bd30      	pop	{r4, r5, pc}
 80006ce:	f094 0f00 	teq	r4, #0
 80006d2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006d6:	bf06      	itte	eq
 80006d8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006dc:	3401      	addeq	r4, #1
 80006de:	3d01      	subne	r5, #1
 80006e0:	e74e      	b.n	8000580 <__adddf3+0x8c>
 80006e2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006e6:	bf18      	it	ne
 80006e8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006ec:	d029      	beq.n	8000742 <__adddf3+0x24e>
 80006ee:	ea94 0f05 	teq	r4, r5
 80006f2:	bf08      	it	eq
 80006f4:	ea90 0f02 	teqeq	r0, r2
 80006f8:	d005      	beq.n	8000706 <__adddf3+0x212>
 80006fa:	ea54 0c00 	orrs.w	ip, r4, r0
 80006fe:	bf04      	itt	eq
 8000700:	4619      	moveq	r1, r3
 8000702:	4610      	moveq	r0, r2
 8000704:	bd30      	pop	{r4, r5, pc}
 8000706:	ea91 0f03 	teq	r1, r3
 800070a:	bf1e      	ittt	ne
 800070c:	2100      	movne	r1, #0
 800070e:	2000      	movne	r0, #0
 8000710:	bd30      	popne	{r4, r5, pc}
 8000712:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000716:	d105      	bne.n	8000724 <__adddf3+0x230>
 8000718:	0040      	lsls	r0, r0, #1
 800071a:	4149      	adcs	r1, r1
 800071c:	bf28      	it	cs
 800071e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000722:	bd30      	pop	{r4, r5, pc}
 8000724:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000728:	bf3c      	itt	cc
 800072a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800072e:	bd30      	popcc	{r4, r5, pc}
 8000730:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000734:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000738:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800073c:	f04f 0000 	mov.w	r0, #0
 8000740:	bd30      	pop	{r4, r5, pc}
 8000742:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000746:	bf1a      	itte	ne
 8000748:	4619      	movne	r1, r3
 800074a:	4610      	movne	r0, r2
 800074c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000750:	bf1c      	itt	ne
 8000752:	460b      	movne	r3, r1
 8000754:	4602      	movne	r2, r0
 8000756:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800075a:	bf06      	itte	eq
 800075c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000760:	ea91 0f03 	teqeq	r1, r3
 8000764:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000768:	bd30      	pop	{r4, r5, pc}
 800076a:	bf00      	nop

0800076c <__aeabi_ui2d>:
 800076c:	f090 0f00 	teq	r0, #0
 8000770:	bf04      	itt	eq
 8000772:	2100      	moveq	r1, #0
 8000774:	4770      	bxeq	lr
 8000776:	b530      	push	{r4, r5, lr}
 8000778:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800077c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000780:	f04f 0500 	mov.w	r5, #0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e750      	b.n	800062c <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_i2d>:
 800078c:	f090 0f00 	teq	r0, #0
 8000790:	bf04      	itt	eq
 8000792:	2100      	moveq	r1, #0
 8000794:	4770      	bxeq	lr
 8000796:	b530      	push	{r4, r5, lr}
 8000798:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800079c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007a0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007a4:	bf48      	it	mi
 80007a6:	4240      	negmi	r0, r0
 80007a8:	f04f 0100 	mov.w	r1, #0
 80007ac:	e73e      	b.n	800062c <__adddf3+0x138>
 80007ae:	bf00      	nop

080007b0 <__aeabi_f2d>:
 80007b0:	0042      	lsls	r2, r0, #1
 80007b2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007b6:	ea4f 0131 	mov.w	r1, r1, rrx
 80007ba:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007be:	bf1f      	itttt	ne
 80007c0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007c4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007c8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007cc:	4770      	bxne	lr
 80007ce:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007d2:	bf08      	it	eq
 80007d4:	4770      	bxeq	lr
 80007d6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007da:	bf04      	itt	eq
 80007dc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007e0:	4770      	bxeq	lr
 80007e2:	b530      	push	{r4, r5, lr}
 80007e4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007ec:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007f0:	e71c      	b.n	800062c <__adddf3+0x138>
 80007f2:	bf00      	nop

080007f4 <__aeabi_ul2d>:
 80007f4:	ea50 0201 	orrs.w	r2, r0, r1
 80007f8:	bf08      	it	eq
 80007fa:	4770      	bxeq	lr
 80007fc:	b530      	push	{r4, r5, lr}
 80007fe:	f04f 0500 	mov.w	r5, #0
 8000802:	e00a      	b.n	800081a <__aeabi_l2d+0x16>

08000804 <__aeabi_l2d>:
 8000804:	ea50 0201 	orrs.w	r2, r0, r1
 8000808:	bf08      	it	eq
 800080a:	4770      	bxeq	lr
 800080c:	b530      	push	{r4, r5, lr}
 800080e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000812:	d502      	bpl.n	800081a <__aeabi_l2d+0x16>
 8000814:	4240      	negs	r0, r0
 8000816:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800081a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800081e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000822:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000826:	f43f aed8 	beq.w	80005da <__adddf3+0xe6>
 800082a:	f04f 0203 	mov.w	r2, #3
 800082e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000832:	bf18      	it	ne
 8000834:	3203      	addne	r2, #3
 8000836:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800083a:	bf18      	it	ne
 800083c:	3203      	addne	r2, #3
 800083e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000842:	f1c2 0320 	rsb	r3, r2, #32
 8000846:	fa00 fc03 	lsl.w	ip, r0, r3
 800084a:	fa20 f002 	lsr.w	r0, r0, r2
 800084e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000852:	ea40 000e 	orr.w	r0, r0, lr
 8000856:	fa21 f102 	lsr.w	r1, r1, r2
 800085a:	4414      	add	r4, r2
 800085c:	e6bd      	b.n	80005da <__adddf3+0xe6>
 800085e:	bf00      	nop

08000860 <__aeabi_dmul>:
 8000860:	b570      	push	{r4, r5, r6, lr}
 8000862:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000866:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800086a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086e:	bf1d      	ittte	ne
 8000870:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000874:	ea94 0f0c 	teqne	r4, ip
 8000878:	ea95 0f0c 	teqne	r5, ip
 800087c:	f000 f8de 	bleq	8000a3c <__aeabi_dmul+0x1dc>
 8000880:	442c      	add	r4, r5
 8000882:	ea81 0603 	eor.w	r6, r1, r3
 8000886:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800088a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800088e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000892:	bf18      	it	ne
 8000894:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000898:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800089c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80008a0:	d038      	beq.n	8000914 <__aeabi_dmul+0xb4>
 80008a2:	fba0 ce02 	umull	ip, lr, r0, r2
 80008a6:	f04f 0500 	mov.w	r5, #0
 80008aa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80008ae:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80008b2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80008b6:	f04f 0600 	mov.w	r6, #0
 80008ba:	fbe1 5603 	umlal	r5, r6, r1, r3
 80008be:	f09c 0f00 	teq	ip, #0
 80008c2:	bf18      	it	ne
 80008c4:	f04e 0e01 	orrne.w	lr, lr, #1
 80008c8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80008cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80008d0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80008d4:	d204      	bcs.n	80008e0 <__aeabi_dmul+0x80>
 80008d6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80008da:	416d      	adcs	r5, r5
 80008dc:	eb46 0606 	adc.w	r6, r6, r6
 80008e0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80008e4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80008e8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80008ec:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80008f0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80008f4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f8:	bf88      	it	hi
 80008fa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fe:	d81e      	bhi.n	800093e <__aeabi_dmul+0xde>
 8000900:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000904:	bf08      	it	eq
 8000906:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800090a:	f150 0000 	adcs.w	r0, r0, #0
 800090e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000912:	bd70      	pop	{r4, r5, r6, pc}
 8000914:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000918:	ea46 0101 	orr.w	r1, r6, r1
 800091c:	ea40 0002 	orr.w	r0, r0, r2
 8000920:	ea81 0103 	eor.w	r1, r1, r3
 8000924:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000928:	bfc2      	ittt	gt
 800092a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000932:	bd70      	popgt	{r4, r5, r6, pc}
 8000934:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000938:	f04f 0e00 	mov.w	lr, #0
 800093c:	3c01      	subs	r4, #1
 800093e:	f300 80ab 	bgt.w	8000a98 <__aeabi_dmul+0x238>
 8000942:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000946:	bfde      	ittt	le
 8000948:	2000      	movle	r0, #0
 800094a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800094e:	bd70      	pople	{r4, r5, r6, pc}
 8000950:	f1c4 0400 	rsb	r4, r4, #0
 8000954:	3c20      	subs	r4, #32
 8000956:	da35      	bge.n	80009c4 <__aeabi_dmul+0x164>
 8000958:	340c      	adds	r4, #12
 800095a:	dc1b      	bgt.n	8000994 <__aeabi_dmul+0x134>
 800095c:	f104 0414 	add.w	r4, r4, #20
 8000960:	f1c4 0520 	rsb	r5, r4, #32
 8000964:	fa00 f305 	lsl.w	r3, r0, r5
 8000968:	fa20 f004 	lsr.w	r0, r0, r4
 800096c:	fa01 f205 	lsl.w	r2, r1, r5
 8000970:	ea40 0002 	orr.w	r0, r0, r2
 8000974:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000978:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800097c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000980:	fa21 f604 	lsr.w	r6, r1, r4
 8000984:	eb42 0106 	adc.w	r1, r2, r6
 8000988:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800098c:	bf08      	it	eq
 800098e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000992:	bd70      	pop	{r4, r5, r6, pc}
 8000994:	f1c4 040c 	rsb	r4, r4, #12
 8000998:	f1c4 0520 	rsb	r5, r4, #32
 800099c:	fa00 f304 	lsl.w	r3, r0, r4
 80009a0:	fa20 f005 	lsr.w	r0, r0, r5
 80009a4:	fa01 f204 	lsl.w	r2, r1, r4
 80009a8:	ea40 0002 	orr.w	r0, r0, r2
 80009ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009b0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80009b4:	f141 0100 	adc.w	r1, r1, #0
 80009b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009bc:	bf08      	it	eq
 80009be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009c2:	bd70      	pop	{r4, r5, r6, pc}
 80009c4:	f1c4 0520 	rsb	r5, r4, #32
 80009c8:	fa00 f205 	lsl.w	r2, r0, r5
 80009cc:	ea4e 0e02 	orr.w	lr, lr, r2
 80009d0:	fa20 f304 	lsr.w	r3, r0, r4
 80009d4:	fa01 f205 	lsl.w	r2, r1, r5
 80009d8:	ea43 0302 	orr.w	r3, r3, r2
 80009dc:	fa21 f004 	lsr.w	r0, r1, r4
 80009e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80009e4:	fa21 f204 	lsr.w	r2, r1, r4
 80009e8:	ea20 0002 	bic.w	r0, r0, r2
 80009ec:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80009f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80009f4:	bf08      	it	eq
 80009f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80009fa:	bd70      	pop	{r4, r5, r6, pc}
 80009fc:	f094 0f00 	teq	r4, #0
 8000a00:	d10f      	bne.n	8000a22 <__aeabi_dmul+0x1c2>
 8000a02:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000a06:	0040      	lsls	r0, r0, #1
 8000a08:	eb41 0101 	adc.w	r1, r1, r1
 8000a0c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000a10:	bf08      	it	eq
 8000a12:	3c01      	subeq	r4, #1
 8000a14:	d0f7      	beq.n	8000a06 <__aeabi_dmul+0x1a6>
 8000a16:	ea41 0106 	orr.w	r1, r1, r6
 8000a1a:	f095 0f00 	teq	r5, #0
 8000a1e:	bf18      	it	ne
 8000a20:	4770      	bxne	lr
 8000a22:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000a26:	0052      	lsls	r2, r2, #1
 8000a28:	eb43 0303 	adc.w	r3, r3, r3
 8000a2c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000a30:	bf08      	it	eq
 8000a32:	3d01      	subeq	r5, #1
 8000a34:	d0f7      	beq.n	8000a26 <__aeabi_dmul+0x1c6>
 8000a36:	ea43 0306 	orr.w	r3, r3, r6
 8000a3a:	4770      	bx	lr
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a44:	bf18      	it	ne
 8000a46:	ea95 0f0c 	teqne	r5, ip
 8000a4a:	d00c      	beq.n	8000a66 <__aeabi_dmul+0x206>
 8000a4c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a56:	d1d1      	bne.n	80009fc <__aeabi_dmul+0x19c>
 8000a58:	ea81 0103 	eor.w	r1, r1, r3
 8000a5c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a60:	f04f 0000 	mov.w	r0, #0
 8000a64:	bd70      	pop	{r4, r5, r6, pc}
 8000a66:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a6a:	bf06      	itte	eq
 8000a6c:	4610      	moveq	r0, r2
 8000a6e:	4619      	moveq	r1, r3
 8000a70:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a74:	d019      	beq.n	8000aaa <__aeabi_dmul+0x24a>
 8000a76:	ea94 0f0c 	teq	r4, ip
 8000a7a:	d102      	bne.n	8000a82 <__aeabi_dmul+0x222>
 8000a7c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000a80:	d113      	bne.n	8000aaa <__aeabi_dmul+0x24a>
 8000a82:	ea95 0f0c 	teq	r5, ip
 8000a86:	d105      	bne.n	8000a94 <__aeabi_dmul+0x234>
 8000a88:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000a8c:	bf1c      	itt	ne
 8000a8e:	4610      	movne	r0, r2
 8000a90:	4619      	movne	r1, r3
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dmul+0x24a>
 8000a94:	ea81 0103 	eor.w	r1, r1, r3
 8000a98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000a9c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aa0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	bd70      	pop	{r4, r5, r6, pc}
 8000aaa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000aae:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000ab2:	bd70      	pop	{r4, r5, r6, pc}

08000ab4 <__aeabi_ddiv>:
 8000ab4:	b570      	push	{r4, r5, r6, lr}
 8000ab6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000aba:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000abe:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000ac2:	bf1d      	ittte	ne
 8000ac4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000ac8:	ea94 0f0c 	teqne	r4, ip
 8000acc:	ea95 0f0c 	teqne	r5, ip
 8000ad0:	f000 f8a7 	bleq	8000c22 <__aeabi_ddiv+0x16e>
 8000ad4:	eba4 0405 	sub.w	r4, r4, r5
 8000ad8:	ea81 0e03 	eor.w	lr, r1, r3
 8000adc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000ae0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000ae4:	f000 8088 	beq.w	8000bf8 <__aeabi_ddiv+0x144>
 8000ae8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000aec:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000af0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000af4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000af8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000afc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000b00:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000b04:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000b08:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000b0c:	429d      	cmp	r5, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4296      	cmpeq	r6, r2
 8000b12:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000b16:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000b1a:	d202      	bcs.n	8000b22 <__aeabi_ddiv+0x6e>
 8000b1c:	085b      	lsrs	r3, r3, #1
 8000b1e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b22:	1ab6      	subs	r6, r6, r2
 8000b24:	eb65 0503 	sbc.w	r5, r5, r3
 8000b28:	085b      	lsrs	r3, r3, #1
 8000b2a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b2e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000b32:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000b36:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b3a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b3e:	bf22      	ittt	cs
 8000b40:	1ab6      	subcs	r6, r6, r2
 8000b42:	4675      	movcs	r5, lr
 8000b44:	ea40 000c 	orrcs.w	r0, r0, ip
 8000b48:	085b      	lsrs	r3, r3, #1
 8000b4a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b4e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b52:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b56:	bf22      	ittt	cs
 8000b58:	1ab6      	subcs	r6, r6, r2
 8000b5a:	4675      	movcs	r5, lr
 8000b5c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000b60:	085b      	lsrs	r3, r3, #1
 8000b62:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b66:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b6a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b6e:	bf22      	ittt	cs
 8000b70:	1ab6      	subcs	r6, r6, r2
 8000b72:	4675      	movcs	r5, lr
 8000b74:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000b78:	085b      	lsrs	r3, r3, #1
 8000b7a:	ea4f 0232 	mov.w	r2, r2, rrx
 8000b7e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000b82:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000b86:	bf22      	ittt	cs
 8000b88:	1ab6      	subcs	r6, r6, r2
 8000b8a:	4675      	movcs	r5, lr
 8000b8c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b90:	ea55 0e06 	orrs.w	lr, r5, r6
 8000b94:	d018      	beq.n	8000bc8 <__aeabi_ddiv+0x114>
 8000b96:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000b9a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000b9e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000ba2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000ba6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000baa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000bae:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000bb2:	d1c0      	bne.n	8000b36 <__aeabi_ddiv+0x82>
 8000bb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bb8:	d10b      	bne.n	8000bd2 <__aeabi_ddiv+0x11e>
 8000bba:	ea41 0100 	orr.w	r1, r1, r0
 8000bbe:	f04f 0000 	mov.w	r0, #0
 8000bc2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000bc6:	e7b6      	b.n	8000b36 <__aeabi_ddiv+0x82>
 8000bc8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000bcc:	bf04      	itt	eq
 8000bce:	4301      	orreq	r1, r0
 8000bd0:	2000      	moveq	r0, #0
 8000bd2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000bd6:	bf88      	it	hi
 8000bd8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000bdc:	f63f aeaf 	bhi.w	800093e <__aeabi_dmul+0xde>
 8000be0:	ebb5 0c03 	subs.w	ip, r5, r3
 8000be4:	bf04      	itt	eq
 8000be6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000bea:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000bee:	f150 0000 	adcs.w	r0, r0, #0
 8000bf2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000bfc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000c00:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000c04:	bfc2      	ittt	gt
 8000c06:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000c0a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000c0e:	bd70      	popgt	{r4, r5, r6, pc}
 8000c10:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c14:	f04f 0e00 	mov.w	lr, #0
 8000c18:	3c01      	subs	r4, #1
 8000c1a:	e690      	b.n	800093e <__aeabi_dmul+0xde>
 8000c1c:	ea45 0e06 	orr.w	lr, r5, r6
 8000c20:	e68d      	b.n	800093e <__aeabi_dmul+0xde>
 8000c22:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000c26:	ea94 0f0c 	teq	r4, ip
 8000c2a:	bf08      	it	eq
 8000c2c:	ea95 0f0c 	teqeq	r5, ip
 8000c30:	f43f af3b 	beq.w	8000aaa <__aeabi_dmul+0x24a>
 8000c34:	ea94 0f0c 	teq	r4, ip
 8000c38:	d10a      	bne.n	8000c50 <__aeabi_ddiv+0x19c>
 8000c3a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000c3e:	f47f af34 	bne.w	8000aaa <__aeabi_dmul+0x24a>
 8000c42:	ea95 0f0c 	teq	r5, ip
 8000c46:	f47f af25 	bne.w	8000a94 <__aeabi_dmul+0x234>
 8000c4a:	4610      	mov	r0, r2
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	e72c      	b.n	8000aaa <__aeabi_dmul+0x24a>
 8000c50:	ea95 0f0c 	teq	r5, ip
 8000c54:	d106      	bne.n	8000c64 <__aeabi_ddiv+0x1b0>
 8000c56:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000c5a:	f43f aefd 	beq.w	8000a58 <__aeabi_dmul+0x1f8>
 8000c5e:	4610      	mov	r0, r2
 8000c60:	4619      	mov	r1, r3
 8000c62:	e722      	b.n	8000aaa <__aeabi_dmul+0x24a>
 8000c64:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000c68:	bf18      	it	ne
 8000c6a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000c6e:	f47f aec5 	bne.w	80009fc <__aeabi_dmul+0x19c>
 8000c72:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000c76:	f47f af0d 	bne.w	8000a94 <__aeabi_dmul+0x234>
 8000c7a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000c7e:	f47f aeeb 	bne.w	8000a58 <__aeabi_dmul+0x1f8>
 8000c82:	e712      	b.n	8000aaa <__aeabi_dmul+0x24a>

08000c84 <__gedf2>:
 8000c84:	f04f 3cff 	mov.w	ip, #4294967295
 8000c88:	e006      	b.n	8000c98 <__cmpdf2+0x4>
 8000c8a:	bf00      	nop

08000c8c <__ledf2>:
 8000c8c:	f04f 0c01 	mov.w	ip, #1
 8000c90:	e002      	b.n	8000c98 <__cmpdf2+0x4>
 8000c92:	bf00      	nop

08000c94 <__cmpdf2>:
 8000c94:	f04f 0c01 	mov.w	ip, #1
 8000c98:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000c9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ca0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ca4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ca8:	bf18      	it	ne
 8000caa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000cae:	d01b      	beq.n	8000ce8 <__cmpdf2+0x54>
 8000cb0:	b001      	add	sp, #4
 8000cb2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000cb6:	bf0c      	ite	eq
 8000cb8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000cbc:	ea91 0f03 	teqne	r1, r3
 8000cc0:	bf02      	ittt	eq
 8000cc2:	ea90 0f02 	teqeq	r0, r2
 8000cc6:	2000      	moveq	r0, #0
 8000cc8:	4770      	bxeq	lr
 8000cca:	f110 0f00 	cmn.w	r0, #0
 8000cce:	ea91 0f03 	teq	r1, r3
 8000cd2:	bf58      	it	pl
 8000cd4:	4299      	cmppl	r1, r3
 8000cd6:	bf08      	it	eq
 8000cd8:	4290      	cmpeq	r0, r2
 8000cda:	bf2c      	ite	cs
 8000cdc:	17d8      	asrcs	r0, r3, #31
 8000cde:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ce2:	f040 0001 	orr.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000cec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000cf0:	d102      	bne.n	8000cf8 <__cmpdf2+0x64>
 8000cf2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000cf6:	d107      	bne.n	8000d08 <__cmpdf2+0x74>
 8000cf8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000cfc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000d00:	d1d6      	bne.n	8000cb0 <__cmpdf2+0x1c>
 8000d02:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000d06:	d0d3      	beq.n	8000cb0 <__cmpdf2+0x1c>
 8000d08:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop

08000d10 <__aeabi_cdrcmple>:
 8000d10:	4684      	mov	ip, r0
 8000d12:	4610      	mov	r0, r2
 8000d14:	4662      	mov	r2, ip
 8000d16:	468c      	mov	ip, r1
 8000d18:	4619      	mov	r1, r3
 8000d1a:	4663      	mov	r3, ip
 8000d1c:	e000      	b.n	8000d20 <__aeabi_cdcmpeq>
 8000d1e:	bf00      	nop

08000d20 <__aeabi_cdcmpeq>:
 8000d20:	b501      	push	{r0, lr}
 8000d22:	f7ff ffb7 	bl	8000c94 <__cmpdf2>
 8000d26:	2800      	cmp	r0, #0
 8000d28:	bf48      	it	mi
 8000d2a:	f110 0f00 	cmnmi.w	r0, #0
 8000d2e:	bd01      	pop	{r0, pc}

08000d30 <__aeabi_dcmpeq>:
 8000d30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d34:	f7ff fff4 	bl	8000d20 <__aeabi_cdcmpeq>
 8000d38:	bf0c      	ite	eq
 8000d3a:	2001      	moveq	r0, #1
 8000d3c:	2000      	movne	r0, #0
 8000d3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d42:	bf00      	nop

08000d44 <__aeabi_dcmplt>:
 8000d44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d48:	f7ff ffea 	bl	8000d20 <__aeabi_cdcmpeq>
 8000d4c:	bf34      	ite	cc
 8000d4e:	2001      	movcc	r0, #1
 8000d50:	2000      	movcs	r0, #0
 8000d52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d56:	bf00      	nop

08000d58 <__aeabi_dcmple>:
 8000d58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d5c:	f7ff ffe0 	bl	8000d20 <__aeabi_cdcmpeq>
 8000d60:	bf94      	ite	ls
 8000d62:	2001      	movls	r0, #1
 8000d64:	2000      	movhi	r0, #0
 8000d66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d6a:	bf00      	nop

08000d6c <__aeabi_dcmpge>:
 8000d6c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d70:	f7ff ffce 	bl	8000d10 <__aeabi_cdrcmple>
 8000d74:	bf94      	ite	ls
 8000d76:	2001      	movls	r0, #1
 8000d78:	2000      	movhi	r0, #0
 8000d7a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d7e:	bf00      	nop

08000d80 <__aeabi_dcmpgt>:
 8000d80:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000d84:	f7ff ffc4 	bl	8000d10 <__aeabi_cdrcmple>
 8000d88:	bf34      	ite	cc
 8000d8a:	2001      	movcc	r0, #1
 8000d8c:	2000      	movcs	r0, #0
 8000d8e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000d92:	bf00      	nop

08000d94 <__aeabi_d2iz>:
 8000d94:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000d98:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000d9c:	d215      	bcs.n	8000dca <__aeabi_d2iz+0x36>
 8000d9e:	d511      	bpl.n	8000dc4 <__aeabi_d2iz+0x30>
 8000da0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000da4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000da8:	d912      	bls.n	8000dd0 <__aeabi_d2iz+0x3c>
 8000daa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000db2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000db6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000dba:	fa23 f002 	lsr.w	r0, r3, r2
 8000dbe:	bf18      	it	ne
 8000dc0:	4240      	negne	r0, r0
 8000dc2:	4770      	bx	lr
 8000dc4:	f04f 0000 	mov.w	r0, #0
 8000dc8:	4770      	bx	lr
 8000dca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000dce:	d105      	bne.n	8000ddc <__aeabi_d2iz+0x48>
 8000dd0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000dd4:	bf08      	it	eq
 8000dd6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000dda:	4770      	bx	lr
 8000ddc:	f04f 0000 	mov.w	r0, #0
 8000de0:	4770      	bx	lr
 8000de2:	bf00      	nop

08000de4 <__aeabi_d2uiz>:
 8000de4:	004a      	lsls	r2, r1, #1
 8000de6:	d211      	bcs.n	8000e0c <__aeabi_d2uiz+0x28>
 8000de8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000dec:	d211      	bcs.n	8000e12 <__aeabi_d2uiz+0x2e>
 8000dee:	d50d      	bpl.n	8000e0c <__aeabi_d2uiz+0x28>
 8000df0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000df4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000df8:	d40e      	bmi.n	8000e18 <__aeabi_d2uiz+0x34>
 8000dfa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000dfe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e02:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000e06:	fa23 f002 	lsr.w	r0, r3, r2
 8000e0a:	4770      	bx	lr
 8000e0c:	f04f 0000 	mov.w	r0, #0
 8000e10:	4770      	bx	lr
 8000e12:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000e16:	d102      	bne.n	8000e1e <__aeabi_d2uiz+0x3a>
 8000e18:	f04f 30ff 	mov.w	r0, #4294967295
 8000e1c:	4770      	bx	lr
 8000e1e:	f04f 0000 	mov.w	r0, #0
 8000e22:	4770      	bx	lr

08000e24 <__aeabi_uldivmod>:
 8000e24:	b953      	cbnz	r3, 8000e3c <__aeabi_uldivmod+0x18>
 8000e26:	b94a      	cbnz	r2, 8000e3c <__aeabi_uldivmod+0x18>
 8000e28:	2900      	cmp	r1, #0
 8000e2a:	bf08      	it	eq
 8000e2c:	2800      	cmpeq	r0, #0
 8000e2e:	bf1c      	itt	ne
 8000e30:	f04f 31ff 	movne.w	r1, #4294967295
 8000e34:	f04f 30ff 	movne.w	r0, #4294967295
 8000e38:	f000 b982 	b.w	8001140 <__aeabi_idiv0>
 8000e3c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e40:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e44:	f000 f806 	bl	8000e54 <__udivmoddi4>
 8000e48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e50:	b004      	add	sp, #16
 8000e52:	4770      	bx	lr

08000e54 <__udivmoddi4>:
 8000e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e58:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8000e5a:	4604      	mov	r4, r0
 8000e5c:	460f      	mov	r7, r1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d148      	bne.n	8000ef4 <__udivmoddi4+0xa0>
 8000e62:	428a      	cmp	r2, r1
 8000e64:	4694      	mov	ip, r2
 8000e66:	d961      	bls.n	8000f2c <__udivmoddi4+0xd8>
 8000e68:	fab2 f382 	clz	r3, r2
 8000e6c:	b143      	cbz	r3, 8000e80 <__udivmoddi4+0x2c>
 8000e6e:	f1c3 0120 	rsb	r1, r3, #32
 8000e72:	409f      	lsls	r7, r3
 8000e74:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e78:	409c      	lsls	r4, r3
 8000e7a:	fa20 f101 	lsr.w	r1, r0, r1
 8000e7e:	430f      	orrs	r7, r1
 8000e80:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000e84:	fa1f fe8c 	uxth.w	lr, ip
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	fbb7 f6f1 	udiv	r6, r7, r1
 8000e8e:	fb01 7716 	mls	r7, r1, r6, r7
 8000e92:	fb06 f00e 	mul.w	r0, r6, lr
 8000e96:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000e9a:	4290      	cmp	r0, r2
 8000e9c:	d908      	bls.n	8000eb0 <__udivmoddi4+0x5c>
 8000e9e:	eb1c 0202 	adds.w	r2, ip, r2
 8000ea2:	f106 37ff 	add.w	r7, r6, #4294967295
 8000ea6:	d202      	bcs.n	8000eae <__udivmoddi4+0x5a>
 8000ea8:	4290      	cmp	r0, r2
 8000eaa:	f200 8137 	bhi.w	800111c <__udivmoddi4+0x2c8>
 8000eae:	463e      	mov	r6, r7
 8000eb0:	1a12      	subs	r2, r2, r0
 8000eb2:	b2a4      	uxth	r4, r4
 8000eb4:	fbb2 f0f1 	udiv	r0, r2, r1
 8000eb8:	fb01 2210 	mls	r2, r1, r0, r2
 8000ebc:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ec0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000ec4:	45a6      	cmp	lr, r4
 8000ec6:	d908      	bls.n	8000eda <__udivmoddi4+0x86>
 8000ec8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ecc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ed0:	d202      	bcs.n	8000ed8 <__udivmoddi4+0x84>
 8000ed2:	45a6      	cmp	lr, r4
 8000ed4:	f200 811c 	bhi.w	8001110 <__udivmoddi4+0x2bc>
 8000ed8:	4610      	mov	r0, r2
 8000eda:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ede:	eba4 040e 	sub.w	r4, r4, lr
 8000ee2:	2600      	movs	r6, #0
 8000ee4:	b11d      	cbz	r5, 8000eee <__udivmoddi4+0x9a>
 8000ee6:	40dc      	lsrs	r4, r3
 8000ee8:	2300      	movs	r3, #0
 8000eea:	e9c5 4300 	strd	r4, r3, [r5]
 8000eee:	4631      	mov	r1, r6
 8000ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ef4:	428b      	cmp	r3, r1
 8000ef6:	d909      	bls.n	8000f0c <__udivmoddi4+0xb8>
 8000ef8:	2d00      	cmp	r5, #0
 8000efa:	f000 80fd 	beq.w	80010f8 <__udivmoddi4+0x2a4>
 8000efe:	2600      	movs	r6, #0
 8000f00:	e9c5 0100 	strd	r0, r1, [r5]
 8000f04:	4630      	mov	r0, r6
 8000f06:	4631      	mov	r1, r6
 8000f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000f0c:	fab3 f683 	clz	r6, r3
 8000f10:	2e00      	cmp	r6, #0
 8000f12:	d14b      	bne.n	8000fac <__udivmoddi4+0x158>
 8000f14:	428b      	cmp	r3, r1
 8000f16:	f0c0 80f2 	bcc.w	80010fe <__udivmoddi4+0x2aa>
 8000f1a:	4282      	cmp	r2, r0
 8000f1c:	f240 80ef 	bls.w	80010fe <__udivmoddi4+0x2aa>
 8000f20:	4630      	mov	r0, r6
 8000f22:	2d00      	cmp	r5, #0
 8000f24:	d0e3      	beq.n	8000eee <__udivmoddi4+0x9a>
 8000f26:	e9c5 4700 	strd	r4, r7, [r5]
 8000f2a:	e7e0      	b.n	8000eee <__udivmoddi4+0x9a>
 8000f2c:	b902      	cbnz	r2, 8000f30 <__udivmoddi4+0xdc>
 8000f2e:	deff      	udf	#255	; 0xff
 8000f30:	fab2 f382 	clz	r3, r2
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	f040 809d 	bne.w	8001074 <__udivmoddi4+0x220>
 8000f3a:	1a89      	subs	r1, r1, r2
 8000f3c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000f40:	b297      	uxth	r7, r2
 8000f42:	2601      	movs	r6, #1
 8000f44:	0c20      	lsrs	r0, r4, #16
 8000f46:	fbb1 f2fe 	udiv	r2, r1, lr
 8000f4a:	fb0e 1112 	mls	r1, lr, r2, r1
 8000f4e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000f52:	fb07 f002 	mul.w	r0, r7, r2
 8000f56:	4288      	cmp	r0, r1
 8000f58:	d90f      	bls.n	8000f7a <__udivmoddi4+0x126>
 8000f5a:	eb1c 0101 	adds.w	r1, ip, r1
 8000f5e:	f102 38ff 	add.w	r8, r2, #4294967295
 8000f62:	bf2c      	ite	cs
 8000f64:	f04f 0901 	movcs.w	r9, #1
 8000f68:	f04f 0900 	movcc.w	r9, #0
 8000f6c:	4288      	cmp	r0, r1
 8000f6e:	d903      	bls.n	8000f78 <__udivmoddi4+0x124>
 8000f70:	f1b9 0f00 	cmp.w	r9, #0
 8000f74:	f000 80cf 	beq.w	8001116 <__udivmoddi4+0x2c2>
 8000f78:	4642      	mov	r2, r8
 8000f7a:	1a09      	subs	r1, r1, r0
 8000f7c:	b2a4      	uxth	r4, r4
 8000f7e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f82:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f86:	fb00 f707 	mul.w	r7, r0, r7
 8000f8a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000f8e:	42a7      	cmp	r7, r4
 8000f90:	d908      	bls.n	8000fa4 <__udivmoddi4+0x150>
 8000f92:	eb1c 0404 	adds.w	r4, ip, r4
 8000f96:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f9a:	d202      	bcs.n	8000fa2 <__udivmoddi4+0x14e>
 8000f9c:	42a7      	cmp	r7, r4
 8000f9e:	f200 80b4 	bhi.w	800110a <__udivmoddi4+0x2b6>
 8000fa2:	4608      	mov	r0, r1
 8000fa4:	1be4      	subs	r4, r4, r7
 8000fa6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8000faa:	e79b      	b.n	8000ee4 <__udivmoddi4+0x90>
 8000fac:	f1c6 0720 	rsb	r7, r6, #32
 8000fb0:	40b3      	lsls	r3, r6
 8000fb2:	fa01 f406 	lsl.w	r4, r1, r6
 8000fb6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000fba:	40f9      	lsrs	r1, r7
 8000fbc:	40b2      	lsls	r2, r6
 8000fbe:	ea4c 0c03 	orr.w	ip, ip, r3
 8000fc2:	fa20 f307 	lsr.w	r3, r0, r7
 8000fc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000fca:	431c      	orrs	r4, r3
 8000fcc:	fa1f fe8c 	uxth.w	lr, ip
 8000fd0:	fa00 f306 	lsl.w	r3, r0, r6
 8000fd4:	0c20      	lsrs	r0, r4, #16
 8000fd6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000fda:	fb09 1118 	mls	r1, r9, r8, r1
 8000fde:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000fe2:	fb08 f00e 	mul.w	r0, r8, lr
 8000fe6:	4288      	cmp	r0, r1
 8000fe8:	d90f      	bls.n	800100a <__udivmoddi4+0x1b6>
 8000fea:	eb1c 0101 	adds.w	r1, ip, r1
 8000fee:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ff2:	bf2c      	ite	cs
 8000ff4:	f04f 0b01 	movcs.w	fp, #1
 8000ff8:	f04f 0b00 	movcc.w	fp, #0
 8000ffc:	4288      	cmp	r0, r1
 8000ffe:	d903      	bls.n	8001008 <__udivmoddi4+0x1b4>
 8001000:	f1bb 0f00 	cmp.w	fp, #0
 8001004:	f000 808d 	beq.w	8001122 <__udivmoddi4+0x2ce>
 8001008:	46d0      	mov	r8, sl
 800100a:	1a09      	subs	r1, r1, r0
 800100c:	b2a4      	uxth	r4, r4
 800100e:	fbb1 f0f9 	udiv	r0, r1, r9
 8001012:	fb09 1110 	mls	r1, r9, r0, r1
 8001016:	fb00 fe0e 	mul.w	lr, r0, lr
 800101a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 800101e:	458e      	cmp	lr, r1
 8001020:	d907      	bls.n	8001032 <__udivmoddi4+0x1de>
 8001022:	eb1c 0101 	adds.w	r1, ip, r1
 8001026:	f100 34ff 	add.w	r4, r0, #4294967295
 800102a:	d201      	bcs.n	8001030 <__udivmoddi4+0x1dc>
 800102c:	458e      	cmp	lr, r1
 800102e:	d87f      	bhi.n	8001130 <__udivmoddi4+0x2dc>
 8001030:	4620      	mov	r0, r4
 8001032:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8001036:	eba1 010e 	sub.w	r1, r1, lr
 800103a:	fba0 9802 	umull	r9, r8, r0, r2
 800103e:	4541      	cmp	r1, r8
 8001040:	464c      	mov	r4, r9
 8001042:	46c6      	mov	lr, r8
 8001044:	d302      	bcc.n	800104c <__udivmoddi4+0x1f8>
 8001046:	d106      	bne.n	8001056 <__udivmoddi4+0x202>
 8001048:	454b      	cmp	r3, r9
 800104a:	d204      	bcs.n	8001056 <__udivmoddi4+0x202>
 800104c:	3801      	subs	r0, #1
 800104e:	ebb9 0402 	subs.w	r4, r9, r2
 8001052:	eb68 0e0c 	sbc.w	lr, r8, ip
 8001056:	2d00      	cmp	r5, #0
 8001058:	d070      	beq.n	800113c <__udivmoddi4+0x2e8>
 800105a:	1b1a      	subs	r2, r3, r4
 800105c:	eb61 010e 	sbc.w	r1, r1, lr
 8001060:	fa22 f306 	lsr.w	r3, r2, r6
 8001064:	fa01 f707 	lsl.w	r7, r1, r7
 8001068:	40f1      	lsrs	r1, r6
 800106a:	2600      	movs	r6, #0
 800106c:	431f      	orrs	r7, r3
 800106e:	e9c5 7100 	strd	r7, r1, [r5]
 8001072:	e73c      	b.n	8000eee <__udivmoddi4+0x9a>
 8001074:	fa02 fc03 	lsl.w	ip, r2, r3
 8001078:	f1c3 0020 	rsb	r0, r3, #32
 800107c:	fa01 f203 	lsl.w	r2, r1, r3
 8001080:	fa21 f600 	lsr.w	r6, r1, r0
 8001084:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001088:	fa24 f100 	lsr.w	r1, r4, r0
 800108c:	fa1f f78c 	uxth.w	r7, ip
 8001090:	409c      	lsls	r4, r3
 8001092:	4311      	orrs	r1, r2
 8001094:	fbb6 f0fe 	udiv	r0, r6, lr
 8001098:	0c0a      	lsrs	r2, r1, #16
 800109a:	fb0e 6610 	mls	r6, lr, r0, r6
 800109e:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80010a2:	fb00 f607 	mul.w	r6, r0, r7
 80010a6:	4296      	cmp	r6, r2
 80010a8:	d90e      	bls.n	80010c8 <__udivmoddi4+0x274>
 80010aa:	eb1c 0202 	adds.w	r2, ip, r2
 80010ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80010b2:	bf2c      	ite	cs
 80010b4:	f04f 0901 	movcs.w	r9, #1
 80010b8:	f04f 0900 	movcc.w	r9, #0
 80010bc:	4296      	cmp	r6, r2
 80010be:	d902      	bls.n	80010c6 <__udivmoddi4+0x272>
 80010c0:	f1b9 0f00 	cmp.w	r9, #0
 80010c4:	d031      	beq.n	800112a <__udivmoddi4+0x2d6>
 80010c6:	4640      	mov	r0, r8
 80010c8:	1b92      	subs	r2, r2, r6
 80010ca:	b289      	uxth	r1, r1
 80010cc:	fbb2 f6fe 	udiv	r6, r2, lr
 80010d0:	fb0e 2216 	mls	r2, lr, r6, r2
 80010d4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80010d8:	fb06 f207 	mul.w	r2, r6, r7
 80010dc:	428a      	cmp	r2, r1
 80010de:	d907      	bls.n	80010f0 <__udivmoddi4+0x29c>
 80010e0:	eb1c 0101 	adds.w	r1, ip, r1
 80010e4:	f106 38ff 	add.w	r8, r6, #4294967295
 80010e8:	d201      	bcs.n	80010ee <__udivmoddi4+0x29a>
 80010ea:	428a      	cmp	r2, r1
 80010ec:	d823      	bhi.n	8001136 <__udivmoddi4+0x2e2>
 80010ee:	4646      	mov	r6, r8
 80010f0:	1a89      	subs	r1, r1, r2
 80010f2:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80010f6:	e725      	b.n	8000f44 <__udivmoddi4+0xf0>
 80010f8:	462e      	mov	r6, r5
 80010fa:	4628      	mov	r0, r5
 80010fc:	e6f7      	b.n	8000eee <__udivmoddi4+0x9a>
 80010fe:	1a84      	subs	r4, r0, r2
 8001100:	eb61 0303 	sbc.w	r3, r1, r3
 8001104:	2001      	movs	r0, #1
 8001106:	461f      	mov	r7, r3
 8001108:	e70b      	b.n	8000f22 <__udivmoddi4+0xce>
 800110a:	4464      	add	r4, ip
 800110c:	3802      	subs	r0, #2
 800110e:	e749      	b.n	8000fa4 <__udivmoddi4+0x150>
 8001110:	4464      	add	r4, ip
 8001112:	3802      	subs	r0, #2
 8001114:	e6e1      	b.n	8000eda <__udivmoddi4+0x86>
 8001116:	3a02      	subs	r2, #2
 8001118:	4461      	add	r1, ip
 800111a:	e72e      	b.n	8000f7a <__udivmoddi4+0x126>
 800111c:	3e02      	subs	r6, #2
 800111e:	4462      	add	r2, ip
 8001120:	e6c6      	b.n	8000eb0 <__udivmoddi4+0x5c>
 8001122:	f1a8 0802 	sub.w	r8, r8, #2
 8001126:	4461      	add	r1, ip
 8001128:	e76f      	b.n	800100a <__udivmoddi4+0x1b6>
 800112a:	3802      	subs	r0, #2
 800112c:	4462      	add	r2, ip
 800112e:	e7cb      	b.n	80010c8 <__udivmoddi4+0x274>
 8001130:	3802      	subs	r0, #2
 8001132:	4461      	add	r1, ip
 8001134:	e77d      	b.n	8001032 <__udivmoddi4+0x1de>
 8001136:	3e02      	subs	r6, #2
 8001138:	4461      	add	r1, ip
 800113a:	e7d9      	b.n	80010f0 <__udivmoddi4+0x29c>
 800113c:	462e      	mov	r6, r5
 800113e:	e6d6      	b.n	8000eee <__udivmoddi4+0x9a>

08001140 <__aeabi_idiv0>:
 8001140:	4770      	bx	lr
 8001142:	bf00      	nop

08001144 <tx_application_define>:
  * @brief  Define the initial system.
  * @param  first_unused_memory : Pointer to the first unused memory
  * @retval None
  */
VOID tx_application_define(VOID *first_unused_memory)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b086      	sub	sp, #24
 8001148:	af02      	add	r7, sp, #8
 800114a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  tx_application_define_1*/

  /* USER CODE END  tx_application_define_1 */
#if (USE_STATIC_ALLOCATION == 1)
  UINT status = TX_SUCCESS;
 800114c:	2300      	movs	r3, #0
 800114e:	60fb      	str	r3, [r7, #12]
  VOID *memory_ptr;

  if (tx_byte_pool_create(&tx_app_byte_pool, "Tx App memory pool", tx_byte_pool_buffer, TX_APP_MEM_POOL_SIZE) != TX_SUCCESS)
 8001150:	2334      	movs	r3, #52	; 0x34
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8001158:	4a0a      	ldr	r2, [pc, #40]	; (8001184 <tx_application_define+0x40>)
 800115a:	490b      	ldr	r1, [pc, #44]	; (8001188 <tx_application_define+0x44>)
 800115c:	480b      	ldr	r0, [pc, #44]	; (800118c <tx_application_define+0x48>)
 800115e:	f00c fd07 	bl	800db70 <_txe_byte_pool_create>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d109      	bne.n	800117c <tx_application_define+0x38>
  {
    /* USER CODE BEGIN TX_Byte_Pool_Success */

    /* USER CODE END TX_Byte_Pool_Success */

    memory_ptr = (VOID *)&tx_app_byte_pool;
 8001168:	4b08      	ldr	r3, [pc, #32]	; (800118c <tx_application_define+0x48>)
 800116a:	60bb      	str	r3, [r7, #8]
    status = App_ThreadX_Init(memory_ptr);
 800116c:	68b8      	ldr	r0, [r7, #8]
 800116e:	f001 fe95 	bl	8002e9c <App_ThreadX_Init>
 8001172:	60f8      	str	r0, [r7, #12]
    if (status != TX_SUCCESS)
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d000      	beq.n	800117c <tx_application_define+0x38>
    {
      /* USER CODE BEGIN  App_ThreadX_Init_Error */
      while(1)
 800117a:	e7fe      	b.n	800117a <tx_application_define+0x36>
  /* USER CODE BEGIN DYNAMIC_MEM_ALLOC */
  (void)first_unused_memory;
  /* USER CODE END DYNAMIC_MEM_ALLOC */
#endif

}
 800117c:	bf00      	nop
 800117e:	3710      	adds	r7, #16
 8001180:	46bd      	mov	sp, r7
 8001182:	bd80      	pop	{r7, pc}
 8001184:	20000090 	.word	0x20000090
 8001188:	08010a30 	.word	0x08010a30
 800118c:	20005090 	.word	0x20005090

08001190 <hex2int>:
#include <string.h>
#include <time.h>

#define boolstr(s) ((s) ? "true" : "false")

static int hex2int(char c) {
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') return c - '0';
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	2b2f      	cmp	r3, #47	; 0x2f
 800119e:	d905      	bls.n	80011ac <hex2int+0x1c>
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	2b39      	cmp	r3, #57	; 0x39
 80011a4:	d802      	bhi.n	80011ac <hex2int+0x1c>
 80011a6:	79fb      	ldrb	r3, [r7, #7]
 80011a8:	3b30      	subs	r3, #48	; 0x30
 80011aa:	e013      	b.n	80011d4 <hex2int+0x44>
    if (c >= 'A' && c <= 'F') return c - 'A' + 10;
 80011ac:	79fb      	ldrb	r3, [r7, #7]
 80011ae:	2b40      	cmp	r3, #64	; 0x40
 80011b0:	d905      	bls.n	80011be <hex2int+0x2e>
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	2b46      	cmp	r3, #70	; 0x46
 80011b6:	d802      	bhi.n	80011be <hex2int+0x2e>
 80011b8:	79fb      	ldrb	r3, [r7, #7]
 80011ba:	3b37      	subs	r3, #55	; 0x37
 80011bc:	e00a      	b.n	80011d4 <hex2int+0x44>
    if (c >= 'a' && c <= 'f') return c - 'a' + 10;
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	2b60      	cmp	r3, #96	; 0x60
 80011c2:	d905      	bls.n	80011d0 <hex2int+0x40>
 80011c4:	79fb      	ldrb	r3, [r7, #7]
 80011c6:	2b66      	cmp	r3, #102	; 0x66
 80011c8:	d802      	bhi.n	80011d0 <hex2int+0x40>
 80011ca:	79fb      	ldrb	r3, [r7, #7]
 80011cc:	3b57      	subs	r3, #87	; 0x57
 80011ce:	e001      	b.n	80011d4 <hex2int+0x44>
    return -1;
 80011d0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80011d4:	4618      	mov	r0, r3
 80011d6:	370c      	adds	r7, #12
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr

080011e0 <minmea_check>:
    while (*sentence && *sentence != '*') checksum ^= *sentence++;

    return checksum;
}

bool minmea_check(const char *sentence, bool strict) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b086      	sub	sp, #24
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
 80011e8:	460b      	mov	r3, r1
 80011ea:	70fb      	strb	r3, [r7, #3]
    uint8_t checksum = 0x00;
 80011ec:	2300      	movs	r3, #0
 80011ee:	75fb      	strb	r3, [r7, #23]

    // Sequence length is limited.
    if (strlen(sentence) > MINMEA_MAX_SENTENCE_LENGTH + 3) return false;
 80011f0:	6878      	ldr	r0, [r7, #4]
 80011f2:	f7ff f971 	bl	80004d8 <strlen>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b53      	cmp	r3, #83	; 0x53
 80011fa:	d901      	bls.n	8001200 <minmea_check+0x20>
 80011fc:	2300      	movs	r3, #0
 80011fe:	e065      	b.n	80012cc <minmea_check+0xec>

    // A valid sentence starts with "$".
    if (*sentence++ != '$') return false;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	1c5a      	adds	r2, r3, #1
 8001204:	607a      	str	r2, [r7, #4]
 8001206:	781b      	ldrb	r3, [r3, #0]
 8001208:	2b24      	cmp	r3, #36	; 0x24
 800120a:	d008      	beq.n	800121e <minmea_check+0x3e>
 800120c:	2300      	movs	r3, #0
 800120e:	e05d      	b.n	80012cc <minmea_check+0xec>

    // The optional checksum is an XOR of all bytes between "$" and "*".
    while (*sentence && *sentence != '*' && isprint((unsigned char)*sentence))
        checksum ^= *sentence++;
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	1c5a      	adds	r2, r3, #1
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	781a      	ldrb	r2, [r3, #0]
 8001218:	7dfb      	ldrb	r3, [r7, #23]
 800121a:	4053      	eors	r3, r2
 800121c:	75fb      	strb	r3, [r7, #23]
    while (*sentence && *sentence != '*' && isprint((unsigned char)*sentence))
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	781b      	ldrb	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d00d      	beq.n	8001242 <minmea_check+0x62>
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	2b2a      	cmp	r3, #42	; 0x2a
 800122c:	d009      	beq.n	8001242 <minmea_check+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	3301      	adds	r3, #1
 8001234:	4a27      	ldr	r2, [pc, #156]	; (80012d4 <minmea_check+0xf4>)
 8001236:	4413      	add	r3, r2
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0397 	and.w	r3, r3, #151	; 0x97
 800123e:	2b00      	cmp	r3, #0
 8001240:	d1e6      	bne.n	8001210 <minmea_check+0x30>

    // If checksum is present...
    if (*sentence == '*') {
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	2b2a      	cmp	r3, #42	; 0x2a
 8001248:	d129      	bne.n	800129e <minmea_check+0xbe>
        // Extract checksum.
        sentence++;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3301      	adds	r3, #1
 800124e:	607b      	str	r3, [r7, #4]
        int upper = hex2int(*sentence++);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff99 	bl	8001190 <hex2int>
 800125e:	6138      	str	r0, [r7, #16]
        if (upper == -1) return false;
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001266:	d101      	bne.n	800126c <minmea_check+0x8c>
 8001268:	2300      	movs	r3, #0
 800126a:	e02f      	b.n	80012cc <minmea_check+0xec>
        int lower = hex2int(*sentence++);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	1c5a      	adds	r2, r3, #1
 8001270:	607a      	str	r2, [r7, #4]
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	4618      	mov	r0, r3
 8001276:	f7ff ff8b 	bl	8001190 <hex2int>
 800127a:	60f8      	str	r0, [r7, #12]
        if (lower == -1) return false;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001282:	d101      	bne.n	8001288 <minmea_check+0xa8>
 8001284:	2300      	movs	r3, #0
 8001286:	e021      	b.n	80012cc <minmea_check+0xec>
        int expected = upper << 4 | lower;
 8001288:	693b      	ldr	r3, [r7, #16]
 800128a:	011b      	lsls	r3, r3, #4
 800128c:	68fa      	ldr	r2, [r7, #12]
 800128e:	4313      	orrs	r3, r2
 8001290:	60bb      	str	r3, [r7, #8]

        // Check for checksum mismatch.
        if (checksum != expected) return false;
 8001292:	7dfb      	ldrb	r3, [r7, #23]
 8001294:	68ba      	ldr	r2, [r7, #8]
 8001296:	429a      	cmp	r2, r3
 8001298:	d009      	beq.n	80012ae <minmea_check+0xce>
 800129a:	2300      	movs	r3, #0
 800129c:	e016      	b.n	80012cc <minmea_check+0xec>
    } else if (strict) {
 800129e:	78fb      	ldrb	r3, [r7, #3]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d004      	beq.n	80012ae <minmea_check+0xce>
        // Discard non-checksummed frames in strict mode.
        return false;
 80012a4:	2300      	movs	r3, #0
 80012a6:	e011      	b.n	80012cc <minmea_check+0xec>
    }

    // The only stuff allowed at this point is a newline.
    while (*sentence == '\r' || *sentence == '\n') {
        sentence++;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	3301      	adds	r3, #1
 80012ac:	607b      	str	r3, [r7, #4]
    while (*sentence == '\r' || *sentence == '\n') {
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	2b0d      	cmp	r3, #13
 80012b4:	d0f8      	beq.n	80012a8 <minmea_check+0xc8>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	2b0a      	cmp	r3, #10
 80012bc:	d0f4      	beq.n	80012a8 <minmea_check+0xc8>
    }
    if (*sentence) {
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	781b      	ldrb	r3, [r3, #0]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d001      	beq.n	80012ca <minmea_check+0xea>
        return false;
 80012c6:	2300      	movs	r3, #0
 80012c8:	e000      	b.n	80012cc <minmea_check+0xec>
    }

    return true;
 80012ca:	2301      	movs	r3, #1
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3718      	adds	r7, #24
 80012d0:	46bd      	mov	sp, r7
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	08010d50 	.word	0x08010d50

080012d8 <minmea_isfield>:

static inline bool minmea_isfield(char c) {
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	4603      	mov	r3, r0
 80012e0:	71fb      	strb	r3, [r7, #7]
    return isprint((unsigned char)c) && c != ',' && c != '*';
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	3301      	adds	r3, #1
 80012e6:	4a0c      	ldr	r2, [pc, #48]	; (8001318 <minmea_isfield+0x40>)
 80012e8:	4413      	add	r3, r2
 80012ea:	781b      	ldrb	r3, [r3, #0]
 80012ec:	f003 0397 	and.w	r3, r3, #151	; 0x97
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d007      	beq.n	8001304 <minmea_isfield+0x2c>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b2c      	cmp	r3, #44	; 0x2c
 80012f8:	d004      	beq.n	8001304 <minmea_isfield+0x2c>
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	2b2a      	cmp	r3, #42	; 0x2a
 80012fe:	d001      	beq.n	8001304 <minmea_isfield+0x2c>
 8001300:	2301      	movs	r3, #1
 8001302:	e000      	b.n	8001306 <minmea_isfield+0x2e>
 8001304:	2300      	movs	r3, #0
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	b2db      	uxtb	r3, r3
}
 800130c:	4618      	mov	r0, r3
 800130e:	370c      	adds	r7, #12
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	08010d50 	.word	0x08010d50

0800131c <minmea_scan>:

bool minmea_scan(const char *sentence, const char *format, ...) {
 800131c:	b40e      	push	{r1, r2, r3}
 800131e:	b580      	push	{r7, lr}
 8001320:	b0a7      	sub	sp, #156	; 0x9c
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
    bool result = false;
 8001326:	2300      	movs	r3, #0
 8001328:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
    bool optional = false;
 800132c:	2300      	movs	r3, #0
 800132e:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96

    if (sentence == NULL) return false;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <minmea_scan+0x20>
 8001338:	2300      	movs	r3, #0
 800133a:	e3b8      	b.n	8001aae <minmea_scan+0x792>

    va_list ap;
    va_start(ap, format);
 800133c:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8001340:	62fb      	str	r3, [r7, #44]	; 0x2c

    const char *field = sentence;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
        } else {                                      \
            field = NULL;                             \
        }                                             \
    } while (0)

    while (*format) {
 8001348:	e38c      	b.n	8001a64 <minmea_scan+0x748>
        char type = *format++;
 800134a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800134e:	1c5a      	adds	r2, r3, #1
 8001350:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

        if (type == ';') {
 800135a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800135e:	2b3b      	cmp	r3, #59	; 0x3b
 8001360:	d103      	bne.n	800136a <minmea_scan+0x4e>
            // All further fields are optional.
            optional = true;
 8001362:	2301      	movs	r3, #1
 8001364:	f887 3096 	strb.w	r3, [r7, #150]	; 0x96
            continue;
 8001368:	e37c      	b.n	8001a64 <minmea_scan+0x748>
        }

        if (!field && !optional) {
 800136a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800136e:	2b00      	cmp	r3, #0
 8001370:	d107      	bne.n	8001382 <minmea_scan+0x66>
 8001372:	f897 3096 	ldrb.w	r3, [r7, #150]	; 0x96
 8001376:	f083 0301 	eor.w	r3, r3, #1
 800137a:	b2db      	uxtb	r3, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	f040 837b 	bne.w	8001a78 <minmea_scan+0x75c>
            // Field requested but we ran out if input. Bail out.
            goto parse_error;
        }

        switch (type) {
 8001382:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001386:	3b44      	subs	r3, #68	; 0x44
 8001388:	2b30      	cmp	r3, #48	; 0x30
 800138a:	f200 8377 	bhi.w	8001a7c <minmea_scan+0x760>
 800138e:	a201      	add	r2, pc, #4	; (adr r2, 8001394 <minmea_scan+0x78>)
 8001390:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001394:	080017d3 	.word	0x080017d3
 8001398:	08001a7d 	.word	0x08001a7d
 800139c:	08001a7d 	.word	0x08001a7d
 80013a0:	08001a7d 	.word	0x08001a7d
 80013a4:	08001a7d 	.word	0x08001a7d
 80013a8:	08001a7d 	.word	0x08001a7d
 80013ac:	08001a7d 	.word	0x08001a7d
 80013b0:	08001a7d 	.word	0x08001a7d
 80013b4:	08001a7d 	.word	0x08001a7d
 80013b8:	08001a7d 	.word	0x08001a7d
 80013bc:	08001a7d 	.word	0x08001a7d
 80013c0:	08001a7d 	.word	0x08001a7d
 80013c4:	08001a7d 	.word	0x08001a7d
 80013c8:	08001a7d 	.word	0x08001a7d
 80013cc:	08001a7d 	.word	0x08001a7d
 80013d0:	08001a7d 	.word	0x08001a7d
 80013d4:	080018c1 	.word	0x080018c1
 80013d8:	08001a7d 	.word	0x08001a7d
 80013dc:	08001a7d 	.word	0x08001a7d
 80013e0:	08001a7d 	.word	0x08001a7d
 80013e4:	08001a7d 	.word	0x08001a7d
 80013e8:	08001a7d 	.word	0x08001a7d
 80013ec:	08001a7d 	.word	0x08001a7d
 80013f0:	08001a7d 	.word	0x08001a7d
 80013f4:	08001a7d 	.word	0x08001a7d
 80013f8:	08001a7d 	.word	0x08001a7d
 80013fc:	08001a7d 	.word	0x08001a7d
 8001400:	08001a2f 	.word	0x08001a2f
 8001404:	08001a7d 	.word	0x08001a7d
 8001408:	08001a7d 	.word	0x08001a7d
 800140c:	08001a7d 	.word	0x08001a7d
 8001410:	08001459 	.word	0x08001459
 8001414:	08001493 	.word	0x08001493
 8001418:	08001a7d 	.word	0x08001a7d
 800141c:	08001539 	.word	0x08001539
 8001420:	08001a7d 	.word	0x08001a7d
 8001424:	08001a7d 	.word	0x08001a7d
 8001428:	080016e5 	.word	0x080016e5
 800142c:	08001a7d 	.word	0x08001a7d
 8001430:	08001a7d 	.word	0x08001a7d
 8001434:	08001a7d 	.word	0x08001a7d
 8001438:	08001a7d 	.word	0x08001a7d
 800143c:	08001a7d 	.word	0x08001a7d
 8001440:	08001a7d 	.word	0x08001a7d
 8001444:	08001a7d 	.word	0x08001a7d
 8001448:	08001a7d 	.word	0x08001a7d
 800144c:	08001a7d 	.word	0x08001a7d
 8001450:	08001723 	.word	0x08001723
 8001454:	08001765 	.word	0x08001765
            case 'c': {  // Single character field (char).
                char value = '\0';
 8001458:	2300      	movs	r3, #0
 800145a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                if (field && minmea_isfield(*field)) value = *field;
 800145e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001462:	2b00      	cmp	r3, #0
 8001464:	d00d      	beq.n	8001482 <minmea_scan+0x166>
 8001466:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7ff ff33 	bl	80012d8 <minmea_isfield>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d004      	beq.n	8001482 <minmea_scan+0x166>
 8001478:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f

                *va_arg(ap, char *) = value;
 8001482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001484:	1d1a      	adds	r2, r3, #4
 8001486:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f897 208f 	ldrb.w	r2, [r7, #143]	; 0x8f
 800148e:	701a      	strb	r2, [r3, #0]
            } break;
 8001490:	e2ce      	b.n	8001a30 <minmea_scan+0x714>

            case 'd': {  // Single character direction field (int).
                int value = 0;
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

                if (field && minmea_isfield(*field)) {
 8001498:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800149c:	2b00      	cmp	r3, #0
 800149e:	d042      	beq.n	8001526 <minmea_scan+0x20a>
 80014a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff ff16 	bl	80012d8 <minmea_isfield>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d039      	beq.n	8001526 <minmea_scan+0x20a>
                    switch (*field) {
 80014b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80014b6:	781b      	ldrb	r3, [r3, #0]
 80014b8:	3b45      	subs	r3, #69	; 0x45
 80014ba:	2b12      	cmp	r3, #18
 80014bc:	f200 82e0 	bhi.w	8001a80 <minmea_scan+0x764>
 80014c0:	a201      	add	r2, pc, #4	; (adr r2, 80014c8 <minmea_scan+0x1ac>)
 80014c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014c6:	bf00      	nop
 80014c8:	08001515 	.word	0x08001515
 80014cc:	08001a81 	.word	0x08001a81
 80014d0:	08001a81 	.word	0x08001a81
 80014d4:	08001a81 	.word	0x08001a81
 80014d8:	08001a81 	.word	0x08001a81
 80014dc:	08001a81 	.word	0x08001a81
 80014e0:	08001a81 	.word	0x08001a81
 80014e4:	08001a81 	.word	0x08001a81
 80014e8:	08001a81 	.word	0x08001a81
 80014ec:	08001515 	.word	0x08001515
 80014f0:	08001a81 	.word	0x08001a81
 80014f4:	08001a81 	.word	0x08001a81
 80014f8:	08001a81 	.word	0x08001a81
 80014fc:	08001a81 	.word	0x08001a81
 8001500:	0800151d 	.word	0x0800151d
 8001504:	08001a81 	.word	0x08001a81
 8001508:	08001a81 	.word	0x08001a81
 800150c:	08001a81 	.word	0x08001a81
 8001510:	0800151d 	.word	0x0800151d
                        case 'N':
                        case 'E':
                            value = 1;
 8001514:	2301      	movs	r3, #1
 8001516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 800151a:	e005      	b.n	8001528 <minmea_scan+0x20c>
                        case 'S':
                        case 'W':
                            value = -1;
 800151c:	f04f 33ff 	mov.w	r3, #4294967295
 8001520:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                            break;
 8001524:	e000      	b.n	8001528 <minmea_scan+0x20c>
                        default:
                            goto parse_error;
                    }
                }
 8001526:	bf00      	nop

                *va_arg(ap, int *) = value;
 8001528:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800152a:	1d1a      	adds	r2, r3, #4
 800152c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8001534:	601a      	str	r2, [r3, #0]
            } break;
 8001536:	e27b      	b.n	8001a30 <minmea_scan+0x714>

            case 'f': {  // Fractional value with scale (struct minmea_float).
                int sign = 0;
 8001538:	2300      	movs	r3, #0
 800153a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
                int_least32_t value = -1;
 800153e:	f04f 33ff 	mov.w	r3, #4294967295
 8001542:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                int_least32_t scale = 0;
 8001546:	2300      	movs	r3, #0
 8001548:	67fb      	str	r3, [r7, #124]	; 0x7c

                if (field) {
 800154a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 8095 	beq.w	800167e <minmea_scan+0x362>
                    while (minmea_isfield(*field)) {
 8001554:	e089      	b.n	800166a <minmea_scan+0x34e>
                        if (*field == '+' && !sign && value == -1) {
 8001556:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b2b      	cmp	r3, #43	; 0x2b
 800155e:	d10c      	bne.n	800157a <minmea_scan+0x25e>
 8001560:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001564:	2b00      	cmp	r3, #0
 8001566:	d108      	bne.n	800157a <minmea_scan+0x25e>
 8001568:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800156c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001570:	d103      	bne.n	800157a <minmea_scan+0x25e>
                            sign = 1;
 8001572:	2301      	movs	r3, #1
 8001574:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8001578:	e072      	b.n	8001660 <minmea_scan+0x344>
                        } else if (*field == '-' && !sign && value == -1) {
 800157a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800157e:	781b      	ldrb	r3, [r3, #0]
 8001580:	2b2d      	cmp	r3, #45	; 0x2d
 8001582:	d10d      	bne.n	80015a0 <minmea_scan+0x284>
 8001584:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001588:	2b00      	cmp	r3, #0
 800158a:	d109      	bne.n	80015a0 <minmea_scan+0x284>
 800158c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001594:	d104      	bne.n	80015a0 <minmea_scan+0x284>
                            sign = -1;
 8001596:	f04f 33ff 	mov.w	r3, #4294967295
 800159a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800159e:	e05f      	b.n	8001660 <minmea_scan+0x344>
                        } else if (isdigit((unsigned char)*field)) {
 80015a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	3301      	adds	r3, #1
 80015a8:	4a99      	ldr	r2, [pc, #612]	; (8001810 <minmea_scan+0x4f4>)
 80015aa:	4413      	add	r3, r2
 80015ac:	781b      	ldrb	r3, [r3, #0]
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d034      	beq.n	8001620 <minmea_scan+0x304>
                            int digit = *field - '0';
 80015b6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	3b30      	subs	r3, #48	; 0x30
 80015be:	63bb      	str	r3, [r7, #56]	; 0x38
                            if (value == -1) value = 0;
 80015c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80015c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015c8:	d102      	bne.n	80015d0 <minmea_scan+0x2b4>
 80015ca:	2300      	movs	r3, #0
 80015cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (value > (INT_LEAST32_MAX - digit) / 10) {
 80015d0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80015d2:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 80015d6:	1a9b      	subs	r3, r3, r2
 80015d8:	4a8e      	ldr	r2, [pc, #568]	; (8001814 <minmea_scan+0x4f8>)
 80015da:	fb82 1203 	smull	r1, r2, r2, r3
 80015de:	1092      	asrs	r2, r2, #2
 80015e0:	17db      	asrs	r3, r3, #31
 80015e2:	1ad3      	subs	r3, r2, r3
 80015e4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015e8:	429a      	cmp	r2, r3
 80015ea:	dd04      	ble.n	80015f6 <minmea_scan+0x2da>
                                /* we ran out of bits, what do we do? */
                                if (scale) {
 80015ec:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8248 	beq.w	8001a84 <minmea_scan+0x768>
                                    /* truncate extra precision */
                                    break;
 80015f4:	e043      	b.n	800167e <minmea_scan+0x362>
                                } else {
                                    /* integer overflow. bail out. */
                                    goto parse_error;
                                }
                            }
                            value = (10 * value) + digit;
 80015f6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80015fa:	4613      	mov	r3, r2
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	4413      	add	r3, r2
 8001600:	005b      	lsls	r3, r3, #1
 8001602:	461a      	mov	r2, r3
 8001604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001606:	4413      	add	r3, r2
 8001608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                            if (scale) scale *= 10;
 800160c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800160e:	2b00      	cmp	r3, #0
 8001610:	d026      	beq.n	8001660 <minmea_scan+0x344>
 8001612:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8001614:	4613      	mov	r3, r2
 8001616:	009b      	lsls	r3, r3, #2
 8001618:	4413      	add	r3, r2
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800161e:	e01f      	b.n	8001660 <minmea_scan+0x344>
                        } else if (*field == '.' && scale == 0) {
 8001620:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001624:	781b      	ldrb	r3, [r3, #0]
 8001626:	2b2e      	cmp	r3, #46	; 0x2e
 8001628:	d105      	bne.n	8001636 <minmea_scan+0x31a>
 800162a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d102      	bne.n	8001636 <minmea_scan+0x31a>
                            scale = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001634:	e014      	b.n	8001660 <minmea_scan+0x344>
                        } else if (*field == ' ') {
 8001636:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	2b20      	cmp	r3, #32
 800163e:	f040 8223 	bne.w	8001a88 <minmea_scan+0x76c>
                            /* Allow spaces at the start of the field. Not NMEA
                             * conformant, but some modules do this. */
                            if (sign != 0 || value != -1 || scale != 0)
 8001642:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001646:	2b00      	cmp	r3, #0
 8001648:	f040 8220 	bne.w	8001a8c <minmea_scan+0x770>
 800164c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001654:	f040 821a 	bne.w	8001a8c <minmea_scan+0x770>
 8001658:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800165a:	2b00      	cmp	r3, #0
 800165c:	f040 8216 	bne.w	8001a8c <minmea_scan+0x770>
                                goto parse_error;
                        } else {
                            goto parse_error;
                        }
                        field++;
 8001660:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001664:	3301      	adds	r3, #1
 8001666:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
                    while (minmea_isfield(*field)) {
 800166a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	4618      	mov	r0, r3
 8001672:	f7ff fe31 	bl	80012d8 <minmea_isfield>
 8001676:	4603      	mov	r3, r0
 8001678:	2b00      	cmp	r3, #0
 800167a:	f47f af6c 	bne.w	8001556 <minmea_scan+0x23a>
                    }
                }

                if ((sign || scale) && value == -1) goto parse_error;
 800167e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001682:	2b00      	cmp	r3, #0
 8001684:	d102      	bne.n	800168c <minmea_scan+0x370>
 8001686:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8001688:	2b00      	cmp	r3, #0
 800168a:	d005      	beq.n	8001698 <minmea_scan+0x37c>
 800168c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001694:	f000 81fc 	beq.w	8001a90 <minmea_scan+0x774>

                if (value == -1) {
 8001698:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800169c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016a0:	d105      	bne.n	80016ae <minmea_scan+0x392>
                    /* No digits were scanned. */
                    value = 0;
 80016a2:	2300      	movs	r3, #0
 80016a4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
                    scale = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80016ac:	e004      	b.n	80016b8 <minmea_scan+0x39c>
                } else if (scale == 0) {
 80016ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <minmea_scan+0x39c>
                    /* No decimal point. */
                    scale = 1;
 80016b4:	2301      	movs	r3, #1
 80016b6:	67fb      	str	r3, [r7, #124]	; 0x7c
                }
                if (sign) value *= sign;
 80016b8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d007      	beq.n	80016d0 <minmea_scan+0x3b4>
 80016c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80016c4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80016c8:	fb02 f303 	mul.w	r3, r2, r3
 80016cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

                *va_arg(ap, struct minmea_float *) =
 80016d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80016d2:	1d1a      	adds	r2, r3, #4
 80016d4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80016dc:	601a      	str	r2, [r3, #0]
 80016de:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80016e0:	605a      	str	r2, [r3, #4]
                    (struct minmea_float){value, scale};
            } break;
 80016e2:	e1a5      	b.n	8001a30 <minmea_scan+0x714>

            case 'i': {  // Integer value, default 0 (int).
                int value = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	67bb      	str	r3, [r7, #120]	; 0x78

                if (field) {
 80016e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d011      	beq.n	8001714 <minmea_scan+0x3f8>
                    char *endptr;
                    value = strtol(field, &endptr, 10);
 80016f0:	f107 0320 	add.w	r3, r7, #32
 80016f4:	220a      	movs	r2, #10
 80016f6:	4619      	mov	r1, r3
 80016f8:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 80016fc:	f00c ff7a 	bl	800e5f4 <strtol>
 8001700:	67b8      	str	r0, [r7, #120]	; 0x78
                    if (minmea_isfield(*endptr)) goto parse_error;
 8001702:	6a3b      	ldr	r3, [r7, #32]
 8001704:	781b      	ldrb	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff fde6 	bl	80012d8 <minmea_isfield>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	f040 81c0 	bne.w	8001a94 <minmea_scan+0x778>
                }

                *va_arg(ap, int *) = value;
 8001714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001716:	1d1a      	adds	r2, r3, #4
 8001718:	62fa      	str	r2, [r7, #44]	; 0x2c
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800171e:	601a      	str	r2, [r3, #0]
            } break;
 8001720:	e186      	b.n	8001a30 <minmea_scan+0x714>

            case 's': {  // String value (char *).
                char *buf = va_arg(ap, char *);
 8001722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001724:	1d1a      	adds	r2, r3, #4
 8001726:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	677b      	str	r3, [r7, #116]	; 0x74

                if (field) {
 800172c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001730:	2b00      	cmp	r3, #0
 8001732:	d013      	beq.n	800175c <minmea_scan+0x440>
                    while (minmea_isfield(*field)) *buf++ = *field++;
 8001734:	e009      	b.n	800174a <minmea_scan+0x42e>
 8001736:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800173a:	1c53      	adds	r3, r2, #1
 800173c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001740:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001742:	1c59      	adds	r1, r3, #1
 8001744:	6779      	str	r1, [r7, #116]	; 0x74
 8001746:	7812      	ldrb	r2, [r2, #0]
 8001748:	701a      	strb	r2, [r3, #0]
 800174a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7ff fdc1 	bl	80012d8 <minmea_isfield>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d1ec      	bne.n	8001736 <minmea_scan+0x41a>
                }

                *buf = '\0';
 800175c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800175e:	2200      	movs	r2, #0
 8001760:	701a      	strb	r2, [r3, #0]
            } break;
 8001762:	e165      	b.n	8001a30 <minmea_scan+0x714>

            case 't': {  // NMEA talker+sentence identifier (char *).
                // This field is always mandatory.
                if (!field) goto parse_error;
 8001764:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8195 	beq.w	8001a98 <minmea_scan+0x77c>

                if (field[0] != '$') goto parse_error;
 800176e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	2b24      	cmp	r3, #36	; 0x24
 8001776:	f040 8191 	bne.w	8001a9c <minmea_scan+0x780>
                for (int f = 0; f < 5; f++)
 800177a:	2300      	movs	r3, #0
 800177c:	673b      	str	r3, [r7, #112]	; 0x70
 800177e:	e013      	b.n	80017a8 <minmea_scan+0x48c>
                    if (!minmea_isfield(field[1 + f])) goto parse_error;
 8001780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001782:	3301      	adds	r3, #1
 8001784:	461a      	mov	r2, r3
 8001786:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800178a:	4413      	add	r3, r2
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff fda2 	bl	80012d8 <minmea_isfield>
 8001794:	4603      	mov	r3, r0
 8001796:	f083 0301 	eor.w	r3, r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	2b00      	cmp	r3, #0
 800179e:	f040 817f 	bne.w	8001aa0 <minmea_scan+0x784>
                for (int f = 0; f < 5; f++)
 80017a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017a4:	3301      	adds	r3, #1
 80017a6:	673b      	str	r3, [r7, #112]	; 0x70
 80017a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017aa:	2b04      	cmp	r3, #4
 80017ac:	dde8      	ble.n	8001780 <minmea_scan+0x464>

                char *buf = va_arg(ap, char *);
 80017ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017b0:	1d1a      	adds	r2, r3, #4
 80017b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	63fb      	str	r3, [r7, #60]	; 0x3c
                memcpy(buf, field + 1, 5);
 80017b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017bc:	3301      	adds	r3, #1
 80017be:	2205      	movs	r2, #5
 80017c0:	4619      	mov	r1, r3
 80017c2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80017c4:	f00c fdd8 	bl	800e378 <memcpy>
                buf[5] = '\0';
 80017c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017ca:	3305      	adds	r3, #5
 80017cc:	2200      	movs	r2, #0
 80017ce:	701a      	strb	r2, [r3, #0]
            } break;
 80017d0:	e12e      	b.n	8001a30 <minmea_scan+0x714>

            case 'D': {  // Date (int, int, int), -1 if empty.
                struct minmea_date *date = va_arg(ap, struct minmea_date *);
 80017d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017d4:	1d1a      	adds	r2, r3, #4
 80017d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	633b      	str	r3, [r7, #48]	; 0x30

                int d = -1, m = -1, y = -1;
 80017dc:	f04f 33ff 	mov.w	r3, #4294967295
 80017e0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80017e2:	f04f 33ff 	mov.w	r3, #4294967295
 80017e6:	66bb      	str	r3, [r7, #104]	; 0x68
 80017e8:	f04f 33ff 	mov.w	r3, #4294967295
 80017ec:	667b      	str	r3, [r7, #100]	; 0x64

                if (field && minmea_isfield(*field)) {
 80017ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d05a      	beq.n	80018ac <minmea_scan+0x590>
 80017f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f7ff fd6b 	bl	80012d8 <minmea_isfield>
 8001802:	4603      	mov	r3, r0
 8001804:	2b00      	cmp	r3, #0
 8001806:	d051      	beq.n	80018ac <minmea_scan+0x590>
                    // Always six digits.
                    for (int f = 0; f < 6; f++)
 8001808:	2300      	movs	r3, #0
 800180a:	663b      	str	r3, [r7, #96]	; 0x60
 800180c:	e015      	b.n	800183a <minmea_scan+0x51e>
 800180e:	bf00      	nop
 8001810:	08010d50 	.word	0x08010d50
 8001814:	66666667 	.word	0x66666667
                        if (!isdigit((unsigned char)field[f])) goto parse_error;
 8001818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800181a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800181e:	4413      	add	r3, r2
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	4aa5      	ldr	r2, [pc, #660]	; (8001abc <minmea_scan+0x7a0>)
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f003 0304 	and.w	r3, r3, #4
 800182e:	2b00      	cmp	r3, #0
 8001830:	f000 8138 	beq.w	8001aa4 <minmea_scan+0x788>
                    for (int f = 0; f < 6; f++)
 8001834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001836:	3301      	adds	r3, #1
 8001838:	663b      	str	r3, [r7, #96]	; 0x60
 800183a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800183c:	2b05      	cmp	r3, #5
 800183e:	ddeb      	ble.n	8001818 <minmea_scan+0x4fc>

                    char dArr[] = {field[0], field[1], '\0'};
 8001840:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	773b      	strb	r3, [r7, #28]
 8001848:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800184c:	785b      	ldrb	r3, [r3, #1]
 800184e:	777b      	strb	r3, [r7, #29]
 8001850:	2300      	movs	r3, #0
 8001852:	77bb      	strb	r3, [r7, #30]
                    char mArr[] = {field[2], field[3], '\0'};
 8001854:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001858:	789b      	ldrb	r3, [r3, #2]
 800185a:	763b      	strb	r3, [r7, #24]
 800185c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001860:	78db      	ldrb	r3, [r3, #3]
 8001862:	767b      	strb	r3, [r7, #25]
 8001864:	2300      	movs	r3, #0
 8001866:	76bb      	strb	r3, [r7, #26]
                    char yArr[] = {field[4], field[5], '\0'};
 8001868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800186c:	791b      	ldrb	r3, [r3, #4]
 800186e:	753b      	strb	r3, [r7, #20]
 8001870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001874:	795b      	ldrb	r3, [r3, #5]
 8001876:	757b      	strb	r3, [r7, #21]
 8001878:	2300      	movs	r3, #0
 800187a:	75bb      	strb	r3, [r7, #22]
                    d = strtol(dArr, NULL, 10);
 800187c:	f107 031c 	add.w	r3, r7, #28
 8001880:	220a      	movs	r2, #10
 8001882:	2100      	movs	r1, #0
 8001884:	4618      	mov	r0, r3
 8001886:	f00c feb5 	bl	800e5f4 <strtol>
 800188a:	66f8      	str	r0, [r7, #108]	; 0x6c
                    m = strtol(mArr, NULL, 10);
 800188c:	f107 0318 	add.w	r3, r7, #24
 8001890:	220a      	movs	r2, #10
 8001892:	2100      	movs	r1, #0
 8001894:	4618      	mov	r0, r3
 8001896:	f00c fead 	bl	800e5f4 <strtol>
 800189a:	66b8      	str	r0, [r7, #104]	; 0x68
                    y = strtol(yArr, NULL, 10);
 800189c:	f107 0314 	add.w	r3, r7, #20
 80018a0:	220a      	movs	r2, #10
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f00c fea5 	bl	800e5f4 <strtol>
 80018aa:	6678      	str	r0, [r7, #100]	; 0x64
                }

                date->day = d;
 80018ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80018b0:	601a      	str	r2, [r3, #0]
                date->month = m;
 80018b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80018b6:	605a      	str	r2, [r3, #4]
                date->year = y;
 80018b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ba:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80018bc:	609a      	str	r2, [r3, #8]
            } break;
 80018be:	e0b7      	b.n	8001a30 <minmea_scan+0x714>

            case 'T': {  // Time (int, int, int, int), -1 if empty.
                struct minmea_time *time_ = va_arg(ap, struct minmea_time *);
 80018c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c2:	1d1a      	adds	r2, r3, #4
 80018c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	637b      	str	r3, [r7, #52]	; 0x34

                int h = -1, i = -1, s = -1, u = -1;
 80018ca:	f04f 33ff 	mov.w	r3, #4294967295
 80018ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80018d0:	f04f 33ff 	mov.w	r3, #4294967295
 80018d4:	65bb      	str	r3, [r7, #88]	; 0x58
 80018d6:	f04f 33ff 	mov.w	r3, #4294967295
 80018da:	657b      	str	r3, [r7, #84]	; 0x54
 80018dc:	f04f 33ff 	mov.w	r3, #4294967295
 80018e0:	653b      	str	r3, [r7, #80]	; 0x50

                if (field && minmea_isfield(*field)) {
 80018e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8094 	beq.w	8001a14 <minmea_scan+0x6f8>
 80018ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7ff fcf0 	bl	80012d8 <minmea_isfield>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	f000 808a 	beq.w	8001a14 <minmea_scan+0x6f8>
                    // Minimum required: integer time.
                    for (int f = 0; f < 6; f++)
 8001900:	2300      	movs	r3, #0
 8001902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001904:	e010      	b.n	8001928 <minmea_scan+0x60c>
                        if (!isdigit((unsigned char)field[f])) goto parse_error;
 8001906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001908:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800190c:	4413      	add	r3, r2
 800190e:	781b      	ldrb	r3, [r3, #0]
 8001910:	3301      	adds	r3, #1
 8001912:	4a6a      	ldr	r2, [pc, #424]	; (8001abc <minmea_scan+0x7a0>)
 8001914:	4413      	add	r3, r2
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b00      	cmp	r3, #0
 800191e:	f000 80c3 	beq.w	8001aa8 <minmea_scan+0x78c>
                    for (int f = 0; f < 6; f++)
 8001922:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001924:	3301      	adds	r3, #1
 8001926:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001928:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800192a:	2b05      	cmp	r3, #5
 800192c:	ddeb      	ble.n	8001906 <minmea_scan+0x5ea>

                    char hArr[] = {field[0], field[1], '\0'};
 800192e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001932:	781b      	ldrb	r3, [r3, #0]
 8001934:	743b      	strb	r3, [r7, #16]
 8001936:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800193a:	785b      	ldrb	r3, [r3, #1]
 800193c:	747b      	strb	r3, [r7, #17]
 800193e:	2300      	movs	r3, #0
 8001940:	74bb      	strb	r3, [r7, #18]
                    char iArr[] = {field[2], field[3], '\0'};
 8001942:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001946:	789b      	ldrb	r3, [r3, #2]
 8001948:	733b      	strb	r3, [r7, #12]
 800194a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800194e:	78db      	ldrb	r3, [r3, #3]
 8001950:	737b      	strb	r3, [r7, #13]
 8001952:	2300      	movs	r3, #0
 8001954:	73bb      	strb	r3, [r7, #14]
                    char sArr[] = {field[4], field[5], '\0'};
 8001956:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800195a:	791b      	ldrb	r3, [r3, #4]
 800195c:	723b      	strb	r3, [r7, #8]
 800195e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8001962:	795b      	ldrb	r3, [r3, #5]
 8001964:	727b      	strb	r3, [r7, #9]
 8001966:	2300      	movs	r3, #0
 8001968:	72bb      	strb	r3, [r7, #10]
                    h = strtol(hArr, NULL, 10);
 800196a:	f107 0310 	add.w	r3, r7, #16
 800196e:	220a      	movs	r2, #10
 8001970:	2100      	movs	r1, #0
 8001972:	4618      	mov	r0, r3
 8001974:	f00c fe3e 	bl	800e5f4 <strtol>
 8001978:	65f8      	str	r0, [r7, #92]	; 0x5c
                    i = strtol(iArr, NULL, 10);
 800197a:	f107 030c 	add.w	r3, r7, #12
 800197e:	220a      	movs	r2, #10
 8001980:	2100      	movs	r1, #0
 8001982:	4618      	mov	r0, r3
 8001984:	f00c fe36 	bl	800e5f4 <strtol>
 8001988:	65b8      	str	r0, [r7, #88]	; 0x58
                    s = strtol(sArr, NULL, 10);
 800198a:	f107 0308 	add.w	r3, r7, #8
 800198e:	220a      	movs	r2, #10
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f00c fe2e 	bl	800e5f4 <strtol>
 8001998:	6578      	str	r0, [r7, #84]	; 0x54
                    field += 6;
 800199a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800199e:	3306      	adds	r3, #6
 80019a0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

                    // Extra: fractional time. Saved as microseconds.
                    if (*field++ == '.') {
 80019a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019a8:	1c5a      	adds	r2, r3, #1
 80019aa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b2e      	cmp	r3, #46	; 0x2e
 80019b2:	d12d      	bne.n	8001a10 <minmea_scan+0x6f4>
                        uint32_t value = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	64bb      	str	r3, [r7, #72]	; 0x48
                        uint32_t scale = 1000000LU;
 80019b8:	4b41      	ldr	r3, [pc, #260]	; (8001ac0 <minmea_scan+0x7a4>)
 80019ba:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char)*field) && scale > 1) {
 80019bc:	e014      	b.n	80019e8 <minmea_scan+0x6cc>
                            value = (value * 10) + (*field++ - '0');
 80019be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80019c0:	4613      	mov	r3, r2
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	4619      	mov	r1, r3
 80019ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	440b      	add	r3, r1
 80019d8:	3b30      	subs	r3, #48	; 0x30
 80019da:	64bb      	str	r3, [r7, #72]	; 0x48
                            scale /= 10;
 80019dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019de:	4a39      	ldr	r2, [pc, #228]	; (8001ac4 <minmea_scan+0x7a8>)
 80019e0:	fba2 2303 	umull	r2, r3, r2, r3
 80019e4:	08db      	lsrs	r3, r3, #3
 80019e6:	647b      	str	r3, [r7, #68]	; 0x44
                        while (isdigit((unsigned char)*field) && scale > 1) {
 80019e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	3301      	adds	r3, #1
 80019f0:	4a32      	ldr	r2, [pc, #200]	; (8001abc <minmea_scan+0x7a0>)
 80019f2:	4413      	add	r3, r2
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	f003 0304 	and.w	r3, r3, #4
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d002      	beq.n	8001a04 <minmea_scan+0x6e8>
 80019fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d8dc      	bhi.n	80019be <minmea_scan+0x6a2>
                        }
                        u = value * scale;
 8001a04:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001a06:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001a08:	fb02 f303 	mul.w	r3, r2, r3
 8001a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8001a0e:	e001      	b.n	8001a14 <minmea_scan+0x6f8>
                    } else {
                        u = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	653b      	str	r3, [r7, #80]	; 0x50
                    }
                }

                time_->hours = h;
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8001a18:	601a      	str	r2, [r3, #0]
                time_->minutes = i;
 8001a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001a1e:	605a      	str	r2, [r3, #4]
                time_->seconds = s;
 8001a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a22:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001a24:	609a      	str	r2, [r3, #8]
                time_->microseconds = u;
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001a2a:	60da      	str	r2, [r3, #12]
            } break;
 8001a2c:	e000      	b.n	8001a30 <minmea_scan+0x714>

            case '_': {  // Ignore the field.
            } break;
 8001a2e:	bf00      	nop
            default: {  // Unknown.
                goto parse_error;
            }
        }

        next_field();
 8001a30:	e002      	b.n	8001a38 <minmea_scan+0x71c>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	3301      	adds	r3, #1
 8001a36:	607b      	str	r3, [r7, #4]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f7ff fc4b 	bl	80012d8 <minmea_isfield>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d1f4      	bne.n	8001a32 <minmea_scan+0x716>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	2b2c      	cmp	r3, #44	; 0x2c
 8001a4e:	d106      	bne.n	8001a5e <minmea_scan+0x742>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	3301      	adds	r3, #1
 8001a54:	607b      	str	r3, [r7, #4]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001a5c:	e002      	b.n	8001a64 <minmea_scan+0x748>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    while (*format) {
 8001a64:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	f47f ac6d 	bne.w	800134a <minmea_scan+0x2e>
    }

    result = true;
 8001a70:	2301      	movs	r3, #1
 8001a72:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
 8001a76:	e018      	b.n	8001aaa <minmea_scan+0x78e>
            goto parse_error;
 8001a78:	bf00      	nop
 8001a7a:	e016      	b.n	8001aaa <minmea_scan+0x78e>
                goto parse_error;
 8001a7c:	bf00      	nop
 8001a7e:	e014      	b.n	8001aaa <minmea_scan+0x78e>
                            goto parse_error;
 8001a80:	bf00      	nop
 8001a82:	e012      	b.n	8001aaa <minmea_scan+0x78e>
                                    goto parse_error;
 8001a84:	bf00      	nop
 8001a86:	e010      	b.n	8001aaa <minmea_scan+0x78e>
                            goto parse_error;
 8001a88:	bf00      	nop
 8001a8a:	e00e      	b.n	8001aaa <minmea_scan+0x78e>
                                goto parse_error;
 8001a8c:	bf00      	nop
 8001a8e:	e00c      	b.n	8001aaa <minmea_scan+0x78e>
                if ((sign || scale) && value == -1) goto parse_error;
 8001a90:	bf00      	nop
 8001a92:	e00a      	b.n	8001aaa <minmea_scan+0x78e>
                    if (minmea_isfield(*endptr)) goto parse_error;
 8001a94:	bf00      	nop
 8001a96:	e008      	b.n	8001aaa <minmea_scan+0x78e>
                if (!field) goto parse_error;
 8001a98:	bf00      	nop
 8001a9a:	e006      	b.n	8001aaa <minmea_scan+0x78e>
                if (field[0] != '$') goto parse_error;
 8001a9c:	bf00      	nop
 8001a9e:	e004      	b.n	8001aaa <minmea_scan+0x78e>
                    if (!minmea_isfield(field[1 + f])) goto parse_error;
 8001aa0:	bf00      	nop
 8001aa2:	e002      	b.n	8001aaa <minmea_scan+0x78e>
                        if (!isdigit((unsigned char)field[f])) goto parse_error;
 8001aa4:	bf00      	nop
 8001aa6:	e000      	b.n	8001aaa <minmea_scan+0x78e>
                        if (!isdigit((unsigned char)field[f])) goto parse_error;
 8001aa8:	bf00      	nop

parse_error:
    va_end(ap);
    return result;
 8001aaa:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
}
 8001aae:	4618      	mov	r0, r3
 8001ab0:	379c      	adds	r7, #156	; 0x9c
 8001ab2:	46bd      	mov	sp, r7
 8001ab4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8001ab8:	b003      	add	sp, #12
 8001aba:	4770      	bx	lr
 8001abc:	08010d50 	.word	0x08010d50
 8001ac0:	000f4240 	.word	0x000f4240
 8001ac4:	cccccccd 	.word	0xcccccccd

08001ac8 <minmea_sentence_id>:
    talker[2] = '\0';

    return true;
}

enum minmea_sentence_id minmea_sentence_id(const char *sentence, bool strict) {
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	70fb      	strb	r3, [r7, #3]
    if (!minmea_check(sentence, strict)) return MINMEA_INVALID;
 8001ad4:	78fb      	ldrb	r3, [r7, #3]
 8001ad6:	4619      	mov	r1, r3
 8001ad8:	6878      	ldr	r0, [r7, #4]
 8001ada:	f7ff fb81 	bl	80011e0 <minmea_check>
 8001ade:	4603      	mov	r3, r0
 8001ae0:	f083 0301 	eor.w	r3, r3, #1
 8001ae4:	b2db      	uxtb	r3, r3
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d002      	beq.n	8001af0 <minmea_sentence_id+0x28>
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
 8001aee:	e07c      	b.n	8001bea <minmea_sentence_id+0x122>

    char type[6];
    if (!minmea_scan(sentence, "t", type)) return MINMEA_INVALID;
 8001af0:	f107 0308 	add.w	r3, r7, #8
 8001af4:	461a      	mov	r2, r3
 8001af6:	493f      	ldr	r1, [pc, #252]	; (8001bf4 <minmea_sentence_id+0x12c>)
 8001af8:	6878      	ldr	r0, [r7, #4]
 8001afa:	f7ff fc0f 	bl	800131c <minmea_scan>
 8001afe:	4603      	mov	r3, r0
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d002      	beq.n	8001b10 <minmea_sentence_id+0x48>
 8001b0a:	f04f 33ff 	mov.w	r3, #4294967295
 8001b0e:	e06c      	b.n	8001bea <minmea_sentence_id+0x122>

    if (!strcmp(type + 2, "GBS")) return MINMEA_SENTENCE_GBS;
 8001b10:	f107 0308 	add.w	r3, r7, #8
 8001b14:	3302      	adds	r3, #2
 8001b16:	4938      	ldr	r1, [pc, #224]	; (8001bf8 <minmea_sentence_id+0x130>)
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7fe fcd3 	bl	80004c4 <strcmp>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d101      	bne.n	8001b28 <minmea_sentence_id+0x60>
 8001b24:	2301      	movs	r3, #1
 8001b26:	e060      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "GGA")) return MINMEA_SENTENCE_GGA;
 8001b28:	f107 0308 	add.w	r3, r7, #8
 8001b2c:	3302      	adds	r3, #2
 8001b2e:	4933      	ldr	r1, [pc, #204]	; (8001bfc <minmea_sentence_id+0x134>)
 8001b30:	4618      	mov	r0, r3
 8001b32:	f7fe fcc7 	bl	80004c4 <strcmp>
 8001b36:	4603      	mov	r3, r0
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d101      	bne.n	8001b40 <minmea_sentence_id+0x78>
 8001b3c:	2302      	movs	r3, #2
 8001b3e:	e054      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "GLL")) return MINMEA_SENTENCE_GLL;
 8001b40:	f107 0308 	add.w	r3, r7, #8
 8001b44:	3302      	adds	r3, #2
 8001b46:	492e      	ldr	r1, [pc, #184]	; (8001c00 <minmea_sentence_id+0x138>)
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f7fe fcbb 	bl	80004c4 <strcmp>
 8001b4e:	4603      	mov	r3, r0
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d101      	bne.n	8001b58 <minmea_sentence_id+0x90>
 8001b54:	2303      	movs	r3, #3
 8001b56:	e048      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "GSA")) return MINMEA_SENTENCE_GSA;
 8001b58:	f107 0308 	add.w	r3, r7, #8
 8001b5c:	3302      	adds	r3, #2
 8001b5e:	4929      	ldr	r1, [pc, #164]	; (8001c04 <minmea_sentence_id+0x13c>)
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7fe fcaf 	bl	80004c4 <strcmp>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <minmea_sentence_id+0xa8>
 8001b6c:	2304      	movs	r3, #4
 8001b6e:	e03c      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "GST")) return MINMEA_SENTENCE_GST;
 8001b70:	f107 0308 	add.w	r3, r7, #8
 8001b74:	3302      	adds	r3, #2
 8001b76:	4924      	ldr	r1, [pc, #144]	; (8001c08 <minmea_sentence_id+0x140>)
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7fe fca3 	bl	80004c4 <strcmp>
 8001b7e:	4603      	mov	r3, r0
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d101      	bne.n	8001b88 <minmea_sentence_id+0xc0>
 8001b84:	2305      	movs	r3, #5
 8001b86:	e030      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "GSV")) return MINMEA_SENTENCE_GSV;
 8001b88:	f107 0308 	add.w	r3, r7, #8
 8001b8c:	3302      	adds	r3, #2
 8001b8e:	491f      	ldr	r1, [pc, #124]	; (8001c0c <minmea_sentence_id+0x144>)
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7fe fc97 	bl	80004c4 <strcmp>
 8001b96:	4603      	mov	r3, r0
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d101      	bne.n	8001ba0 <minmea_sentence_id+0xd8>
 8001b9c:	2306      	movs	r3, #6
 8001b9e:	e024      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "RMC")) return MINMEA_SENTENCE_RMC;
 8001ba0:	f107 0308 	add.w	r3, r7, #8
 8001ba4:	3302      	adds	r3, #2
 8001ba6:	491a      	ldr	r1, [pc, #104]	; (8001c10 <minmea_sentence_id+0x148>)
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f7fe fc8b 	bl	80004c4 <strcmp>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d101      	bne.n	8001bb8 <minmea_sentence_id+0xf0>
 8001bb4:	2307      	movs	r3, #7
 8001bb6:	e018      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "VTG")) return MINMEA_SENTENCE_VTG;
 8001bb8:	f107 0308 	add.w	r3, r7, #8
 8001bbc:	3302      	adds	r3, #2
 8001bbe:	4915      	ldr	r1, [pc, #84]	; (8001c14 <minmea_sentence_id+0x14c>)
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7fe fc7f 	bl	80004c4 <strcmp>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d101      	bne.n	8001bd0 <minmea_sentence_id+0x108>
 8001bcc:	2308      	movs	r3, #8
 8001bce:	e00c      	b.n	8001bea <minmea_sentence_id+0x122>
    if (!strcmp(type + 2, "ZDA")) return MINMEA_SENTENCE_ZDA;
 8001bd0:	f107 0308 	add.w	r3, r7, #8
 8001bd4:	3302      	adds	r3, #2
 8001bd6:	4910      	ldr	r1, [pc, #64]	; (8001c18 <minmea_sentence_id+0x150>)
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7fe fc73 	bl	80004c4 <strcmp>
 8001bde:	4603      	mov	r3, r0
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <minmea_sentence_id+0x120>
 8001be4:	2309      	movs	r3, #9
 8001be6:	e000      	b.n	8001bea <minmea_sentence_id+0x122>

    return MINMEA_UNKNOWN;
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3710      	adds	r7, #16
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	08010a44 	.word	0x08010a44
 8001bf8:	08010a48 	.word	0x08010a48
 8001bfc:	08010a4c 	.word	0x08010a4c
 8001c00:	08010a50 	.word	0x08010a50
 8001c04:	08010a54 	.word	0x08010a54
 8001c08:	08010a58 	.word	0x08010a58
 8001c0c:	08010a5c 	.word	0x08010a5c
 8001c10:	08010a60 	.word	0x08010a60
 8001c14:	08010a64 	.word	0x08010a64
 8001c18:	08010a68 	.word	0x08010a68

08001c1c <minmea_parse_rmc>:
    if (strcmp(type + 2, "GBS")) return false;

    return true;
}

bool minmea_parse_rmc(struct minmea_sentence_rmc *frame, const char *sentence) {
 8001c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c1e:	b095      	sub	sp, #84	; 0x54
 8001c20:	af0a      	add	r7, sp, #40	; 0x28
 8001c22:	60f8      	str	r0, [r7, #12]
 8001c24:	60b9      	str	r1, [r7, #8]
    char type[6];
    char validity;
    int latitude_direction;
    int longitude_direction;
    int variation_direction;
    if (!minmea_scan(sentence, "tTcfdfdffDfd", type, &frame->time, &validity,
 8001c26:	68fb      	ldr	r3, [r7, #12]
 8001c28:	607b      	str	r3, [r7, #4]
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	3314      	adds	r3, #20
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	321c      	adds	r2, #28
 8001c32:	68f9      	ldr	r1, [r7, #12]
 8001c34:	3124      	adds	r1, #36	; 0x24
 8001c36:	68f8      	ldr	r0, [r7, #12]
 8001c38:	302c      	adds	r0, #44	; 0x2c
 8001c3a:	68fc      	ldr	r4, [r7, #12]
 8001c3c:	3434      	adds	r4, #52	; 0x34
 8001c3e:	68fd      	ldr	r5, [r7, #12]
 8001c40:	3540      	adds	r5, #64	; 0x40
 8001c42:	f107 0c20 	add.w	ip, r7, #32
 8001c46:	f107 0610 	add.w	r6, r7, #16
 8001c4a:	9609      	str	r6, [sp, #36]	; 0x24
 8001c4c:	9508      	str	r5, [sp, #32]
 8001c4e:	9407      	str	r4, [sp, #28]
 8001c50:	9006      	str	r0, [sp, #24]
 8001c52:	9105      	str	r1, [sp, #20]
 8001c54:	f107 0114 	add.w	r1, r7, #20
 8001c58:	9104      	str	r1, [sp, #16]
 8001c5a:	9203      	str	r2, [sp, #12]
 8001c5c:	f107 0218 	add.w	r2, r7, #24
 8001c60:	9202      	str	r2, [sp, #8]
 8001c62:	9301      	str	r3, [sp, #4]
 8001c64:	f107 031f 	add.w	r3, r7, #31
 8001c68:	9300      	str	r3, [sp, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4662      	mov	r2, ip
 8001c6e:	491d      	ldr	r1, [pc, #116]	; (8001ce4 <minmea_parse_rmc+0xc8>)
 8001c70:	68b8      	ldr	r0, [r7, #8]
 8001c72:	f7ff fb53 	bl	800131c <minmea_scan>
 8001c76:	4603      	mov	r3, r0
 8001c78:	f083 0301 	eor.w	r3, r3, #1
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <minmea_parse_rmc+0x6a>
                     &frame->latitude, &latitude_direction, &frame->longitude,
                     &longitude_direction, &frame->speed, &frame->course,
                     &frame->date, &frame->variation, &variation_direction))
        return false;
 8001c82:	2300      	movs	r3, #0
 8001c84:	e029      	b.n	8001cda <minmea_parse_rmc+0xbe>
    if (strcmp(type + 2, "RMC")) return false;
 8001c86:	f107 0320 	add.w	r3, r7, #32
 8001c8a:	3302      	adds	r3, #2
 8001c8c:	4916      	ldr	r1, [pc, #88]	; (8001ce8 <minmea_parse_rmc+0xcc>)
 8001c8e:	4618      	mov	r0, r3
 8001c90:	f7fe fc18 	bl	80004c4 <strcmp>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <minmea_parse_rmc+0x82>
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	e01d      	b.n	8001cda <minmea_parse_rmc+0xbe>

    frame->valid = (validity == 'A');
 8001c9e:	7ffb      	ldrb	r3, [r7, #31]
 8001ca0:	2b41      	cmp	r3, #65	; 0x41
 8001ca2:	bf0c      	ite	eq
 8001ca4:	2301      	moveq	r3, #1
 8001ca6:	2300      	movne	r3, #0
 8001ca8:	b2da      	uxtb	r2, r3
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	741a      	strb	r2, [r3, #16]
    frame->latitude.value *= latitude_direction;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	695b      	ldr	r3, [r3, #20]
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	fb03 f202 	mul.w	r2, r3, r2
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	615a      	str	r2, [r3, #20]
    frame->longitude.value *= longitude_direction;
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	69db      	ldr	r3, [r3, #28]
 8001cc0:	697a      	ldr	r2, [r7, #20]
 8001cc2:	fb03 f202 	mul.w	r2, r3, r2
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	61da      	str	r2, [r3, #28]
    frame->variation.value *= variation_direction;
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	fb03 f202 	mul.w	r2, r3, r2
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

    return true;
 8001cd8:	2301      	movs	r3, #1
}
 8001cda:	4618      	mov	r0, r3
 8001cdc:	372c      	adds	r7, #44	; 0x2c
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	08010a78 	.word	0x08010a78
 8001ce8:	08010a60 	.word	0x08010a60

08001cec <minmea_parse_gga>:

bool minmea_parse_gga(struct minmea_sentence_gga *frame, const char *sentence) {
 8001cec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cee:	b097      	sub	sp, #92	; 0x5c
 8001cf0:	af0c      	add	r7, sp, #48	; 0x30
 8001cf2:	6178      	str	r0, [r7, #20]
 8001cf4:	6139      	str	r1, [r7, #16]
    // $GPGGA,123519,4807.038,N,01131.000,E,1,08,0.9,545.4,M,46.9,M,,*47
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tTfdfdiiffcfcf_", type, &frame->time,
 8001cf6:	697b      	ldr	r3, [r7, #20]
 8001cf8:	60fb      	str	r3, [r7, #12]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3310      	adds	r3, #16
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	3218      	adds	r2, #24
 8001d02:	60ba      	str	r2, [r7, #8]
 8001d04:	6979      	ldr	r1, [r7, #20]
 8001d06:	3120      	adds	r1, #32
 8001d08:	6978      	ldr	r0, [r7, #20]
 8001d0a:	3024      	adds	r0, #36	; 0x24
 8001d0c:	697c      	ldr	r4, [r7, #20]
 8001d0e:	3428      	adds	r4, #40	; 0x28
 8001d10:	697d      	ldr	r5, [r7, #20]
 8001d12:	3530      	adds	r5, #48	; 0x30
 8001d14:	697e      	ldr	r6, [r7, #20]
 8001d16:	3638      	adds	r6, #56	; 0x38
 8001d18:	697a      	ldr	r2, [r7, #20]
 8001d1a:	323c      	adds	r2, #60	; 0x3c
 8001d1c:	607a      	str	r2, [r7, #4]
 8001d1e:	697a      	ldr	r2, [r7, #20]
 8001d20:	3244      	adds	r2, #68	; 0x44
 8001d22:	603a      	str	r2, [r7, #0]
 8001d24:	697a      	ldr	r2, [r7, #20]
 8001d26:	3248      	adds	r2, #72	; 0x48
 8001d28:	f107 0c20 	add.w	ip, r7, #32
 8001d2c:	920b      	str	r2, [sp, #44]	; 0x2c
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	920a      	str	r2, [sp, #40]	; 0x28
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	9209      	str	r2, [sp, #36]	; 0x24
 8001d36:	9608      	str	r6, [sp, #32]
 8001d38:	9507      	str	r5, [sp, #28]
 8001d3a:	9406      	str	r4, [sp, #24]
 8001d3c:	9005      	str	r0, [sp, #20]
 8001d3e:	9104      	str	r1, [sp, #16]
 8001d40:	f107 0118 	add.w	r1, r7, #24
 8001d44:	9103      	str	r1, [sp, #12]
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	9202      	str	r2, [sp, #8]
 8001d4a:	f107 021c 	add.w	r2, r7, #28
 8001d4e:	9201      	str	r2, [sp, #4]
 8001d50:	9300      	str	r3, [sp, #0]
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	4662      	mov	r2, ip
 8001d56:	4915      	ldr	r1, [pc, #84]	; (8001dac <minmea_parse_gga+0xc0>)
 8001d58:	6938      	ldr	r0, [r7, #16]
 8001d5a:	f7ff fadf 	bl	800131c <minmea_scan>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f083 0301 	eor.w	r3, r3, #1
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d001      	beq.n	8001d6e <minmea_parse_gga+0x82>
                     &frame->latitude, &latitude_direction, &frame->longitude,
                     &longitude_direction, &frame->fix_quality,
                     &frame->satellites_tracked, &frame->hdop, &frame->altitude,
                     &frame->altitude_units, &frame->height,
                     &frame->height_units, &frame->dgps_age))
        return false;
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	e01a      	b.n	8001da4 <minmea_parse_gga+0xb8>
    if (strcmp(type + 2, "GGA")) return false;
 8001d6e:	f107 0320 	add.w	r3, r7, #32
 8001d72:	3302      	adds	r3, #2
 8001d74:	490e      	ldr	r1, [pc, #56]	; (8001db0 <minmea_parse_gga+0xc4>)
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7fe fba4 	bl	80004c4 <strcmp>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <minmea_parse_gga+0x9a>
 8001d82:	2300      	movs	r3, #0
 8001d84:	e00e      	b.n	8001da4 <minmea_parse_gga+0xb8>

    frame->latitude.value *= latitude_direction;
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	691b      	ldr	r3, [r3, #16]
 8001d8a:	69fa      	ldr	r2, [r7, #28]
 8001d8c:	fb03 f202 	mul.w	r2, r3, r2
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	611a      	str	r2, [r3, #16]
    frame->longitude.value *= longitude_direction;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	699b      	ldr	r3, [r3, #24]
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	fb03 f202 	mul.w	r2, r3, r2
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	619a      	str	r2, [r3, #24]

    return true;
 8001da2:	2301      	movs	r3, #1
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	372c      	adds	r7, #44	; 0x2c
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001dac:	08010a88 	.word	0x08010a88
 8001db0:	08010a4c 	.word	0x08010a4c

08001db4 <minmea_parse_gll>:
    if (strcmp(type + 2, "GSA")) return false;

    return true;
}

bool minmea_parse_gll(struct minmea_sentence_gll *frame, const char *sentence) {
 8001db4:	b5b0      	push	{r4, r5, r7, lr}
 8001db6:	b08c      	sub	sp, #48	; 0x30
 8001db8:	af06      	add	r7, sp, #24
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
    // $GPGLL,3723.2475,N,12158.3416,W,161229.487,A,A*41$;
    char type[6];
    int latitude_direction;
    int longitude_direction;

    if (!minmea_scan(sentence, "tfdfdTc;c", type, &frame->latitude,
 8001dbe:	687d      	ldr	r5, [r7, #4]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3308      	adds	r3, #8
 8001dc4:	687a      	ldr	r2, [r7, #4]
 8001dc6:	3210      	adds	r2, #16
 8001dc8:	6879      	ldr	r1, [r7, #4]
 8001dca:	3120      	adds	r1, #32
 8001dcc:	6878      	ldr	r0, [r7, #4]
 8001dce:	3021      	adds	r0, #33	; 0x21
 8001dd0:	f107 0410 	add.w	r4, r7, #16
 8001dd4:	9005      	str	r0, [sp, #20]
 8001dd6:	9104      	str	r1, [sp, #16]
 8001dd8:	9203      	str	r2, [sp, #12]
 8001dda:	f107 0208 	add.w	r2, r7, #8
 8001dde:	9202      	str	r2, [sp, #8]
 8001de0:	9301      	str	r3, [sp, #4]
 8001de2:	f107 030c 	add.w	r3, r7, #12
 8001de6:	9300      	str	r3, [sp, #0]
 8001de8:	462b      	mov	r3, r5
 8001dea:	4622      	mov	r2, r4
 8001dec:	4915      	ldr	r1, [pc, #84]	; (8001e44 <minmea_parse_gll+0x90>)
 8001dee:	6838      	ldr	r0, [r7, #0]
 8001df0:	f7ff fa94 	bl	800131c <minmea_scan>
 8001df4:	4603      	mov	r3, r0
 8001df6:	f083 0301 	eor.w	r3, r3, #1
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d001      	beq.n	8001e04 <minmea_parse_gll+0x50>
                     &latitude_direction, &frame->longitude,
                     &longitude_direction, &frame->time, &frame->status,
                     &frame->mode))
        return false;
 8001e00:	2300      	movs	r3, #0
 8001e02:	e01a      	b.n	8001e3a <minmea_parse_gll+0x86>
    if (strcmp(type + 2, "GLL")) return false;
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	3302      	adds	r3, #2
 8001e0a:	490f      	ldr	r1, [pc, #60]	; (8001e48 <minmea_parse_gll+0x94>)
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fb59 	bl	80004c4 <strcmp>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <minmea_parse_gll+0x68>
 8001e18:	2300      	movs	r3, #0
 8001e1a:	e00e      	b.n	8001e3a <minmea_parse_gll+0x86>

    frame->latitude.value *= latitude_direction;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	68fa      	ldr	r2, [r7, #12]
 8001e22:	fb03 f202 	mul.w	r2, r3, r2
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	601a      	str	r2, [r3, #0]
    frame->longitude.value *= longitude_direction;
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	68ba      	ldr	r2, [r7, #8]
 8001e30:	fb03 f202 	mul.w	r2, r3, r2
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	609a      	str	r2, [r3, #8]

    return true;
 8001e38:	2301      	movs	r3, #1
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3718      	adds	r7, #24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bdb0      	pop	{r4, r5, r7, pc}
 8001e42:	bf00      	nop
 8001e44:	08010aac 	.word	0x08010aac
 8001e48:	08010a50 	.word	0x08010a50

08001e4c <aprs_thread_entry>:
extern UART_HandleTypeDef huart4;
extern UART_HandleTypeDef huart3;

static bool toggle_freq(bool is_gps_dominica, bool is_currently_dominica);

void aprs_thread_entry(ULONG aprs_thread_input){
 8001e4c:	b590      	push	{r4, r7, lr}
 8001e4e:	f5ad 7d0b 	sub.w	sp, sp, #556	; 0x22c
 8001e52:	af24      	add	r7, sp, #144	; 0x90
 8001e54:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e58:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001e5c:	6018      	str	r0, [r3, #0]

	//buffer for packet data
	uint8_t packetBuffer[APRS_PACKET_MAX_LENGTH] = {0};
 8001e5e:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001e62:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001e66:	2200      	movs	r2, #0
 8001e68:	601a      	str	r2, [r3, #0]
 8001e6a:	3304      	adds	r3, #4
 8001e6c:	22fb      	movs	r2, #251	; 0xfb
 8001e6e:	2100      	movs	r1, #0
 8001e70:	4618      	mov	r0, r3
 8001e72:	f00c fa8e 	bl	800e392 <memset>

	//Create the GPS handler and configure it
	GPS_HandleTypeDef gps;
	initialize_gps(&huart3, &gps);
 8001e76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4847      	ldr	r0, [pc, #284]	; (8001f9c <aprs_thread_entry+0x150>)
 8001e7e:	f000 fc81 	bl	8002784 <initialize_gps>

	//Initialize VHF module for transmission. Turn transmission off so we don't hog the frequency
	initialize_vhf(huart4, false, TX_FREQ, RX_FREQ);
 8001e82:	4c47      	ldr	r4, [pc, #284]	; (8001fa0 <aprs_thread_entry+0x154>)
 8001e84:	4b47      	ldr	r3, [pc, #284]	; (8001fa4 <aprs_thread_entry+0x158>)
 8001e86:	9323      	str	r3, [sp, #140]	; 0x8c
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <aprs_thread_entry+0x158>)
 8001e8a:	9322      	str	r3, [sp, #136]	; 0x88
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	9321      	str	r3, [sp, #132]	; 0x84
 8001e90:	4668      	mov	r0, sp
 8001e92:	f104 0310 	add.w	r3, r4, #16
 8001e96:	2284      	movs	r2, #132	; 0x84
 8001e98:	4619      	mov	r1, r3
 8001e9a:	f00c fa6d 	bl	800e378 <memcpy>
 8001e9e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ea2:	f000 fec1 	bl	8002c28 <initialize_vhf>
	set_ptt(false);
 8001ea6:	2000      	movs	r0, #0
 8001ea8:	f000 ffc8 	bl	8002e3c <set_ptt>

	//We arent in dominica by default
	bool is_in_dominica = false;
 8001eac:	2300      	movs	r3, #0
 8001eae:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

		//GPS data struct
		GPS_Data gps_data;

		//Attempt to get a GPS lock
		bool is_locked = get_gps_lock(&gps, &gps_data);
 8001eb2:	f107 020c 	add.w	r2, r7, #12
 8001eb6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eba:	4611      	mov	r1, r2
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f000 fe27 	bl	8002b10 <get_gps_lock>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	f887 318e 	strb.w	r3, [r7, #398]	; 0x18e

		//The time we will eventually put this task to sleep for. We assign this assuming the GPS lock has failed (only sleep for a shorter, fixed period of time).
		//If we did get a GPS lock, the sleep_period will correct itself by the end of the task (be appropriately assigned after succesful APRS transmission)
		uint32_t sleep_period = GPS_SLEEP_LENGTH;
 8001ec8:	4b37      	ldr	r3, [pc, #220]	; (8001fa8 <aprs_thread_entry+0x15c>)
 8001eca:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

		//If we've locked onto a position, we can start creating an APRS packet.
		if (is_locked){
 8001ece:	f897 318e 	ldrb.w	r3, [r7, #398]	; 0x18e
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d05c      	beq.n	8001f90 <aprs_thread_entry+0x144>

			aprs_generate_packet(packetBuffer, gps_data.latitude, gps_data.longitude);
 8001ed6:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001eda:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001ee6:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001eea:	ed93 7a01 	vldr	s14, [r3, #4]
 8001eee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001ef2:	eef0 0a47 	vmov.f32	s1, s14
 8001ef6:	eeb0 0a67 	vmov.f32	s0, s15
 8001efa:	4618      	mov	r0, r3
 8001efc:	f000 f8a8 	bl	8002050 <aprs_generate_packet>

			//We first initialized the VHF module with our default frequencies. If we are in Dominica, re-initialize the VHF module to use the dominica frequencies.
			//
			//The function also handles switching back to the default frequency if we leave dominica
			is_in_dominica = toggle_freq(gps_data.is_dominica, is_in_dominica);
 8001f00:	f507 73cc 	add.w	r3, r7, #408	; 0x198
 8001f04:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001f08:	7c9b      	ldrb	r3, [r3, #18]
 8001f0a:	f897 2197 	ldrb.w	r2, [r7, #407]	; 0x197
 8001f0e:	4611      	mov	r1, r2
 8001f10:	4618      	mov	r0, r3
 8001f12:	f000 f84f 	bl	8001fb4 <toggle_freq>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f887 3197 	strb.w	r3, [r7, #407]	; 0x197

			//Start transmission
			set_ptt(true);
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f000 ff8d 	bl	8002e3c <set_ptt>

			//Now, transmit the signal through the VHF module. Transmit a few times just for safety.
			for (uint8_t transmits = 0; transmits < NUM_TX_ATTEMPTS; transmits++){
 8001f22:	2300      	movs	r3, #0
 8001f24:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001f28:	e00a      	b.n	8001f40 <aprs_thread_entry+0xf4>
				aprs_transmit_send_data(packetBuffer, APRS_PACKET_LENGTH);
 8001f2a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001f2e:	21e0      	movs	r1, #224	; 0xe0
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 faa1 	bl	8002478 <aprs_transmit_send_data>
			for (uint8_t transmits = 0; transmits < NUM_TX_ATTEMPTS; transmits++){
 8001f36:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f3a:	3301      	adds	r3, #1
 8001f3c:	f887 318f 	strb.w	r3, [r7, #399]	; 0x18f
 8001f40:	f897 318f 	ldrb.w	r3, [r7, #399]	; 0x18f
 8001f44:	2b02      	cmp	r3, #2
 8001f46:	d9f0      	bls.n	8001f2a <aprs_thread_entry+0xde>
			}

			//end transmission
			set_ptt(false);
 8001f48:	2000      	movs	r0, #0
 8001f4a:	f000 ff77 	bl	8002e3c <set_ptt>

			//Set the sleep period for a successful APRS transmission
			sleep_period = APRS_BASE_SLEEP_LENGTH;
 8001f4e:	4b17      	ldr	r3, [pc, #92]	; (8001fac <aprs_thread_entry+0x160>)
 8001f50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

			//Add a random component to it so that we dont transmit at the same interval each time (to prevent bad timing drowning out other transmissions)
			uint8_t random_num = rand() % 30;
 8001f54:	f00c fa26 	bl	800e3a4 <rand>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	4b15      	ldr	r3, [pc, #84]	; (8001fb0 <aprs_thread_entry+0x164>)
 8001f5c:	fb83 1302 	smull	r1, r3, r3, r2
 8001f60:	4413      	add	r3, r2
 8001f62:	1119      	asrs	r1, r3, #4
 8001f64:	17d3      	asrs	r3, r2, #31
 8001f66:	1ac9      	subs	r1, r1, r3
 8001f68:	460b      	mov	r3, r1
 8001f6a:	011b      	lsls	r3, r3, #4
 8001f6c:	1a5b      	subs	r3, r3, r1
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	1ad1      	subs	r1, r2, r3
 8001f72:	460b      	mov	r3, r1
 8001f74:	f887 318d 	strb.w	r3, [r7, #397]	; 0x18d

			//Add a random amount of seconds to the sleep, from 0 to 29
			sleep_period += tx_s_to_ticks(random_num);
 8001f78:	f897 318d 	ldrb.w	r3, [r7, #397]	; 0x18d
 8001f7c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001f80:	fb02 f303 	mul.w	r3, r2, r3
 8001f84:	461a      	mov	r2, r3
 8001f86:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001f8a:	4413      	add	r3, r2
 8001f8c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
		}

		//Go to sleep now
		tx_thread_sleep(sleep_period);
 8001f90:	f8d7 0190 	ldr.w	r0, [r7, #400]	; 0x190
 8001f94:	f00a ff36 	bl	800ce04 <_tx_thread_sleep>
	while(1){
 8001f98:	e78b      	b.n	8001eb2 <aprs_thread_entry+0x66>
 8001f9a:	bf00      	nop
 8001f9c:	20005ce4 	.word	0x20005ce4
 8001fa0:	20005c50 	.word	0x20005c50
 8001fa4:	08010af0 	.word	0x08010af0
 8001fa8:	00030d40 	.word	0x00030d40
 8001fac:	00124f80 	.word	0x00124f80
 8001fb0:	88888889 	.word	0x88888889

08001fb4 <toggle_freq>:
 * is_gps_dominica: whether or not the current gps data is in dominica
 * is_currently_dominica: whether or not our VHF module is configured to the dominica frequency
 *
 * Returns: the current state of our configuration (whether or not VHF is configured for dominica
 */
static bool toggle_freq(bool is_gps_dominica, bool is_currently_dominica){
 8001fb4:	b590      	push	{r4, r7, lr}
 8001fb6:	b0a7      	sub	sp, #156	; 0x9c
 8001fb8:	af24      	add	r7, sp, #144	; 0x90
 8001fba:	4603      	mov	r3, r0
 8001fbc:	460a      	mov	r2, r1
 8001fbe:	71fb      	strb	r3, [r7, #7]
 8001fc0:	4613      	mov	r3, r2
 8001fc2:	71bb      	strb	r3, [r7, #6]

	//If the GPS is in dominica, but we are not configured for it, switch to dominica
	if (is_gps_dominica && !is_currently_dominica){
 8001fc4:	79fb      	ldrb	r3, [r7, #7]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d019      	beq.n	8001ffe <toggle_freq+0x4a>
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	f083 0301 	eor.w	r3, r3, #1
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d013      	beq.n	8001ffe <toggle_freq+0x4a>

		//Re-initialize for dominica frequencies
		initialize_vhf(huart4, false, DOMINICA_TX_FREQ, DOMINICA_RX_FREQ);
 8001fd6:	4c1b      	ldr	r4, [pc, #108]	; (8002044 <toggle_freq+0x90>)
 8001fd8:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <toggle_freq+0x94>)
 8001fda:	9323      	str	r3, [sp, #140]	; 0x8c
 8001fdc:	4b1a      	ldr	r3, [pc, #104]	; (8002048 <toggle_freq+0x94>)
 8001fde:	9322      	str	r3, [sp, #136]	; 0x88
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	9321      	str	r3, [sp, #132]	; 0x84
 8001fe4:	4668      	mov	r0, sp
 8001fe6:	f104 0310 	add.w	r3, r4, #16
 8001fea:	2284      	movs	r2, #132	; 0x84
 8001fec:	4619      	mov	r1, r3
 8001fee:	f00c f9c3 	bl	800e378 <memcpy>
 8001ff2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ff6:	f000 fe17 	bl	8002c28 <initialize_vhf>

		//Now configured for dominica, return to indicate that
		return true;
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	e01d      	b.n	800203a <toggle_freq+0x86>
	}
	//elseif, we are not in dominica, but we are configured for dominica. Switch back to the regular frequencies
	else if (!is_gps_dominica && is_currently_dominica){
 8001ffe:	79fb      	ldrb	r3, [r7, #7]
 8002000:	f083 0301 	eor.w	r3, r3, #1
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b00      	cmp	r3, #0
 8002008:	d016      	beq.n	8002038 <toggle_freq+0x84>
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d013      	beq.n	8002038 <toggle_freq+0x84>

		//Re-initialize for default frequencies
		initialize_vhf(huart4, false, TX_FREQ, RX_FREQ);
 8002010:	4c0c      	ldr	r4, [pc, #48]	; (8002044 <toggle_freq+0x90>)
 8002012:	4b0e      	ldr	r3, [pc, #56]	; (800204c <toggle_freq+0x98>)
 8002014:	9323      	str	r3, [sp, #140]	; 0x8c
 8002016:	4b0d      	ldr	r3, [pc, #52]	; (800204c <toggle_freq+0x98>)
 8002018:	9322      	str	r3, [sp, #136]	; 0x88
 800201a:	2300      	movs	r3, #0
 800201c:	9321      	str	r3, [sp, #132]	; 0x84
 800201e:	4668      	mov	r0, sp
 8002020:	f104 0310 	add.w	r3, r4, #16
 8002024:	2284      	movs	r2, #132	; 0x84
 8002026:	4619      	mov	r1, r3
 8002028:	f00c f9a6 	bl	800e378 <memcpy>
 800202c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002030:	f000 fdfa 	bl	8002c28 <initialize_vhf>

		//No longer on dominica freq, return to indicate that
		return false;
 8002034:	2300      	movs	r3, #0
 8002036:	e000      	b.n	800203a <toggle_freq+0x86>
	}

	//else: do nothing
	return is_currently_dominica;
 8002038:	79bb      	ldrb	r3, [r7, #6]
}
 800203a:	4618      	mov	r0, r3
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	bd90      	pop	{r4, r7, pc}
 8002042:	bf00      	nop
 8002044:	20005c50 	.word	0x20005c50
 8002048:	08010afc 	.word	0x08010afc
 800204c:	08010af0 	.word	0x08010af0

08002050 <aprs_generate_packet>:
static void append_callsign(uint8_t * buffer, char * callsign, uint8_t ssid);
static void append_gps_data(uint8_t * buffer, float lat, float lon);
static void append_other_data(uint8_t * buffer, uint16_t course, uint16_t speed, char * comment);
static void append_frame_check(uint8_t * buffer, uint8_t buffer_length);

void aprs_generate_packet(uint8_t * buffer, float lat, float lon){
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	ed87 0a02 	vstr	s0, [r7, #8]
 800205c:	edc7 0a01 	vstr	s1, [r7, #4]

	append_flag(buffer, 150);
 8002060:	2196      	movs	r1, #150	; 0x96
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f000 f854 	bl	8002110 <append_flag>

	append_callsign(&buffer[150], APRS_DESTINATION_CALLSIGN, APRS_DESTINATION_SSID);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	3396      	adds	r3, #150	; 0x96
 800206c:	2200      	movs	r2, #0
 800206e:	4922      	ldr	r1, [pc, #136]	; (80020f8 <aprs_generate_packet+0xa8>)
 8002070:	4618      	mov	r0, r3
 8002072:	f000 f869 	bl	8002148 <append_callsign>

	append_callsign(&buffer[157], APRS_SOURCE_CALLSIGN, APRS_SOURCE_SSID);
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	339d      	adds	r3, #157	; 0x9d
 800207a:	2201      	movs	r2, #1
 800207c:	491f      	ldr	r1, [pc, #124]	; (80020fc <aprs_generate_packet+0xac>)
 800207e:	4618      	mov	r0, r3
 8002080:	f000 f862 	bl	8002148 <append_callsign>

	//We can also treat the digipeter as a callsign since it has the same format
	append_callsign(&buffer[164], APRS_DIGI_PATH, APRS_DIGI_SSID);
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	33a4      	adds	r3, #164	; 0xa4
 8002088:	2202      	movs	r2, #2
 800208a:	491d      	ldr	r1, [pc, #116]	; (8002100 <aprs_generate_packet+0xb0>)
 800208c:	4618      	mov	r0, r3
 800208e:	f000 f85b 	bl	8002148 <append_callsign>
	buffer[170] += 1;
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	33aa      	adds	r3, #170	; 0xaa
 8002096:	781a      	ldrb	r2, [r3, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	33aa      	adds	r3, #170	; 0xaa
 800209c:	3201      	adds	r2, #1
 800209e:	b2d2      	uxtb	r2, r2
 80020a0:	701a      	strb	r2, [r3, #0]

	//Add the control ID and protocol ID
	buffer[171] = APRS_CONTROL_FIELD;
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	33ab      	adds	r3, #171	; 0xab
 80020a6:	2203      	movs	r2, #3
 80020a8:	701a      	strb	r2, [r3, #0]
	buffer[172] = APRS_PROTOCOL_ID;
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	33ac      	adds	r3, #172	; 0xac
 80020ae:	22f0      	movs	r2, #240	; 0xf0
 80020b0:	701a      	strb	r2, [r3, #0]

	//Attach the payload (including other control characters)
	//TODO: Replace with real GPS data.
	append_gps_data(&buffer[173], 42.3636, -71.1259);
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	33ad      	adds	r3, #173	; 0xad
 80020b6:	eddf 0a13 	vldr	s1, [pc, #76]	; 8002104 <aprs_generate_packet+0xb4>
 80020ba:	ed9f 0a13 	vldr	s0, [pc, #76]	; 8002108 <aprs_generate_packet+0xb8>
 80020be:	4618      	mov	r0, r3
 80020c0:	f000 f880 	bl	80021c4 <append_gps_data>

	//Attach other information (course, speed and the comment)
	append_other_data(&buffer[193], 360, 0, APRS_COMMENT);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f103 00c1 	add.w	r0, r3, #193	; 0xc1
 80020ca:	4b10      	ldr	r3, [pc, #64]	; (800210c <aprs_generate_packet+0xbc>)
 80020cc:	2200      	movs	r2, #0
 80020ce:	f44f 71b4 	mov.w	r1, #360	; 0x168
 80020d2:	f000 f953 	bl	800237c <append_other_data>

	append_frame_check(buffer, 219);
 80020d6:	21db      	movs	r1, #219	; 0xdb
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f000 f971 	bl	80023c0 <append_frame_check>

	append_flag(&buffer[221], 3);
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	33dd      	adds	r3, #221	; 0xdd
 80020e2:	2103      	movs	r1, #3
 80020e4:	4618      	mov	r0, r3
 80020e6:	f000 f813 	bl	8002110 <append_flag>

	HAL_Delay(100);
 80020ea:	2064      	movs	r0, #100	; 0x64
 80020ec:	f001 fef2 	bl	8003ed4 <HAL_Delay>
}
 80020f0:	bf00      	nop
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	08010b08 	.word	0x08010b08
 80020fc:	08010b10 	.word	0x08010b10
 8002100:	08010b18 	.word	0x08010b18
 8002104:	c28e4076 	.word	0xc28e4076
 8002108:	42297454 	.word	0x42297454
 800210c:	08010b20 	.word	0x08010b20

08002110 <append_flag>:

//Appends the flag character (0x7E) to the buffer 'numFlags' times.
static void append_flag(uint8_t * buffer, uint8_t numFlags){
 8002110:	b480      	push	{r7}
 8002112:	b085      	sub	sp, #20
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
 8002118:	460b      	mov	r3, r1
 800211a:	70fb      	strb	r3, [r7, #3]

	//Add numFlags flag characters to the buffer
	for (uint8_t index = 0; index < numFlags; index++){
 800211c:	2300      	movs	r3, #0
 800211e:	73fb      	strb	r3, [r7, #15]
 8002120:	e007      	b.n	8002132 <append_flag+0x22>
		buffer[index] = APRS_FLAG;
 8002122:	7bfb      	ldrb	r3, [r7, #15]
 8002124:	687a      	ldr	r2, [r7, #4]
 8002126:	4413      	add	r3, r2
 8002128:	227e      	movs	r2, #126	; 0x7e
 800212a:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 0; index < numFlags; index++){
 800212c:	7bfb      	ldrb	r3, [r7, #15]
 800212e:	3301      	adds	r3, #1
 8002130:	73fb      	strb	r3, [r7, #15]
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	78fb      	ldrb	r3, [r7, #3]
 8002136:	429a      	cmp	r2, r3
 8002138:	d3f3      	bcc.n	8002122 <append_flag+0x12>
	}
}
 800213a:	bf00      	nop
 800213c:	bf00      	nop
 800213e:	3714      	adds	r7, #20
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <append_callsign>:

//Appends a callsign to the buffer with its SSID.
static void append_callsign(uint8_t * buffer, char * callsign, uint8_t ssid){
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	4613      	mov	r3, r2
 8002154:	71fb      	strb	r3, [r7, #7]

	//Determine the length of the callsign
	uint8_t length  = strlen(callsign);
 8002156:	68b8      	ldr	r0, [r7, #8]
 8002158:	f7fe f9be 	bl	80004d8 <strlen>
 800215c:	4603      	mov	r3, r0
 800215e:	757b      	strb	r3, [r7, #21]

	//Append the callsign to the buffer. Note that ASCII characters must be left shifted by 1 bit as per APRS101 standard
	for (uint8_t index = 0; index < length; index++){
 8002160:	2300      	movs	r3, #0
 8002162:	75fb      	strb	r3, [r7, #23]
 8002164:	e00c      	b.n	8002180 <append_callsign+0x38>
		buffer[index] = (callsign[index] << 1);
 8002166:	7dfb      	ldrb	r3, [r7, #23]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	4413      	add	r3, r2
 800216c:	781a      	ldrb	r2, [r3, #0]
 800216e:	7dfb      	ldrb	r3, [r7, #23]
 8002170:	68f9      	ldr	r1, [r7, #12]
 8002172:	440b      	add	r3, r1
 8002174:	0052      	lsls	r2, r2, #1
 8002176:	b2d2      	uxtb	r2, r2
 8002178:	701a      	strb	r2, [r3, #0]
	for (uint8_t index = 0; index < length; index++){
 800217a:	7dfb      	ldrb	r3, [r7, #23]
 800217c:	3301      	adds	r3, #1
 800217e:	75fb      	strb	r3, [r7, #23]
 8002180:	7dfa      	ldrb	r2, [r7, #23]
 8002182:	7d7b      	ldrb	r3, [r7, #21]
 8002184:	429a      	cmp	r2, r3
 8002186:	d3ee      	bcc.n	8002166 <append_callsign+0x1e>
	}

	//The callsign field must be atleast 6 characters long, so fill any missing spots with blanks
	if (length < APRS_CALLSIGN_LENGTH){
 8002188:	7d7b      	ldrb	r3, [r7, #21]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d80d      	bhi.n	80021aa <append_callsign+0x62>
		for (uint8_t index = length; index < APRS_CALLSIGN_LENGTH; index++){
 800218e:	7d7b      	ldrb	r3, [r7, #21]
 8002190:	75bb      	strb	r3, [r7, #22]
 8002192:	e007      	b.n	80021a4 <append_callsign+0x5c>
			//We still need to shift left by 1 bit
			buffer[index] = (' ' << 1);
 8002194:	7dbb      	ldrb	r3, [r7, #22]
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4413      	add	r3, r2
 800219a:	2240      	movs	r2, #64	; 0x40
 800219c:	701a      	strb	r2, [r3, #0]
		for (uint8_t index = length; index < APRS_CALLSIGN_LENGTH; index++){
 800219e:	7dbb      	ldrb	r3, [r7, #22]
 80021a0:	3301      	adds	r3, #1
 80021a2:	75bb      	strb	r3, [r7, #22]
 80021a4:	7dbb      	ldrb	r3, [r7, #22]
 80021a6:	2b05      	cmp	r3, #5
 80021a8:	d9f4      	bls.n	8002194 <append_callsign+0x4c>
		}
	}

	//Now, we've filled the first 6 bytes with the callsign (index 0-5), so the SSID must be in the 6th index.
	//We can find its ASCII character by adding the integer value to the ascii value of '0'. Still need to shift left by 1 bit.
	buffer[APRS_CALLSIGN_LENGTH] = (ssid + '0') << 1;
 80021aa:	79fb      	ldrb	r3, [r7, #7]
 80021ac:	3330      	adds	r3, #48	; 0x30
 80021ae:	b2da      	uxtb	r2, r3
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	3306      	adds	r3, #6
 80021b4:	0052      	lsls	r2, r2, #1
 80021b6:	b2d2      	uxtb	r2, r2
 80021b8:	701a      	strb	r2, [r3, #0]
}
 80021ba:	bf00      	nop
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}
	...

080021c4 <append_gps_data>:

//Appends the GPS data (latitude and longitude) to the buffer
static void append_gps_data(uint8_t * buffer, float lat, float lon){
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08f      	sub	sp, #60	; 0x3c
 80021c8:	af04      	add	r7, sp, #16
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	ed87 0a02 	vstr	s0, [r7, #8]
 80021d0:	edc7 0a01 	vstr	s1, [r7, #4]

	//indicate start of real-time transmission
	buffer[0] = APRS_DT_POS_CHARACTER;
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	2221      	movs	r2, #33	; 0x21
 80021d8:	701a      	strb	r2, [r3, #0]

	//First, create the string containing the latitude and longitude data, then save it into our buffer
	bool is_north = true;
 80021da:	2301      	movs	r3, #1
 80021dc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//If we have a negative value, then the location is in the southern hemisphere.
	//Recognize this and then just use the magnitude of the latitude for future calculations.
	if (lat < 0){
 80021e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80021e4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ec:	d50a      	bpl.n	8002204 <append_gps_data+0x40>
		is_north = false;
 80021ee:	2300      	movs	r3, #0
 80021f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		is_north *= -1;
 80021f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	bf14      	ite	ne
 80021fc:	2301      	movne	r3, #1
 80021fe:	2300      	moveq	r3, #0
 8002200:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

	//The coordinates we get from the GPS are in degrees and fractional degrees
	//We need to extract the whole degrees from this, then the whole minutes and finally the fractional minutes

	//The degrees are just the rounded-down integer
	uint8_t lat_deg_whole = (uint8_t) lat;
 8002204:	edd7 7a02 	vldr	s15, [r7, #8]
 8002208:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800220c:	edc7 7a00 	vstr	s15, [r7]
 8002210:	783b      	ldrb	r3, [r7, #0]
 8002212:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

	//Find the remainder (fractional degrees) and multiply it by 60 to get the minutes (fractional and whole)
	float lat_minutes = (lat - lat_deg_whole) * 60;
 8002216:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800221a:	ee07 3a90 	vmov	s15, r3
 800221e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002222:	ed97 7a02 	vldr	s14, [r7, #8]
 8002226:	ee77 7a67 	vsub.f32	s15, s14, s15
 800222a:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800236c <append_gps_data+0x1a8>
 800222e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002232:	edc7 7a08 	vstr	s15, [r7, #32]

	//Whole number minutes is just the fractional component.
	uint8_t lat_minutes_whole = (uint8_t) lat_minutes;
 8002236:	edd7 7a08 	vldr	s15, [r7, #32]
 800223a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223e:	edc7 7a00 	vstr	s15, [r7]
 8002242:	783b      	ldrb	r3, [r7, #0]
 8002244:	77fb      	strb	r3, [r7, #31]

	//Find the remainder (fractional component) and save it to two decimal points (multiply by 100 and cast to int)
	uint8_t lat_minutes_frac = (lat_minutes - lat_minutes_whole) * 100;
 8002246:	7ffb      	ldrb	r3, [r7, #31]
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002250:	ed97 7a08 	vldr	s14, [r7, #32]
 8002254:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002258:	ed9f 7a45 	vldr	s14, [pc, #276]	; 8002370 <append_gps_data+0x1ac>
 800225c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002260:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002264:	edc7 7a00 	vstr	s15, [r7]
 8002268:	783b      	ldrb	r3, [r7, #0]
 800226a:	77bb      	strb	r3, [r7, #30]

	//Find our direction indicator (N for North of S for south)
	char lat_direction = (is_north) ? 'N' : 'S';
 800226c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002270:	2b00      	cmp	r3, #0
 8002272:	d001      	beq.n	8002278 <append_gps_data+0xb4>
 8002274:	234e      	movs	r3, #78	; 0x4e
 8002276:	e000      	b.n	800227a <append_gps_data+0xb6>
 8002278:	2353      	movs	r3, #83	; 0x53
 800227a:	777b      	strb	r3, [r7, #29]

	//Create our string. We use the format ddmm.hh(N/S), where "d" is degrees, "m" is minutes and "h" is fractional minutes.
	//Store this in our buffer.
	snprintf(&buffer[1], APRS_LATITUDE_LENGTH, "%02d%02d.%02d%c", lat_deg_whole, lat_minutes_whole, lat_minutes_frac, lat_direction);
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	1c58      	adds	r0, r3, #1
 8002280:	f897 4025 	ldrb.w	r4, [r7, #37]	; 0x25
 8002284:	7ffb      	ldrb	r3, [r7, #31]
 8002286:	7fba      	ldrb	r2, [r7, #30]
 8002288:	7f79      	ldrb	r1, [r7, #29]
 800228a:	9102      	str	r1, [sp, #8]
 800228c:	9201      	str	r2, [sp, #4]
 800228e:	9300      	str	r3, [sp, #0]
 8002290:	4623      	mov	r3, r4
 8002292:	4a38      	ldr	r2, [pc, #224]	; (8002374 <append_gps_data+0x1b0>)
 8002294:	2109      	movs	r1, #9
 8002296:	f00c f8c3 	bl	800e420 <sniprintf>


	//Right now we have the null-terminating character in the buffer "\0". Replace this with our latitude and longitude seperating symbol "1".
	buffer[APRS_LATITUDE_LENGTH] = APRS_SYM_TABLE_CHAR;
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	3309      	adds	r3, #9
 800229e:	2231      	movs	r2, #49	; 0x31
 80022a0:	701a      	strb	r2, [r3, #0]

	//Now, repeat the process for longitude.
	bool is_east = true;
 80022a2:	2301      	movs	r3, #1
 80022a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	//If its less than 0, remember it as West, and then take the magnitude
	if (lon < 0){
 80022a8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d508      	bpl.n	80022c8 <append_gps_data+0x104>
		is_east = false;
 80022b6:	2300      	movs	r3, #0
 80022b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
		lon *= -1;
 80022bc:	edd7 7a01 	vldr	s15, [r7, #4]
 80022c0:	eef1 7a67 	vneg.f32	s15, s15
 80022c4:	edc7 7a01 	vstr	s15, [r7, #4]
	}

	//Find whole number degrees
	uint8_t lon_deg_whole = (uint8_t) lon;
 80022c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80022cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022d0:	edc7 7a00 	vstr	s15, [r7]
 80022d4:	783b      	ldrb	r3, [r7, #0]
 80022d6:	773b      	strb	r3, [r7, #28]

	//Find remainder (fractional degrees), convert to minutes
	float lon_minutes = (lon - lon_deg_whole) * 60;
 80022d8:	7f3b      	ldrb	r3, [r7, #28]
 80022da:	ee07 3a90 	vmov	s15, r3
 80022de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e2:	ed97 7a01 	vldr	s14, [r7, #4]
 80022e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80022ea:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800236c <append_gps_data+0x1a8>
 80022ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022f2:	edc7 7a06 	vstr	s15, [r7, #24]

	//Find whole number and fractional minutes. Take two decimal places for the fractional minutes, just like before
	uint8_t lon_minutes_whole = (uint8_t) lon_minutes;
 80022f6:	edd7 7a06 	vldr	s15, [r7, #24]
 80022fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80022fe:	edc7 7a00 	vstr	s15, [r7]
 8002302:	783b      	ldrb	r3, [r7, #0]
 8002304:	75fb      	strb	r3, [r7, #23]
	uint8_t lon_minutes_fractional = (lon_minutes - lon_minutes_whole) * 100;
 8002306:	7dfb      	ldrb	r3, [r7, #23]
 8002308:	ee07 3a90 	vmov	s15, r3
 800230c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002310:	ed97 7a06 	vldr	s14, [r7, #24]
 8002314:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002318:	ed9f 7a15 	vldr	s14, [pc, #84]	; 8002370 <append_gps_data+0x1ac>
 800231c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002320:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002324:	edc7 7a00 	vstr	s15, [r7]
 8002328:	783b      	ldrb	r3, [r7, #0]
 800232a:	75bb      	strb	r3, [r7, #22]

	//Find direction character
	char lon_direction = (is_east) ? 'E' : 'W';
 800232c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8002330:	2b00      	cmp	r3, #0
 8002332:	d001      	beq.n	8002338 <append_gps_data+0x174>
 8002334:	2345      	movs	r3, #69	; 0x45
 8002336:	e000      	b.n	800233a <append_gps_data+0x176>
 8002338:	2357      	movs	r3, #87	; 0x57
 800233a:	757b      	strb	r3, [r7, #21]

	//Store this in the buffer, in the format dddmm.hh(E/W)
	snprintf(&buffer[APRS_LATITUDE_LENGTH + 1], APRS_LONGITUDE_LENGTH, "%03d%02d.%02d%c", lon_deg_whole, lon_minutes_whole, lon_minutes_fractional, lon_direction);
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	f103 000a 	add.w	r0, r3, #10
 8002342:	7f3c      	ldrb	r4, [r7, #28]
 8002344:	7dfb      	ldrb	r3, [r7, #23]
 8002346:	7dba      	ldrb	r2, [r7, #22]
 8002348:	7d79      	ldrb	r1, [r7, #21]
 800234a:	9102      	str	r1, [sp, #8]
 800234c:	9201      	str	r2, [sp, #4]
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	4623      	mov	r3, r4
 8002352:	4a09      	ldr	r2, [pc, #36]	; (8002378 <append_gps_data+0x1b4>)
 8002354:	210a      	movs	r1, #10
 8002356:	f00c f863 	bl	800e420 <sniprintf>

	//Appending payload character indicating the APRS symbol (using boat symbol). Replace the null-terminating character with it.
	buffer[APRS_LATITUDE_LENGTH + APRS_LONGITUDE_LENGTH] = APRS_SYM_CODE_CHAR;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	3313      	adds	r3, #19
 800235e:	2273      	movs	r2, #115	; 0x73
 8002360:	701a      	strb	r2, [r3, #0]
}
 8002362:	bf00      	nop
 8002364:	372c      	adds	r7, #44	; 0x2c
 8002366:	46bd      	mov	sp, r7
 8002368:	bd90      	pop	{r4, r7, pc}
 800236a:	bf00      	nop
 800236c:	42700000 	.word	0x42700000
 8002370:	42c80000 	.word	0x42c80000
 8002374:	08010b34 	.word	0x08010b34
 8002378:	08010b44 	.word	0x08010b44

0800237c <append_other_data>:

//Appends other extra data (course, speed and the comment)
static void append_other_data(uint8_t * buffer, uint16_t course, uint16_t speed, char * comment){
 800237c:	b580      	push	{r7, lr}
 800237e:	b088      	sub	sp, #32
 8002380:	af02      	add	r7, sp, #8
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	607b      	str	r3, [r7, #4]
 8002386:	460b      	mov	r3, r1
 8002388:	817b      	strh	r3, [r7, #10]
 800238a:	4613      	mov	r3, r2
 800238c:	813b      	strh	r3, [r7, #8]

	//Append the course and speed of the tag (course is the heading 0->360 degrees
	uint8_t length = 8 + strlen(comment);
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7fe f8a2 	bl	80004d8 <strlen>
 8002394:	4603      	mov	r3, r0
 8002396:	b2db      	uxtb	r3, r3
 8002398:	3308      	adds	r3, #8
 800239a:	75fb      	strb	r3, [r7, #23]
	snprintf(buffer, length, "%03d/%03d%s", course, speed, comment);
 800239c:	7df9      	ldrb	r1, [r7, #23]
 800239e:	8978      	ldrh	r0, [r7, #10]
 80023a0:	893b      	ldrh	r3, [r7, #8]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	9201      	str	r2, [sp, #4]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	4a04      	ldr	r2, [pc, #16]	; (80023bc <append_other_data+0x40>)
 80023ac:	68f8      	ldr	r0, [r7, #12]
 80023ae:	f00c f837 	bl	800e420 <sniprintf>
}
 80023b2:	bf00      	nop
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	08010b54 	.word	0x08010b54

080023c0 <append_frame_check>:

//Calculates and appends the CRC frame checker. Follows the CRC-16 CCITT standard.
static void append_frame_check(uint8_t * buffer, uint8_t buffer_length){
 80023c0:	b480      	push	{r7}
 80023c2:	b087      	sub	sp, #28
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	460b      	mov	r3, r1
 80023ca:	70fb      	strb	r3, [r7, #3]

	uint16_t crc = 0xFFFF;
 80023cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d0:	82fb      	strh	r3, [r7, #22]

	//Loop through each *bit* in the buffer. Only start after the starting flags.
	for (uint8_t index = 150; index < buffer_length; index++){
 80023d2:	2396      	movs	r3, #150	; 0x96
 80023d4:	757b      	strb	r3, [r7, #21]
 80023d6:	e02f      	b.n	8002438 <append_frame_check+0x78>

		uint8_t byte = buffer[index];
 80023d8:	7d7b      	ldrb	r3, [r7, #21]
 80023da:	687a      	ldr	r2, [r7, #4]
 80023dc:	4413      	add	r3, r2
 80023de:	781b      	ldrb	r3, [r3, #0]
 80023e0:	747b      	strb	r3, [r7, #17]

		for (uint8_t bit_index = 0; bit_index < 8; bit_index++){
 80023e2:	2300      	movs	r3, #0
 80023e4:	753b      	strb	r3, [r7, #20]
 80023e6:	e021      	b.n	800242c <append_frame_check+0x6c>

			bool bit = (byte >> bit_index) & 0x01;
 80023e8:	7c7a      	ldrb	r2, [r7, #17]
 80023ea:	7d3b      	ldrb	r3, [r7, #20]
 80023ec:	fa42 f303 	asr.w	r3, r2, r3
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	bf14      	ite	ne
 80023f8:	2301      	movne	r3, #1
 80023fa:	2300      	moveq	r3, #0
 80023fc:	743b      	strb	r3, [r7, #16]

			//Bit magic for the CRC
			unsigned short xorIn;
			xorIn = crc ^ bit;
 80023fe:	7c3b      	ldrb	r3, [r7, #16]
 8002400:	b29a      	uxth	r2, r3
 8002402:	8afb      	ldrh	r3, [r7, #22]
 8002404:	4053      	eors	r3, r2
 8002406:	81fb      	strh	r3, [r7, #14]

			crc >>= 1;
 8002408:	8afb      	ldrh	r3, [r7, #22]
 800240a:	085b      	lsrs	r3, r3, #1
 800240c:	82fb      	strh	r3, [r7, #22]

			if (xorIn & 0x01) crc ^= 0x8408;
 800240e:	89fb      	ldrh	r3, [r7, #14]
 8002410:	f003 0301 	and.w	r3, r3, #1
 8002414:	2b00      	cmp	r3, #0
 8002416:	d006      	beq.n	8002426 <append_frame_check+0x66>
 8002418:	8afb      	ldrh	r3, [r7, #22]
 800241a:	f483 43f7 	eor.w	r3, r3, #31616	; 0x7b80
 800241e:	f083 0377 	eor.w	r3, r3, #119	; 0x77
 8002422:	43db      	mvns	r3, r3
 8002424:	82fb      	strh	r3, [r7, #22]
		for (uint8_t bit_index = 0; bit_index < 8; bit_index++){
 8002426:	7d3b      	ldrb	r3, [r7, #20]
 8002428:	3301      	adds	r3, #1
 800242a:	753b      	strb	r3, [r7, #20]
 800242c:	7d3b      	ldrb	r3, [r7, #20]
 800242e:	2b07      	cmp	r3, #7
 8002430:	d9da      	bls.n	80023e8 <append_frame_check+0x28>
	for (uint8_t index = 150; index < buffer_length; index++){
 8002432:	7d7b      	ldrb	r3, [r7, #21]
 8002434:	3301      	adds	r3, #1
 8002436:	757b      	strb	r3, [r7, #21]
 8002438:	7d7a      	ldrb	r2, [r7, #21]
 800243a:	78fb      	ldrb	r3, [r7, #3]
 800243c:	429a      	cmp	r2, r3
 800243e:	d3cb      	bcc.n	80023d8 <append_frame_check+0x18>

		}
	}

	uint8_t crc_lo = (crc & 0xFF) ^ 0xFF;
 8002440:	8afb      	ldrh	r3, [r7, #22]
 8002442:	b2db      	uxtb	r3, r3
 8002444:	43db      	mvns	r3, r3
 8002446:	74fb      	strb	r3, [r7, #19]
	uint8_t crc_hi = (crc >> 8) ^ 0xFF;
 8002448:	8afb      	ldrh	r3, [r7, #22]
 800244a:	0a1b      	lsrs	r3, r3, #8
 800244c:	b29b      	uxth	r3, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	43db      	mvns	r3, r3
 8002452:	74bb      	strb	r3, [r7, #18]

	buffer[buffer_length] = crc_lo;
 8002454:	78fb      	ldrb	r3, [r7, #3]
 8002456:	687a      	ldr	r2, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	7cfa      	ldrb	r2, [r7, #19]
 800245c:	701a      	strb	r2, [r3, #0]
	buffer[buffer_length + 1] = crc_hi;
 800245e:	78fb      	ldrb	r3, [r7, #3]
 8002460:	3301      	adds	r3, #1
 8002462:	687a      	ldr	r2, [r7, #4]
 8002464:	4413      	add	r3, r2
 8002466:	7cba      	ldrb	r2, [r7, #18]
 8002468:	701a      	strb	r2, [r3, #0]
}
 800246a:	bf00      	nop
 800246c:	371c      	adds	r7, #28
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
	...

08002478 <aprs_transmit_send_data>:
extern DAC_HandleTypeDef hdac1;
extern TIM_HandleTypeDef htim2;

uint32_t dac_input[APRS_TRANSMIT_NUM_SINE_SAMPLES];

bool aprs_transmit_send_data(uint8_t * packet_data, uint16_t packet_length){
 8002478:	b580      	push	{r7, lr}
 800247a:	b092      	sub	sp, #72	; 0x48
 800247c:	af04      	add	r7, sp, #16
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	460b      	mov	r3, r1
 8002482:	807b      	strh	r3, [r7, #2]

	calcSineValues();
 8002484:	f000 f8c4 	bl	8002610 <calcSineValues>

	//Timer variables for transmitting bits
	TX_TIMER bit_timer;

	//Start our DAC and our timer to trigger the conversion edges
	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, dac_input, APRS_TRANSMIT_NUM_SINE_SAMPLES, DAC_ALIGN_8B_R);
 8002488:	2308      	movs	r3, #8
 800248a:	9300      	str	r3, [sp, #0]
 800248c:	2364      	movs	r3, #100	; 0x64
 800248e:	4a24      	ldr	r2, [pc, #144]	; (8002520 <aprs_transmit_send_data+0xa8>)
 8002490:	2100      	movs	r1, #0
 8002492:	4824      	ldr	r0, [pc, #144]	; (8002524 <aprs_transmit_send_data+0xac>)
 8002494:	f001 fe90 	bl	80041b8 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start(&htim2);
 8002498:	4823      	ldr	r0, [pc, #140]	; (8002528 <aprs_transmit_send_data+0xb0>)
 800249a:	f008 fab5 	bl	800aa08 <HAL_TIM_Base_Start>

	//Loop through each byte
	for (int byte_index = 0; byte_index < packet_length; byte_index++){
 800249e:	2300      	movs	r3, #0
 80024a0:	637b      	str	r3, [r7, #52]	; 0x34
 80024a2:	e026      	b.n	80024f2 <aprs_transmit_send_data+0x7a>

		//Set complete flag to false so we can poll it later
		byte_complete_flag = false;
 80024a4:	4b21      	ldr	r3, [pc, #132]	; (800252c <aprs_transmit_send_data+0xb4>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]

		//Create a timer to control the transmission of each bit. We pass in the current byte as an input to the timer so it can iterate over it bit by bit.
		tx_timer_create(&bit_timer, "APRS Transmit Bit Timer", aprs_transmit_bit_timer_entry, packet_data[byte_index], APRS_TRANSMIT_BIT_TIME, APRS_TRANSMIT_BIT_TIME, TX_AUTO_ACTIVATE);
 80024aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	461a      	mov	r2, r3
 80024b4:	f107 0008 	add.w	r0, r7, #8
 80024b8:	232c      	movs	r3, #44	; 0x2c
 80024ba:	9303      	str	r3, [sp, #12]
 80024bc:	2301      	movs	r3, #1
 80024be:	9302      	str	r3, [sp, #8]
 80024c0:	2311      	movs	r3, #17
 80024c2:	9301      	str	r3, [sp, #4]
 80024c4:	2311      	movs	r3, #17
 80024c6:	9300      	str	r3, [sp, #0]
 80024c8:	4613      	mov	r3, r2
 80024ca:	4a19      	ldr	r2, [pc, #100]	; (8002530 <aprs_transmit_send_data+0xb8>)
 80024cc:	4919      	ldr	r1, [pc, #100]	; (8002534 <aprs_transmit_send_data+0xbc>)
 80024ce:	f00b fce1 	bl	800de94 <_txe_timer_create>

		//Poll for completion of the byte
		while (!byte_complete_flag);
 80024d2:	bf00      	nop
 80024d4:	4b15      	ldr	r3, [pc, #84]	; (800252c <aprs_transmit_send_data+0xb4>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	f083 0301 	eor.w	r3, r3, #1
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d1f8      	bne.n	80024d4 <aprs_transmit_send_data+0x5c>


		//Delete the timer so we can recreate it later with the next byte as an input
		tx_timer_delete(&bit_timer);
 80024e2:	f107 0308 	add.w	r3, r7, #8
 80024e6:	4618      	mov	r0, r3
 80024e8:	f00b fd80 	bl	800dfec <_txe_timer_delete>
	for (int byte_index = 0; byte_index < packet_length; byte_index++){
 80024ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024ee:	3301      	adds	r3, #1
 80024f0:	637b      	str	r3, [r7, #52]	; 0x34
 80024f2:	887b      	ldrh	r3, [r7, #2]
 80024f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80024f6:	429a      	cmp	r2, r3
 80024f8:	dbd4      	blt.n	80024a4 <aprs_transmit_send_data+0x2c>
	}

	//Stop DAC and timer
	HAL_DAC_Stop_DMA(&hdac1, DAC_CHANNEL_1);
 80024fa:	2100      	movs	r1, #0
 80024fc:	4809      	ldr	r0, [pc, #36]	; (8002524 <aprs_transmit_send_data+0xac>)
 80024fe:	f002 f811 	bl	8004524 <HAL_DAC_Stop_DMA>
	HAL_TIM_Base_Stop(&htim2);
 8002502:	4809      	ldr	r0, [pc, #36]	; (8002528 <aprs_transmit_send_data+0xb0>)
 8002504:	f008 fb18 	bl	800ab38 <HAL_TIM_Base_Stop>

	//Reset the timer period for the next transmission
	MX_TIM2_Fake_Init(APRS_TRANSMIT_PERIOD_2400HZ);
 8002508:	202d      	movs	r0, #45	; 0x2d
 800250a:	f000 ffbf 	bl	800348c <MX_TIM2_Fake_Init>
	is_1200_hz = false;
 800250e:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <aprs_transmit_send_data+0xc0>)
 8002510:	2200      	movs	r2, #0
 8002512:	701a      	strb	r2, [r3, #0]

	return true;
 8002514:	2301      	movs	r3, #1
}
 8002516:	4618      	mov	r0, r3
 8002518:	3738      	adds	r7, #56	; 0x38
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
 800251e:	bf00      	nop
 8002520:	200050c8 	.word	0x200050c8
 8002524:	20005b0c 	.word	0x20005b0c
 8002528:	20005c04 	.word	0x20005c04
 800252c:	200050c4 	.word	0x200050c4
 8002530:	0800253d 	.word	0x0800253d
 8002534:	08010b60 	.word	0x08010b60
 8002538:	200050c5 	.word	0x200050c5

0800253c <aprs_transmit_bit_timer_entry>:

void aprs_transmit_bit_timer_entry(ULONG bit_timer_input){
 800253c:	b580      	push	{r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
 8002542:	6078      	str	r0, [r7, #4]
	static uint8_t bit_index = 0;
	static uint8_t bit_stuff_counter = 0;
	static bool is_stuffed_bit = false;

	//Current byte we will iterate over
	uint8_t current_byte = (uint8_t) bit_timer_input;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	73fb      	strb	r3, [r7, #15]

	if (bit_stuff_counter >= 5){
 8002548:	4b2c      	ldr	r3, [pc, #176]	; (80025fc <aprs_transmit_bit_timer_entry+0xc0>)
 800254a:	781b      	ldrb	r3, [r3, #0]
 800254c:	2b04      	cmp	r3, #4
 800254e:	d902      	bls.n	8002556 <aprs_transmit_bit_timer_entry+0x1a>
		is_stuffed_bit = true;
 8002550:	4b2b      	ldr	r3, [pc, #172]	; (8002600 <aprs_transmit_bit_timer_entry+0xc4>)
 8002552:	2201      	movs	r2, #1
 8002554:	701a      	strb	r2, [r3, #0]
	}

	//Check if the current bit is 0
	if (!aprs_transmit_read_bit(current_byte, bit_index) || is_stuffed_bit){
 8002556:	7bfb      	ldrb	r3, [r7, #15]
 8002558:	4a2a      	ldr	r2, [pc, #168]	; (8002604 <aprs_transmit_bit_timer_entry+0xc8>)
 800255a:	7812      	ldrb	r2, [r2, #0]
 800255c:	4113      	asrs	r3, r2
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <aprs_transmit_bit_timer_entry+0x32>
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <aprs_transmit_bit_timer_entry+0xc4>)
 8002568:	781b      	ldrb	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d01e      	beq.n	80025ac <aprs_transmit_bit_timer_entry+0x70>

		//Since the bit is 0, switch the frequency
		uint8_t newPeriod = (is_1200_hz) ? (APRS_TRANSMIT_PERIOD_2400HZ) : (APRS_TRANSMIT_PERIOD_1200HZ);
 800256e:	4b26      	ldr	r3, [pc, #152]	; (8002608 <aprs_transmit_bit_timer_entry+0xcc>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d001      	beq.n	800257a <aprs_transmit_bit_timer_entry+0x3e>
 8002576:	232d      	movs	r3, #45	; 0x2d
 8002578:	e000      	b.n	800257c <aprs_transmit_bit_timer_entry+0x40>
 800257a:	2354      	movs	r3, #84	; 0x54
 800257c:	73bb      	strb	r3, [r7, #14]
		is_1200_hz = !is_1200_hz;
 800257e:	4b22      	ldr	r3, [pc, #136]	; (8002608 <aprs_transmit_bit_timer_entry+0xcc>)
 8002580:	781b      	ldrb	r3, [r3, #0]
 8002582:	2b00      	cmp	r3, #0
 8002584:	bf14      	ite	ne
 8002586:	2301      	movne	r3, #1
 8002588:	2300      	moveq	r3, #0
 800258a:	b2db      	uxtb	r3, r3
 800258c:	f083 0301 	eor.w	r3, r3, #1
 8002590:	b2db      	uxtb	r3, r3
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	b2da      	uxtb	r2, r3
 8002598:	4b1b      	ldr	r3, [pc, #108]	; (8002608 <aprs_transmit_bit_timer_entry+0xcc>)
 800259a:	701a      	strb	r2, [r3, #0]

		//Use fake init function to re-initialize the timer with a new period
		MX_TIM2_Fake_Init(newPeriod);
 800259c:	7bbb      	ldrb	r3, [r7, #14]
 800259e:	4618      	mov	r0, r3
 80025a0:	f000 ff74 	bl	800348c <MX_TIM2_Fake_Init>
		bit_stuff_counter = 0;
 80025a4:	4b15      	ldr	r3, [pc, #84]	; (80025fc <aprs_transmit_bit_timer_entry+0xc0>)
 80025a6:	2200      	movs	r2, #0
 80025a8:	701a      	strb	r2, [r3, #0]
	if (!aprs_transmit_read_bit(current_byte, bit_index) || is_stuffed_bit){
 80025aa:	e008      	b.n	80025be <aprs_transmit_bit_timer_entry+0x82>

	} else if (current_byte != 0x7E){
 80025ac:	7bfb      	ldrb	r3, [r7, #15]
 80025ae:	2b7e      	cmp	r3, #126	; 0x7e
 80025b0:	d005      	beq.n	80025be <aprs_transmit_bit_timer_entry+0x82>
		bit_stuff_counter++;
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <aprs_transmit_bit_timer_entry+0xc0>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	3301      	adds	r3, #1
 80025b8:	b2da      	uxtb	r2, r3
 80025ba:	4b10      	ldr	r3, [pc, #64]	; (80025fc <aprs_transmit_bit_timer_entry+0xc0>)
 80025bc:	701a      	strb	r2, [r3, #0]
	}


	if (!is_stuffed_bit){
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <aprs_transmit_bit_timer_entry+0xc4>)
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	f083 0301 	eor.w	r3, r3, #1
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d006      	beq.n	80025da <aprs_transmit_bit_timer_entry+0x9e>
		//increment bit index
		bit_index++;
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <aprs_transmit_bit_timer_entry+0xc8>)
 80025ce:	781b      	ldrb	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	b2da      	uxtb	r2, r3
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <aprs_transmit_bit_timer_entry+0xc8>)
 80025d6:	701a      	strb	r2, [r3, #0]
 80025d8:	e002      	b.n	80025e0 <aprs_transmit_bit_timer_entry+0xa4>
	}else {
		is_stuffed_bit = false;
 80025da:	4b09      	ldr	r3, [pc, #36]	; (8002600 <aprs_transmit_bit_timer_entry+0xc4>)
 80025dc:	2200      	movs	r2, #0
 80025de:	701a      	strb	r2, [r3, #0]
	}

	//If we've iterated through all bits, set flag and reset index counter
	if (bit_index >= BITS_PER_BYTE){
 80025e0:	4b08      	ldr	r3, [pc, #32]	; (8002604 <aprs_transmit_bit_timer_entry+0xc8>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	2b07      	cmp	r3, #7
 80025e6:	d905      	bls.n	80025f4 <aprs_transmit_bit_timer_entry+0xb8>
		byte_complete_flag = true;
 80025e8:	4b08      	ldr	r3, [pc, #32]	; (800260c <aprs_transmit_bit_timer_entry+0xd0>)
 80025ea:	2201      	movs	r2, #1
 80025ec:	701a      	strb	r2, [r3, #0]
		bit_index = 0;
 80025ee:	4b05      	ldr	r3, [pc, #20]	; (8002604 <aprs_transmit_bit_timer_entry+0xc8>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	701a      	strb	r2, [r3, #0]
	}
}
 80025f4:	bf00      	nop
 80025f6:	3710      	adds	r7, #16
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	20005258 	.word	0x20005258
 8002600:	20005259 	.word	0x20005259
 8002604:	2000525a 	.word	0x2000525a
 8002608:	200050c5 	.word	0x200050c5
 800260c:	200050c4 	.word	0x200050c4

08002610 <calcSineValues>:

//Calculates an array of digital values to pass into the DAC in order to generate a sine wave.
static void calcSineValues(){
 8002610:	b590      	push	{r4, r7, lr}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0

	for (uint8_t i = 0; i < APRS_TRANSMIT_NUM_SINE_SAMPLES; i++){
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]
 800261a:	e043      	b.n	80026a4 <calcSineValues+0x94>

		//Formula taken from STM32 documentation online on sine wave generation.
		//Generates a sine wave with a min of 0V and a max of the reference voltage.
		dac_input[i] = ((sin(i * 2 * PI/APRS_TRANSMIT_NUM_SINE_SAMPLES) + 1) * (43)) + 170;
 800261c:	79fb      	ldrb	r3, [r7, #7]
 800261e:	005b      	lsls	r3, r3, #1
 8002620:	4618      	mov	r0, r3
 8002622:	f7fe f8b3 	bl	800078c <__aeabi_i2d>
 8002626:	a329      	add	r3, pc, #164	; (adr r3, 80026cc <calcSineValues+0xbc>)
 8002628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800262c:	f7fe f918 	bl	8000860 <__aeabi_dmul>
 8002630:	4602      	mov	r2, r0
 8002632:	460b      	mov	r3, r1
 8002634:	4610      	mov	r0, r2
 8002636:	4619      	mov	r1, r3
 8002638:	f04f 0200 	mov.w	r2, #0
 800263c:	4b1e      	ldr	r3, [pc, #120]	; (80026b8 <calcSineValues+0xa8>)
 800263e:	f7fe fa39 	bl	8000ab4 <__aeabi_ddiv>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	ec43 2b17 	vmov	d7, r2, r3
 800264a:	eeb0 0a47 	vmov.f32	s0, s14
 800264e:	eef0 0a67 	vmov.f32	s1, s15
 8002652:	f00d f991 	bl	800f978 <sin>
 8002656:	ec51 0b10 	vmov	r0, r1, d0
 800265a:	f04f 0200 	mov.w	r2, #0
 800265e:	4b17      	ldr	r3, [pc, #92]	; (80026bc <calcSineValues+0xac>)
 8002660:	f7fd ff48 	bl	80004f4 <__adddf3>
 8002664:	4602      	mov	r2, r0
 8002666:	460b      	mov	r3, r1
 8002668:	4610      	mov	r0, r2
 800266a:	4619      	mov	r1, r3
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <calcSineValues+0xb0>)
 8002672:	f7fe f8f5 	bl	8000860 <__aeabi_dmul>
 8002676:	4602      	mov	r2, r0
 8002678:	460b      	mov	r3, r1
 800267a:	4610      	mov	r0, r2
 800267c:	4619      	mov	r1, r3
 800267e:	f04f 0200 	mov.w	r2, #0
 8002682:	4b10      	ldr	r3, [pc, #64]	; (80026c4 <calcSineValues+0xb4>)
 8002684:	f7fd ff36 	bl	80004f4 <__adddf3>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	79fc      	ldrb	r4, [r7, #7]
 800268e:	4610      	mov	r0, r2
 8002690:	4619      	mov	r1, r3
 8002692:	f7fe fba7 	bl	8000de4 <__aeabi_d2uiz>
 8002696:	4603      	mov	r3, r0
 8002698:	4a0b      	ldr	r2, [pc, #44]	; (80026c8 <calcSineValues+0xb8>)
 800269a:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	for (uint8_t i = 0; i < APRS_TRANSMIT_NUM_SINE_SAMPLES; i++){
 800269e:	79fb      	ldrb	r3, [r7, #7]
 80026a0:	3301      	adds	r3, #1
 80026a2:	71fb      	strb	r3, [r7, #7]
 80026a4:	79fb      	ldrb	r3, [r7, #7]
 80026a6:	2b63      	cmp	r3, #99	; 0x63
 80026a8:	d9b8      	bls.n	800261c <calcSineValues+0xc>
	}
}
 80026aa:	bf00      	nop
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}
 80026b4:	f3af 8000 	nop.w
 80026b8:	40590000 	.word	0x40590000
 80026bc:	3ff00000 	.word	0x3ff00000
 80026c0:	40458000 	.word	0x40458000
 80026c4:	40654000 	.word	0x40654000
 80026c8:	200050c8 	.word	0x200050c8
 80026cc:	fc8b007a 	.word	0xfc8b007a
 80026d0:	400921fa 	.word	0x400921fa

080026d4 <minmea_tocoord>:

/**
 * Convert a raw coordinate to a floating point DD.DDD... value.
 * Returns NaN for "unknown" values.
 */
static inline float minmea_tocoord(const struct minmea_float *f) {
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
    if (f->scale == 0) return NAN;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d102      	bne.n	80026ea <minmea_tocoord+0x16>
 80026e4:	eddf 7a24 	vldr	s15, [pc, #144]	; 8002778 <minmea_tocoord+0xa4>
 80026e8:	e03e      	b.n	8002768 <minmea_tocoord+0x94>
    if (f->scale > (INT_LEAST32_MAX / 100)) return NAN;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	4a23      	ldr	r2, [pc, #140]	; (800277c <minmea_tocoord+0xa8>)
 80026f0:	4293      	cmp	r3, r2
 80026f2:	dd02      	ble.n	80026fa <minmea_tocoord+0x26>
 80026f4:	eddf 7a20 	vldr	s15, [pc, #128]	; 8002778 <minmea_tocoord+0xa4>
 80026f8:	e036      	b.n	8002768 <minmea_tocoord+0x94>
    if (f->scale < (INT_LEAST32_MIN / 100)) return NAN;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	685b      	ldr	r3, [r3, #4]
 80026fe:	4a20      	ldr	r2, [pc, #128]	; (8002780 <minmea_tocoord+0xac>)
 8002700:	4293      	cmp	r3, r2
 8002702:	da02      	bge.n	800270a <minmea_tocoord+0x36>
 8002704:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8002778 <minmea_tocoord+0xa4>
 8002708:	e02e      	b.n	8002768 <minmea_tocoord+0x94>
    int_least32_t degrees = f->value / (f->scale * 100);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	2164      	movs	r1, #100	; 0x64
 8002714:	fb01 f303 	mul.w	r3, r1, r3
 8002718:	fb92 f3f3 	sdiv	r3, r2, r3
 800271c:	60fb      	str	r3, [r7, #12]
    int_least32_t minutes = f->value % (f->scale * 100);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6852      	ldr	r2, [r2, #4]
 8002726:	2164      	movs	r1, #100	; 0x64
 8002728:	fb01 f202 	mul.w	r2, r1, r2
 800272c:	fb93 f1f2 	sdiv	r1, r3, r2
 8002730:	fb01 f202 	mul.w	r2, r1, r2
 8002734:	1a9b      	subs	r3, r3, r2
 8002736:	60bb      	str	r3, [r7, #8]
    return (float)degrees + (float)minutes / (60 * f->scale);
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	ee07 3a90 	vmov	s15, r3
 800273e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	ee07 3a90 	vmov	s15, r3
 8002748:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685a      	ldr	r2, [r3, #4]
 8002750:	4613      	mov	r3, r2
 8002752:	011b      	lsls	r3, r3, #4
 8002754:	1a9b      	subs	r3, r3, r2
 8002756:	009b      	lsls	r3, r3, #2
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002760:	eec6 7a26 	vdiv.f32	s15, s12, s13
 8002764:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8002768:	eeb0 0a67 	vmov.f32	s0, s15
 800276c:	3714      	adds	r7, #20
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	7fc00000 	.word	0x7fc00000
 800277c:	0147ae14 	.word	0x0147ae14
 8002780:	feb851ec 	.word	0xfeb851ec

08002784 <initialize_gps>:
#include <string.h>

//For parsing GPS outputs
static void parse_gps_output(GPS_HandleTypeDef* gps, uint8_t* buffer, uint8_t buffer_length);

HAL_StatusTypeDef initialize_gps(UART_HandleTypeDef* huart, GPS_HandleTypeDef* gps){
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	6039      	str	r1, [r7, #0]

	gps->huart = huart;
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	601a      	str	r2, [r3, #0]

	//TODO: Other initialization like configuring GPS output types or other parameter setting.

	return HAL_OK;
 8002794:	2300      	movs	r3, #0
}
 8002796:	4618      	mov	r0, r3
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <read_gps_data>:


bool read_gps_data(GPS_HandleTypeDef* gps){
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b0c4      	sub	sp, #272	; 0x110
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ac:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027b0:	6018      	str	r0, [r3, #0]

	uint8_t receive_buffer[256] = {0};
 80027b2:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027b6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]
 80027be:	3304      	adds	r3, #4
 80027c0:	22fc      	movs	r2, #252	; 0xfc
 80027c2:	2100      	movs	r1, #0
 80027c4:	4618      	mov	r0, r3
 80027c6:	f00b fde4 	bl	800e392 <memset>

		gps->is_pos_locked = true;

		return true;
	}
	HAL_UART_Receive(gps->huart, receive_buffer, 1, GPS_UART_TIMEOUT);
 80027ca:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027ce:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	6818      	ldr	r0, [r3, #0]
 80027d6:	f107 010c 	add.w	r1, r7, #12
 80027da:	f241 3388 	movw	r3, #5000	; 0x1388
 80027de:	2201      	movs	r2, #1
 80027e0:	f009 f8a8 	bl	800b934 <HAL_UART_Receive>

	if (receive_buffer[0] == GPS_PACKET_START_CHAR){
 80027e4:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80027e8:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80027ec:	781b      	ldrb	r3, [r3, #0]
 80027ee:	2b24      	cmp	r3, #36	; 0x24
 80027f0:	d130      	bne.n	8002854 <read_gps_data+0xb2>

		uint8_t read_index = 0;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f

		while (receive_buffer[read_index] != GPS_PACKET_END_CHAR){
 80027f8:	e014      	b.n	8002824 <read_gps_data+0x82>
			read_index++;
 80027fa:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80027fe:	3301      	adds	r3, #1
 8002800:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
			HAL_UART_Receive(gps->huart, &receive_buffer[read_index], 1, GPS_UART_TIMEOUT);
 8002804:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002808:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6818      	ldr	r0, [r3, #0]
 8002810:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002814:	f107 020c 	add.w	r2, r7, #12
 8002818:	18d1      	adds	r1, r2, r3
 800281a:	f241 3388 	movw	r3, #5000	; 0x1388
 800281e:	2201      	movs	r2, #1
 8002820:	f009 f888 	bl	800b934 <HAL_UART_Receive>
		while (receive_buffer[read_index] != GPS_PACKET_END_CHAR){
 8002824:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8002828:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800282c:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 8002830:	5cd3      	ldrb	r3, [r2, r3]
 8002832:	2b0d      	cmp	r3, #13
 8002834:	d1e1      	bne.n	80027fa <read_gps_data+0x58>
		}
		parse_gps_output(gps, receive_buffer, read_index + 1);
 8002836:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800283a:	3301      	adds	r3, #1
 800283c:	b2da      	uxtb	r2, r3
 800283e:	f107 010c 	add.w	r1, r7, #12
 8002842:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002846:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800284a:	6818      	ldr	r0, [r3, #0]
 800284c:	f000 f808 	bl	8002860 <parse_gps_output>

		return true;
 8002850:	2301      	movs	r3, #1
 8002852:	e000      	b.n	8002856 <read_gps_data+0xb4>
	}

	return false;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	f507 7788 	add.w	r7, r7, #272	; 0x110
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <parse_gps_output>:

static void parse_gps_output(GPS_HandleTypeDef* gps, uint8_t* buffer, uint8_t buffer_length){
 8002860:	b580      	push	{r7, lr}
 8002862:	b0a2      	sub	sp, #136	; 0x88
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	4613      	mov	r3, r2
 800286c:	71fb      	strb	r3, [r7, #7]

	enum minmea_sentence_id sentence_id = minmea_sentence_id(buffer, false);
 800286e:	2100      	movs	r1, #0
 8002870:	68b8      	ldr	r0, [r7, #8]
 8002872:	f7ff f929 	bl	8001ac8 <minmea_sentence_id>
 8002876:	4603      	mov	r3, r0
 8002878:	f887 3087 	strb.w	r3, [r7, #135]	; 0x87

	float lat;
	float lon;

	switch (sentence_id) {
 800287c:	f997 3087 	ldrsb.w	r3, [r7, #135]	; 0x87
 8002880:	2b07      	cmp	r3, #7
 8002882:	d008      	beq.n	8002896 <parse_gps_output+0x36>
 8002884:	2b07      	cmp	r3, #7
 8002886:	f300 8133 	bgt.w	8002af0 <parse_gps_output+0x290>
 800288a:	2b02      	cmp	r3, #2
 800288c:	f000 80cc 	beq.w	8002a28 <parse_gps_output+0x1c8>
 8002890:	2b03      	cmp	r3, #3
 8002892:	d065      	beq.n	8002960 <parse_gps_output+0x100>

		break;
	}
	default:

		break;
 8002894:	e12c      	b.n	8002af0 <parse_gps_output+0x290>
		if (minmea_parse_rmc(&frame, buffer)){
 8002896:	f107 0314 	add.w	r3, r7, #20
 800289a:	68b9      	ldr	r1, [r7, #8]
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f9bd 	bl	8001c1c <minmea_parse_rmc>
 80028a2:	4603      	mov	r3, r0
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	f000 8125 	beq.w	8002af4 <parse_gps_output+0x294>
			lat = minmea_tocoord(&frame.latitude);
 80028aa:	f107 0314 	add.w	r3, r7, #20
 80028ae:	3314      	adds	r3, #20
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff ff0f 	bl	80026d4 <minmea_tocoord>
 80028b6:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			lon = minmea_tocoord(&frame.longitude);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	331c      	adds	r3, #28
 80028c0:	4618      	mov	r0, r3
 80028c2:	f7ff ff07 	bl	80026d4 <minmea_tocoord>
 80028c6:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			if (isnan(lat) || isnan(lon)){
 80028ca:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 80028ce:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 80028d2:	eeb4 7a67 	vcmp.f32	s14, s15
 80028d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028da:	d608      	bvs.n	80028ee <parse_gps_output+0x8e>
 80028dc:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80028e0:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80028e4:	eeb4 7a67 	vcmp.f32	s14, s15
 80028e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ec:	d70a      	bvc.n	8002904 <parse_gps_output+0xa4>
				gps->data[GPS_RMC].latitude = DEFAULT_LAT;
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	4a85      	ldr	r2, [pc, #532]	; (8002b08 <parse_gps_output+0x2a8>)
 80028f2:	651a      	str	r2, [r3, #80]	; 0x50
				gps->data[GPS_RMC].longitude = DEFAULT_LON;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	4a85      	ldr	r2, [pc, #532]	; (8002b0c <parse_gps_output+0x2ac>)
 80028f8:	655a      	str	r2, [r3, #84]	; 0x54
				gps->data[GPS_RMC].is_valid_data = false;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2200      	movs	r2, #0
 80028fe:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
		break;
 8002902:	e0f7      	b.n	8002af4 <parse_gps_output+0x294>
				gps->data[GPS_RMC].latitude = lat;
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800290a:	651a      	str	r2, [r3, #80]	; 0x50
				gps->data[GPS_RMC].longitude = lon;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002910:	655a      	str	r2, [r3, #84]	; 0x54
				gps->data[GPS_RMC].is_valid_data = true;
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	2201      	movs	r2, #1
 8002916:	f883 2063 	strb.w	r2, [r3, #99]	; 0x63
				gps->data[GPS_RMC].is_dominica = is_in_dominica(lat, lon);
 800291a:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 800291e:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 8002922:	f000 f961 	bl	8002be8 <is_in_dominica>
 8002926:	4603      	mov	r3, r0
 8002928:	461a      	mov	r2, r3
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
				gps->is_pos_locked = true;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	711a      	strb	r2, [r3, #4]
				uint16_t time_temp[3] = {frame.time.hours, frame.time.minutes, frame.time.seconds};
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	b29b      	uxth	r3, r3
 800293a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	b29b      	uxth	r3, r3
 8002942:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	b29b      	uxth	r3, r3
 800294a:	f8a7 3078 	strh.w	r3, [r7, #120]	; 0x78
				memcpy(gps->data[GPS_RMC].timestamp, time_temp, 3);
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	335c      	adds	r3, #92	; 0x5c
 8002952:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8002956:	2203      	movs	r2, #3
 8002958:	4618      	mov	r0, r3
 800295a:	f00b fd0d 	bl	800e378 <memcpy>
		break;
 800295e:	e0c9      	b.n	8002af4 <parse_gps_output+0x294>
		if (minmea_parse_gll(&frame, buffer)){
 8002960:	f107 0314 	add.w	r3, r7, #20
 8002964:	68b9      	ldr	r1, [r7, #8]
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff fa24 	bl	8001db4 <minmea_parse_gll>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	f000 80c2 	beq.w	8002af8 <parse_gps_output+0x298>
			lat = minmea_tocoord(&frame.latitude);
 8002974:	f107 0314 	add.w	r3, r7, #20
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff feab 	bl	80026d4 <minmea_tocoord>
 800297e:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			lon = minmea_tocoord(&frame.longitude);
 8002982:	f107 0314 	add.w	r3, r7, #20
 8002986:	3308      	adds	r3, #8
 8002988:	4618      	mov	r0, r3
 800298a:	f7ff fea3 	bl	80026d4 <minmea_tocoord>
 800298e:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			if (isnan(lat) || isnan(lon)){
 8002992:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002996:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800299a:	eeb4 7a67 	vcmp.f32	s14, s15
 800299e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029a2:	d608      	bvs.n	80029b6 <parse_gps_output+0x156>
 80029a4:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 80029a8:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 80029ac:	eeb4 7a67 	vcmp.f32	s14, s15
 80029b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029b4:	d70a      	bvc.n	80029cc <parse_gps_output+0x16c>
				gps->data[GPS_GLL].latitude = DEFAULT_LAT;
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	4a53      	ldr	r2, [pc, #332]	; (8002b08 <parse_gps_output+0x2a8>)
 80029ba:	621a      	str	r2, [r3, #32]
				gps->data[GPS_GLL].longitude = DEFAULT_LON;
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	4a53      	ldr	r2, [pc, #332]	; (8002b0c <parse_gps_output+0x2ac>)
 80029c0:	625a      	str	r2, [r3, #36]	; 0x24
				gps->data[GPS_GLL].is_valid_data = false;
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2200      	movs	r2, #0
 80029c6:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
		break;
 80029ca:	e095      	b.n	8002af8 <parse_gps_output+0x298>
				gps->data[GPS_GLL].latitude = lat;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80029d2:	621a      	str	r2, [r3, #32]
				gps->data[GPS_GLL].longitude = lon;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80029d8:	625a      	str	r2, [r3, #36]	; 0x24
				gps->data[GPS_GLL].is_valid_data = true;
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	2201      	movs	r2, #1
 80029de:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
				gps->data[GPS_GLL].is_dominica = is_in_dominica(lat, lon);
 80029e2:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 80029e6:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 80029ea:	f000 f8fd 	bl	8002be8 <is_in_dominica>
 80029ee:	4603      	mov	r3, r0
 80029f0:	461a      	mov	r2, r3
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
				gps->is_pos_locked = true;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2201      	movs	r2, #1
 80029fc:	711a      	strb	r2, [r3, #4]
				uint16_t time_temp[3] = {frame.time.hours, frame.time.minutes, frame.time.seconds};
 80029fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	b29b      	uxth	r3, r3
 8002a0a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8002a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a10:	b29b      	uxth	r3, r3
 8002a12:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
				memcpy(gps->data[GPS_GLL].timestamp, time_temp, 3);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	332c      	adds	r3, #44	; 0x2c
 8002a1a:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8002a1e:	2203      	movs	r2, #3
 8002a20:	4618      	mov	r0, r3
 8002a22:	f00b fca9 	bl	800e378 <memcpy>
		break;
 8002a26:	e067      	b.n	8002af8 <parse_gps_output+0x298>
		if (minmea_parse_gga(&frame, buffer)){
 8002a28:	f107 0314 	add.w	r3, r7, #20
 8002a2c:	68b9      	ldr	r1, [r7, #8]
 8002a2e:	4618      	mov	r0, r3
 8002a30:	f7ff f95c 	bl	8001cec <minmea_parse_gga>
 8002a34:	4603      	mov	r3, r0
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d060      	beq.n	8002afc <parse_gps_output+0x29c>
			lat = minmea_tocoord(&frame.latitude);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	3310      	adds	r3, #16
 8002a40:	4618      	mov	r0, r3
 8002a42:	f7ff fe47 	bl	80026d4 <minmea_tocoord>
 8002a46:	ed87 0a20 	vstr	s0, [r7, #128]	; 0x80
			lon = minmea_tocoord(&frame.longitude);
 8002a4a:	f107 0314 	add.w	r3, r7, #20
 8002a4e:	3318      	adds	r3, #24
 8002a50:	4618      	mov	r0, r3
 8002a52:	f7ff fe3f 	bl	80026d4 <minmea_tocoord>
 8002a56:	ed87 0a1f 	vstr	s0, [r7, #124]	; 0x7c
			if (isnan(lat) || isnan(lon)){
 8002a5a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 8002a5e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 8002a62:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a6a:	d608      	bvs.n	8002a7e <parse_gps_output+0x21e>
 8002a6c:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8002a70:	edd7 7a1f 	vldr	s15, [r7, #124]	; 0x7c
 8002a74:	eeb4 7a67 	vcmp.f32	s14, s15
 8002a78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7c:	d70a      	bvc.n	8002a94 <parse_gps_output+0x234>
				gps->data[GPS_GGA].latitude = DEFAULT_LAT;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	4a21      	ldr	r2, [pc, #132]	; (8002b08 <parse_gps_output+0x2a8>)
 8002a82:	639a      	str	r2, [r3, #56]	; 0x38
				gps->data[GPS_GGA].longitude = DEFAULT_LON;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	4a21      	ldr	r2, [pc, #132]	; (8002b0c <parse_gps_output+0x2ac>)
 8002a88:	63da      	str	r2, [r3, #60]	; 0x3c
				gps->data[GPS_GGA].is_valid_data = false;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
		break;
 8002a92:	e033      	b.n	8002afc <parse_gps_output+0x29c>
				gps->data[GPS_GGA].latitude = lat;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002a9a:	639a      	str	r2, [r3, #56]	; 0x38
				gps->data[GPS_GGA].longitude = lon;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002aa0:	63da      	str	r2, [r3, #60]	; 0x3c
				gps->data[GPS_GGA].is_valid_data = true;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	2201      	movs	r2, #1
 8002aa6:	f883 204b 	strb.w	r2, [r3, #75]	; 0x4b
				gps->data[GPS_GGA].is_dominica = is_in_dominica(lat, lon);
 8002aaa:	edd7 0a1f 	vldr	s1, [r7, #124]	; 0x7c
 8002aae:	ed97 0a20 	vldr	s0, [r7, #128]	; 0x80
 8002ab2:	f000 f899 	bl	8002be8 <is_in_dominica>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	461a      	mov	r2, r3
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f883 204a 	strb.w	r2, [r3, #74]	; 0x4a
				gps->is_pos_locked = true;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	711a      	strb	r2, [r3, #4]
				uint16_t time_temp[3] = {frame.time.hours, frame.time.minutes, frame.time.seconds};
 8002ac6:	697b      	ldr	r3, [r7, #20]
 8002ac8:	b29b      	uxth	r3, r3
 8002aca:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	b29b      	uxth	r3, r3
 8002ad2:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	b29b      	uxth	r3, r3
 8002ada:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
				memcpy(gps->data[GPS_GGA].timestamp, time_temp, 3);
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	3344      	adds	r3, #68	; 0x44
 8002ae2:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8002ae6:	2203      	movs	r2, #3
 8002ae8:	4618      	mov	r0, r3
 8002aea:	f00b fc45 	bl	800e378 <memcpy>
		break;
 8002aee:	e005      	b.n	8002afc <parse_gps_output+0x29c>
		break;
 8002af0:	bf00      	nop
 8002af2:	e004      	b.n	8002afe <parse_gps_output+0x29e>
		break;
 8002af4:	bf00      	nop
 8002af6:	e002      	b.n	8002afe <parse_gps_output+0x29e>
		break;
 8002af8:	bf00      	nop
 8002afa:	e000      	b.n	8002afe <parse_gps_output+0x29e>
		break;
 8002afc:	bf00      	nop
	}
}
 8002afe:	bf00      	nop
 8002b00:	3788      	adds	r7, #136	; 0x88
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}
 8002b06:	bf00      	nop
 8002b08:	41750573 	.word	0x41750573
 8002b0c:	c27533f8 	.word	0xc27533f8

08002b10 <get_gps_lock>:

bool get_gps_lock(GPS_HandleTypeDef* gps, GPS_Data* gps_data){
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
 8002b18:	6039      	str	r1, [r7, #0]

	gps->is_pos_locked = false;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	711a      	strb	r2, [r3, #4]

	//ensure all valid data flags are false
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8002b20:	2300      	movs	r3, #0
 8002b22:	75fb      	strb	r3, [r7, #23]
 8002b24:	e00d      	b.n	8002b42 <get_gps_lock+0x32>
		gps->data[msg_type].is_valid_data = false;
 8002b26:	7dfb      	ldrb	r3, [r7, #23]
 8002b28:	6879      	ldr	r1, [r7, #4]
 8002b2a:	1c5a      	adds	r2, r3, #1
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	4413      	add	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	440b      	add	r3, r1
 8002b36:	3303      	adds	r3, #3
 8002b38:	2200      	movs	r2, #0
 8002b3a:	701a      	strb	r2, [r3, #0]
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8002b3c:	7dfb      	ldrb	r3, [r7, #23]
 8002b3e:	3301      	adds	r3, #1
 8002b40:	75fb      	strb	r3, [r7, #23]
 8002b42:	7dfb      	ldrb	r3, [r7, #23]
 8002b44:	2b03      	cmp	r3, #3
 8002b46:	d9ee      	bls.n	8002b26 <get_gps_lock+0x16>
	}

	//time trackers for any possible timeouts
	uint32_t start_time = HAL_GetTick();
 8002b48:	f001 f9b8 	bl	8003ebc <HAL_GetTick>
 8002b4c:	60b8      	str	r0, [r7, #8]
	uint32_t current_time = start_time;
 8002b4e:	68bb      	ldr	r3, [r7, #8]
 8002b50:	613b      	str	r3, [r7, #16]

	//Keep trying to read the GPS data until we get a lock, or we timeout
	while (!gps->is_pos_locked && ((current_time - start_time) < GPS_TRY_LOCK_TIMEOUT)){
 8002b52:	e005      	b.n	8002b60 <get_gps_lock+0x50>
		read_gps_data(gps);
 8002b54:	6878      	ldr	r0, [r7, #4]
 8002b56:	f7ff fe24 	bl	80027a2 <read_gps_data>
		current_time = HAL_GetTick();
 8002b5a:	f001 f9af 	bl	8003ebc <HAL_GetTick>
 8002b5e:	6138      	str	r0, [r7, #16]
	while (!gps->is_pos_locked && ((current_time - start_time) < GPS_TRY_LOCK_TIMEOUT)){
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	791b      	ldrb	r3, [r3, #4]
 8002b64:	f083 0301 	eor.w	r3, r3, #1
 8002b68:	b2db      	uxtb	r3, r3
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d006      	beq.n	8002b7c <get_gps_lock+0x6c>
 8002b6e:	693a      	ldr	r2, [r7, #16]
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	1ad3      	subs	r3, r2, r3
 8002b74:	f241 3287 	movw	r2, #4999	; 0x1387
 8002b78:	4293      	cmp	r3, r2
 8002b7a:	d9eb      	bls.n	8002b54 <get_gps_lock+0x44>
	}

	//Populate the GPS data struct that we are officially returning to the caller. Prioritize message types in the order they appear in the enum definiton
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	73fb      	strb	r3, [r7, #15]
 8002b80:	e028      	b.n	8002bd4 <get_gps_lock+0xc4>
		if (gps->data[msg_type].is_valid_data){
 8002b82:	7bfb      	ldrb	r3, [r7, #15]
 8002b84:	6879      	ldr	r1, [r7, #4]
 8002b86:	1c5a      	adds	r2, r3, #1
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	00db      	lsls	r3, r3, #3
 8002b90:	440b      	add	r3, r1
 8002b92:	3303      	adds	r3, #3
 8002b94:	781b      	ldrb	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d019      	beq.n	8002bce <get_gps_lock+0xbe>

			//Set the message type
			gps->data[msg_type].msg_type = msg_type;
 8002b9a:	7bfb      	ldrb	r3, [r7, #15]
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	005b      	lsls	r3, r3, #1
 8002ba4:	4413      	add	r3, r2
 8002ba6:	00db      	lsls	r3, r3, #3
 8002ba8:	440b      	add	r3, r1
 8002baa:	3304      	adds	r3, #4
 8002bac:	7bfa      	ldrb	r2, [r7, #15]
 8002bae:	701a      	strb	r2, [r3, #0]

			//Copy into the struct that returns back to the user
			memcpy(gps_data, &gps->data[msg_type], sizeof(GPS_Data));
 8002bb0:	7bfa      	ldrb	r2, [r7, #15]
 8002bb2:	4613      	mov	r3, r2
 8002bb4:	005b      	lsls	r3, r3, #1
 8002bb6:	4413      	add	r3, r2
 8002bb8:	00db      	lsls	r3, r3, #3
 8002bba:	3308      	adds	r3, #8
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	4413      	add	r3, r2
 8002bc0:	2218      	movs	r2, #24
 8002bc2:	4619      	mov	r1, r3
 8002bc4:	6838      	ldr	r0, [r7, #0]
 8002bc6:	f00b fbd7 	bl	800e378 <memcpy>

			return true;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	e006      	b.n	8002bdc <get_gps_lock+0xcc>
	for (GPS_MsgTypes msg_type = GPS_SIM; msg_type < GPS_NUM_MSG_TYPES; msg_type++){
 8002bce:	7bfb      	ldrb	r3, [r7, #15]
 8002bd0:	3301      	adds	r3, #1
 8002bd2:	73fb      	strb	r3, [r7, #15]
 8002bd4:	7bfb      	ldrb	r3, [r7, #15]
 8002bd6:	2b03      	cmp	r3, #3
 8002bd8:	d9d3      	bls.n	8002b82 <get_gps_lock+0x72>
		}
	}

	return false;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	3718      	adds	r7, #24
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}
 8002be4:	0000      	movs	r0, r0
	...

08002be8 <is_in_dominica>:

bool is_in_dominica(float latitude, float longitude){
 8002be8:	b590      	push	{r4, r7, lr}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	ed87 0a01 	vstr	s0, [r7, #4]
 8002bf2:	edc7 0a00 	vstr	s1, [r7]
	return (latitude < DOMINICA_LAT_BOUNDARY);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f7fd fdda 	bl	80007b0 <__aeabi_f2d>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	461c      	mov	r4, r3
 8002c00:	a307      	add	r3, pc, #28	; (adr r3, 8002c20 <is_in_dominica+0x38>)
 8002c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c06:	f7fe f89d 	bl	8000d44 <__aeabi_dcmplt>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d101      	bne.n	8002c14 <is_in_dominica+0x2c>
 8002c10:	2300      	movs	r3, #0
 8002c12:	461c      	mov	r4, r3
 8002c14:	b2e3      	uxtb	r3, r4
}
 8002c16:	4618      	mov	r0, r3
 8002c18:	370c      	adds	r7, #12
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd90      	pop	{r4, r7, pc}
 8002c1e:	bf00      	nop
 8002c20:	44bb1af4 	.word	0x44bb1af4
 8002c24:	4031b6f5 	.word	0x4031b6f5

08002c28 <initialize_vhf>:

#include "Recovery Inc/VHF.h"
#include <stdio.h>
#include <string.h>

HAL_StatusTypeDef initialize_vhf(UART_HandleTypeDef huart, bool is_high, char * tx_freq, char * rx_freq){
 8002c28:	b084      	sub	sp, #16
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b0a6      	sub	sp, #152	; 0x98
 8002c2e:	af26      	add	r7, sp, #152	; 0x98
 8002c30:	f107 0c08 	add.w	ip, r7, #8
 8002c34:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Set the modes of the GPIO pins attached to the vhf module.
	//Leave PTT floating, set appropriate power level and wake chip
	HAL_Delay(1000);
 8002c38:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c3c:	f001 f94a 	bl	8003ed4 <HAL_Delay>
	set_ptt(true);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f000 f8fb 	bl	8002e3c <set_ptt>
	set_power_level(is_high);
 8002c46:	f897 309c 	ldrb.w	r3, [r7, #156]	; 0x9c
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f000 f908 	bl	8002e60 <set_power_level>
	wake_vhf();
 8002c50:	f000 f918 	bl	8002e84 <wake_vhf>
	HAL_Delay(1000);
 8002c54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c58:	f001 f93c 	bl	8003ed4 <HAL_Delay>

	return configure_dra818v(huart, false, false, false, tx_freq, rx_freq);
 8002c5c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002c60:	9325      	str	r3, [sp, #148]	; 0x94
 8002c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002c66:	9324      	str	r3, [sp, #144]	; 0x90
 8002c68:	2300      	movs	r3, #0
 8002c6a:	9323      	str	r3, [sp, #140]	; 0x8c
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	9322      	str	r3, [sp, #136]	; 0x88
 8002c70:	2300      	movs	r3, #0
 8002c72:	9321      	str	r3, [sp, #132]	; 0x84
 8002c74:	4668      	mov	r0, sp
 8002c76:	f107 0318 	add.w	r3, r7, #24
 8002c7a:	2284      	movs	r2, #132	; 0x84
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	f00b fb7b 	bl	800e378 <memcpy>
 8002c82:	f107 0308 	add.w	r3, r7, #8
 8002c86:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002c88:	f000 f808 	bl	8002c9c <configure_dra818v>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	46bd      	mov	sp, r7
 8002c92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002c96:	b004      	add	sp, #16
 8002c98:	4770      	bx	lr
	...

08002c9c <configure_dra818v>:

HAL_StatusTypeDef configure_dra818v(UART_HandleTypeDef huart, bool emphasis, bool lpf, bool hpf, char * tx_freq, char * rx_freq){
 8002c9c:	b084      	sub	sp, #16
 8002c9e:	b580      	push	{r7, lr}
 8002ca0:	b0b6      	sub	sp, #216	; 0xd8
 8002ca2:	af02      	add	r7, sp, #8
 8002ca4:	f107 0cd8 	add.w	ip, r7, #216	; 0xd8
 8002ca8:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}

	//Note: variable tracks failure so that false (0) maps to HAL_OK (also 0)
	bool failed_config = false;
 8002cac:	2300      	movs	r3, #0
 8002cae:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	//Data buffer to hold transmissions and responses
	char transmit_data[100];
	char response_data[100];

	HAL_Delay(1000);
 8002cb2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cb6:	f001 f90d 	bl	8003ed4 <HAL_Delay>

	//Start with the VHF handshake to confirm module is setup correctly
	sprintf(transmit_data, "AT+DMOCONNECT \r\n");
 8002cba:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002cbe:	4957      	ldr	r1, [pc, #348]	; (8002e1c <configure_dra818v+0x180>)
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f00b fbe1 	bl	800e488 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, HANDSHAKE_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8002cc6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002cca:	f04f 33ff 	mov.w	r3, #4294967295
 8002cce:	2210      	movs	r2, #16
 8002cd0:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002cd4:	f008 fd90 	bl	800b7f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, HANDSHAKE_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8002cd8:	1d39      	adds	r1, r7, #4
 8002cda:	f04f 33ff 	mov.w	r3, #4294967295
 8002cde:	220f      	movs	r2, #15
 8002ce0:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002ce4:	f008 fe26 	bl	800b934 <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_HANDSHAKE_EXPECTED_RESPONSE, HANDSHAKE_RESPONSE_LENGTH) != 0)
 8002ce8:	1d3b      	adds	r3, r7, #4
 8002cea:	220f      	movs	r2, #15
 8002cec:	494c      	ldr	r1, [pc, #304]	; (8002e20 <configure_dra818v+0x184>)
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f00b fbea 	bl	800e4c8 <strncmp>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d002      	beq.n	8002d00 <configure_dra818v+0x64>
		failed_config = true;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8002d00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d04:	f001 f8e6 	bl	8003ed4 <HAL_Delay>

	//Now, set the parameters of the module
	sprintf(transmit_data, "AT+DMOSETGROUP=0,%s,%s,0000,0,0000\r\n", tx_freq, rx_freq);
 8002d08:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002d0c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8002d10:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002d14:	4943      	ldr	r1, [pc, #268]	; (8002e24 <configure_dra818v+0x188>)
 8002d16:	f00b fbb7 	bl	800e488 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_PARAMETERS_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8002d1a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002d1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d22:	2230      	movs	r2, #48	; 0x30
 8002d24:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002d28:	f008 fd66 	bl	800b7f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_PARAMETERS_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8002d2c:	1d39      	adds	r1, r7, #4
 8002d2e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d32:	2210      	movs	r2, #16
 8002d34:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002d38:	f008 fdfc 	bl	800b934 <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_PARAMETERS_EXPECTED_RESPONSE, SET_PARAMETERS_RESPONSE_LENGTH) != 0)
 8002d3c:	1d3b      	adds	r3, r7, #4
 8002d3e:	2210      	movs	r2, #16
 8002d40:	4939      	ldr	r1, [pc, #228]	; (8002e28 <configure_dra818v+0x18c>)
 8002d42:	4618      	mov	r0, r3
 8002d44:	f00b fbc0 	bl	800e4c8 <strncmp>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d002      	beq.n	8002d54 <configure_dra818v+0xb8>
		failed_config = true;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8002d54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002d58:	f001 f8bc 	bl	8003ed4 <HAL_Delay>

	//Set the volume of the transmissions
	sprintf(transmit_data, "AT+DMOSETVOLUME=%d\r\n", VHF_VOLUME_LEVEL);
 8002d5c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002d60:	2204      	movs	r2, #4
 8002d62:	4932      	ldr	r1, [pc, #200]	; (8002e2c <configure_dra818v+0x190>)
 8002d64:	4618      	mov	r0, r3
 8002d66:	f00b fb8f 	bl	800e488 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_VOLUME_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8002d6a:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002d6e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d72:	2213      	movs	r2, #19
 8002d74:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002d78:	f008 fd3e 	bl	800b7f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_VOLUME_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8002d7c:	1d39      	adds	r1, r7, #4
 8002d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d82:	2211      	movs	r2, #17
 8002d84:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002d88:	f008 fdd4 	bl	800b934 <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_VOLUME_EXPECTED_RESPONSE, SET_VOLUME_RESPONSE_LENGTH) != 0)
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2211      	movs	r2, #17
 8002d90:	4927      	ldr	r1, [pc, #156]	; (8002e30 <configure_dra818v+0x194>)
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00b fb98 	bl	800e4c8 <strncmp>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d002      	beq.n	8002da4 <configure_dra818v+0x108>
		failed_config = true;
 8002d9e:	2301      	movs	r3, #1
 8002da0:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8002da4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002da8:	f001 f894 	bl	8003ed4 <HAL_Delay>

	//Set the filter parameters
	//Invert all the bools passed in since the VHF module treats "0" as true
	sprintf(transmit_data, "AT+SETFILTER=%d,%d,%d\r\n", emphasis, hpf, lpf);
 8002dac:	f897 216c 	ldrb.w	r2, [r7, #364]	; 0x16c
 8002db0:	f897 1174 	ldrb.w	r1, [r7, #372]	; 0x174
 8002db4:	f897 3170 	ldrb.w	r3, [r7, #368]	; 0x170
 8002db8:	f107 0068 	add.w	r0, r7, #104	; 0x68
 8002dbc:	9300      	str	r3, [sp, #0]
 8002dbe:	460b      	mov	r3, r1
 8002dc0:	491c      	ldr	r1, [pc, #112]	; (8002e34 <configure_dra818v+0x198>)
 8002dc2:	f00b fb61 	bl	800e488 <siprintf>

	HAL_UART_Transmit(&huart, (uint8_t*) transmit_data, SET_FILTER_TRANSMIT_LENGTH, HAL_MAX_DELAY);
 8002dc6:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8002dca:	f04f 33ff 	mov.w	r3, #4294967295
 8002dce:	2214      	movs	r2, #20
 8002dd0:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002dd4:	f008 fd10 	bl	800b7f8 <HAL_UART_Transmit>
	HAL_UART_Receive(&huart, (uint8_t*) response_data, SET_FILTER_RESPONSE_LENGTH, HAL_MAX_DELAY);
 8002dd8:	1d39      	adds	r1, r7, #4
 8002dda:	f04f 33ff 	mov.w	r3, #4294967295
 8002dde:	2211      	movs	r2, #17
 8002de0:	f107 00d8 	add.w	r0, r7, #216	; 0xd8
 8002de4:	f008 fda6 	bl	800b934 <HAL_UART_Receive>

	//Ensure the response matches the expected response
	if (strncmp(response_data, VHF_SET_FILTER_EXPECTED_RESPONSE, SET_FILTER_RESPONSE_LENGTH) != 0)
 8002de8:	1d3b      	adds	r3, r7, #4
 8002dea:	2211      	movs	r2, #17
 8002dec:	4912      	ldr	r1, [pc, #72]	; (8002e38 <configure_dra818v+0x19c>)
 8002dee:	4618      	mov	r0, r3
 8002df0:	f00b fb6a 	bl	800e4c8 <strncmp>
 8002df4:	4603      	mov	r3, r0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <configure_dra818v+0x164>
		failed_config = true;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	HAL_Delay(1000);
 8002e00:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002e04:	f001 f866 	bl	8003ed4 <HAL_Delay>

	return failed_config;
 8002e08:	f897 30cf 	ldrb.w	r3, [r7, #207]	; 0xcf
}
 8002e0c:	4618      	mov	r0, r3
 8002e0e:	37d0      	adds	r7, #208	; 0xd0
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002e16:	b004      	add	sp, #16
 8002e18:	4770      	bx	lr
 8002e1a:	bf00      	nop
 8002e1c:	08010b78 	.word	0x08010b78
 8002e20:	08010b8c 	.word	0x08010b8c
 8002e24:	08010b9c 	.word	0x08010b9c
 8002e28:	08010bc4 	.word	0x08010bc4
 8002e2c:	08010bd8 	.word	0x08010bd8
 8002e30:	08010bf0 	.word	0x08010bf0
 8002e34:	08010c04 	.word	0x08010c04
 8002e38:	08010c1c 	.word	0x08010c1c

08002e3c <set_ptt>:


void set_ptt(bool is_tx){
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	4603      	mov	r3, r0
 8002e44:	71fb      	strb	r3, [r7, #7]

	//isTx determines if the GPIO is high or low, and thus if we are transmitting or not
	HAL_GPIO_WritePin(VHF_PTT_GPIO_Port, VHF_PTT_Pin, is_tx);
 8002e46:	79fb      	ldrb	r3, [r7, #7]
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2104      	movs	r1, #4
 8002e4c:	4803      	ldr	r0, [pc, #12]	; (8002e5c <set_ptt+0x20>)
 8002e4e:	f003 fb4d 	bl	80064ec <HAL_GPIO_WritePin>

}
 8002e52:	bf00      	nop
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	42020000 	.word	0x42020000

08002e60 <set_power_level>:

void set_power_level(bool is_high){
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	4603      	mov	r3, r0
 8002e68:	71fb      	strb	r3, [r7, #7]

	//isHigh determines if we should use high power (1W) or low (0.5W)
	HAL_GPIO_WritePin(APRS_H_L_GPIO_Port, APRS_H_L_Pin, is_high);
 8002e6a:	79fb      	ldrb	r3, [r7, #7]
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	2140      	movs	r1, #64	; 0x40
 8002e70:	4803      	ldr	r0, [pc, #12]	; (8002e80 <set_power_level+0x20>)
 8002e72:	f003 fb3b 	bl	80064ec <HAL_GPIO_WritePin>

}
 8002e76:	bf00      	nop
 8002e78:	3708      	adds	r7, #8
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	42020000 	.word	0x42020000

08002e84 <wake_vhf>:

	//Set the PD pin on the module to low to make the module sleep
	HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_RESET);
}

void wake_vhf(){
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0

	//Set the PD pin on the module to high to wake the module
	HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_SET);
 8002e88:	2201      	movs	r2, #1
 8002e8a:	2120      	movs	r1, #32
 8002e8c:	4802      	ldr	r0, [pc, #8]	; (8002e98 <wake_vhf+0x14>)
 8002e8e:	f003 fb2d 	bl	80064ec <HAL_GPIO_WritePin>

}
 8002e92:	bf00      	nop
 8002e94:	bd80      	pop	{r7, pc}
 8002e96:	bf00      	nop
 8002e98:	42020000 	.word	0x42020000

08002e9c <App_ThreadX_Init>:
  * @brief  Application ThreadX Initialization.
  * @param memory_ptr: memory pointer
  * @retval int
  */
UINT App_ThreadX_Init(VOID *memory_ptr)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b08e      	sub	sp, #56	; 0x38
 8002ea0:	af08      	add	r7, sp, #32
 8002ea2:	6078      	str	r0, [r7, #4]
  UINT ret = TX_SUCCESS;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	617b      	str	r3, [r7, #20]
  /* USER CODE BEGIN App_ThreadX_MEM_POOL */

  VOID * pointer = aprs_stack;
 8002ea8:	4b13      	ldr	r3, [pc, #76]	; (8002ef8 <App_ThreadX_Init+0x5c>)
 8002eaa:	60fb      	str	r3, [r7, #12]

  TX_BYTE_POOL* byte_pool = (TX_BYTE_POOL*) memory_ptr;
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	613b      	str	r3, [r7, #16]
  ret = tx_byte_allocate(byte_pool, &pointer, APRS_STACK_SIZE, TX_NO_WAIT);
 8002eb0:	f107 010c 	add.w	r1, r7, #12
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002eba:	6938      	ldr	r0, [r7, #16]
 8002ebc:	f00a fde4 	bl	800da88 <_txe_byte_allocate>
 8002ec0:	6178      	str	r0, [r7, #20]

  /* USER CODE END App_ThreadX_MEM_POOL */
  /* USER CODE BEGIN App_ThreadX_Init */

  tx_thread_create(&aprs_thread, "APRS Thread", aprs_thread_entry, 0x1234, pointer, APRS_STACK_SIZE, 1, 1, TX_NO_TIME_SLICE, TX_AUTO_START);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	22b0      	movs	r2, #176	; 0xb0
 8002ec6:	9206      	str	r2, [sp, #24]
 8002ec8:	2201      	movs	r2, #1
 8002eca:	9205      	str	r2, [sp, #20]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	9204      	str	r2, [sp, #16]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	9203      	str	r2, [sp, #12]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	9202      	str	r2, [sp, #8]
 8002ed8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002edc:	9201      	str	r2, [sp, #4]
 8002ede:	9300      	str	r3, [sp, #0]
 8002ee0:	f241 2334 	movw	r3, #4660	; 0x1234
 8002ee4:	4a05      	ldr	r2, [pc, #20]	; (8002efc <App_ThreadX_Init+0x60>)
 8002ee6:	4906      	ldr	r1, [pc, #24]	; (8002f00 <App_ThreadX_Init+0x64>)
 8002ee8:	4806      	ldr	r0, [pc, #24]	; (8002f04 <App_ThreadX_Init+0x68>)
 8002eea:	f00a fee1 	bl	800dcb0 <_txe_thread_create>
  /* USER CODE END App_ThreadX_Init */

  return ret;
 8002eee:	697b      	ldr	r3, [r7, #20]
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}
 8002ef8:	2000525c 	.word	0x2000525c
 8002efc:	08001e4d 	.word	0x08001e4d
 8002f00:	08010c30 	.word	0x08010c30
 8002f04:	20005a5c 	.word	0x20005a5c

08002f08 <MX_ThreadX_Init>:
  * @brief  MX_ThreadX_Init
  * @param  None
  * @retval None
  */
void MX_ThreadX_Init(void)
{
 8002f08:	b580      	push	{r7, lr}
 8002f0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  Before_Kernel_Start */

  /* USER CODE END  Before_Kernel_Start */

  tx_kernel_enter();
 8002f0c:	f009 fdd2 	bl	800cab4 <_tx_initialize_kernel_enter>

  /* USER CODE BEGIN  Kernel_Start_Error */

  /* USER CODE END  Kernel_Start_Error */
}
 8002f10:	bf00      	nop
 8002f12:	bd80      	pop	{r7, pc}

08002f14 <App_ThreadX_LowPower_Timer_Setup>:
  * @brief  App_ThreadX_LowPower_Timer_Setup
  * @param  count : TX timer count
  * @retval None
  */
void App_ThreadX_LowPower_Timer_Setup(ULONG count)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Setup */

  /* USER CODE END  App_ThreadX_LowPower_Timer_Setup */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <App_ThreadX_LowPower_Enter>:
  * @brief  App_ThreadX_LowPower_Enter
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Enter(void)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Enter */

  /* USER CODE END  App_ThreadX_LowPower_Enter */
}
 8002f2c:	bf00      	nop
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <App_ThreadX_LowPower_Exit>:
  * @brief  App_ThreadX_LowPower_Exit
  * @param  None
  * @retval None
  */
void App_ThreadX_LowPower_Exit(void)
{
 8002f36:	b480      	push	{r7}
 8002f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Exit */

  /* USER CODE END  App_ThreadX_LowPower_Exit */
}
 8002f3a:	bf00      	nop
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <App_ThreadX_LowPower_Timer_Adjust>:
  * @brief  App_ThreadX_LowPower_Timer_Adjust
  * @param  None
  * @retval Amount of time (in ticks)
  */
ULONG App_ThreadX_LowPower_Timer_Adjust(void)
{
 8002f44:	b480      	push	{r7}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN  App_ThreadX_LowPower_Timer_Adjust */
  return 0;
 8002f48:	2300      	movs	r3, #0
  /* USER CODE END  App_ThreadX_LowPower_Timer_Adjust */
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f58:	f000 ff6e 	bl	8003e38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f5c:	f000 f811 	bl	8002f82 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f60:	f000 fa1c 	bl	800339c <MX_GPIO_Init>
  MX_GPDMA1_Init();
 8002f64:	f000 f8bc 	bl	80030e0 <MX_GPDMA1_Init>
  MX_DAC1_Init();
 8002f68:	f000 f872 	bl	8003050 <MX_DAC1_Init>
  MX_TIM2_Init();
 8002f6c:	f000 f92e 	bl	80031cc <MX_TIM2_Init>
  MX_RTC_Init();
 8002f70:	f000 f8d6 	bl	8003120 <MX_RTC_Init>
  MX_UART4_Init();
 8002f74:	f000 f976 	bl	8003264 <MX_UART4_Init>
  MX_USART3_UART_Init();
 8002f78:	f000 f9c4 	bl	8003304 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  MX_ThreadX_Init();
 8002f7c:	f7ff ffc4 	bl	8002f08 <MX_ThreadX_Init>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f80:	e7fe      	b.n	8002f80 <main+0x2c>

08002f82 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002f82:	b580      	push	{r7, lr}
 8002f84:	b09e      	sub	sp, #120	; 0x78
 8002f86:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002f88:	f107 0318 	add.w	r3, r7, #24
 8002f8c:	2260      	movs	r2, #96	; 0x60
 8002f8e:	2100      	movs	r1, #0
 8002f90:	4618      	mov	r0, r3
 8002f92:	f00b f9fe 	bl	800e392 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002f96:	463b      	mov	r3, r7
 8002f98:	2200      	movs	r2, #0
 8002f9a:	601a      	str	r2, [r3, #0]
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	609a      	str	r2, [r3, #8]
 8002fa0:	60da      	str	r2, [r3, #12]
 8002fa2:	611a      	str	r2, [r3, #16]
 8002fa4:	615a      	str	r2, [r3, #20]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002fa6:	f44f 3040 	mov.w	r0, #196608	; 0x30000
 8002faa:	f003 fab7 	bl	800651c <HAL_PWREx_ControlVoltageScaling>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d001      	beq.n	8002fb8 <SystemClock_Config+0x36>
  {
    Error_Handler();
 8002fb4:	f000 face 	bl	8003554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8002fb8:	231a      	movs	r3, #26
 8002fba:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002fbc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002fc2:	2310      	movs	r3, #16
 8002fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8002fc6:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8002fca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002fcc:	2301      	movs	r3, #1
 8002fce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8002fd0:	2310      	movs	r3, #16
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002fdc:	2302      	movs	r3, #2
 8002fde:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLMBOOST = RCC_PLLMBOOST_DIV4;
 8002fe4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLM = 3;
 8002fea:	2303      	movs	r3, #3
 8002fec:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002fee:	230a      	movs	r3, #10
 8002ff0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLP = 2;
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002ff6:	2302      	movs	r3, #2
 8002ff8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLR = 1;
 8002ffa:	2301      	movs	r3, #1
 8002ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLLVCIRANGE_1;
 8002ffe:	230c      	movs	r3, #12
 8003000:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8003002:	2300      	movs	r3, #0
 8003004:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003006:	f107 0318 	add.w	r3, r7, #24
 800300a:	4618      	mov	r0, r3
 800300c:	f003 fb12 	bl	8006634 <HAL_RCC_OscConfig>
 8003010:	4603      	mov	r3, r0
 8003012:	2b00      	cmp	r3, #0
 8003014:	d001      	beq.n	800301a <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003016:	f000 fa9d 	bl	8003554 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800301a:	231f      	movs	r3, #31
 800301c:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_PCLK3;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800301e:	2303      	movs	r3, #3
 8003020:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800302a:	2300      	movs	r3, #0
 800302c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_HCLK_DIV1;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003032:	463b      	mov	r3, r7
 8003034:	2104      	movs	r1, #4
 8003036:	4618      	mov	r0, r3
 8003038:	f004 f9d8 	bl	80073ec <HAL_RCC_ClockConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003042:	f000 fa87 	bl	8003554 <Error_Handler>
  }
}
 8003046:	bf00      	nop
 8003048:	3778      	adds	r7, #120	; 0x78
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}
	...

08003050 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b08e      	sub	sp, #56	; 0x38
 8003054:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003056:	f107 0308 	add.w	r3, r7, #8
 800305a:	2230      	movs	r2, #48	; 0x30
 800305c:	2100      	movs	r1, #0
 800305e:	4618      	mov	r0, r3
 8003060:	f00b f997 	bl	800e392 <memset>
  DAC_AutonomousModeConfTypeDef sAutonomousMode = {0};
 8003064:	2300      	movs	r3, #0
 8003066:	607b      	str	r3, [r7, #4]

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_DAC1_Init+0x88>)
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <MX_DAC1_Init+0x8c>)
 800306c:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800306e:	481a      	ldr	r0, [pc, #104]	; (80030d8 <MX_DAC1_Init+0x88>)
 8003070:	f001 f880 	bl	8004174 <HAL_DAC_Init>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <MX_DAC1_Init+0x2e>
  {
    Error_Handler();
 800307a:	f000 fa6b 	bl	8003554 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 800307e:	2300      	movs	r3, #0
 8003080:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8003082:	2300      	movs	r3, #0
 8003084:	743b      	strb	r3, [r7, #16]
  sConfig.DAC_SignedFormat = DISABLE;
 8003086:	2300      	movs	r3, #0
 8003088:	747b      	strb	r3, [r7, #17]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800308e:	230a      	movs	r3, #10
 8003090:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003092:	2300      	movs	r3, #0
 8003094:	61fb      	str	r3, [r7, #28]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8003096:	2301      	movs	r3, #1
 8003098:	623b      	str	r3, [r7, #32]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 800309a:	2300      	movs	r3, #0
 800309c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800309e:	f107 0308 	add.w	r3, r7, #8
 80030a2:	2200      	movs	r2, #0
 80030a4:	4619      	mov	r1, r3
 80030a6:	480c      	ldr	r0, [pc, #48]	; (80030d8 <MX_DAC1_Init+0x88>)
 80030a8:	f001 faa2 	bl	80045f0 <HAL_DAC_ConfigChannel>
 80030ac:	4603      	mov	r3, r0
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d001      	beq.n	80030b6 <MX_DAC1_Init+0x66>
  {
    Error_Handler();
 80030b2:	f000 fa4f 	bl	8003554 <Error_Handler>
  }

  /** Configure Autonomous Mode
  */
  sAutonomousMode.AutonomousModeState = DAC_AUTONOMOUS_MODE_DISABLE;
 80030b6:	2300      	movs	r3, #0
 80030b8:	607b      	str	r3, [r7, #4]
  if (HAL_DACEx_SetConfigAutonomousMode(&hdac1, &sAutonomousMode) != HAL_OK)
 80030ba:	1d3b      	adds	r3, r7, #4
 80030bc:	4619      	mov	r1, r3
 80030be:	4806      	ldr	r0, [pc, #24]	; (80030d8 <MX_DAC1_Init+0x88>)
 80030c0:	f001 fc80 	bl	80049c4 <HAL_DACEx_SetConfigAutonomousMode>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <MX_DAC1_Init+0x7e>
  {
    Error_Handler();
 80030ca:	f000 fa43 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80030ce:	bf00      	nop
 80030d0:	3738      	adds	r7, #56	; 0x38
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	20005b0c 	.word	0x20005b0c
 80030dc:	46021800 	.word	0x46021800

080030e0 <MX_GPDMA1_Init>:
  * @brief GPDMA1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPDMA1_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Init 0 */

  /* USER CODE END GPDMA1_Init 0 */

  /* Peripheral clock enable */
  __HAL_RCC_GPDMA1_CLK_ENABLE();
 80030e6:	4b0d      	ldr	r3, [pc, #52]	; (800311c <MX_GPDMA1_Init+0x3c>)
 80030e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030ec:	4a0b      	ldr	r2, [pc, #44]	; (800311c <MX_GPDMA1_Init+0x3c>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 80030f6:	4b09      	ldr	r3, [pc, #36]	; (800311c <MX_GPDMA1_Init+0x3c>)
 80030f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030fc:	f003 0301 	and.w	r3, r3, #1
 8003100:	607b      	str	r3, [r7, #4]
 8003102:	687b      	ldr	r3, [r7, #4]

  /* GPDMA1 interrupt Init */
    HAL_NVIC_SetPriority(GPDMA1_Channel1_IRQn, 0, 0);
 8003104:	2200      	movs	r2, #0
 8003106:	2100      	movs	r1, #0
 8003108:	201e      	movs	r0, #30
 800310a:	f001 f80b 	bl	8004124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GPDMA1_Channel1_IRQn);
 800310e:	201e      	movs	r0, #30
 8003110:	f001 f822 	bl	8004158 <HAL_NVIC_EnableIRQ>
  /* USER CODE END GPDMA1_Init 1 */
  /* USER CODE BEGIN GPDMA1_Init 2 */

  /* USER CODE END GPDMA1_Init 2 */

}
 8003114:	bf00      	nop
 8003116:	3708      	adds	r7, #8
 8003118:	46bd      	mov	sp, r7
 800311a:	bd80      	pop	{r7, pc}
 800311c:	46020c00 	.word	0x46020c00

08003120 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b088      	sub	sp, #32
 8003124:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_PrivilegeStateTypeDef privilegeState = {0};
 8003126:	1d3b      	adds	r3, r7, #4
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]
 800312c:	605a      	str	r2, [r3, #4]
 800312e:	609a      	str	r2, [r3, #8]
 8003130:	60da      	str	r2, [r3, #12]
 8003132:	611a      	str	r2, [r3, #16]
 8003134:	615a      	str	r2, [r3, #20]
 8003136:	619a      	str	r2, [r3, #24]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003138:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <MX_RTC_Init+0xa4>)
 800313a:	4a23      	ldr	r2, [pc, #140]	; (80031c8 <MX_RTC_Init+0xa8>)
 800313c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800313e:	4b21      	ldr	r3, [pc, #132]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003140:	2200      	movs	r2, #0
 8003142:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8003144:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003146:	227f      	movs	r2, #127	; 0x7f
 8003148:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800314a:	4b1e      	ldr	r3, [pc, #120]	; (80031c4 <MX_RTC_Init+0xa4>)
 800314c:	22ff      	movs	r2, #255	; 0xff
 800314e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003150:	4b1c      	ldr	r3, [pc, #112]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003158:	2200      	movs	r2, #0
 800315a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800315c:	4b19      	ldr	r3, [pc, #100]	; (80031c4 <MX_RTC_Init+0xa4>)
 800315e:	2200      	movs	r2, #0
 8003160:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003164:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003168:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 800316a:	4b16      	ldr	r3, [pc, #88]	; (80031c4 <MX_RTC_Init+0xa4>)
 800316c:	2200      	movs	r2, #0
 800316e:	621a      	str	r2, [r3, #32]
  hrtc.Init.BinMode = RTC_BINARY_NONE;
 8003170:	4b14      	ldr	r3, [pc, #80]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003172:	2200      	movs	r2, #0
 8003174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003176:	4813      	ldr	r0, [pc, #76]	; (80031c4 <MX_RTC_Init+0xa4>)
 8003178:	f007 fa50 	bl	800a61c <HAL_RTC_Init>
 800317c:	4603      	mov	r3, r0
 800317e:	2b00      	cmp	r3, #0
 8003180:	d001      	beq.n	8003186 <MX_RTC_Init+0x66>
  {
    Error_Handler();
 8003182:	f000 f9e7 	bl	8003554 <Error_Handler>
  }
  privilegeState.rtcPrivilegeFull = RTC_PRIVILEGE_FULL_NO;
 8003186:	2300      	movs	r3, #0
 8003188:	607b      	str	r3, [r7, #4]
  privilegeState.backupRegisterPrivZone = RTC_PRIVILEGE_BKUP_ZONE_NONE;
 800318a:	2300      	movs	r3, #0
 800318c:	613b      	str	r3, [r7, #16]
  privilegeState.backupRegisterStartZone2 = RTC_BKP_DR0;
 800318e:	2300      	movs	r3, #0
 8003190:	617b      	str	r3, [r7, #20]
  privilegeState.backupRegisterStartZone3 = RTC_BKP_DR0;
 8003192:	2300      	movs	r3, #0
 8003194:	61bb      	str	r3, [r7, #24]
  if (HAL_RTCEx_PrivilegeModeSet(&hrtc, &privilegeState) != HAL_OK)
 8003196:	1d3b      	adds	r3, r7, #4
 8003198:	4619      	mov	r1, r3
 800319a:	480a      	ldr	r0, [pc, #40]	; (80031c4 <MX_RTC_Init+0xa4>)
 800319c:	f007 fbae 	bl	800a8fc <HAL_RTCEx_PrivilegeModeSet>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <MX_RTC_Init+0x8a>
  {
    Error_Handler();
 80031a6:	f000 f9d5 	bl	8003554 <Error_Handler>
  }

  /** Enable the reference Clock input
  */
  if (HAL_RTCEx_SetRefClock(&hrtc) != HAL_OK)
 80031aa:	4806      	ldr	r0, [pc, #24]	; (80031c4 <MX_RTC_Init+0xa4>)
 80031ac:	f007 fb64 	bl	800a878 <HAL_RTCEx_SetRefClock>
 80031b0:	4603      	mov	r3, r0
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d001      	beq.n	80031ba <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 80031b6:	f000 f9cd 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80031ba:	bf00      	nop
 80031bc:	3720      	adds	r7, #32
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	20005bd4 	.word	0x20005bd4
 80031c8:	46007800 	.word	0x46007800

080031cc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80031d2:	f107 0310 	add.w	r3, r7, #16
 80031d6:	2200      	movs	r2, #0
 80031d8:	601a      	str	r2, [r3, #0]
 80031da:	605a      	str	r2, [r3, #4]
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80031e0:	1d3b      	adds	r3, r7, #4
 80031e2:	2200      	movs	r2, #0
 80031e4:	601a      	str	r2, [r3, #0]
 80031e6:	605a      	str	r2, [r3, #4]
 80031e8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80031ea:	4b1d      	ldr	r3, [pc, #116]	; (8003260 <MX_TIM2_Init+0x94>)
 80031ec:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80031f0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 80031f2:	4b1b      	ldr	r3, [pc, #108]	; (8003260 <MX_TIM2_Init+0x94>)
 80031f4:	220f      	movs	r2, #15
 80031f6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031f8:	4b19      	ldr	r3, [pc, #100]	; (8003260 <MX_TIM2_Init+0x94>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 45;
 80031fe:	4b18      	ldr	r3, [pc, #96]	; (8003260 <MX_TIM2_Init+0x94>)
 8003200:	222d      	movs	r2, #45	; 0x2d
 8003202:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003204:	4b16      	ldr	r3, [pc, #88]	; (8003260 <MX_TIM2_Init+0x94>)
 8003206:	2200      	movs	r2, #0
 8003208:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800320a:	4b15      	ldr	r3, [pc, #84]	; (8003260 <MX_TIM2_Init+0x94>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003210:	4813      	ldr	r0, [pc, #76]	; (8003260 <MX_TIM2_Init+0x94>)
 8003212:	f007 fba1 	bl	800a958 <HAL_TIM_Base_Init>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	d001      	beq.n	8003220 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800321c:	f000 f99a 	bl	8003554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003220:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003224:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003226:	f107 0310 	add.w	r3, r7, #16
 800322a:	4619      	mov	r1, r3
 800322c:	480c      	ldr	r0, [pc, #48]	; (8003260 <MX_TIM2_Init+0x94>)
 800322e:	f007 fecb 	bl	800afc8 <HAL_TIM_ConfigClockSource>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d001      	beq.n	800323c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8003238:	f000 f98c 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800323c:	2320      	movs	r3, #32
 800323e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003244:	1d3b      	adds	r3, r7, #4
 8003246:	4619      	mov	r1, r3
 8003248:	4805      	ldr	r0, [pc, #20]	; (8003260 <MX_TIM2_Init+0x94>)
 800324a:	f008 f97d 	bl	800b548 <HAL_TIMEx_MasterConfigSynchronization>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8003254:	f000 f97e 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003258:	bf00      	nop
 800325a:	3720      	adds	r7, #32
 800325c:	46bd      	mov	sp, r7
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20005c04 	.word	0x20005c04

08003264 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8003268:	4b24      	ldr	r3, [pc, #144]	; (80032fc <MX_UART4_Init+0x98>)
 800326a:	4a25      	ldr	r2, [pc, #148]	; (8003300 <MX_UART4_Init+0x9c>)
 800326c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 800326e:	4b23      	ldr	r3, [pc, #140]	; (80032fc <MX_UART4_Init+0x98>)
 8003270:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8003274:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8003276:	4b21      	ldr	r3, [pc, #132]	; (80032fc <MX_UART4_Init+0x98>)
 8003278:	2200      	movs	r2, #0
 800327a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800327c:	4b1f      	ldr	r3, [pc, #124]	; (80032fc <MX_UART4_Init+0x98>)
 800327e:	2200      	movs	r2, #0
 8003280:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8003282:	4b1e      	ldr	r3, [pc, #120]	; (80032fc <MX_UART4_Init+0x98>)
 8003284:	2200      	movs	r2, #0
 8003286:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8003288:	4b1c      	ldr	r3, [pc, #112]	; (80032fc <MX_UART4_Init+0x98>)
 800328a:	220c      	movs	r2, #12
 800328c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800328e:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <MX_UART4_Init+0x98>)
 8003290:	2200      	movs	r2, #0
 8003292:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8003294:	4b19      	ldr	r3, [pc, #100]	; (80032fc <MX_UART4_Init+0x98>)
 8003296:	2200      	movs	r2, #0
 8003298:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <MX_UART4_Init+0x98>)
 800329c:	2200      	movs	r2, #0
 800329e:	621a      	str	r2, [r3, #32]
  huart4.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80032a0:	4b16      	ldr	r3, [pc, #88]	; (80032fc <MX_UART4_Init+0x98>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	625a      	str	r2, [r3, #36]	; 0x24
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 80032a6:	4b15      	ldr	r3, [pc, #84]	; (80032fc <MX_UART4_Init+0x98>)
 80032a8:	2210      	movs	r2, #16
 80032aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart4.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 80032ac:	4b13      	ldr	r3, [pc, #76]	; (80032fc <MX_UART4_Init+0x98>)
 80032ae:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80032b2:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80032b4:	4811      	ldr	r0, [pc, #68]	; (80032fc <MX_UART4_Init+0x98>)
 80032b6:	f008 fa4f 	bl	800b758 <HAL_UART_Init>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <MX_UART4_Init+0x60>
  {
    Error_Handler();
 80032c0:	f000 f948 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart4, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032c4:	2100      	movs	r1, #0
 80032c6:	480d      	ldr	r0, [pc, #52]	; (80032fc <MX_UART4_Init+0x98>)
 80032c8:	f009 f800 	bl	800c2cc <HAL_UARTEx_SetTxFifoThreshold>
 80032cc:	4603      	mov	r3, r0
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d001      	beq.n	80032d6 <MX_UART4_Init+0x72>
  {
    Error_Handler();
 80032d2:	f000 f93f 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart4, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80032d6:	2100      	movs	r1, #0
 80032d8:	4808      	ldr	r0, [pc, #32]	; (80032fc <MX_UART4_Init+0x98>)
 80032da:	f009 f835 	bl	800c348 <HAL_UARTEx_SetRxFifoThreshold>
 80032de:	4603      	mov	r3, r0
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d001      	beq.n	80032e8 <MX_UART4_Init+0x84>
  {
    Error_Handler();
 80032e4:	f000 f936 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart4) != HAL_OK)
 80032e8:	4804      	ldr	r0, [pc, #16]	; (80032fc <MX_UART4_Init+0x98>)
 80032ea:	f008 ffb6 	bl	800c25a <HAL_UARTEx_DisableFifoMode>
 80032ee:	4603      	mov	r3, r0
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d001      	beq.n	80032f8 <MX_UART4_Init+0x94>
  {
    Error_Handler();
 80032f4:	f000 f92e 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80032f8:	bf00      	nop
 80032fa:	bd80      	pop	{r7, pc}
 80032fc:	20005c50 	.word	0x20005c50
 8003300:	40004c00 	.word	0x40004c00

08003304 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8003308:	4b22      	ldr	r3, [pc, #136]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800330a:	4a23      	ldr	r2, [pc, #140]	; (8003398 <MX_USART3_UART_Init+0x94>)
 800330c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 38400;
 800330e:	4b21      	ldr	r3, [pc, #132]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003310:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003314:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8003316:	4b1f      	ldr	r3, [pc, #124]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800331c:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003322:	4b1c      	ldr	r3, [pc, #112]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003324:	2200      	movs	r2, #0
 8003326:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800332a:	220c      	movs	r2, #12
 800332c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800332e:	4b19      	ldr	r3, [pc, #100]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003330:	2200      	movs	r2, #0
 8003332:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8003334:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003336:	2200      	movs	r2, #0
 8003338:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800333a:	4b16      	ldr	r3, [pc, #88]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800333c:	2200      	movs	r2, #0
 800333e:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003342:	2200      	movs	r2, #0
 8003344:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003346:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003348:	2200      	movs	r2, #0
 800334a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800334c:	4811      	ldr	r0, [pc, #68]	; (8003394 <MX_USART3_UART_Init+0x90>)
 800334e:	f008 fa03 	bl	800b758 <HAL_UART_Init>
 8003352:	4603      	mov	r3, r0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d001      	beq.n	800335c <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8003358:	f000 f8fc 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800335c:	2100      	movs	r1, #0
 800335e:	480d      	ldr	r0, [pc, #52]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003360:	f008 ffb4 	bl	800c2cc <HAL_UARTEx_SetTxFifoThreshold>
 8003364:	4603      	mov	r3, r0
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800336a:	f000 f8f3 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800336e:	2100      	movs	r1, #0
 8003370:	4808      	ldr	r0, [pc, #32]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003372:	f008 ffe9 	bl	800c348 <HAL_UARTEx_SetRxFifoThreshold>
 8003376:	4603      	mov	r3, r0
 8003378:	2b00      	cmp	r3, #0
 800337a:	d001      	beq.n	8003380 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 800337c:	f000 f8ea 	bl	8003554 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003380:	4804      	ldr	r0, [pc, #16]	; (8003394 <MX_USART3_UART_Init+0x90>)
 8003382:	f008 ff6a 	bl	800c25a <HAL_UARTEx_DisableFifoMode>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d001      	beq.n	8003390 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 800338c:	f000 f8e2 	bl	8003554 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003390:	bf00      	nop
 8003392:	bd80      	pop	{r7, pc}
 8003394:	20005ce4 	.word	0x20005ce4
 8003398:	40004800 	.word	0x40004800

0800339c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	4b32      	ldr	r3, [pc, #200]	; (800347c <MX_GPIO_Init+0xe0>)
 80033b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033b8:	4a30      	ldr	r2, [pc, #192]	; (800347c <MX_GPIO_Init+0xe0>)
 80033ba:	f043 0304 	orr.w	r3, r3, #4
 80033be:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033c2:	4b2e      	ldr	r3, [pc, #184]	; (800347c <MX_GPIO_Init+0xe0>)
 80033c4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <MX_GPIO_Init+0xe0>)
 80033d2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033d6:	4a29      	ldr	r2, [pc, #164]	; (800347c <MX_GPIO_Init+0xe0>)
 80033d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033dc:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <MX_GPIO_Init+0xe0>)
 80033e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	60fb      	str	r3, [r7, #12]
 80033ec:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033ee:	4b23      	ldr	r3, [pc, #140]	; (800347c <MX_GPIO_Init+0xe0>)
 80033f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80033f4:	4a21      	ldr	r2, [pc, #132]	; (800347c <MX_GPIO_Init+0xe0>)
 80033f6:	f043 0301 	orr.w	r3, r3, #1
 80033fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80033fe:	4b1f      	ldr	r3, [pc, #124]	; (800347c <MX_GPIO_Init+0xe0>)
 8003400:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003404:	f003 0301 	and.w	r3, r3, #1
 8003408:	60bb      	str	r3, [r7, #8]
 800340a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <MX_GPIO_Init+0xe0>)
 800340e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003412:	4a1a      	ldr	r2, [pc, #104]	; (800347c <MX_GPIO_Init+0xe0>)
 8003414:	f043 0302 	orr.w	r3, r3, #2
 8003418:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800341c:	4b17      	ldr	r3, [pc, #92]	; (800347c <MX_GPIO_Init+0xe0>)
 800341e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003422:	f003 0302 	and.w	r3, r3, #2
 8003426:	607b      	str	r3, [r7, #4]
 8003428:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, VHF_PTT_Pin|APRS_H_L_Pin, GPIO_PIN_RESET);
 800342a:	2200      	movs	r2, #0
 800342c:	2144      	movs	r1, #68	; 0x44
 800342e:	4814      	ldr	r0, [pc, #80]	; (8003480 <MX_GPIO_Init+0xe4>)
 8003430:	f003 f85c 	bl	80064ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(APRS_PD_GPIO_Port, APRS_PD_Pin, GPIO_PIN_SET);
 8003434:	2201      	movs	r2, #1
 8003436:	2120      	movs	r1, #32
 8003438:	4811      	ldr	r0, [pc, #68]	; (8003480 <MX_GPIO_Init+0xe4>)
 800343a:	f003 f857 	bl	80064ec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : VHF_PTT_Pin APRS_PD_Pin APRS_H_L_Pin */
  GPIO_InitStruct.Pin = VHF_PTT_Pin|APRS_PD_Pin|APRS_H_L_Pin;
 800343e:	2364      	movs	r3, #100	; 0x64
 8003440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003442:	2301      	movs	r3, #1
 8003444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800344a:	2300      	movs	r3, #0
 800344c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800344e:	f107 0314 	add.w	r3, r7, #20
 8003452:	4619      	mov	r1, r3
 8003454:	480a      	ldr	r0, [pc, #40]	; (8003480 <MX_GPIO_Init+0xe4>)
 8003456:	f002 fe71 	bl	800613c <HAL_GPIO_Init>

  /*Configure GPIO pin : GPS_EXTINT_Pin */
  GPIO_InitStruct.Pin = GPS_EXTINT_Pin;
 800345a:	2301      	movs	r3, #1
 800345c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800345e:	4b09      	ldr	r3, [pc, #36]	; (8003484 <MX_GPIO_Init+0xe8>)
 8003460:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003462:	2300      	movs	r3, #0
 8003464:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPS_EXTINT_GPIO_Port, &GPIO_InitStruct);
 8003466:	f107 0314 	add.w	r3, r7, #20
 800346a:	4619      	mov	r1, r3
 800346c:	4806      	ldr	r0, [pc, #24]	; (8003488 <MX_GPIO_Init+0xec>)
 800346e:	f002 fe65 	bl	800613c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003472:	bf00      	nop
 8003474:	3728      	adds	r7, #40	; 0x28
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}
 800347a:	bf00      	nop
 800347c:	46020c00 	.word	0x46020c00
 8003480:	42020000 	.word	0x42020000
 8003484:	10110000 	.word	0x10110000
 8003488:	42020400 	.word	0x42020400

0800348c <MX_TIM2_Fake_Init>:

/* USER CODE BEGIN 4 */
//Fake timer 2 init function so we can change the period value during runtime
void MX_TIM2_Fake_Init(uint8_t newPeriod){
 800348c:	b580      	push	{r7, lr}
 800348e:	b08a      	sub	sp, #40	; 0x28
 8003490:	af00      	add	r7, sp, #0
 8003492:	4603      	mov	r3, r0
 8003494:	71fb      	strb	r3, [r7, #7]

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003496:	f107 0318 	add.w	r3, r7, #24
 800349a:	2200      	movs	r2, #0
 800349c:	601a      	str	r2, [r3, #0]
 800349e:	605a      	str	r2, [r3, #4]
 80034a0:	609a      	str	r2, [r3, #8]
 80034a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80034a4:	f107 030c 	add.w	r3, r7, #12
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]
 80034ac:	605a      	str	r2, [r3, #4]
 80034ae:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80034b0:	4b1e      	ldr	r3, [pc, #120]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034b2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80034b6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16 - 1;
 80034b8:	4b1c      	ldr	r3, [pc, #112]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034ba:	220f      	movs	r2, #15
 80034bc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80034be:	4b1b      	ldr	r3, [pc, #108]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = newPeriod - 1;
 80034c4:	79fb      	ldrb	r3, [r7, #7]
 80034c6:	3b01      	subs	r3, #1
 80034c8:	461a      	mov	r2, r3
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034cc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034ce:	4b17      	ldr	r3, [pc, #92]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034d0:	2200      	movs	r2, #0
 80034d2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034d4:	4b15      	ldr	r3, [pc, #84]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034d6:	2200      	movs	r2, #0
 80034d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80034da:	4814      	ldr	r0, [pc, #80]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034dc:	f007 fa3c 	bl	800a958 <HAL_TIM_Base_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Fake_Init+0x5e>
  {
	Error_Handler();
 80034e6:	f000 f835 	bl	8003554 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ee:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034f0:	f107 0318 	add.w	r3, r7, #24
 80034f4:	4619      	mov	r1, r3
 80034f6:	480d      	ldr	r0, [pc, #52]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 80034f8:	f007 fd66 	bl	800afc8 <HAL_TIM_ConfigClockSource>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <MX_TIM2_Fake_Init+0x7a>
  {
	Error_Handler();
 8003502:	f000 f827 	bl	8003554 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003506:	2320      	movs	r3, #32
 8003508:	60fb      	str	r3, [r7, #12]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800350a:	2300      	movs	r3, #0
 800350c:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800350e:	f107 030c 	add.w	r3, r7, #12
 8003512:	4619      	mov	r1, r3
 8003514:	4805      	ldr	r0, [pc, #20]	; (800352c <MX_TIM2_Fake_Init+0xa0>)
 8003516:	f008 f817 	bl	800b548 <HAL_TIMEx_MasterConfigSynchronization>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_TIM2_Fake_Init+0x98>
  {
	Error_Handler();
 8003520:	f000 f818 	bl	8003554 <Error_Handler>
  }
}
 8003524:	bf00      	nop
 8003526:	3728      	adds	r7, #40	; 0x28
 8003528:	46bd      	mov	sp, r7
 800352a:	bd80      	pop	{r7, pc}
 800352c:	20005c04 	.word	0x20005c04

08003530 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a04      	ldr	r2, [pc, #16]	; (8003550 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d101      	bne.n	8003546 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003542:	f000 fca7 	bl	8003e94 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003546:	bf00      	nop
 8003548:	3708      	adds	r7, #8
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}
 800354e:	bf00      	nop
 8003550:	40001000 	.word	0x40001000

08003554 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003554:	b480      	push	{r7}
 8003556:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003558:	b672      	cpsid	i
}
 800355a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800355c:	e7fe      	b.n	800355c <Error_Handler+0x8>
	...

08003560 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b082      	sub	sp, #8
 8003564:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003566:	4b15      	ldr	r3, [pc, #84]	; (80035bc <HAL_MspInit+0x5c>)
 8003568:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800356c:	4a13      	ldr	r2, [pc, #76]	; (80035bc <HAL_MspInit+0x5c>)
 800356e:	f043 0304 	orr.w	r3, r3, #4
 8003572:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8003576:	4b11      	ldr	r3, [pc, #68]	; (80035bc <HAL_MspInit+0x5c>)
 8003578:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800357c:	f003 0304 	and.w	r3, r3, #4
 8003580:	607b      	str	r3, [r7, #4]
 8003582:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Enable the VREF clock
  */
  __HAL_RCC_VREF_CLK_ENABLE();
 8003584:	4b0d      	ldr	r3, [pc, #52]	; (80035bc <HAL_MspInit+0x5c>)
 8003586:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800358a:	4a0c      	ldr	r2, [pc, #48]	; (80035bc <HAL_MspInit+0x5c>)
 800358c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003590:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 8003594:	4b09      	ldr	r3, [pc, #36]	; (80035bc <HAL_MspInit+0x5c>)
 8003596:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	683b      	ldr	r3, [r7, #0]

  /** Configure the internal voltage reference buffer voltage scale
  */
  HAL_SYSCFG_VREFBUF_VoltageScalingConfig(SYSCFG_VREFBUF_VOLTAGE_SCALE3);
 80035a2:	2030      	movs	r0, #48	; 0x30
 80035a4:	f000 fcba 	bl	8003f1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>

  /** Enable the Internal Voltage Reference buffer
  */
  HAL_SYSCFG_EnableVREFBUF();
 80035a8:	f000 fce0 	bl	8003f6c <HAL_SYSCFG_EnableVREFBUF>

  /** Configure the internal voltage reference buffer high impedance mode
  */
  HAL_SYSCFG_VREFBUF_HighImpedanceConfig(SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE);
 80035ac:	2000      	movs	r0, #0
 80035ae:	f000 fcc9 	bl	8003f44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80035b2:	bf00      	nop
 80035b4:	3708      	adds	r7, #8
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	46020c00 	.word	0x46020c00

080035c0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80035c0:	b580      	push	{r7, lr}
 80035c2:	b0d6      	sub	sp, #344	; 0x158
 80035c4:	af00      	add	r7, sp, #0
 80035c6:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035ca:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035ce:	6018      	str	r0, [r3, #0]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035d0:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80035d4:	2200      	movs	r2, #0
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	605a      	str	r2, [r3, #4]
 80035da:	609a      	str	r2, [r3, #8]
 80035dc:	60da      	str	r2, [r3, #12]
 80035de:	611a      	str	r2, [r3, #16]
  DMA_NodeConfTypeDef NodeConfig;
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80035e0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035e4:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80035e8:	4618      	mov	r0, r3
 80035ea:	23c8      	movs	r3, #200	; 0xc8
 80035ec:	461a      	mov	r2, r3
 80035ee:	2100      	movs	r1, #0
 80035f0:	f00a fecf 	bl	800e392 <memset>
  if(hdac->Instance==DAC1)
 80035f4:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80035f8:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	4a78      	ldr	r2, [pc, #480]	; (80037e4 <HAL_DAC_MspInit+0x224>)
 8003602:	4293      	cmp	r3, r2
 8003604:	f040 80e9 	bne.w	80037da <HAL_DAC_MspInit+0x21a>

  /* USER CODE END DAC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADCDAC|RCC_PERIPHCLK_DAC1;
 8003608:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800360c:	f5a3 71a4 	sub.w	r1, r3, #328	; 0x148
 8003610:	4a75      	ldr	r2, [pc, #468]	; (80037e8 <HAL_DAC_MspInit+0x228>)
 8003612:	f04f 0300 	mov.w	r3, #0
 8003616:	e9c1 2300 	strd	r2, r3, [r1]
    PeriphClkInit.AdcDacClockSelection = RCC_ADCDACCLKSOURCE_HSI;
 800361a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800361e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003622:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003626:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
    PeriphClkInit.Dac1ClockSelection = RCC_DAC1CLKSOURCE_LSI;
 800362a:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800362e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8003632:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003636:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800363a:	f107 0310 	add.w	r3, r7, #16
 800363e:	4618      	mov	r0, r3
 8003640:	f004 fae2 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <HAL_DAC_MspInit+0x8e>
    {
      Error_Handler();
 800364a:	f7ff ff83 	bl	8003554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800364e:	4b67      	ldr	r3, [pc, #412]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 8003650:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003654:	4a65      	ldr	r2, [pc, #404]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 8003656:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800365a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800365e:	4b63      	ldr	r3, [pc, #396]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 8003660:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003664:	f003 0240 	and.w	r2, r3, #64	; 0x40
 8003668:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800366c:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8003676:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800367a:	681b      	ldr	r3, [r3, #0]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800367c:	4b5b      	ldr	r3, [pc, #364]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 800367e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003682:	4a5a      	ldr	r2, [pc, #360]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 8003684:	f043 0301 	orr.w	r3, r3, #1
 8003688:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800368c:	4b57      	ldr	r3, [pc, #348]	; (80037ec <HAL_DAC_MspInit+0x22c>)
 800368e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003692:	f003 0201 	and.w	r2, r3, #1
 8003696:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 800369a:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800369e:	601a      	str	r2, [r3, #0]
 80036a0:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80036a4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80036a8:	681b      	ldr	r3, [r3, #0]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80036aa:	2310      	movs	r3, #16
 80036ac:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80036b0:	2303      	movs	r3, #3
 80036b2:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b6:	2300      	movs	r3, #0
 80036b8:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036bc:	f507 73a2 	add.w	r3, r7, #324	; 0x144
 80036c0:	4619      	mov	r1, r3
 80036c2:	484b      	ldr	r0, [pc, #300]	; (80037f0 <HAL_DAC_MspInit+0x230>)
 80036c4:	f002 fd3a 	bl	800613c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* GPDMA1_REQUEST_DAC1_CH1 Init */
    NodeConfig.NodeType = DMA_GPDMA_LINEAR_NODE;
 80036c8:	2321      	movs	r3, #33	; 0x21
 80036ca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    NodeConfig.Init.Request = GPDMA1_REQUEST_DAC1_CH1;
 80036ce:	2302      	movs	r3, #2
 80036d0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    NodeConfig.Init.BlkHWRequest = DMA_BREQ_SINGLE_BURST;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    NodeConfig.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80036de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    NodeConfig.Init.SrcInc = DMA_SINC_INCREMENTED;
 80036e2:	2308      	movs	r3, #8
 80036e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    NodeConfig.Init.DestInc = DMA_DINC_FIXED;
 80036e8:	2300      	movs	r3, #0
 80036ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    NodeConfig.Init.SrcDataWidth = DMA_SRC_DATAWIDTH_WORD;
 80036ee:	2302      	movs	r3, #2
 80036f0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    NodeConfig.Init.DestDataWidth = DMA_DEST_DATAWIDTH_WORD;
 80036f4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80036f8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    NodeConfig.Init.SrcBurstLength = 1;
 80036fc:	2301      	movs	r3, #1
 80036fe:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    NodeConfig.Init.DestBurstLength = 1;
 8003702:	2301      	movs	r3, #1
 8003704:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    NodeConfig.Init.TransferAllocatedPort = DMA_SRC_ALLOCATED_PORT0|DMA_DEST_ALLOCATED_PORT0;
 8003708:	2300      	movs	r3, #0
 800370a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    NodeConfig.Init.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800370e:	2300      	movs	r3, #0
 8003710:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    NodeConfig.Init.Mode = DMA_NORMAL;
 8003714:	2300      	movs	r3, #0
 8003716:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    NodeConfig.TriggerConfig.TriggerPolarity = DMA_TRIG_POLARITY_MASKED;
 800371a:	2300      	movs	r3, #0
 800371c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    NodeConfig.DataHandlingConfig.DataExchange = DMA_EXCHANGE_NONE;
 8003720:	2300      	movs	r3, #0
 8003722:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    NodeConfig.DataHandlingConfig.DataAlignment = DMA_DATA_RIGHTALIGN_ZEROPADDED;
 8003726:	2300      	movs	r3, #0
 8003728:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    if (HAL_DMAEx_List_BuildNode(&NodeConfig, &Node_GPDMA1_Channel1) != HAL_OK)
 800372c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8003730:	4930      	ldr	r1, [pc, #192]	; (80037f4 <HAL_DAC_MspInit+0x234>)
 8003732:	4618      	mov	r0, r3
 8003734:	f001 fe26 	bl	8005384 <HAL_DMAEx_List_BuildNode>
 8003738:	4603      	mov	r3, r0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d001      	beq.n	8003742 <HAL_DAC_MspInit+0x182>
    {
      Error_Handler();
 800373e:	f7ff ff09 	bl	8003554 <Error_Handler>
    }

    if (HAL_DMAEx_List_InsertNode(&List_GPDMA1_Channel1, NULL, &Node_GPDMA1_Channel1) != HAL_OK)
 8003742:	4a2c      	ldr	r2, [pc, #176]	; (80037f4 <HAL_DAC_MspInit+0x234>)
 8003744:	2100      	movs	r1, #0
 8003746:	482c      	ldr	r0, [pc, #176]	; (80037f8 <HAL_DAC_MspInit+0x238>)
 8003748:	f001 fe48 	bl	80053dc <HAL_DMAEx_List_InsertNode>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d001      	beq.n	8003756 <HAL_DAC_MspInit+0x196>
    {
      Error_Handler();
 8003752:	f7ff feff 	bl	8003554 <Error_Handler>
    }

    if (HAL_DMAEx_List_SetCircularMode(&List_GPDMA1_Channel1) != HAL_OK)
 8003756:	4828      	ldr	r0, [pc, #160]	; (80037f8 <HAL_DAC_MspInit+0x238>)
 8003758:	f001 ff09 	bl	800556e <HAL_DMAEx_List_SetCircularMode>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d001      	beq.n	8003766 <HAL_DAC_MspInit+0x1a6>
    {
      Error_Handler();
 8003762:	f7ff fef7 	bl	8003554 <Error_Handler>
    }

    handle_GPDMA1_Channel1.Instance = GPDMA1_Channel1;
 8003766:	4b25      	ldr	r3, [pc, #148]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 8003768:	4a25      	ldr	r2, [pc, #148]	; (8003800 <HAL_DAC_MspInit+0x240>)
 800376a:	601a      	str	r2, [r3, #0]
    handle_GPDMA1_Channel1.InitLinkedList.Priority = DMA_LOW_PRIORITY_LOW_WEIGHT;
 800376c:	4b23      	ldr	r3, [pc, #140]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 800376e:	2200      	movs	r2, #0
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
    handle_GPDMA1_Channel1.InitLinkedList.LinkStepMode = DMA_LSM_FULL_EXECUTION;
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 8003774:	2200      	movs	r2, #0
 8003776:	63da      	str	r2, [r3, #60]	; 0x3c
    handle_GPDMA1_Channel1.InitLinkedList.LinkAllocatedPort = DMA_LINK_ALLOCATED_PORT0;
 8003778:	4b20      	ldr	r3, [pc, #128]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 800377a:	2200      	movs	r2, #0
 800377c:	641a      	str	r2, [r3, #64]	; 0x40
    handle_GPDMA1_Channel1.InitLinkedList.TransferEventMode = DMA_TCEM_BLOCK_TRANSFER;
 800377e:	4b1f      	ldr	r3, [pc, #124]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
    handle_GPDMA1_Channel1.InitLinkedList.LinkedListMode = DMA_LINKEDLIST_CIRCULAR;
 8003784:	4b1d      	ldr	r3, [pc, #116]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 8003786:	2281      	movs	r2, #129	; 0x81
 8003788:	649a      	str	r2, [r3, #72]	; 0x48
    if (HAL_DMAEx_List_Init(&handle_GPDMA1_Channel1) != HAL_OK)
 800378a:	481c      	ldr	r0, [pc, #112]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 800378c:	f001 fc38 	bl	8005000 <HAL_DMAEx_List_Init>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <HAL_DAC_MspInit+0x1da>
    {
      Error_Handler();
 8003796:	f7ff fedd 	bl	8003554 <Error_Handler>
    }

    if (HAL_DMAEx_List_LinkQ(&handle_GPDMA1_Channel1, &List_GPDMA1_Channel1) != HAL_OK)
 800379a:	4917      	ldr	r1, [pc, #92]	; (80037f8 <HAL_DAC_MspInit+0x238>)
 800379c:	4817      	ldr	r0, [pc, #92]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 800379e:	f001 ff47 	bl	8005630 <HAL_DMAEx_List_LinkQ>
 80037a2:	4603      	mov	r3, r0
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d001      	beq.n	80037ac <HAL_DAC_MspInit+0x1ec>
    {
      Error_Handler();
 80037a8:	f7ff fed4 	bl	8003554 <Error_Handler>
    }

    __HAL_LINKDMA(hdac, DMA_Handle1, handle_GPDMA1_Channel1);
 80037ac:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037b0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a11      	ldr	r2, [pc, #68]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 80037b8:	609a      	str	r2, [r3, #8]
 80037ba:	4a10      	ldr	r2, [pc, #64]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 80037bc:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 80037c0:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	65d3      	str	r3, [r2, #92]	; 0x5c

    if (HAL_DMA_ConfigChannelAttributes(&handle_GPDMA1_Channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 80037c8:	2110      	movs	r1, #16
 80037ca:	480c      	ldr	r0, [pc, #48]	; (80037fc <HAL_DAC_MspInit+0x23c>)
 80037cc:	f001 fbb6 	bl	8004f3c <HAL_DMA_ConfigChannelAttributes>
 80037d0:	4603      	mov	r3, r0
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d001      	beq.n	80037da <HAL_DAC_MspInit+0x21a>
    {
      Error_Handler();
 80037d6:	f7ff febd 	bl	8003554 <Error_Handler>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80037da:	bf00      	nop
 80037dc:	f507 77ac 	add.w	r7, r7, #344	; 0x158
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bd80      	pop	{r7, pc}
 80037e4:	46021800 	.word	0x46021800
 80037e8:	10008000 	.word	0x10008000
 80037ec:	46020c00 	.word	0x46020c00
 80037f0:	42020000 	.word	0x42020000
 80037f4:	20005b20 	.word	0x20005b20
 80037f8:	20005b44 	.word	0x20005b44
 80037fc:	20005b5c 	.word	0x20005b5c
 8003800:	400200d0 	.word	0x400200d0

08003804 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b0bc      	sub	sp, #240	; 0xf0
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800380c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003810:	2200      	movs	r2, #0
 8003812:	601a      	str	r2, [r3, #0]
 8003814:	605a      	str	r2, [r3, #4]
 8003816:	609a      	str	r2, [r3, #8]
 8003818:	60da      	str	r2, [r3, #12]
 800381a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800381c:	f107 0310 	add.w	r3, r7, #16
 8003820:	22c8      	movs	r2, #200	; 0xc8
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f00a fdb4 	bl	800e392 <memset>
  if(hrtc->Instance==RTC)
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	4a2b      	ldr	r2, [pc, #172]	; (80038dc <HAL_RTC_MspInit+0xd8>)
 8003830:	4293      	cmp	r3, r2
 8003832:	d14f      	bne.n	80038d4 <HAL_RTC_MspInit+0xd0>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003834:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8003838:	f04f 0300 	mov.w	r3, #0
 800383c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8003840:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003844:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003848:	f107 0310 	add.w	r3, r7, #16
 800384c:	4618      	mov	r0, r3
 800384e:	f004 f9db 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8003852:	4603      	mov	r3, r0
 8003854:	2b00      	cmp	r3, #0
 8003856:	d001      	beq.n	800385c <HAL_RTC_MspInit+0x58>
    {
      Error_Handler();
 8003858:	f7ff fe7c 	bl	8003554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800385c:	4b20      	ldr	r3, [pc, #128]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 800385e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003862:	4a1f      	ldr	r2, [pc, #124]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 8003864:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003868:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 800386c:	4b1c      	ldr	r3, [pc, #112]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 800386e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003872:	4a1b      	ldr	r2, [pc, #108]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 8003874:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003878:	f8c2 30a8 	str.w	r3, [r2, #168]	; 0xa8
 800387c:	4b18      	ldr	r3, [pc, #96]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 800387e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003882:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003886:	60fb      	str	r3, [r7, #12]
 8003888:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800388a:	4b15      	ldr	r3, [pc, #84]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 800388c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003890:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 8003892:	f043 0302 	orr.w	r3, r3, #2
 8003896:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800389a:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <HAL_RTC_MspInit+0xdc>)
 800389c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038a0:	f003 0302 	and.w	r3, r3, #2
 80038a4:	60bb      	str	r3, [r7, #8]
 80038a6:	68bb      	ldr	r3, [r7, #8]
    /**RTC GPIO Configuration
    PB15     ------> RTC_REFIN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80038a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038b0:	2302      	movs	r3, #2
 80038b2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038b6:	2300      	movs	r3, #0
 80038b8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80038bc:	2300      	movs	r3, #0
 80038be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF0_RTC_50Hz;
 80038c2:	2300      	movs	r3, #0
 80038c4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80038c8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80038cc:	4619      	mov	r1, r3
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <HAL_RTC_MspInit+0xe0>)
 80038d0:	f002 fc34 	bl	800613c <HAL_GPIO_Init>
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80038d4:	bf00      	nop
 80038d6:	37f0      	adds	r7, #240	; 0xf0
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	46007800 	.word	0x46007800
 80038e0:	46020c00 	.word	0x46020c00
 80038e4:	42020400 	.word	0x42020400

080038e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b084      	sub	sp, #16
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038f8:	d116      	bne.n	8003928 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80038fa:	4b0d      	ldr	r3, [pc, #52]	; (8003930 <HAL_TIM_Base_MspInit+0x48>)
 80038fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003900:	4a0b      	ldr	r2, [pc, #44]	; (8003930 <HAL_TIM_Base_MspInit+0x48>)
 8003902:	f043 0301 	orr.w	r3, r3, #1
 8003906:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 800390a:	4b09      	ldr	r3, [pc, #36]	; (8003930 <HAL_TIM_Base_MspInit+0x48>)
 800390c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	60fb      	str	r3, [r7, #12]
 8003916:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	202d      	movs	r0, #45	; 0x2d
 800391e:	f000 fc01 	bl	8004124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003922:	202d      	movs	r0, #45	; 0x2d
 8003924:	f000 fc18 	bl	8004158 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003928:	bf00      	nop
 800392a:	3710      	adds	r7, #16
 800392c:	46bd      	mov	sp, r7
 800392e:	bd80      	pop	{r7, pc}
 8003930:	46020c00 	.word	0x46020c00

08003934 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b0be      	sub	sp, #248	; 0xf8
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800393c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003940:	2200      	movs	r2, #0
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	605a      	str	r2, [r3, #4]
 8003946:	609a      	str	r2, [r3, #8]
 8003948:	60da      	str	r2, [r3, #12]
 800394a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800394c:	f107 0318 	add.w	r3, r7, #24
 8003950:	22c8      	movs	r2, #200	; 0xc8
 8003952:	2100      	movs	r1, #0
 8003954:	4618      	mov	r0, r3
 8003956:	f00a fd1c 	bl	800e392 <memset>
  if(huart->Instance==UART4)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a4b      	ldr	r2, [pc, #300]	; (8003a8c <HAL_UART_MspInit+0x158>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d145      	bne.n	80039f0 <HAL_UART_MspInit+0xbc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8003964:	f04f 0208 	mov.w	r2, #8
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 8003970:	2300      	movs	r3, #0
 8003972:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003974:	f107 0318 	add.w	r3, r7, #24
 8003978:	4618      	mov	r0, r3
 800397a:	f004 f945 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 800397e:	4603      	mov	r3, r0
 8003980:	2b00      	cmp	r3, #0
 8003982:	d001      	beq.n	8003988 <HAL_UART_MspInit+0x54>
    {
      Error_Handler();
 8003984:	f7ff fde6 	bl	8003554 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8003988:	4b41      	ldr	r3, [pc, #260]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 800398a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800398e:	4a40      	ldr	r2, [pc, #256]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003990:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003994:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003998:	4b3d      	ldr	r3, [pc, #244]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 800399a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800399e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039a2:	617b      	str	r3, [r7, #20]
 80039a4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039a6:	4b3a      	ldr	r3, [pc, #232]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 80039a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039ac:	4a38      	ldr	r2, [pc, #224]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 80039ae:	f043 0301 	orr.w	r3, r3, #1
 80039b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80039b6:	4b36      	ldr	r3, [pc, #216]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 80039b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039bc:	f003 0301 	and.w	r3, r3, #1
 80039c0:	613b      	str	r3, [r7, #16]
 80039c2:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PA0     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80039c4:	2303      	movs	r3, #3
 80039c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ca:	2302      	movs	r3, #2
 80039cc:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039dc:	2308      	movs	r3, #8
 80039de:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80039e6:	4619      	mov	r1, r3
 80039e8:	482a      	ldr	r0, [pc, #168]	; (8003a94 <HAL_UART_MspInit+0x160>)
 80039ea:	f002 fba7 	bl	800613c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039ee:	e049      	b.n	8003a84 <HAL_UART_MspInit+0x150>
  else if(huart->Instance==USART3)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a28      	ldr	r2, [pc, #160]	; (8003a98 <HAL_UART_MspInit+0x164>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d144      	bne.n	8003a84 <HAL_UART_MspInit+0x150>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80039fa:	f04f 0204 	mov.w	r2, #4
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8003a06:	2300      	movs	r3, #0
 8003a08:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a0a:	f107 0318 	add.w	r3, r7, #24
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f004 f8fa 	bl	8007c08 <HAL_RCCEx_PeriphCLKConfig>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <HAL_UART_MspInit+0xea>
      Error_Handler();
 8003a1a:	f7ff fd9b 	bl	8003554 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003a1e:	4b1c      	ldr	r3, [pc, #112]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a20:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a24:	4a1a      	ldr	r2, [pc, #104]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a26:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a2a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003a2e:	4b18      	ldr	r3, [pc, #96]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a30:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003a34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a38:	60fb      	str	r3, [r7, #12]
 8003a3a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003a3c:	4b14      	ldr	r3, [pc, #80]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a3e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a42:	4a13      	ldr	r2, [pc, #76]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a44:	f043 0304 	orr.w	r3, r3, #4
 8003a48:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <HAL_UART_MspInit+0x15c>)
 8003a4e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	60bb      	str	r3, [r7, #8]
 8003a58:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003a5a:	2330      	movs	r3, #48	; 0x30
 8003a5c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a60:	2302      	movs	r3, #2
 8003a62:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a66:	2300      	movs	r3, #0
 8003a68:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a72:	2307      	movs	r3, #7
 8003a74:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a78:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	4807      	ldr	r0, [pc, #28]	; (8003a9c <HAL_UART_MspInit+0x168>)
 8003a80:	f002 fb5c 	bl	800613c <HAL_GPIO_Init>
}
 8003a84:	bf00      	nop
 8003a86:	37f8      	adds	r7, #248	; 0xf8
 8003a88:	46bd      	mov	sp, r7
 8003a8a:	bd80      	pop	{r7, pc}
 8003a8c:	40004c00 	.word	0x40004c00
 8003a90:	46020c00 	.word	0x46020c00
 8003a94:	42020000 	.word	0x42020000
 8003a98:	40004800 	.word	0x40004800
 8003a9c:	42020800 	.word	0x42020800

08003aa0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b08e      	sub	sp, #56	; 0x38
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t              uwPrescalerValue = 0;
 8003aac:	2300      	movs	r3, #0
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003ab0:	4b2e      	ldr	r3, [pc, #184]	; (8003b6c <HAL_InitTick+0xcc>)
 8003ab2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ab6:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <HAL_InitTick+0xcc>)
 8003ab8:	f043 0310 	orr.w	r3, r3, #16
 8003abc:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003ac0:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <HAL_InitTick+0xcc>)
 8003ac2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003ac6:	f003 0310 	and.w	r3, r3, #16
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ace:	f107 0210 	add.w	r2, r7, #16
 8003ad2:	f107 0314 	add.w	r3, r7, #20
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f003 ffd7 	bl	8007a8c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003ade:	f003 ff99 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8003ae2:	6338      	str	r0, [r7, #48]	; 0x30

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ae6:	4a22      	ldr	r2, [pc, #136]	; (8003b70 <HAL_InitTick+0xd0>)
 8003ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8003aec:	0c9b      	lsrs	r3, r3, #18
 8003aee:	3b01      	subs	r3, #1
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003af2:	4b20      	ldr	r3, [pc, #128]	; (8003b74 <HAL_InitTick+0xd4>)
 8003af4:	4a20      	ldr	r2, [pc, #128]	; (8003b78 <HAL_InitTick+0xd8>)
 8003af6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003af8:	4b1e      	ldr	r3, [pc, #120]	; (8003b74 <HAL_InitTick+0xd4>)
 8003afa:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003afe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003b00:	4a1c      	ldr	r2, [pc, #112]	; (8003b74 <HAL_InitTick+0xd4>)
 8003b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b04:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003b06:	4b1b      	ldr	r3, [pc, #108]	; (8003b74 <HAL_InitTick+0xd4>)
 8003b08:	2200      	movs	r2, #0
 8003b0a:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b0c:	4b19      	ldr	r3, [pc, #100]	; (8003b74 <HAL_InitTick+0xd4>)
 8003b0e:	2200      	movs	r2, #0
 8003b10:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8003b12:	4818      	ldr	r0, [pc, #96]	; (8003b74 <HAL_InitTick+0xd4>)
 8003b14:	f006 ff20 	bl	800a958 <HAL_TIM_Base_Init>
 8003b18:	4603      	mov	r3, r0
 8003b1a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (status == HAL_OK)
 8003b1e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d118      	bne.n	8003b58 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003b26:	4813      	ldr	r0, [pc, #76]	; (8003b74 <HAL_InitTick+0xd4>)
 8003b28:	f007 f82e 	bl	800ab88 <HAL_TIM_Base_Start_IT>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    if (status == HAL_OK)
 8003b32:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d10e      	bne.n	8003b58 <HAL_InitTick+0xb8>
    {
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2b0f      	cmp	r3, #15
 8003b3e:	d808      	bhi.n	8003b52 <HAL_InitTick+0xb2>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8003b40:	2200      	movs	r2, #0
 8003b42:	6879      	ldr	r1, [r7, #4]
 8003b44:	2031      	movs	r0, #49	; 0x31
 8003b46:	f000 faed 	bl	8004124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003b4a:	4a0c      	ldr	r2, [pc, #48]	; (8003b7c <HAL_InitTick+0xdc>)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6013      	str	r3, [r2, #0]
 8003b50:	e002      	b.n	8003b58 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8003b52:	2301      	movs	r3, #1
 8003b54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
    }
  }

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8003b58:	2031      	movs	r0, #49	; 0x31
 8003b5a:	f000 fafd 	bl	8004158 <HAL_NVIC_EnableIRQ>

 /* Return function status */
  return status;
 8003b5e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3738      	adds	r7, #56	; 0x38
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	46020c00 	.word	0x46020c00
 8003b70:	431bde83 	.word	0x431bde83
 8003b74:	20005d78 	.word	0x20005d78
 8003b78:	40001000 	.word	0x40001000
 8003b7c:	20000004 	.word	0x20000004

08003b80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003b80:	b480      	push	{r7}
 8003b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003b84:	e7fe      	b.n	8003b84 <NMI_Handler+0x4>

08003b86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003b86:	b480      	push	{r7}
 8003b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003b8a:	e7fe      	b.n	8003b8a <HardFault_Handler+0x4>

08003b8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003b90:	e7fe      	b.n	8003b90 <MemManage_Handler+0x4>

08003b92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003b92:	b480      	push	{r7}
 8003b94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003b96:	e7fe      	b.n	8003b96 <BusFault_Handler+0x4>

08003b98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003b9c:	e7fe      	b.n	8003b9c <UsageFault_Handler+0x4>

08003b9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003b9e:	b480      	push	{r7}
 8003ba0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003ba2:	bf00      	nop
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <GPDMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles GPDMA1 Channel 1 global interrupt.
  */
void GPDMA1_Channel1_IRQHandler(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 0 */

  /* USER CODE END GPDMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&handle_GPDMA1_Channel1);
 8003bb0:	4802      	ldr	r0, [pc, #8]	; (8003bbc <GPDMA1_Channel1_IRQHandler+0x10>)
 8003bb2:	f001 f849 	bl	8004c48 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN GPDMA1_Channel1_IRQn 1 */

  /* USER CODE END GPDMA1_Channel1_IRQn 1 */
}
 8003bb6:	bf00      	nop
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	20005b5c 	.word	0x20005b5c

08003bc0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003bc4:	4802      	ldr	r0, [pc, #8]	; (8003bd0 <TIM2_IRQHandler+0x10>)
 8003bc6:	f007 f87f 	bl	800acc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003bca:	bf00      	nop
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	20005c04 	.word	0x20005c04

08003bd4 <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003bd8:	4802      	ldr	r0, [pc, #8]	; (8003be4 <TIM6_IRQHandler+0x10>)
 8003bda:	f007 f875 	bl	800acc8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8003bde:	bf00      	nop
 8003be0:	bd80      	pop	{r7, pc}
 8003be2:	bf00      	nop
 8003be4:	20005d78 	.word	0x20005d78

08003be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003be8:	b480      	push	{r7}
 8003bea:	af00      	add	r7, sp, #0
  return 1;
 8003bec:	2301      	movs	r3, #1
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <_kill>:

int _kill(int pid, int sig)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
 8003c00:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003c02:	f00a fb8f 	bl	800e324 <__errno>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2216      	movs	r2, #22
 8003c0a:	601a      	str	r2, [r3, #0]
  return -1;
 8003c0c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3708      	adds	r7, #8
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <_exit>:

void _exit (int status)
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b082      	sub	sp, #8
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f7ff ffe7 	bl	8003bf8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003c2a:	e7fe      	b.n	8003c2a <_exit+0x12>

08003c2c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	60f8      	str	r0, [r7, #12]
 8003c34:	60b9      	str	r1, [r7, #8]
 8003c36:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
 8003c3c:	e00a      	b.n	8003c54 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003c3e:	e000      	b.n	8003c42 <_read+0x16>
 8003c40:	bf00      	nop
 8003c42:	4601      	mov	r1, r0
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	60ba      	str	r2, [r7, #8]
 8003c4a:	b2ca      	uxtb	r2, r1
 8003c4c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	3301      	adds	r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	429a      	cmp	r2, r3
 8003c5a:	dbf0      	blt.n	8003c3e <_read+0x12>
  }

  return len;
 8003c5c:	687b      	ldr	r3, [r7, #4]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3718      	adds	r7, #24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}

08003c66 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c66:	b580      	push	{r7, lr}
 8003c68:	b086      	sub	sp, #24
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	60f8      	str	r0, [r7, #12]
 8003c6e:	60b9      	str	r1, [r7, #8]
 8003c70:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c72:	2300      	movs	r3, #0
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	e009      	b.n	8003c8c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003c78:	68bb      	ldr	r3, [r7, #8]
 8003c7a:	1c5a      	adds	r2, r3, #1
 8003c7c:	60ba      	str	r2, [r7, #8]
 8003c7e:	781b      	ldrb	r3, [r3, #0]
 8003c80:	4618      	mov	r0, r3
 8003c82:	e000      	b.n	8003c86 <_write+0x20>
 8003c84:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c86:	697b      	ldr	r3, [r7, #20]
 8003c88:	3301      	adds	r3, #1
 8003c8a:	617b      	str	r3, [r7, #20]
 8003c8c:	697a      	ldr	r2, [r7, #20]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	429a      	cmp	r2, r3
 8003c92:	dbf1      	blt.n	8003c78 <_write+0x12>
  }
  return len;
 8003c94:	687b      	ldr	r3, [r7, #4]
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3718      	adds	r7, #24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}

08003c9e <_close>:

int _close(int file)
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003ca6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	370c      	adds	r7, #12
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb4:	4770      	bx	lr

08003cb6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003cb6:	b480      	push	{r7}
 8003cb8:	b083      	sub	sp, #12
 8003cba:	af00      	add	r7, sp, #0
 8003cbc:	6078      	str	r0, [r7, #4]
 8003cbe:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003cc0:	683b      	ldr	r3, [r7, #0]
 8003cc2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003cc6:	605a      	str	r2, [r3, #4]
  return 0;
 8003cc8:	2300      	movs	r3, #0
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	370c      	adds	r7, #12
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr

08003cd6 <_isatty>:

int _isatty(int file)
{
 8003cd6:	b480      	push	{r7}
 8003cd8:	b083      	sub	sp, #12
 8003cda:	af00      	add	r7, sp, #0
 8003cdc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003cde:	2301      	movs	r3, #1
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cec:	b480      	push	{r7}
 8003cee:	b085      	sub	sp, #20
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003cf8:	2300      	movs	r3, #0
}
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	3714      	adds	r7, #20
 8003cfe:	46bd      	mov	sp, r7
 8003d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d04:	4770      	bx	lr
	...

08003d08 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003d10:	4a14      	ldr	r2, [pc, #80]	; (8003d64 <_sbrk+0x5c>)
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <_sbrk+0x60>)
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003d18:	697b      	ldr	r3, [r7, #20]
 8003d1a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d1c:	4b13      	ldr	r3, [pc, #76]	; (8003d6c <_sbrk+0x64>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d102      	bne.n	8003d2a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d24:	4b11      	ldr	r3, [pc, #68]	; (8003d6c <_sbrk+0x64>)
 8003d26:	4a12      	ldr	r2, [pc, #72]	; (8003d70 <_sbrk+0x68>)
 8003d28:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d2a:	4b10      	ldr	r3, [pc, #64]	; (8003d6c <_sbrk+0x64>)
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4413      	add	r3, r2
 8003d32:	693a      	ldr	r2, [r7, #16]
 8003d34:	429a      	cmp	r2, r3
 8003d36:	d207      	bcs.n	8003d48 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d38:	f00a faf4 	bl	800e324 <__errno>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	220c      	movs	r2, #12
 8003d40:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d42:	f04f 33ff 	mov.w	r3, #4294967295
 8003d46:	e009      	b.n	8003d5c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d48:	4b08      	ldr	r3, [pc, #32]	; (8003d6c <_sbrk+0x64>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d4e:	4b07      	ldr	r3, [pc, #28]	; (8003d6c <_sbrk+0x64>)
 8003d50:	681a      	ldr	r2, [r3, #0]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4413      	add	r3, r2
 8003d56:	4a05      	ldr	r2, [pc, #20]	; (8003d6c <_sbrk+0x64>)
 8003d58:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d5a:	68fb      	ldr	r3, [r7, #12]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3718      	adds	r7, #24
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	200c0000 	.word	0x200c0000
 8003d68:	00000400 	.word	0x00000400
 8003d6c:	20005dc4 	.word	0x20005dc4
 8003d70:	20006420 	.word	0x20006420

08003d74 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
   SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003d78:	4b18      	ldr	r3, [pc, #96]	; (8003ddc <SystemInit+0x68>)
 8003d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d7e:	4a17      	ldr	r2, [pc, #92]	; (8003ddc <SystemInit+0x68>)
 8003d80:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d84:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR = RCC_CR_MSISON;
 8003d88:	4b15      	ldr	r3, [pc, #84]	; (8003de0 <SystemInit+0x6c>)
 8003d8a:	2201      	movs	r2, #1
 8003d8c:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR1 = 0U;
 8003d8e:	4b14      	ldr	r3, [pc, #80]	; (8003de0 <SystemInit+0x6c>)
 8003d90:	2200      	movs	r2, #0
 8003d92:	61da      	str	r2, [r3, #28]
  RCC->CFGR2 = 0U;
 8003d94:	4b12      	ldr	r3, [pc, #72]	; (8003de0 <SystemInit+0x6c>)
 8003d96:	2200      	movs	r2, #0
 8003d98:	621a      	str	r2, [r3, #32]
  RCC->CFGR3 = 0U;
 8003d9a:	4b11      	ldr	r3, [pc, #68]	; (8003de0 <SystemInit+0x6c>)
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Reset HSEON, CSSON , HSION, PLLxON bits */
  RCC->CR &= ~(RCC_CR_HSEON | RCC_CR_CSSON | RCC_CR_PLL1ON | RCC_CR_PLL2ON | RCC_CR_PLL3ON);
 8003da0:	4b0f      	ldr	r3, [pc, #60]	; (8003de0 <SystemInit+0x6c>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0e      	ldr	r2, [pc, #56]	; (8003de0 <SystemInit+0x6c>)
 8003da6:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003daa:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003dae:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLL1CFGR = 0U;
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <SystemInit+0x6c>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset HSEBYP bit */
  RCC->CR &= ~(RCC_CR_HSEBYP);
 8003db6:	4b0a      	ldr	r3, [pc, #40]	; (8003de0 <SystemInit+0x6c>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a09      	ldr	r2, [pc, #36]	; (8003de0 <SystemInit+0x6c>)
 8003dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dc0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0U;
 8003dc2:	4b07      	ldr	r3, [pc, #28]	; (8003de0 <SystemInit+0x6c>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Configure the Vector Table location add offset address ------------------*/
  #ifdef VECT_TAB_SRAM
    SCB->VTOR = SRAM1_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
  #else
    SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003dc8:	4b04      	ldr	r3, [pc, #16]	; (8003ddc <SystemInit+0x68>)
 8003dca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003dce:	609a      	str	r2, [r3, #8]
  #endif
}
 8003dd0:	bf00      	nop
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr
 8003dda:	bf00      	nop
 8003ddc:	e000ed00 	.word	0xe000ed00
 8003de0:	46020c00 	.word	0x46020c00

08003de4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8003de4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e1c <LoopForever+0x2>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8003de8:	f7ff ffc4 	bl	8003d74 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003dec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003dee:	e003      	b.n	8003df8 <LoopCopyDataInit>

08003df0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003df0:	4b0b      	ldr	r3, [pc, #44]	; (8003e20 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003df2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003df4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003df6:	3104      	adds	r1, #4

08003df8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003df8:	480a      	ldr	r0, [pc, #40]	; (8003e24 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003dfa:	4b0b      	ldr	r3, [pc, #44]	; (8003e28 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003dfc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003dfe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003e00:	d3f6      	bcc.n	8003df0 <CopyDataInit>
	ldr	r2, =_sbss
 8003e02:	4a0a      	ldr	r2, [pc, #40]	; (8003e2c <LoopForever+0x12>)
	b	LoopFillZerobss
 8003e04:	e002      	b.n	8003e0c <LoopFillZerobss>

08003e06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003e06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003e08:	f842 3b04 	str.w	r3, [r2], #4

08003e0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003e0c:	4b08      	ldr	r3, [pc, #32]	; (8003e30 <LoopForever+0x16>)
	cmp	r2, r3
 8003e0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003e10:	d3f9      	bcc.n	8003e06 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e12:	f00a fa8d 	bl	800e330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003e16:	f7ff f89d 	bl	8002f54 <main>

08003e1a <LoopForever>:

LoopForever:
    b LoopForever
 8003e1a:	e7fe      	b.n	8003e1a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8003e1c:	200c0000 	.word	0x200c0000
	ldr	r3, =_sidata
 8003e20:	08011188 	.word	0x08011188
	ldr	r0, =_sdata
 8003e24:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003e28:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8003e2c:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8003e30:	20006420 	.word	0x20006420

08003e34 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003e34:	e7fe      	b.n	8003e34 <ADC1_IRQHandler>
	...

08003e38 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003e38:	b580      	push	{r7, lr}
 8003e3a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003e3c:	4b11      	ldr	r3, [pc, #68]	; (8003e84 <HAL_Init+0x4c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4a10      	ldr	r2, [pc, #64]	; (8003e84 <HAL_Init+0x4c>)
 8003e42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e46:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e48:	2003      	movs	r0, #3
 8003e4a:	f000 f960 	bl	800410e <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 8003e4e:	f003 fcbf 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8003e52:	4602      	mov	r2, r0
 8003e54:	4b0c      	ldr	r3, [pc, #48]	; (8003e88 <HAL_Init+0x50>)
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f003 030f 	and.w	r3, r3, #15
 8003e5c:	490b      	ldr	r1, [pc, #44]	; (8003e8c <HAL_Init+0x54>)
 8003e5e:	5ccb      	ldrb	r3, [r1, r3]
 8003e60:	fa22 f303 	lsr.w	r3, r2, r3
 8003e64:	4a0a      	ldr	r2, [pc, #40]	; (8003e90 <HAL_Init+0x58>)
 8003e66:	6013      	str	r3, [r2, #0]

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003e68:	200f      	movs	r0, #15
 8003e6a:	f7ff fe19 	bl	8003aa0 <HAL_InitTick>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d001      	beq.n	8003e78 <HAL_Init+0x40>
  {
    return HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	e002      	b.n	8003e7e <HAL_Init+0x46>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8003e78:	f7ff fb72 	bl	8003560 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	40022000 	.word	0x40022000
 8003e88:	46020c00 	.word	0x46020c00
 8003e8c:	08010c50 	.word	0x08010c50
 8003e90:	20000000 	.word	0x20000000

08003e94 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003e98:	4b06      	ldr	r3, [pc, #24]	; (8003eb4 <HAL_IncTick+0x20>)
 8003e9a:	781b      	ldrb	r3, [r3, #0]
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	4b06      	ldr	r3, [pc, #24]	; (8003eb8 <HAL_IncTick+0x24>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	4a04      	ldr	r2, [pc, #16]	; (8003eb8 <HAL_IncTick+0x24>)
 8003ea6:	6013      	str	r3, [r2, #0]
}
 8003ea8:	bf00      	nop
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb0:	4770      	bx	lr
 8003eb2:	bf00      	nop
 8003eb4:	20000008 	.word	0x20000008
 8003eb8:	20005dc8 	.word	0x20005dc8

08003ebc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ebc:	b480      	push	{r7}
 8003ebe:	af00      	add	r7, sp, #0
  return uwTick;
 8003ec0:	4b03      	ldr	r3, [pc, #12]	; (8003ed0 <HAL_GetTick+0x14>)
 8003ec2:	681b      	ldr	r3, [r3, #0]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	20005dc8 	.word	0x20005dc8

08003ed4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b084      	sub	sp, #16
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003edc:	f7ff ffee 	bl	8003ebc <HAL_GetTick>
 8003ee0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003eec:	d005      	beq.n	8003efa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003eee:	4b0a      	ldr	r3, [pc, #40]	; (8003f18 <HAL_Delay+0x44>)
 8003ef0:	781b      	ldrb	r3, [r3, #0]
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	4413      	add	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003efa:	bf00      	nop
 8003efc:	f7ff ffde 	bl	8003ebc <HAL_GetTick>
 8003f00:	4602      	mov	r2, r0
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	68fa      	ldr	r2, [r7, #12]
 8003f08:	429a      	cmp	r2, r3
 8003f0a:	d8f7      	bhi.n	8003efc <HAL_Delay+0x28>
  {
  }
}
 8003f0c:	bf00      	nop
 8003f0e:	bf00      	nop
 8003f10:	3710      	adds	r7, #16
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
 8003f16:	bf00      	nop
 8003f18:	20000008 	.word	0x20000008

08003f1c <HAL_SYSCFG_VREFBUF_VoltageScalingConfig>:
  *            @arg SYSCFG_VREFBUF_VOLTAGE_SCALE3: VREF_OUT1 around 2.5 V.
  *                                                This requires VDDA equal to or higher than 2.8 V.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_VoltageScalingConfig(uint32_t VoltageScaling)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	b083      	sub	sp, #12
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_VOLTAGE_SCALE(VoltageScaling));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_VRS, VoltageScaling);
 8003f24:	4b06      	ldr	r3, [pc, #24]	; (8003f40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003f2c:	4904      	ldr	r1, [pc, #16]	; (8003f40 <HAL_SYSCFG_VREFBUF_VoltageScalingConfig+0x24>)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4313      	orrs	r3, r2
 8003f32:	600b      	str	r3, [r1, #0]
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr
 8003f40:	46007400 	.word	0x46007400

08003f44 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig>:
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_DISABLE: VREF+ pin is internally connect to VREFINT output.
  *            @arg SYSCFG_VREFBUF_HIGH_IMPEDANCE_ENABLE: VREF+ pin is high impedance.
  * @retval None
  */
void HAL_SYSCFG_VREFBUF_HighImpedanceConfig(uint32_t Mode)
{
 8003f44:	b480      	push	{r7}
 8003f46:	b083      	sub	sp, #12
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_SYSCFG_VREFBUF_HIGH_IMPEDANCE(Mode));

  MODIFY_REG(VREFBUF->CSR, VREFBUF_CSR_HIZ, Mode);
 8003f4c:	4b06      	ldr	r3, [pc, #24]	; (8003f68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f023 0202 	bic.w	r2, r3, #2
 8003f54:	4904      	ldr	r1, [pc, #16]	; (8003f68 <HAL_SYSCFG_VREFBUF_HighImpedanceConfig+0x24>)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4313      	orrs	r3, r2
 8003f5a:	600b      	str	r3, [r1, #0]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr
 8003f68:	46007400 	.word	0x46007400

08003f6c <HAL_SYSCFG_EnableVREFBUF>:
/**
  * @brief  Enable the Internal Voltage Reference buffer (VREFBUF).
  * @retval HAL_OK/HAL_TIMEOUT
  */
HAL_StatusTypeDef HAL_SYSCFG_EnableVREFBUF(void)
{
 8003f6c:	b580      	push	{r7, lr}
 8003f6e:	b082      	sub	sp, #8
 8003f70:	af00      	add	r7, sp, #0
  uint32_t  tickstart;

  SET_BIT(VREFBUF->CSR, VREFBUF_CSR_ENVR);
 8003f72:	4b0f      	ldr	r3, [pc, #60]	; (8003fb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	4a0e      	ldr	r2, [pc, #56]	; (8003fb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8003f78:	f043 0301 	orr.w	r3, r3, #1
 8003f7c:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8003f7e:	f7ff ff9d 	bl	8003ebc <HAL_GetTick>
 8003f82:	6078      	str	r0, [r7, #4]

  /* Wait for VRR bit  */
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003f84:	e008      	b.n	8003f98 <HAL_SYSCFG_EnableVREFBUF+0x2c>
  {
    if ((HAL_GetTick() - tickstart) > VREFBUF_TIMEOUT_VALUE)
 8003f86:	f7ff ff99 	bl	8003ebc <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b0a      	cmp	r3, #10
 8003f92:	d901      	bls.n	8003f98 <HAL_SYSCFG_EnableVREFBUF+0x2c>
    {
      return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e006      	b.n	8003fa6 <HAL_SYSCFG_EnableVREFBUF+0x3a>
  while (READ_BIT(VREFBUF->CSR, VREFBUF_CSR_VRR) == 0UL)
 8003f98:	4b05      	ldr	r3, [pc, #20]	; (8003fb0 <HAL_SYSCFG_EnableVREFBUF+0x44>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0308 	and.w	r3, r3, #8
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d0f0      	beq.n	8003f86 <HAL_SYSCFG_EnableVREFBUF+0x1a>
    }
  }

  return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3708      	adds	r7, #8
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	46007400 	.word	0x46007400

08003fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	f003 0307 	and.w	r3, r3, #7
 8003fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fc4:	4b0c      	ldr	r3, [pc, #48]	; (8003ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fc6:	68db      	ldr	r3, [r3, #12]
 8003fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fd8:	68bb      	ldr	r3, [r7, #8]
 8003fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003fe6:	4a04      	ldr	r2, [pc, #16]	; (8003ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	60d3      	str	r3, [r2, #12]
}
 8003fec:	bf00      	nop
 8003fee:	3714      	adds	r7, #20
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	e000ed00 	.word	0xe000ed00

08003ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004000:	4b04      	ldr	r3, [pc, #16]	; (8004014 <__NVIC_GetPriorityGrouping+0x18>)
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	0a1b      	lsrs	r3, r3, #8
 8004006:	f003 0307 	and.w	r3, r3, #7
}
 800400a:	4618      	mov	r0, r3
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr
 8004014:	e000ed00 	.word	0xe000ed00

08004018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004018:	b480      	push	{r7}
 800401a:	b083      	sub	sp, #12
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004026:	2b00      	cmp	r3, #0
 8004028:	db0b      	blt.n	8004042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800402a:	79fb      	ldrb	r3, [r7, #7]
 800402c:	f003 021f 	and.w	r2, r3, #31
 8004030:	4907      	ldr	r1, [pc, #28]	; (8004050 <__NVIC_EnableIRQ+0x38>)
 8004032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2001      	movs	r0, #1
 800403a:	fa00 f202 	lsl.w	r2, r0, r2
 800403e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004042:	bf00      	nop
 8004044:	370c      	adds	r7, #12
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
 800404e:	bf00      	nop
 8004050:	e000e100 	.word	0xe000e100

08004054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
 800405a:	4603      	mov	r3, r0
 800405c:	6039      	str	r1, [r7, #0]
 800405e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004064:	2b00      	cmp	r3, #0
 8004066:	db0a      	blt.n	800407e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	b2da      	uxtb	r2, r3
 800406c:	490c      	ldr	r1, [pc, #48]	; (80040a0 <__NVIC_SetPriority+0x4c>)
 800406e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004072:	0112      	lsls	r2, r2, #4
 8004074:	b2d2      	uxtb	r2, r2
 8004076:	440b      	add	r3, r1
 8004078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800407c:	e00a      	b.n	8004094 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	b2da      	uxtb	r2, r3
 8004082:	4908      	ldr	r1, [pc, #32]	; (80040a4 <__NVIC_SetPriority+0x50>)
 8004084:	79fb      	ldrb	r3, [r7, #7]
 8004086:	f003 030f 	and.w	r3, r3, #15
 800408a:	3b04      	subs	r3, #4
 800408c:	0112      	lsls	r2, r2, #4
 800408e:	b2d2      	uxtb	r2, r2
 8004090:	440b      	add	r3, r1
 8004092:	761a      	strb	r2, [r3, #24]
}
 8004094:	bf00      	nop
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr
 80040a0:	e000e100 	.word	0xe000e100
 80040a4:	e000ed00 	.word	0xe000ed00

080040a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b089      	sub	sp, #36	; 0x24
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	60b9      	str	r1, [r7, #8]
 80040b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	f1c3 0307 	rsb	r3, r3, #7
 80040c2:	2b04      	cmp	r3, #4
 80040c4:	bf28      	it	cs
 80040c6:	2304      	movcs	r3, #4
 80040c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040ca:	69fb      	ldr	r3, [r7, #28]
 80040cc:	3304      	adds	r3, #4
 80040ce:	2b06      	cmp	r3, #6
 80040d0:	d902      	bls.n	80040d8 <NVIC_EncodePriority+0x30>
 80040d2:	69fb      	ldr	r3, [r7, #28]
 80040d4:	3b03      	subs	r3, #3
 80040d6:	e000      	b.n	80040da <NVIC_EncodePriority+0x32>
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040dc:	f04f 32ff 	mov.w	r2, #4294967295
 80040e0:	69bb      	ldr	r3, [r7, #24]
 80040e2:	fa02 f303 	lsl.w	r3, r2, r3
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	401a      	ands	r2, r3
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040f0:	f04f 31ff 	mov.w	r1, #4294967295
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43d9      	mvns	r1, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004100:	4313      	orrs	r3, r2
         );
}
 8004102:	4618      	mov	r0, r3
 8004104:	3724      	adds	r7, #36	; 0x24
 8004106:	46bd      	mov	sp, r7
 8004108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410c:	4770      	bx	lr

0800410e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800410e:	b580      	push	{r7, lr}
 8004110:	b082      	sub	sp, #8
 8004112:	af00      	add	r7, sp, #0
 8004114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f7ff ff4c 	bl	8003fb4 <__NVIC_SetPriorityGrouping>
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	4603      	mov	r3, r0
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
 8004130:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004132:	f7ff ff63 	bl	8003ffc <__NVIC_GetPriorityGrouping>
 8004136:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	68b9      	ldr	r1, [r7, #8]
 800413c:	6978      	ldr	r0, [r7, #20]
 800413e:	f7ff ffb3 	bl	80040a8 <NVIC_EncodePriority>
 8004142:	4602      	mov	r2, r0
 8004144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004148:	4611      	mov	r1, r2
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff ff82 	bl	8004054 <__NVIC_SetPriority>
}
 8004150:	bf00      	nop
 8004152:	3718      	adds	r7, #24
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *          CMSIS device file (stm32u5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	4603      	mov	r3, r0
 8004160:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004162:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004166:	4618      	mov	r0, r3
 8004168:	f7ff ff56 	bl	8004018 <__NVIC_EnableIRQ>
}
 800416c:	bf00      	nop
 800416e:	3708      	adds	r7, #8
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}

08004174 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	b082      	sub	sp, #8
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d101      	bne.n	8004186 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004182:	2301      	movs	r3, #1
 8004184:	e014      	b.n	80041b0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	791b      	ldrb	r3, [r3, #4]
 800418a:	b2db      	uxtb	r3, r3
 800418c:	2b00      	cmp	r3, #0
 800418e:	d105      	bne.n	800419c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2200      	movs	r2, #0
 8004194:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004196:	6878      	ldr	r0, [r7, #4]
 8004198:	f7ff fa12 	bl	80035c0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2202      	movs	r2, #2
 80041a0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	2200      	movs	r2, #0
 80041a6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80041ae:	2300      	movs	r3, #0
}
 80041b0:	4618      	mov	r0, r3
 80041b2:	3708      	adds	r7, #8
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}

080041b8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80041b8:	b580      	push	{r7, lr}
 80041ba:	b0a4      	sub	sp, #144	; 0x90
 80041bc:	af00      	add	r7, sp, #0
 80041be:	60f8      	str	r0, [r7, #12]
 80041c0:	60b9      	str	r1, [r7, #8]
 80041c2:	607a      	str	r2, [r7, #4]
 80041c4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	795b      	ldrb	r3, [r3, #5]
 80041ca:	2b01      	cmp	r3, #1
 80041cc:	d101      	bne.n	80041d2 <HAL_DAC_Start_DMA+0x1a>
 80041ce:	2302      	movs	r3, #2
 80041d0:	e19f      	b.n	8004512 <HAL_DAC_Start_DMA+0x35a>
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	2202      	movs	r2, #2
 80041dc:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d12e      	bne.n	8004242 <HAL_DAC_Start_DMA+0x8a>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	689b      	ldr	r3, [r3, #8]
 80041e8:	4a8b      	ldr	r2, [pc, #556]	; (8004418 <HAL_DAC_Start_DMA+0x260>)
 80041ea:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	4a8a      	ldr	r2, [pc, #552]	; (800441c <HAL_DAC_Start_DMA+0x264>)
 80041f2:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	4a89      	ldr	r2, [pc, #548]	; (8004420 <HAL_DAC_Start_DMA+0x268>)
 80041fa:	669a      	str	r2, [r3, #104]	; 0x68

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800420a:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800420c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004210:	2b00      	cmp	r3, #0
 8004212:	d004      	beq.n	800421e <HAL_DAC_Start_DMA+0x66>
 8004214:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004218:	2b04      	cmp	r3, #4
 800421a:	d006      	beq.n	800422a <HAL_DAC_Start_DMA+0x72>
 800421c:	e00b      	b.n	8004236 <HAL_DAC_Start_DMA+0x7e>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	3308      	adds	r3, #8
 8004224:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8004228:	e03a      	b.n	80042a0 <HAL_DAC_Start_DMA+0xe8>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	330c      	adds	r3, #12
 8004230:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8004234:	e034      	b.n	80042a0 <HAL_DAC_Start_DMA+0xe8>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	3310      	adds	r3, #16
 800423c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8004240:	e02e      	b.n	80042a0 <HAL_DAC_Start_DMA+0xe8>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	68db      	ldr	r3, [r3, #12]
 8004246:	4a77      	ldr	r2, [pc, #476]	; (8004424 <HAL_DAC_Start_DMA+0x26c>)
 8004248:	661a      	str	r2, [r3, #96]	; 0x60

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	68db      	ldr	r3, [r3, #12]
 800424e:	4a76      	ldr	r2, [pc, #472]	; (8004428 <HAL_DAC_Start_DMA+0x270>)
 8004250:	665a      	str	r2, [r3, #100]	; 0x64

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	68db      	ldr	r3, [r3, #12]
 8004256:	4a75      	ldr	r2, [pc, #468]	; (800442c <HAL_DAC_Start_DMA+0x274>)
 8004258:	669a      	str	r2, [r3, #104]	; 0x68

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8004268:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800426a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800426e:	2b00      	cmp	r3, #0
 8004270:	d004      	beq.n	800427c <HAL_DAC_Start_DMA+0xc4>
 8004272:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004276:	2b04      	cmp	r3, #4
 8004278:	d006      	beq.n	8004288 <HAL_DAC_Start_DMA+0xd0>
 800427a:	e00b      	b.n	8004294 <HAL_DAC_Start_DMA+0xdc>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3314      	adds	r3, #20
 8004282:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8004286:	e00b      	b.n	80042a0 <HAL_DAC_Start_DMA+0xe8>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	3318      	adds	r3, #24
 800428e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 8004292:	e005      	b.n	80042a0 <HAL_DAC_Start_DMA+0xe8>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	331c      	adds	r3, #28
 800429a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        break;
 800429e:	bf00      	nop
    }
  }

  if (Channel == DAC_CHANNEL_1)
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d17e      	bne.n	80043a4 <HAL_DAC_Start_DMA+0x1ec>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	681a      	ldr	r2, [r3, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80042b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle1->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	689b      	ldr	r3, [r3, #8]
 80042ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d04b      	beq.n	800435c <HAL_DAC_Start_DMA+0x1a4>
    {
      if ((hdac->DMA_Handle1->LinkedListQueue != NULL) && (hdac->DMA_Handle1->LinkedListQueue->Head != NULL))
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	689b      	ldr	r3, [r3, #8]
 80042c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d044      	beq.n	8004358 <HAL_DAC_Start_DMA+0x1a0>
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d03e      	beq.n	8004358 <HAL_DAC_Start_DMA+0x1a0>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle1->LinkedListQueue->Head) != HAL_OK)
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	f107 0318 	add.w	r3, r7, #24
 80042e6:	4611      	mov	r1, r2
 80042e8:	4618      	mov	r0, r3
 80042ea:	f001 f861 	bl	80053b0 <HAL_DMAEx_List_GetNodeConfig>
 80042ee:	4603      	mov	r3, r0
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d001      	beq.n	80042f8 <HAL_DAC_Start_DMA+0x140>
        {
          return HAL_ERROR;
 80042f4:	2301      	movs	r3, #1
 80042f6:	e10c      	b.n	8004512 <HAL_DAC_Start_DMA+0x35a>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80042f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042fa:	2b02      	cmp	r3, #2
 80042fc:	d104      	bne.n	8004308 <HAL_DAC_Start_DMA+0x150>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	009b      	lsls	r3, r3, #2
 8004302:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004306:	e00a      	b.n	800431e <HAL_DAC_Start_DMA+0x166>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004308:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430a:	2b01      	cmp	r3, #1
 800430c:	d104      	bne.n	8004318 <HAL_DAC_Start_DMA+0x160>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	005b      	lsls	r3, r3, #1
 8004312:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004316:	e002      	b.n	800431e <HAL_DAC_Start_DMA+0x166>
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 800432a:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	689b      	ldr	r3, [r3, #8]
 8004330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	687a      	ldr	r2, [r7, #4]
 8004336:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle1->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004344:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle1);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4618      	mov	r0, r3
 800434c:	f000 ff86 	bl	800525c <HAL_DMAEx_List_Start_IT>
 8004350:	4603      	mov	r3, r0
 8004352:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 8004356:	e0b0      	b.n	80044ba <HAL_DAC_Start_DMA+0x302>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8004358:	2301      	movs	r3, #1
 800435a:	e0da      	b.n	8004512 <HAL_DAC_Start_DMA+0x35a>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d104      	bne.n	8004370 <HAL_DAC_Start_DMA+0x1b8>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800436e:	e00c      	b.n	800438a <HAL_DAC_Start_DMA+0x1d2>
      }
      else if (hdac->DMA_Handle1->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	689b      	ldr	r3, [r3, #8]
 8004374:	699b      	ldr	r3, [r3, #24]
 8004376:	2b01      	cmp	r3, #1
 8004378:	d104      	bne.n	8004384 <HAL_DAC_Start_DMA+0x1cc>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	005b      	lsls	r3, r3, #1
 800437e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004382:	e002      	b.n	800438a <HAL_DAC_Start_DMA+0x1d2>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, LengthInBytes);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6898      	ldr	r0, [r3, #8]
 800438e:	6879      	ldr	r1, [r7, #4]
 8004390:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004394:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8004398:	f000 fb7a 	bl	8004a90 <HAL_DMA_Start_IT>
 800439c:	4603      	mov	r3, r0
 800439e:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 80043a2:	e08a      	b.n	80044ba <HAL_DAC_Start_DMA+0x302>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80043b2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    /* Check linkedlist mode */
    if ((hdac->DMA_Handle2->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d058      	beq.n	8004474 <HAL_DAC_Start_DMA+0x2bc>
    {
      if ((hdac->DMA_Handle2->LinkedListQueue != NULL) && (hdac->DMA_Handle2->LinkedListQueue->Head != NULL))
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	68db      	ldr	r3, [r3, #12]
 80043c6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d051      	beq.n	8004470 <HAL_DAC_Start_DMA+0x2b8>
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	68db      	ldr	r3, [r3, #12]
 80043d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d04b      	beq.n	8004470 <HAL_DAC_Start_DMA+0x2b8>
      {
        /* Length should be converted to number of bytes */
        if (HAL_DMAEx_List_GetNodeConfig(&node_conf, hdac->DMA_Handle2->LinkedListQueue->Head) != HAL_OK)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	f107 0318 	add.w	r3, r7, #24
 80043e4:	4611      	mov	r1, r2
 80043e6:	4618      	mov	r0, r3
 80043e8:	f000 ffe2 	bl	80053b0 <HAL_DMAEx_List_GetNodeConfig>
 80043ec:	4603      	mov	r3, r0
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d001      	beq.n	80043f6 <HAL_DAC_Start_DMA+0x23e>
        {
          return HAL_ERROR;
 80043f2:	2301      	movs	r3, #1
 80043f4:	e08d      	b.n	8004512 <HAL_DAC_Start_DMA+0x35a>
        }

        /* Length should be converted to number of bytes */
        if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 80043f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043f8:	2b02      	cmp	r3, #2
 80043fa:	d104      	bne.n	8004406 <HAL_DAC_Start_DMA+0x24e>
        {
          /* Word -> Bytes */
          LengthInBytes = Length * 4U;
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004404:	e017      	b.n	8004436 <HAL_DAC_Start_DMA+0x27e>
        }
        else if (node_conf.Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004408:	2b01      	cmp	r3, #1
 800440a:	d111      	bne.n	8004430 <HAL_DAC_Start_DMA+0x278>
        {
          /* Halfword -> Bytes */
          LengthInBytes = Length * 2U;
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	005b      	lsls	r3, r3, #1
 8004410:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004414:	e00f      	b.n	8004436 <HAL_DAC_Start_DMA+0x27e>
 8004416:	bf00      	nop
 8004418:	0800491d 	.word	0x0800491d
 800441c:	0800493f 	.word	0x0800493f
 8004420:	0800495b 	.word	0x0800495b
 8004424:	08004a25 	.word	0x08004a25
 8004428:	08004a47 	.word	0x08004a47
 800442c:	08004a63 	.word	0x08004a63
        }
        else /* Bytes */
        {
          /* Same size already expressed in Bytes */
          LengthInBytes = Length;
 8004430:	683b      	ldr	r3, [r7, #0]
 8004432:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
        }

        /* Set DMA data size */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = LengthInBytes;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8004442:	609a      	str	r2, [r3, #8]

        /* Set DMA source address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = (uint32_t)pData;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	687a      	ldr	r2, [r7, #4]
 800444e:	60da      	str	r2, [r3, #12]

        /* Set DMA destination address */
        hdac->DMA_Handle2->LinkedListQueue->Head->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = tmpreg;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	68db      	ldr	r3, [r3, #12]
 8004454:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800445c:	611a      	str	r2, [r3, #16]

        /* Enable the DMA channel */
        status = HAL_DMAEx_List_Start_IT(hdac->DMA_Handle2);
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	4618      	mov	r0, r3
 8004464:	f000 fefa 	bl	800525c <HAL_DMAEx_List_Start_IT>
 8004468:	4603      	mov	r3, r0
 800446a:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
 800446e:	e024      	b.n	80044ba <HAL_DAC_Start_DMA+0x302>
      }
      else
      {
        /* Return error status */
        return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e04e      	b.n	8004512 <HAL_DAC_Start_DMA+0x35a>
      }
    }
    else
    {
      /* Length should be converted to number of bytes */
      if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_WORD)
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b02      	cmp	r3, #2
 800447c:	d104      	bne.n	8004488 <HAL_DAC_Start_DMA+0x2d0>
      {
        /* Word -> Bytes */
        LengthInBytes = Length * 4U;
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004486:	e00c      	b.n	80044a2 <HAL_DAC_Start_DMA+0x2ea>
      }
      else if (hdac->DMA_Handle2->Init.SrcDataWidth == DMA_SRC_DATAWIDTH_HALFWORD)
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	68db      	ldr	r3, [r3, #12]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d104      	bne.n	800449c <HAL_DAC_Start_DMA+0x2e4>
      {
        /* Halfword -> Bytes */
        LengthInBytes = Length * 2U;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	005b      	lsls	r3, r3, #1
 8004496:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800449a:	e002      	b.n	80044a2 <HAL_DAC_Start_DMA+0x2ea>
      }
      else /* Bytes */
      {
        /* Same size already expressed in Bytes */
        LengthInBytes = Length;
 800449c:	683b      	ldr	r3, [r7, #0]
 800449e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }

      /* Enable the DMA channel */
      status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, LengthInBytes);
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	68d8      	ldr	r0, [r3, #12]
 80044a6:	6879      	ldr	r1, [r7, #4]
 80044a8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80044ac:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80044b0:	f000 faee 	bl	8004a90 <HAL_DMA_Start_IT>
 80044b4:	4603      	mov	r3, r0
 80044b6:	f887 308f 	strb.w	r3, [r7, #143]	; 0x8f
    }
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	2200      	movs	r2, #0
 80044be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 80044c0:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d11c      	bne.n	8004502 <HAL_DAC_Start_DMA+0x34a>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6819      	ldr	r1, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	f003 0310 	and.w	r3, r3, #16
 80044d4:	2201      	movs	r2, #1
 80044d6:	409a      	lsls	r2, r3
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	430a      	orrs	r2, r1
 80044de:	601a      	str	r2, [r3, #0]
    /* Ensure minimum wait before using peripheral after enabling it */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((DAC_DELAY_STARTUP_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80044e0:	4b0e      	ldr	r3, [pc, #56]	; (800451c <HAL_DAC_Start_DMA+0x364>)
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	099b      	lsrs	r3, r3, #6
 80044e6:	4a0e      	ldr	r2, [pc, #56]	; (8004520 <HAL_DAC_Start_DMA+0x368>)
 80044e8:	fba2 2303 	umull	r2, r3, r2, r3
 80044ec:	099b      	lsrs	r3, r3, #6
 80044ee:	3301      	adds	r3, #1
 80044f0:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80044f2:	e002      	b.n	80044fa <HAL_DAC_Start_DMA+0x342>
    {
      wait_loop_index--;
 80044f4:	697b      	ldr	r3, [r7, #20]
 80044f6:	3b01      	subs	r3, #1
 80044f8:	617b      	str	r3, [r7, #20]
    while (wait_loop_index != 0UL)
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1f9      	bne.n	80044f4 <HAL_DAC_Start_DMA+0x33c>
 8004500:	e005      	b.n	800450e <HAL_DAC_Start_DMA+0x356>
    }
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	691b      	ldr	r3, [r3, #16]
 8004506:	f043 0204 	orr.w	r2, r3, #4
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800450e:	f897 308f 	ldrb.w	r3, [r7, #143]	; 0x8f
}
 8004512:	4618      	mov	r0, r3
 8004514:	3790      	adds	r7, #144	; 0x90
 8004516:	46bd      	mov	sp, r7
 8004518:	bd80      	pop	{r7, pc}
 800451a:	bf00      	nop
 800451c:	20000000 	.word	0x20000000
 8004520:	053e2d63 	.word	0x053e2d63

08004524 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004524:	b580      	push	{r7, lr}
 8004526:	b082      	sub	sp, #8
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6819      	ldr	r1, [r3, #0]
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	f003 0310 	and.w	r3, r3, #16
 800453a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800453e:	fa02 f303 	lsl.w	r3, r2, r3
 8004542:	43da      	mvns	r2, r3
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	400a      	ands	r2, r1
 800454a:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	6819      	ldr	r1, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f003 0310 	and.w	r3, r3, #16
 8004558:	2201      	movs	r2, #1
 800455a:	fa02 f303 	lsl.w	r3, r2, r3
 800455e:	43da      	mvns	r2, r3
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	400a      	ands	r2, r1
 8004566:	601a      	str	r2, [r3, #0]

  /* Disable the DMA channel */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10d      	bne.n	800458a <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	689b      	ldr	r3, [r3, #8]
 8004572:	4618      	mov	r0, r3
 8004574:	f000 faec 	bl	8004b50 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	681a      	ldr	r2, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004586:	601a      	str	r2, [r3, #0]
 8004588:	e00c      	b.n	80045a4 <HAL_DAC_Stop_DMA+0x80>
  }

  else /* Channel2 is used for */
  {
    /* Disable the DMA channel */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	4618      	mov	r0, r3
 8004590:	f000 fade 	bl	8004b50 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	681a      	ldr	r2, [r3, #0]
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 80045a2:	601a      	str	r2, [r3, #0]
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	2201      	movs	r2, #1
 80045a8:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80045aa:	2300      	movs	r3, #0
}
 80045ac:	4618      	mov	r0, r3
 80045ae:	3708      	adds	r7, #8
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bd80      	pop	{r7, pc}

080045b4 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045b4:	b480      	push	{r7}
 80045b6:	b083      	sub	sp, #12
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 80045bc:	bf00      	nop
 80045be:	370c      	adds	r7, #12
 80045c0:	46bd      	mov	sp, r7
 80045c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c6:	4770      	bx	lr

080045c8 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045da:	4770      	bx	lr

080045dc <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80045dc:	b480      	push	{r7}
 80045de:	b083      	sub	sp, #12
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 80045e4:	bf00      	nop
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b08a      	sub	sp, #40	; 0x28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	60b9      	str	r1, [r7, #8]
 80045fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045fc:	2300      	movs	r3, #0
 80045fe:	77fb      	strb	r3, [r7, #31]
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	795b      	ldrb	r3, [r3, #5]
 8004604:	2b01      	cmp	r3, #1
 8004606:	d101      	bne.n	800460c <HAL_DAC_ConfigChannel+0x1c>
 8004608:	2302      	movs	r3, #2
 800460a:	e17e      	b.n	800490a <HAL_DAC_ConfigChannel+0x31a>
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2201      	movs	r2, #1
 8004610:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2202      	movs	r2, #2
 8004616:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	2b04      	cmp	r3, #4
 800461e:	d17a      	bne.n	8004716 <HAL_DAC_ConfigChannel+0x126>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004620:	f7ff fc4c 	bl	8003ebc <HAL_GetTick>
 8004624:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d13d      	bne.n	80046a8 <HAL_DAC_ConfigChannel+0xb8>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800462c:	e018      	b.n	8004660 <HAL_DAC_ConfigChannel+0x70>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800462e:	f7ff fc45 	bl	8003ebc <HAL_GetTick>
 8004632:	4602      	mov	r2, r0
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1ad3      	subs	r3, r2, r3
 8004638:	2b01      	cmp	r3, #1
 800463a:	d911      	bls.n	8004660 <HAL_DAC_ConfigChannel+0x70>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004642:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004646:	2b00      	cmp	r3, #0
 8004648:	d00a      	beq.n	8004660 <HAL_DAC_ConfigChannel+0x70>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	691b      	ldr	r3, [r3, #16]
 800464e:	f043 0208 	orr.w	r2, r3, #8
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	2203      	movs	r2, #3
 800465a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 800465c:	2303      	movs	r3, #3
 800465e:	e154      	b.n	800490a <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004666:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1df      	bne.n	800462e <HAL_DAC_ConfigChannel+0x3e>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	68ba      	ldr	r2, [r7, #8]
 8004674:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004676:	641a      	str	r2, [r3, #64]	; 0x40
 8004678:	e020      	b.n	80046bc <HAL_DAC_ConfigChannel+0xcc>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800467a:	f7ff fc1f 	bl	8003ebc <HAL_GetTick>
 800467e:	4602      	mov	r2, r0
 8004680:	69bb      	ldr	r3, [r7, #24]
 8004682:	1ad3      	subs	r3, r2, r3
 8004684:	2b01      	cmp	r3, #1
 8004686:	d90f      	bls.n	80046a8 <HAL_DAC_ConfigChannel+0xb8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	2b00      	cmp	r3, #0
 8004690:	da0a      	bge.n	80046a8 <HAL_DAC_ConfigChannel+0xb8>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	691b      	ldr	r3, [r3, #16]
 8004696:	f043 0208 	orr.w	r2, r3, #8
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2203      	movs	r2, #3
 80046a2:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80046a4:	2303      	movs	r3, #3
 80046a6:	e130      	b.n	800490a <HAL_DAC_ConfigChannel+0x31a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	dbe3      	blt.n	800467a <HAL_DAC_ConfigChannel+0x8a>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80046ba:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f003 0310 	and.w	r3, r3, #16
 80046c8:	f240 31ff 	movw	r1, #1023	; 0x3ff
 80046cc:	fa01 f303 	lsl.w	r3, r1, r3
 80046d0:	43db      	mvns	r3, r3
 80046d2:	ea02 0103 	and.w	r1, r2, r3
 80046d6:	68bb      	ldr	r3, [r7, #8]
 80046d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f003 0310 	and.w	r3, r3, #16
 80046e0:	409a      	lsls	r2, r3
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f003 0310 	and.w	r3, r3, #16
 80046f6:	21ff      	movs	r1, #255	; 0xff
 80046f8:	fa01 f303 	lsl.w	r3, r1, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	ea02 0103 	and.w	r1, r2, r3
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	f003 0310 	and.w	r3, r3, #16
 800470c:	409a      	lsls	r2, r3
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	430a      	orrs	r2, r1
 8004714:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  /* Autonomous mode configuration */
  MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->DAC_AutonomousMode);
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800471c:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	685a      	ldr	r2, [r3, #4]
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	430a      	orrs	r2, r1
 800472a:	655a      	str	r2, [r3, #84]	; 0x54

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800472c:	68bb      	ldr	r3, [r7, #8]
 800472e:	69db      	ldr	r3, [r3, #28]
 8004730:	2b01      	cmp	r3, #1
 8004732:	d11d      	bne.n	8004770 <HAL_DAC_ConfigChannel+0x180>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	f003 0310 	and.w	r3, r3, #16
 8004742:	221f      	movs	r2, #31
 8004744:	fa02 f303 	lsl.w	r3, r2, r3
 8004748:	43db      	mvns	r3, r3
 800474a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800474c:	4013      	ands	r3, r2
 800474e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004750:	68bb      	ldr	r3, [r7, #8]
 8004752:	6a1b      	ldr	r3, [r3, #32]
 8004754:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	fa02 f303 	lsl.w	r3, r2, r3
 8004762:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004764:	4313      	orrs	r3, r2
 8004766:	627b      	str	r3, [r7, #36]	; 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800476e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004776:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f003 0310 	and.w	r3, r3, #16
 800477e:	2207      	movs	r2, #7
 8004780:	fa02 f303 	lsl.w	r3, r2, r3
 8004784:	43db      	mvns	r3, r3
 8004786:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004788:	4013      	ands	r3, r2
 800478a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800478c:	68bb      	ldr	r3, [r7, #8]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	2b01      	cmp	r3, #1
 8004792:	d102      	bne.n	800479a <HAL_DAC_ConfigChannel+0x1aa>
  {
    connectOnChip = 0x00000000UL;
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	e00f      	b.n	80047ba <HAL_DAC_ConfigChannel+0x1ca>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	699b      	ldr	r3, [r3, #24]
 800479e:	2b02      	cmp	r3, #2
 80047a0:	d102      	bne.n	80047a8 <HAL_DAC_ConfigChannel+0x1b8>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 80047a2:	2301      	movs	r3, #1
 80047a4:	623b      	str	r3, [r7, #32]
 80047a6:	e008      	b.n	80047ba <HAL_DAC_ConfigChannel+0x1ca>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 80047a8:	68bb      	ldr	r3, [r7, #8]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d102      	bne.n	80047b6 <HAL_DAC_ConfigChannel+0x1c6>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 80047b0:	2301      	movs	r3, #1
 80047b2:	623b      	str	r3, [r7, #32]
 80047b4:	e001      	b.n	80047ba <HAL_DAC_ConfigChannel+0x1ca>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 80047b6:	2300      	movs	r3, #0
 80047b8:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 80047ba:	68bb      	ldr	r3, [r7, #8]
 80047bc:	68da      	ldr	r2, [r3, #12]
 80047be:	68bb      	ldr	r3, [r7, #8]
 80047c0:	695b      	ldr	r3, [r3, #20]
 80047c2:	4313      	orrs	r3, r2
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	f003 0310 	and.w	r3, r3, #16
 80047d0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80047d4:	fa02 f303 	lsl.w	r3, r2, r3
 80047d8:	43db      	mvns	r3, r3
 80047da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80047dc:	4013      	ands	r3, r2
 80047de:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 80047e0:	68bb      	ldr	r3, [r7, #8]
 80047e2:	7a1b      	ldrb	r3, [r3, #8]
 80047e4:	2b01      	cmp	r3, #1
 80047e6:	d102      	bne.n	80047ee <HAL_DAC_ConfigChannel+0x1fe>
 80047e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80047ec:	e000      	b.n	80047f0 <HAL_DAC_ConfigChannel+0x200>
 80047ee:	2300      	movs	r3, #0
 80047f0:	697a      	ldr	r2, [r7, #20]
 80047f2:	4313      	orrs	r3, r2
 80047f4:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	f003 0310 	and.w	r3, r3, #16
 80047fc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	43db      	mvns	r3, r3
 8004806:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004808:	4013      	ands	r3, r2
 800480a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 800480c:	68bb      	ldr	r3, [r7, #8]
 800480e:	7a5b      	ldrb	r3, [r3, #9]
 8004810:	2b01      	cmp	r3, #1
 8004812:	d102      	bne.n	800481a <HAL_DAC_ConfigChannel+0x22a>
 8004814:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004818:	e000      	b.n	800481c <HAL_DAC_ConfigChannel+0x22c>
 800481a:	2300      	movs	r3, #0
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	4313      	orrs	r3, r2
 8004820:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8004822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004824:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8004828:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	2b02      	cmp	r3, #2
 8004830:	d114      	bne.n	800485c <HAL_DAC_ConfigChannel+0x26c>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8004832:	f003 f8d5 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 8004836:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	4a36      	ldr	r2, [pc, #216]	; (8004914 <HAL_DAC_ConfigChannel+0x324>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d904      	bls.n	800484a <HAL_DAC_ConfigChannel+0x25a>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004846:	627b      	str	r3, [r7, #36]	; 0x24
 8004848:	e00f      	b.n	800486a <HAL_DAC_ConfigChannel+0x27a>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4a32      	ldr	r2, [pc, #200]	; (8004918 <HAL_DAC_ConfigChannel+0x328>)
 800484e:	4293      	cmp	r3, r2
 8004850:	d90a      	bls.n	8004868 <HAL_DAC_ConfigChannel+0x278>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004854:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004858:	627b      	str	r3, [r7, #36]	; 0x24
 800485a:	e006      	b.n	800486a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004862:	4313      	orrs	r3, r2
 8004864:	627b      	str	r3, [r7, #36]	; 0x24
 8004866:	e000      	b.n	800486a <HAL_DAC_ConfigChannel+0x27a>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8004868:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	f003 0310 	and.w	r3, r3, #16
 8004870:	697a      	ldr	r2, [r7, #20]
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004878:	4313      	orrs	r3, r2
 800487a:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004882:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	6819      	ldr	r1, [r3, #0]
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f003 0310 	and.w	r3, r3, #16
 8004890:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004894:	fa02 f303 	lsl.w	r3, r2, r3
 8004898:	43da      	mvns	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	400a      	ands	r2, r1
 80048a0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f003 0310 	and.w	r3, r3, #16
 80048b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80048b4:	fa02 f303 	lsl.w	r3, r2, r3
 80048b8:	43db      	mvns	r3, r3
 80048ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048bc:	4013      	ands	r3, r2
 80048be:	627b      	str	r3, [r7, #36]	; 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80048c0:	68bb      	ldr	r3, [r7, #8]
 80048c2:	691b      	ldr	r3, [r3, #16]
 80048c4:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	f003 0310 	and.w	r3, r3, #16
 80048cc:	697a      	ldr	r2, [r7, #20]
 80048ce:	fa02 f303 	lsl.w	r3, r2, r3
 80048d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048d4:	4313      	orrs	r3, r2
 80048d6:	627b      	str	r3, [r7, #36]	; 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	6819      	ldr	r1, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	f003 0310 	and.w	r3, r3, #16
 80048ec:	22c0      	movs	r2, #192	; 0xc0
 80048ee:	fa02 f303 	lsl.w	r3, r2, r3
 80048f2:	43da      	mvns	r2, r3
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	400a      	ands	r2, r1
 80048fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	2201      	movs	r2, #1
 8004900:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	2200      	movs	r2, #0
 8004906:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8004908:	7ffb      	ldrb	r3, [r7, #31]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3728      	adds	r7, #40	; 0x28
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
 8004912:	bf00      	nop
 8004914:	09896800 	.word	0x09896800
 8004918:	04c4b400 	.word	0x04c4b400

0800491c <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b084      	sub	sp, #16
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004928:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800492a:	68f8      	ldr	r0, [r7, #12]
 800492c:	f7ff fe42 	bl	80045b4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	2201      	movs	r2, #1
 8004934:	711a      	strb	r2, [r3, #4]
}
 8004936:	bf00      	nop
 8004938:	3710      	adds	r7, #16
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b084      	sub	sp, #16
 8004942:	af00      	add	r7, sp, #0
 8004944:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800494c:	68f8      	ldr	r0, [r7, #12]
 800494e:	f7ff fe3b 	bl	80045c8 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004952:	bf00      	nop
 8004954:	3710      	adds	r7, #16
 8004956:	46bd      	mov	sp, r7
 8004958:	bd80      	pop	{r7, pc}

0800495a <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800495a:	b580      	push	{r7, lr}
 800495c:	b084      	sub	sp, #16
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004966:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	691b      	ldr	r3, [r3, #16]
 800496c:	f043 0204 	orr.w	r2, r3, #4
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8004974:	68f8      	ldr	r0, [r7, #12]
 8004976:	f7ff fe31 	bl	80045dc <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	2201      	movs	r2, #1
 800497e:	711a      	strb	r2, [r3, #4]
}
 8004980:	bf00      	nop
 8004982:	3710      	adds	r7, #16
 8004984:	46bd      	mov	sp, r7
 8004986:	bd80      	pop	{r7, pc}

08004988 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8004988:	b480      	push	{r7}
 800498a:	b083      	sub	sp, #12
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8004990:	bf00      	nop
 8004992:	370c      	adds	r7, #12
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr

0800499c <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800499c:	b480      	push	{r7}
 800499e:	b083      	sub	sp, #12
 80049a0:	af00      	add	r7, sp, #0
 80049a2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80049a4:	bf00      	nop
 80049a6:	370c      	adds	r7, #12
 80049a8:	46bd      	mov	sp, r7
 80049aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ae:	4770      	bx	lr

080049b0 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b083      	sub	sp, #12
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80049b8:	bf00      	nop
 80049ba:	370c      	adds	r7, #12
 80049bc:	46bd      	mov	sp, r7
 80049be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c2:	4770      	bx	lr

080049c4 <HAL_DACEx_SetConfigAutonomousMode>:
  * @param sConfig pointer to Autonomous mode structure parameters.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DACEx_SetConfigAutonomousMode(DAC_HandleTypeDef *hdac,
                                                    const DAC_AutonomousModeConfTypeDef *sConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_DAC_AUTONOMOUS(sConfig->AutonomousModeState));

  if (hdac->State == HAL_DAC_STATE_READY)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	791b      	ldrb	r3, [r3, #4]
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d11e      	bne.n	8004a16 <HAL_DACEx_SetConfigAutonomousMode+0x52>
  {
    /* Process Locked */
    __HAL_LOCK(hdac);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	795b      	ldrb	r3, [r3, #5]
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_DACEx_SetConfigAutonomousMode+0x20>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e019      	b.n	8004a18 <HAL_DACEx_SetConfigAutonomousMode+0x54>
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	715a      	strb	r2, [r3, #5]

    hdac->State = HAL_DAC_STATE_BUSY;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2202      	movs	r2, #2
 80049ee:	711a      	strb	r2, [r3, #4]

    /* NOTE: The set/reset of the bit automode in the AUTOCR
             register is for both dac_channel1 and dac_channel2 */

    /* Update the AUTOCR register */
    MODIFY_REG(hdac->Instance->AUTOCR, DAC_AUTOCR_AUTOMODE, sConfig->AutonomousModeState);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049f6:	f423 0180 	bic.w	r1, r3, #4194304	; 0x400000
 80049fa:	683b      	ldr	r3, [r7, #0]
 80049fc:	681a      	ldr	r2, [r3, #0]
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	430a      	orrs	r2, r1
 8004a04:	655a      	str	r2, [r3, #84]	; 0x54

    /* Update the DAC state */
    hdac->State = HAL_DAC_STATE_READY;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2201      	movs	r2, #1
 8004a0a:	711a      	strb	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdac);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	715a      	strb	r2, [r3, #5]

    return HAL_OK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	e000      	b.n	8004a18 <HAL_DACEx_SetConfigAutonomousMode+0x54>
  }
  else
  {
    return HAL_BUSY;
 8004a16:	2302      	movs	r3, #2
  }
}
 8004a18:	4618      	mov	r0, r3
 8004a1a:	370c      	adds	r7, #12
 8004a1c:	46bd      	mov	sp, r7
 8004a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a22:	4770      	bx	lr

08004a24 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8004a32:	68f8      	ldr	r0, [r7, #12]
 8004a34:	f7ff ffa8 	bl	8004988 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	711a      	strb	r2, [r3, #4]
}
 8004a3e:	bf00      	nop
 8004a40:	3710      	adds	r7, #16
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a52:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f7ff ffa1 	bl	800499c <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a6e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	691b      	ldr	r3, [r3, #16]
 8004a74:	f043 0204 	orr.w	r2, r3, #4
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f7ff ff97 	bl	80049b0 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	2201      	movs	r2, #1
 8004a86:	711a      	strb	r2, [r3, #4]
}
 8004a88:	bf00      	nop
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_DMA_Start_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *const hdma,
                                   uint32_t SrcAddress,
                                   uint32_t DstAddress,
                                   uint32_t SrcDataSize)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b084      	sub	sp, #16
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	60f8      	str	r0, [r7, #12]
 8004a98:	60b9      	str	r1, [r7, #8]
 8004a9a:	607a      	str	r2, [r7, #4]
 8004a9c:	603b      	str	r3, [r7, #0]
  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d101      	bne.n	8004aa8 <HAL_DMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	e04f      	b.n	8004b48 <HAL_DMA_Start_IT+0xb8>

  /* Check the parameters */
  assert_param(IS_DMA_BLOCK_SIZE(SrcDataSize));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8004aae:	2b01      	cmp	r3, #1
 8004ab0:	d101      	bne.n	8004ab6 <HAL_DMA_Start_IT+0x26>
 8004ab2:	2302      	movs	r3, #2
 8004ab4:	e048      	b.n	8004b48 <HAL_DMA_Start_IT+0xb8>
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2201      	movs	r2, #1
 8004aba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Check DMA channel state */
  if (hdma->State == HAL_DMA_STATE_READY)
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004ac4:	b2db      	uxtb	r3, r3
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d136      	bne.n	8004b38 <HAL_DMA_Start_IT+0xa8>
  {
    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2202      	movs	r2, #2
 8004ace:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Configure the source address, destination address, the data size and clear flags */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, SrcDataSize);
 8004ad8:	683b      	ldr	r3, [r7, #0]
 8004ada:	687a      	ldr	r2, [r7, #4]
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	68f8      	ldr	r0, [r7, #12]
 8004ae0:	f000 fa68 	bl	8004fb4 <DMA_SetConfig>

    /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
    __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	695a      	ldr	r2, [r3, #20]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 8004af2:	615a      	str	r2, [r3, #20]

    /* Check half transfer complete callback */
    if (hdma->XferHalfCpltCallback != NULL)
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d007      	beq.n	8004b0c <HAL_DMA_Start_IT+0x7c>
    {
      /* If Half Transfer complete callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	695a      	ldr	r2, [r3, #20]
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b0a:	615a      	str	r2, [r3, #20]
    }

    /* Check Half suspend callback */
    if (hdma->XferSuspendCallback != NULL)
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d007      	beq.n	8004b24 <HAL_DMA_Start_IT+0x94>
    {
      /* If Transfer suspend callback is set, enable the corresponding IT */
      __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	695a      	ldr	r2, [r3, #20]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b22:	615a      	str	r2, [r3, #20]
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	695a      	ldr	r2, [r3, #20]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	e007      	b.n	8004b48 <HAL_DMA_Start_IT+0xb8>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2240      	movs	r2, #64	; 0x40
 8004b3c:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
}
 8004b48:	4618      	mov	r0, r3
 8004b4a:	3710      	adds	r7, #16
 8004b4c:	46bd      	mov	sp, r7
 8004b4e:	bd80      	pop	{r7, pc}

08004b50 <HAL_DMA_Abort>:
  *         is suspended while a data transfer is on-going, the current data will be transferred and the channel will be
  *         effectively suspended only after the transfer of any on-going data is finished.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *const hdma)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart =  HAL_GetTick();
 8004b58:	f7ff f9b0 	bl	8003ebc <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d101      	bne.n	8004b68 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8004b64:	2301      	movs	r3, #1
 8004b66:	e06b      	b.n	8004c40 <HAL_DMA_Abort+0xf0>
  }

  /* Check DMA channel state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004b6e:	b2db      	uxtb	r3, r3
 8004b70:	2b02      	cmp	r3, #2
 8004b72:	d008      	beq.n	8004b86 <HAL_DMA_Abort+0x36>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	2220      	movs	r2, #32
 8004b78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e05c      	b.n	8004c40 <HAL_DMA_Abort+0xf0>
  }
  else
  {
    /* Suspend the channel */
    hdma->Instance->CCR |= DMA_CCR_SUSP;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	695a      	ldr	r2, [r3, #20]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0204 	orr.w	r2, r2, #4
 8004b94:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_SUSPEND;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2205      	movs	r2, #5
 8004b9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check if the DMA Channel is suspended */
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004b9e:	e020      	b.n	8004be2 <HAL_DMA_Abort+0x92>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8004ba0:	f7ff f98c 	bl	8003ebc <HAL_GetTick>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	1ad3      	subs	r3, r2, r3
 8004baa:	2b05      	cmp	r3, #5
 8004bac:	d919      	bls.n	8004be2 <HAL_DMA_Abort+0x92>
      {
        /* Update the DMA channel error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TIMEOUT;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb2:	f043 0210 	orr.w	r2, r3, #16
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2203      	movs	r2, #3
 8004bbe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d003      	beq.n	8004bd6 <HAL_DMA_Abort+0x86>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	731a      	strb	r2, [r3, #12]
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        return HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	e02e      	b.n	8004c40 <HAL_DMA_Abort+0xf0>
    while ((hdma->Instance->CSR & DMA_CSR_SUSPF) == 0U)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	691b      	ldr	r3, [r3, #16]
 8004be8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d0d7      	beq.n	8004ba0 <HAL_DMA_Abort+0x50>
      }
    }

    /* Reset the channel */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	695a      	ldr	r2, [r3, #20]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0202 	orr.w	r2, r2, #2
 8004bfe:	615a      	str	r2, [r3, #20]

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2204      	movs	r2, #4
 8004c04:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Clear all status flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004c10:	60da      	str	r2, [r3, #12]
                                DMA_FLAG_TO));

    /* Update the DMA channel state */
    hdma->State = HAL_DMA_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d007      	beq.n	8004c36 <HAL_DMA_Abort+0xe6>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	731a      	strb	r2, [r3, #12]

      /* Clear remaining data size to ensure loading linked-list from memory next start */
      hdma->Instance->CBR1 = 0U;
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	2200      	movs	r2, #0
 8004c34:	649a      	str	r2, [r3, #72]	; 0x48
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	2200      	movs	r2, #0
 8004c3a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8004c3e:	2300      	movs	r3, #0
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	3710      	adds	r7, #16
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}

08004c48 <HAL_DMA_IRQHandler>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *const hdma)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b086      	sub	sp, #24
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  DMA_TypeDef *p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004c58:	f023 030f 	bic.w	r3, r3, #15
 8004c5c:	617b      	str	r3, [r7, #20]
  uint32_t global_it_flag =  1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c66:	3b50      	subs	r3, #80	; 0x50
 8004c68:	09db      	lsrs	r3, r3, #7
 8004c6a:	f003 031f 	and.w	r3, r3, #31
 8004c6e:	2201      	movs	r2, #1
 8004c70:	fa02 f303 	lsl.w	r3, r2, r3
 8004c74:	613b      	str	r3, [r7, #16]
  uint32_t global_active_flag_ns = IS_DMA_GLOBAL_ACTIVE_FLAG_NS(p_dma_instance, global_it_flag);
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	693a      	ldr	r2, [r7, #16]
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	60fb      	str	r3, [r7, #12]

  /* Global Interrupt Flag management *********************************************************************************/
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  if ((global_active_flag_s == 0U) && (global_active_flag_ns == 0U))
#else
  if (global_active_flag_ns == 0U)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	f000 8154 	beq.w	8004f30 <HAL_DMA_IRQHandler+0x2e8>
  {
    return; /* the global interrupt flag for the current channel is down , nothing to do */
  }

  /* Data Transfer Error Interrupt management *************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_DTE) != 0U))
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d011      	beq.n	8004cba <HAL_DMA_IRQHandler+0x72>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DTE) != 0U)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	695b      	ldr	r3, [r3, #20]
 8004c9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d00a      	beq.n	8004cba <HAL_DMA_IRQHandler+0x72>
    {
      /* Clear the transfer error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_DTE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004cac:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DTE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb2:	f043 0201 	orr.w	r2, r3, #1
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Update Linked-list Error Interrupt management ********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_ULE) != 0U))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	691b      	ldr	r3, [r3, #16]
 8004cc0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d011      	beq.n	8004cec <HAL_DMA_IRQHandler+0xa4>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_ULE) != 0U)
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	695b      	ldr	r3, [r3, #20]
 8004cce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d00a      	beq.n	8004cec <HAL_DMA_IRQHandler+0xa4>
    {
      /* Clear the update linked-list error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_ULE);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004cde:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_ULE;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ce4:	f043 0202 	orr.w	r2, r3, #2
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* User Setting Error Interrupt management **************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_USE) != 0U))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d011      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd6>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_USE) != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	695b      	ldr	r3, [r3, #20]
 8004d00:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00a      	beq.n	8004d1e <HAL_DMA_IRQHandler+0xd6>
    {
      /* Clear the user setting error flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_USE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004d10:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_USE;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f043 0204 	orr.w	r2, r3, #4
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Trigger Overrun Interrupt management *****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TO) != 0U))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	691b      	ldr	r3, [r3, #16]
 8004d24:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d011      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x108>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TO) != 0U)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d00a      	beq.n	8004d50 <HAL_DMA_IRQHandler+0x108>
    {
      /* Clear the trigger overrun flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TO);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004d42:	60da      	str	r2, [r3, #12]

      /* Update the DMA channel error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TO;
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d48:	f043 0208 	orr.w	r2, r3, #8
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }

  /* Half Transfer Complete Interrupt management **********************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_HT) != 0U))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d013      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x13e>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	695b      	ldr	r3, [r3, #20]
 8004d64:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d00c      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Clear the half transfer flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_HT);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d74:	60da      	str	r2, [r3, #12]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d003      	beq.n	8004d86 <HAL_DMA_IRQHandler+0x13e>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	4798      	blx	r3
      }
    }
  }

  /* Suspend Transfer Interrupt management ****************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_SUSP) != 0U))
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d059      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x200>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_SUSP) != 0U)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d052      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x200>
    {
      /* Clear the block transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_SUSP);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004daa:	60da      	str	r2, [r3, #12]

      /* Check DMA channel state */
      if (hdma->State == HAL_DMA_STATE_ABORT)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8004db2:	b2db      	uxtb	r3, r3
 8004db4:	2b04      	cmp	r3, #4
 8004db6:	d13b      	bne.n	8004e30 <HAL_DMA_IRQHandler+0x1e8>
      {
        /* Disable the suspend transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_SUSP);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	695a      	ldr	r2, [r3, #20]
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dc6:	615a      	str	r2, [r3, #20]

        /* Reset the channel internal state and reset the FIFO */
        hdma->Instance->CCR |= DMA_CCR_RESET;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	695a      	ldr	r2, [r3, #20]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f042 0202 	orr.w	r2, r2, #2
 8004dd6:	615a      	str	r2, [r3, #20]

        if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	695b      	ldr	r3, [r3, #20]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d004      	beq.n	8004df0 <HAL_DMA_IRQHandler+0x1a8>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_ERROR;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2203      	movs	r2, #3
 8004dea:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004dee:	e003      	b.n	8004df8 <HAL_DMA_IRQHandler+0x1b0>
        }
        else
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }

        /* Check DMA channel transfer mode */
        if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d007      	beq.n	8004e14 <HAL_DMA_IRQHandler+0x1cc>
        {
          /* Update the linked-list queue state */
          hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e08:	2201      	movs	r2, #1
 8004e0a:	731a      	strb	r2, [r3, #12]

          /* Clear remaining data size to ensure loading linked-list from memory next start */
          hdma->Instance->CBR1 = 0U;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	2200      	movs	r2, #0
 8004e12:	649a      	str	r2, [r3, #72]	; 0x48
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        /* Check transfer abort callback */
        if (hdma->XferAbortCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8087 	beq.w	8004f34 <HAL_DMA_IRQHandler+0x2ec>
        {
          /* Transfer abort callback */
          hdma->XferAbortCallback(hdma);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004e2a:	6878      	ldr	r0, [r7, #4]
 8004e2c:	4798      	blx	r3
        }

        return;
 8004e2e:	e081      	b.n	8004f34 <HAL_DMA_IRQHandler+0x2ec>
      }
      else
      {
        /* Update the DMA channel state */
        hdma->State = HAL_DMA_STATE_SUSPEND;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2205      	movs	r2, #5
 8004e34:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

        /* Check transfer suspend callback */
        if (hdma->XferSuspendCallback != NULL)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d003      	beq.n	8004e48 <HAL_DMA_IRQHandler+0x200>
        {
          /* Transfer suspend callback */
          hdma->XferSuspendCallback(hdma);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e44:	6878      	ldr	r0, [r7, #4]
 8004e46:	4798      	blx	r3
      }
    }
  }

  /* Transfer Complete Interrupt management ***************************************************************************/
  if ((__HAL_DMA_GET_FLAG(hdma, DMA_FLAG_TC) != 0U))
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	691b      	ldr	r3, [r3, #16]
 8004e4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d039      	beq.n	8004eca <HAL_DMA_IRQHandler+0x282>
  {
    /* Check if interrupt source is enabled */
    if (__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d032      	beq.n	8004eca <HAL_DMA_IRQHandler+0x282>
    {
      /* Check DMA channel transfer mode */
      if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d012      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x24e>
      {
        /* If linked-list transfer */
        if (hdma->Instance->CLLR == 0U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d116      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x260>
        {
          if (hdma->Instance->CBR1 == 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d111      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x260>
          {
            /* Update the DMA channel state */
            hdma->State = HAL_DMA_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

            /* Update the linked-list queue state */
            hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004e90:	2201      	movs	r2, #1
 8004e92:	731a      	strb	r2, [r3, #12]
 8004e94:	e008      	b.n	8004ea8 <HAL_DMA_IRQHandler+0x260>
        }
      }
      else
      {
        /* If normal transfer */
        if (hdma->Instance->CBR1 == 0U)
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d103      	bne.n	8004ea8 <HAL_DMA_IRQHandler+0x260>
        {
          /* Update the DMA channel state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
        }
      }

      /* Clear TC and HT transfer flags */
      __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC | DMA_FLAG_HT));
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f44f 7240 	mov.w	r2, #768	; 0x300
 8004eb0:	60da      	str	r2, [r3, #12]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2200      	movs	r2, #0
 8004eb6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Check transfer complete callback */
      if (hdma->XferCpltCallback != NULL)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d003      	beq.n	8004eca <HAL_DMA_IRQHandler+0x282>
      {
        /* Channel Transfer Complete callback */
        hdma->XferCpltCallback(hdma);
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec6:	6878      	ldr	r0, [r7, #4]
 8004ec8:	4798      	blx	r3
      }
    }
  }

  /* Manage error case ************************************************************************************************/
  if (hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d031      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x2ee>
  {
    /* Reset the channel internal state and reset the FIFO */
    hdma->Instance->CCR |= DMA_CCR_RESET;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	695a      	ldr	r2, [r3, #20]
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f042 0202 	orr.w	r2, r2, #2
 8004ee0:	615a      	str	r2, [r3, #20]

    if ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	695b      	ldr	r3, [r3, #20]
 8004ee8:	f003 0301 	and.w	r3, r3, #1
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d004      	beq.n	8004efa <HAL_DMA_IRQHandler+0x2b2>
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_ERROR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2203      	movs	r2, #3
 8004ef4:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
 8004ef8:	e003      	b.n	8004f02 <HAL_DMA_IRQHandler+0x2ba>
    }
    else
    {
      /* Update the DMA channel state */
      hdma->State = HAL_DMA_STATE_READY;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
    }

    /* Check DMA channel transfer mode */
    if ((hdma->Mode & DMA_LINKEDLIST) == DMA_LINKEDLIST)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d003      	beq.n	8004f16 <HAL_DMA_IRQHandler+0x2ce>
    {
      /* Update the linked-list queue state */
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f12:	2201      	movs	r2, #1
 8004f14:	731a      	strb	r2, [r3, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    /* Check transfer error callback */
    if (hdma->XferErrorCallback != NULL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d007      	beq.n	8004f36 <HAL_DMA_IRQHandler+0x2ee>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004f2a:	6878      	ldr	r0, [r7, #4]
 8004f2c:	4798      	blx	r3
 8004f2e:	e002      	b.n	8004f36 <HAL_DMA_IRQHandler+0x2ee>
    return; /* the global interrupt flag for the current channel is down , nothing to do */
 8004f30:	bf00      	nop
 8004f32:	e000      	b.n	8004f36 <HAL_DMA_IRQHandler+0x2ee>
        return;
 8004f34:	bf00      	nop
    }
  }
}
 8004f36:	3718      	adds	r7, #24
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	bd80      	pop	{r7, pc}

08004f3c <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes : Specifies the DMA channel secure/privilege attributes.
  *                             This parameter can be a one or a combination of @ref DMA_Channel_Attributes.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *const hdma, uint32_t ChannelAttributes)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b085      	sub	sp, #20
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
 8004f44:	6039      	str	r1, [r7, #0]
  DMA_TypeDef *p_dma_instance;
  uint32_t channel_idx;

  /* Check the DMA peripheral handle parameter */
  if (hdma == NULL)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d101      	bne.n	8004f50 <HAL_DMA_ConfigChannelAttributes+0x14>
  {
    return HAL_ERROR;
 8004f4c:	2301      	movs	r3, #1
 8004f4e:	e02b      	b.n	8004fa8 <HAL_DMA_ConfigChannelAttributes+0x6c>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Get DMA instance */
  p_dma_instance = GET_DMA_INSTANCE(hdma);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004f58:	f023 030f 	bic.w	r3, r3, #15
 8004f5c:	60fb      	str	r3, [r7, #12]

  /* Get channel index */
  channel_idx = 1UL << (GET_DMA_CHANNEL(hdma) & 0x1FU);
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f66:	3b50      	subs	r3, #80	; 0x50
 8004f68:	09db      	lsrs	r3, r3, #7
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2201      	movs	r2, #1
 8004f70:	fa02 f303 	lsl.w	r3, r2, r3
 8004f74:	60bb      	str	r3, [r7, #8]

  /* Check DMA channel privilege attribute management */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) == DMA_CHANNEL_ATTR_PRIV_MASK)
 8004f76:	683b      	ldr	r3, [r7, #0]
 8004f78:	f003 0310 	and.w	r3, r3, #16
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d012      	beq.n	8004fa6 <HAL_DMA_ConfigChannelAttributes+0x6a>
  {
    /* Configure DMA channel privilege attribute */
    if ((ChannelAttributes & DMA_CHANNEL_PRIV) == DMA_CHANNEL_PRIV)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	f003 0311 	and.w	r3, r3, #17
 8004f86:	2b11      	cmp	r3, #17
 8004f88:	d106      	bne.n	8004f98 <HAL_DMA_ConfigChannelAttributes+0x5c>
    {
      p_dma_instance->PRIVCFGR |= channel_idx;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	685a      	ldr	r2, [r3, #4]
 8004f8e:	68bb      	ldr	r3, [r7, #8]
 8004f90:	431a      	orrs	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	605a      	str	r2, [r3, #4]
 8004f96:	e006      	b.n	8004fa6 <HAL_DMA_ConfigChannelAttributes+0x6a>
    }
    else
    {
      p_dma_instance->PRIVCFGR &= (~channel_idx);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	685a      	ldr	r2, [r3, #4]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	43db      	mvns	r3, r3
 8004fa0:	401a      	ands	r2, r3
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	605a      	str	r2, [r3, #4]
      hdma->Instance->CTR1 &= (~DMA_CTR1_DSEC);
    }
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  return HAL_OK;
 8004fa6:	2300      	movs	r3, #0
}
 8004fa8:	4618      	mov	r0, r3
 8004faa:	3714      	adds	r7, #20
 8004fac:	46bd      	mov	sp, r7
 8004fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb2:	4770      	bx	lr

08004fb4 <DMA_SetConfig>:
  */
static void DMA_SetConfig(DMA_HandleTypeDef const *const hdma,
                          uint32_t SrcAddress,
                          uint32_t DstAddress,
                          uint32_t SrcDataSize)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	60f8      	str	r0, [r7, #12]
 8004fbc:	60b9      	str	r1, [r7, #8]
 8004fbe:	607a      	str	r2, [r7, #4]
 8004fc0:	603b      	str	r3, [r7, #0]
  /* Configure the DMA channel data size */
  MODIFY_REG(hdma->Instance->CBR1, DMA_CBR1_BNDT, (SrcDataSize & DMA_CBR1_BNDT));
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004fc8:	0c1b      	lsrs	r3, r3, #16
 8004fca:	041b      	lsls	r3, r3, #16
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	b291      	uxth	r1, r2
 8004fd0:	68fa      	ldr	r2, [r7, #12]
 8004fd2:	6812      	ldr	r2, [r2, #0]
 8004fd4:	430b      	orrs	r3, r1
 8004fd6:	6493      	str	r3, [r2, #72]	; 0x48

  /* Clear all interrupt flags */
  __HAL_DMA_CLEAR_FLAG(hdma, DMA_FLAG_TC | DMA_FLAG_HT | DMA_FLAG_DTE | DMA_FLAG_ULE | DMA_FLAG_USE | DMA_FLAG_SUSP |
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f44f 42fe 	mov.w	r2, #32512	; 0x7f00
 8004fe0:	60da      	str	r2, [r3, #12]
                       DMA_FLAG_TO);

  /* Configure DMA channel source address */
  hdma->Instance->CSAR = SrcAddress;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure DMA channel destination address */
  hdma->Instance->CDAR = DstAddress;
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	687a      	ldr	r2, [r7, #4]
 8004ff0:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ff2:	bf00      	nop
 8004ff4:	3714      	adds	r7, #20
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ffc:	4770      	bx	lr
	...

08005000 <HAL_DMAEx_List_Init>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Init(DMA_HandleTypeDef *const hdma)
{
 8005000:	b580      	push	{r7, lr}
 8005002:	b084      	sub	sp, #16
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
  /* Get tick number */
  uint32_t tickstart = HAL_GetTick();
 8005008:	f7fe ff58 	bl	8003ebc <HAL_GetTick>
 800500c:	60f8      	str	r0, [r7, #12]

  /* Check the DMA channel handle parameter */
  if (hdma == NULL)
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d101      	bne.n	8005018 <HAL_DMAEx_List_Init+0x18>
  {
    return HAL_ERROR;
 8005014:	2301      	movs	r3, #1
 8005016:	e0dc      	b.n	80051d2 <HAL_DMAEx_List_Init+0x1d2>
  assert_param(IS_DMA_PRIORITY(hdma->InitLinkedList.Priority));
  assert_param(IS_DMA_LINK_STEP_MODE(hdma->InitLinkedList.LinkStepMode));
  assert_param(IS_DMA_TCEM_LINKEDLIST_EVENT_MODE(hdma->InitLinkedList.TransferEventMode));
  assert_param(IS_DMA_LINKEDLIST_MODE(hdma->InitLinkedList.LinkedListMode));
  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	4a6f      	ldr	r2, [pc, #444]	; (80051dc <HAL_DMAEx_List_Init+0x1dc>)
 800501e:	4293      	cmp	r3, r2
 8005020:	f000 809f 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	4a6d      	ldr	r2, [pc, #436]	; (80051e0 <HAL_DMAEx_List_Init+0x1e0>)
 800502a:	4293      	cmp	r3, r2
 800502c:	f000 8099 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a6b      	ldr	r2, [pc, #428]	; (80051e4 <HAL_DMAEx_List_Init+0x1e4>)
 8005036:	4293      	cmp	r3, r2
 8005038:	f000 8093 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a69      	ldr	r2, [pc, #420]	; (80051e8 <HAL_DMAEx_List_Init+0x1e8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	f000 808d 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4a67      	ldr	r2, [pc, #412]	; (80051ec <HAL_DMAEx_List_Init+0x1ec>)
 800504e:	4293      	cmp	r3, r2
 8005050:	f000 8087 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a65      	ldr	r2, [pc, #404]	; (80051f0 <HAL_DMAEx_List_Init+0x1f0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	f000 8081 	beq.w	8005162 <HAL_DMAEx_List_Init+0x162>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	4a63      	ldr	r2, [pc, #396]	; (80051f4 <HAL_DMAEx_List_Init+0x1f4>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d07b      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	4a62      	ldr	r2, [pc, #392]	; (80051f8 <HAL_DMAEx_List_Init+0x1f8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d076      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a60      	ldr	r2, [pc, #384]	; (80051fc <HAL_DMAEx_List_Init+0x1fc>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d071      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	4a5f      	ldr	r2, [pc, #380]	; (8005200 <HAL_DMAEx_List_Init+0x200>)
 8005084:	4293      	cmp	r3, r2
 8005086:	d06c      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	4a5d      	ldr	r2, [pc, #372]	; (8005204 <HAL_DMAEx_List_Init+0x204>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d067      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	4a5c      	ldr	r2, [pc, #368]	; (8005208 <HAL_DMAEx_List_Init+0x208>)
 8005098:	4293      	cmp	r3, r2
 800509a:	d062      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a5a      	ldr	r2, [pc, #360]	; (800520c <HAL_DMAEx_List_Init+0x20c>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d05d      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a59      	ldr	r2, [pc, #356]	; (8005210 <HAL_DMAEx_List_Init+0x210>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d058      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4a57      	ldr	r2, [pc, #348]	; (8005214 <HAL_DMAEx_List_Init+0x214>)
 80050b6:	4293      	cmp	r3, r2
 80050b8:	d053      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a56      	ldr	r2, [pc, #344]	; (8005218 <HAL_DMAEx_List_Init+0x218>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d04e      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a54      	ldr	r2, [pc, #336]	; (800521c <HAL_DMAEx_List_Init+0x21c>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d049      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a53      	ldr	r2, [pc, #332]	; (8005220 <HAL_DMAEx_List_Init+0x220>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d044      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a51      	ldr	r2, [pc, #324]	; (8005224 <HAL_DMAEx_List_Init+0x224>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d03f      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a50      	ldr	r2, [pc, #320]	; (8005228 <HAL_DMAEx_List_Init+0x228>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d03a      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a4e      	ldr	r2, [pc, #312]	; (800522c <HAL_DMAEx_List_Init+0x22c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d035      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a4d      	ldr	r2, [pc, #308]	; (8005230 <HAL_DMAEx_List_Init+0x230>)
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d030      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a4b      	ldr	r2, [pc, #300]	; (8005234 <HAL_DMAEx_List_Init+0x234>)
 8005106:	4293      	cmp	r3, r2
 8005108:	d02b      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	4a4a      	ldr	r2, [pc, #296]	; (8005238 <HAL_DMAEx_List_Init+0x238>)
 8005110:	4293      	cmp	r3, r2
 8005112:	d026      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a48      	ldr	r2, [pc, #288]	; (800523c <HAL_DMAEx_List_Init+0x23c>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d021      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a47      	ldr	r2, [pc, #284]	; (8005240 <HAL_DMAEx_List_Init+0x240>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d01c      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	4a45      	ldr	r2, [pc, #276]	; (8005244 <HAL_DMAEx_List_Init+0x244>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d017      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a44      	ldr	r2, [pc, #272]	; (8005248 <HAL_DMAEx_List_Init+0x248>)
 8005138:	4293      	cmp	r3, r2
 800513a:	d012      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	4a42      	ldr	r2, [pc, #264]	; (800524c <HAL_DMAEx_List_Init+0x24c>)
 8005142:	4293      	cmp	r3, r2
 8005144:	d00d      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	4a41      	ldr	r2, [pc, #260]	; (8005250 <HAL_DMAEx_List_Init+0x250>)
 800514c:	4293      	cmp	r3, r2
 800514e:	d008      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	4a3f      	ldr	r2, [pc, #252]	; (8005254 <HAL_DMAEx_List_Init+0x254>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d003      	beq.n	8005162 <HAL_DMAEx_List_Init+0x162>
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a3e      	ldr	r2, [pc, #248]	; (8005258 <HAL_DMAEx_List_Init+0x258>)
 8005160:	4293      	cmp	r3, r2
 8005162:	bf00      	nop
  {
    assert_param(IS_DMA_LINK_ALLOCATED_PORT(hdma->InitLinkedList.LinkAllocatedPort));
  }

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	2200      	movs	r2, #0
 8005168:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2202      	movs	r2, #2
 8005170:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Disable the DMA channel */
  __HAL_DMA_DISABLE(hdma);
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	695a      	ldr	r2, [r3, #20]
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f042 0206 	orr.w	r2, r2, #6
 8005182:	615a      	str	r2, [r3, #20]

  /* Check if the DMA channel is effectively disabled */
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 8005184:	e00f      	b.n	80051a6 <HAL_DMAEx_List_Init+0x1a6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > HAL_TIMEOUT_DMA_ABORT)
 8005186:	f7fe fe99 	bl	8003ebc <HAL_GetTick>
 800518a:	4602      	mov	r2, r0
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	1ad3      	subs	r3, r2, r3
 8005190:	2b05      	cmp	r3, #5
 8005192:	d908      	bls.n	80051a6 <HAL_DMAEx_List_Init+0x1a6>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	2210      	movs	r2, #16
 8005198:	659a      	str	r2, [r3, #88]	; 0x58

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_ERROR;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2203      	movs	r2, #3
 800519e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

      return HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	e015      	b.n	80051d2 <HAL_DMAEx_List_Init+0x1d2>
  while ((hdma->Instance->CCR & DMA_CCR_EN) != 0U)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	695b      	ldr	r3, [r3, #20]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d1e8      	bne.n	8005186 <HAL_DMAEx_List_Init+0x186>
    }
  }

  /* Initialize the DMA channel registers */
  DMA_List_Init(hdma);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 fad1 	bl	800575c <DMA_List_Init>

  /* Update DMA channel operation mode */
  hdma->Mode = hdma->InitLinkedList.LinkedListMode;
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Update the DMA channel error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	659a      	str	r2, [r3, #88]	; 0x58

  /* Update the DMA channel state */
  hdma->State = HAL_DMA_STATE_READY;
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2201      	movs	r2, #1
 80051cc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3710      	adds	r7, #16
 80051d6:	46bd      	mov	sp, r7
 80051d8:	bd80      	pop	{r7, pc}
 80051da:	bf00      	nop
 80051dc:	40020050 	.word	0x40020050
 80051e0:	50020050 	.word	0x50020050
 80051e4:	400200d0 	.word	0x400200d0
 80051e8:	500200d0 	.word	0x500200d0
 80051ec:	40020150 	.word	0x40020150
 80051f0:	50020150 	.word	0x50020150
 80051f4:	400201d0 	.word	0x400201d0
 80051f8:	500201d0 	.word	0x500201d0
 80051fc:	40020250 	.word	0x40020250
 8005200:	50020250 	.word	0x50020250
 8005204:	400202d0 	.word	0x400202d0
 8005208:	500202d0 	.word	0x500202d0
 800520c:	40020350 	.word	0x40020350
 8005210:	50020350 	.word	0x50020350
 8005214:	400203d0 	.word	0x400203d0
 8005218:	500203d0 	.word	0x500203d0
 800521c:	40020450 	.word	0x40020450
 8005220:	50020450 	.word	0x50020450
 8005224:	400204d0 	.word	0x400204d0
 8005228:	500204d0 	.word	0x500204d0
 800522c:	40020550 	.word	0x40020550
 8005230:	50020550 	.word	0x50020550
 8005234:	400205d0 	.word	0x400205d0
 8005238:	500205d0 	.word	0x500205d0
 800523c:	40020650 	.word	0x40020650
 8005240:	50020650 	.word	0x50020650
 8005244:	400206d0 	.word	0x400206d0
 8005248:	500206d0 	.word	0x500206d0
 800524c:	40020750 	.word	0x40020750
 8005250:	50020750 	.word	0x50020750
 8005254:	400207d0 	.word	0x400207d0
 8005258:	500207d0 	.word	0x500207d0

0800525c <HAL_DMAEx_List_Start_IT>:
  * @param  hdma : Pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_Start_IT(DMA_HandleTypeDef *const hdma)
{
 800525c:	b580      	push	{r7, lr}
 800525e:	b086      	sub	sp, #24
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  HAL_DMA_StateTypeDef dma_state;
  uint32_t ccr_value;
  uint32_t cllr_mask;

  /* Check the DMA peripheral handle and the linked-list queue parameters */
  if ((hdma == NULL) || (hdma->LinkedListQueue == NULL))
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d003      	beq.n	8005272 <HAL_DMAEx_List_Start_IT+0x16>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800526e:	2b00      	cmp	r3, #0
 8005270:	d101      	bne.n	8005276 <HAL_DMAEx_List_Start_IT+0x1a>
  {
    return HAL_ERROR;
 8005272:	2301      	movs	r3, #1
 8005274:	e082      	b.n	800537c <HAL_DMAEx_List_Start_IT+0x120>
  }

  /* Check DMA channel state */
  dma_state = hdma->State;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800527c:	75fb      	strb	r3, [r7, #23]
  ccr_value = hdma->Instance->CCR & DMA_CCR_LSM;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	695b      	ldr	r3, [r3, #20]
 8005284:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005288:	613b      	str	r3, [r7, #16]
  if ((dma_state == HAL_DMA_STATE_READY) || ((dma_state == HAL_DMA_STATE_BUSY) && (ccr_value != 0U)))
 800528a:	7dfb      	ldrb	r3, [r7, #23]
 800528c:	2b01      	cmp	r3, #1
 800528e:	d005      	beq.n	800529c <HAL_DMAEx_List_Start_IT+0x40>
 8005290:	7dfb      	ldrb	r3, [r7, #23]
 8005292:	2b02      	cmp	r3, #2
 8005294:	d16a      	bne.n	800536c <HAL_DMAEx_List_Start_IT+0x110>
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d067      	beq.n	800536c <HAL_DMAEx_List_Start_IT+0x110>
  {
    /* Check DMA channel state is ready */
    if (hdma->State == HAL_DMA_STATE_READY)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d157      	bne.n	8005358 <HAL_DMAEx_List_Start_IT+0xfc>
    {
      /* Process locked */
      __HAL_LOCK(hdma);
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80052ae:	2b01      	cmp	r3, #1
 80052b0:	d101      	bne.n	80052b6 <HAL_DMAEx_List_Start_IT+0x5a>
 80052b2:	2302      	movs	r3, #2
 80052b4:	e062      	b.n	800537c <HAL_DMAEx_List_Start_IT+0x120>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2201      	movs	r2, #1
 80052ba:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

      /* Update the DMA channel and the queue states */
      hdma->State                  = HAL_DMA_STATE_BUSY;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	2202      	movs	r2, #2
 80052c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
      hdma->LinkedListQueue->State = HAL_DMA_QUEUE_STATE_BUSY;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	2202      	movs	r2, #2
 80052cc:	731a      	strb	r2, [r3, #12]

      /* Update the DMA channel and the queue error codes */
      hdma->ErrorCode                  = HAL_DMA_ERROR_NONE;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2200      	movs	r2, #0
 80052d2:	659a      	str	r2, [r3, #88]	; 0x58
      hdma->LinkedListQueue->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052d8:	2200      	movs	r2, #0
 80052da:	611a      	str	r2, [r3, #16]

      /* Enable common interrupts: Transfer Complete and Transfer Errors ITs */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_DTE | DMA_IT_ULE | DMA_IT_USE | DMA_IT_TO));
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695a      	ldr	r2, [r3, #20]
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	f442 42ba 	orr.w	r2, r2, #23808	; 0x5d00
 80052ea:	615a      	str	r2, [r3, #20]

      /* Check half transfer complete callback */
      if (hdma->XferHalfCpltCallback != NULL)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d007      	beq.n	8005304 <HAL_DMAEx_List_Start_IT+0xa8>
      {
        /* If half transfer complete callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_HT);
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	695a      	ldr	r2, [r3, #20]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005302:	615a      	str	r2, [r3, #20]
      }

      /* Check suspend callback */
      if (hdma->XferSuspendCallback != NULL)
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005308:	2b00      	cmp	r3, #0
 800530a:	d007      	beq.n	800531c <HAL_DMAEx_List_Start_IT+0xc0>
      {
        /* If transfer suspend callback is set, enable the corresponding IT */
        __HAL_DMA_ENABLE_IT(hdma, DMA_IT_SUSP);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	695a      	ldr	r2, [r3, #20]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800531a:	615a      	str	r2, [r3, #20]
      }

      /* Get CLLR register mask and offset */
      DMA_List_GetCLLRNodeInfo(hdma->LinkedListQueue->Head, &cllr_mask, NULL);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f107 010c 	add.w	r1, r7, #12
 8005326:	2200      	movs	r2, #0
 8005328:	4618      	mov	r0, r3
 800532a:	f000 fe37 	bl	8005f9c <DMA_List_GetCLLRNodeInfo>

      /* Update DMA registers for linked-list transfer */
      hdma->Instance->CLBAR = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLBAR_LBA);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4619      	mov	r1, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	0c0b      	lsrs	r3, r1, #16
 800533c:	041b      	lsls	r3, r3, #16
 800533e:	6013      	str	r3, [r2, #0]
      hdma->Instance->CLLR  = ((uint32_t)hdma->LinkedListQueue->Head & DMA_CLLR_LA) | cllr_mask;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	461a      	mov	r2, r3
 8005348:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800534c:	4013      	ands	r3, r2
 800534e:	68f9      	ldr	r1, [r7, #12]
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6812      	ldr	r2, [r2, #0]
 8005354:	430b      	orrs	r3, r1
 8005356:	67d3      	str	r3, [r2, #124]	; 0x7c
    }

    /* Enable DMA channel */
    __HAL_DMA_ENABLE(hdma);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f042 0201 	orr.w	r2, r2, #1
 8005366:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hdma);

    return HAL_ERROR;
  }

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
 800536a:	e007      	b.n	800537c <HAL_DMAEx_List_Start_IT+0x120>
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2240      	movs	r2, #64	; 0x40
 8005370:	659a      	str	r2, [r3, #88]	; 0x58
    __HAL_UNLOCK(hdma);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2200      	movs	r2, #0
 8005376:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
    return HAL_ERROR;
 800537a:	2301      	movs	r3, #1
}
 800537c:	4618      	mov	r0, r3
 800537e:	3718      	adds	r7, #24
 8005380:	46bd      	mov	sp, r7
 8005382:	bd80      	pop	{r7, pc}

08005384 <HAL_DMAEx_List_BuildNode>:
  *         addressable space.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                                           DMA_NodeTypeDef *const pNode)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d002      	beq.n	800539a <HAL_DMAEx_List_BuildNode+0x16>
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d101      	bne.n	800539e <HAL_DMAEx_List_BuildNode+0x1a>
  {
    return HAL_ERROR;
 800539a:	2301      	movs	r3, #1
 800539c:	e004      	b.n	80053a8 <HAL_DMAEx_List_BuildNode+0x24>
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->SrcSecure));
  assert_param(IS_DMA_ATTRIBUTES(pNodeConfig->DestSecure));
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Build the DMA channel node */
  DMA_List_BuildNode(pNodeConfig, pNode);
 800539e:	6839      	ldr	r1, [r7, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	f000 fb33 	bl	8005a0c <DMA_List_BuildNode>

  return HAL_OK;
 80053a6:	2300      	movs	r3, #0
}
 80053a8:	4618      	mov	r0, r3
 80053aa:	3708      	adds	r7, #8
 80053ac:	46bd      	mov	sp, r7
 80053ae:	bd80      	pop	{r7, pc}

080053b0 <HAL_DMAEx_List_GetNodeConfig>:
  *                       configurations.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                               DMA_NodeTypeDef const *const pNode)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b082      	sub	sp, #8
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  /* Check the node configuration and physical node parameters */
  if ((pNodeConfig == NULL) || (pNode == NULL))
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <HAL_DMAEx_List_GetNodeConfig+0x16>
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d101      	bne.n	80053ca <HAL_DMAEx_List_GetNodeConfig+0x1a>
  {
    return HAL_ERROR;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e004      	b.n	80053d4 <HAL_DMAEx_List_GetNodeConfig+0x24>
  }

  /* Get the DMA channel node configuration */
  DMA_List_GetNodeConfig(pNodeConfig, pNode);
 80053ca:	6839      	ldr	r1, [r7, #0]
 80053cc:	6878      	ldr	r0, [r7, #4]
 80053ce:	f000 fc6f 	bl	8005cb0 <DMA_List_GetNodeConfig>

  return HAL_OK;
 80053d2:	2300      	movs	r3, #0
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3708      	adds	r7, #8
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <HAL_DMAEx_List_InsertNode>:
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_InsertNode(DMA_QListTypeDef *const pQList,
                                            DMA_NodeTypeDef *const pPrevNode,
                                            DMA_NodeTypeDef *const pNewNode)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08c      	sub	sp, #48	; 0x30
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue and the new node parameters */
  if ((pQList == NULL) || (pNewNode == NULL))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d002      	beq.n	80053f4 <HAL_DMAEx_List_InsertNode+0x18>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <HAL_DMAEx_List_InsertNode+0x1c>
  {
    return HAL_ERROR;
 80053f4:	2301      	movs	r3, #1
 80053f6:	e0b6      	b.n	8005566 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d104      	bne.n	800540a <HAL_DMAEx_List_InsertNode+0x2e>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	2204      	movs	r2, #4
 8005404:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005406:	2301      	movs	r3, #1
 8005408:	e0ad      	b.n	8005566 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes base addresses */
  if (DMA_List_CheckNodesBaseAddresses(pQList->Head, pPrevNode, pNewNode) != 0U)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	68b9      	ldr	r1, [r7, #8]
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fd56 	bl	8005ec4 <DMA_List_CheckNodesBaseAddresses>
 8005418:	4603      	mov	r3, r0
 800541a:	2b00      	cmp	r3, #0
 800541c:	d004      	beq.n	8005428 <HAL_DMAEx_List_InsertNode+0x4c>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_OUTOFRANGE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2205      	movs	r2, #5
 8005422:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005424:	2301      	movs	r3, #1
 8005426:	e09e      	b.n	8005566 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Check nodes types compatibility */
  if (DMA_List_CheckNodesTypes(pQList->Head, pPrevNode, pNewNode) != 0U)
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	68b9      	ldr	r1, [r7, #8]
 8005430:	4618      	mov	r0, r3
 8005432:	f000 fd77 	bl	8005f24 <DMA_List_CheckNodesTypes>
 8005436:	4603      	mov	r3, r0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d004      	beq.n	8005446 <HAL_DMAEx_List_InsertNode+0x6a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2204      	movs	r2, #4
 8005440:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e08f      	b.n	8005566 <HAL_DMAEx_List_InsertNode+0x18a>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	2202      	movs	r2, #2
 800544a:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	2200      	movs	r2, #0
 8005450:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pNewNode, &cllr_mask, &cllr_offset);
 8005452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8005456:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800545a:	4619      	mov	r1, r3
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 fd9d 	bl	8005f9c <DMA_List_GetCLLRNodeInfo>

  /* Empty queue */
  if (pQList->Head == NULL)
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d11a      	bne.n	80054a0 <HAL_DMAEx_List_InsertNode+0xc4>
  {
    /* Add only new node to queue */
    if (pPrevNode == NULL)
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d106      	bne.n	800547e <HAL_DMAEx_List_InsertNode+0xa2>
    {
      pQList->Head       = pNewNode;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	687a      	ldr	r2, [r7, #4]
 8005474:	601a      	str	r2, [r3, #0]
      pQList->NodeNumber = 1U;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	2201      	movs	r2, #1
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e06c      	b.n	8005558 <HAL_DMAEx_List_InsertNode+0x17c>
    }
    /* Add previous node then new node to queue */
    else
    {
      pQList->Head                          = pPrevNode;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	68ba      	ldr	r2, [r7, #8]
 8005482:	601a      	str	r2, [r3, #0]
      pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800548a:	4013      	ands	r3, r2
 800548c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800548e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005490:	4319      	orrs	r1, r3
 8005492:	68bb      	ldr	r3, [r7, #8]
 8005494:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->NodeNumber                    = 2U;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	2202      	movs	r2, #2
 800549c:	609a      	str	r2, [r3, #8]
 800549e:	e05b      	b.n	8005558 <HAL_DMAEx_List_InsertNode+0x17c>
  }
  /* Not empty queue */
  else
  {
    /* Add new node at the head of queue */
    if (pPrevNode == NULL)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d10f      	bne.n	80054c6 <HAL_DMAEx_List_InsertNode+0xea>
    {
      pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	461a      	mov	r2, r3
 80054ac:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80054b0:	4013      	ands	r3, r2
 80054b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80054b6:	4319      	orrs	r1, r3
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      pQList->Head                         = pNewNode;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	687a      	ldr	r2, [r7, #4]
 80054c2:	601a      	str	r2, [r3, #0]
 80054c4:	e043      	b.n	800554e <HAL_DMAEx_List_InsertNode+0x172>
    }
    /* Add new node according to selected position */
    else
    {
      /* Find node and get its position in selected queue */
      node_info.cllr_offset = cllr_offset;
 80054c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054c8:	617b      	str	r3, [r7, #20]
      if (DMA_List_FindNode(pQList, pPrevNode, &node_info) == 0U)
 80054ca:	f107 0314 	add.w	r3, r7, #20
 80054ce:	461a      	mov	r2, r3
 80054d0:	68b9      	ldr	r1, [r7, #8]
 80054d2:	68f8      	ldr	r0, [r7, #12]
 80054d4:	f000 fd92 	bl	8005ffc <DMA_List_FindNode>
 80054d8:	4603      	mov	r3, r0
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d132      	bne.n	8005544 <HAL_DMAEx_List_InsertNode+0x168>
      {
        /* Selected node is the last queue node */
        if (node_info.currentnode_pos == pQList->NodeNumber)
 80054de:	69fa      	ldr	r2, [r7, #28]
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d11a      	bne.n	800551e <HAL_DMAEx_List_InsertNode+0x142>
        {
          /* Check if queue is circular */
          if (pQList->FirstCircularNode != NULL)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00b      	beq.n	8005508 <HAL_DMAEx_List_InsertNode+0x12c>
          {
            pNewNode->LinkRegisters[cllr_offset] = ((uint32_t)pQList->FirstCircularNode & DMA_CLLR_LA) | cllr_mask;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	461a      	mov	r2, r3
 80054f6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80054fa:	4013      	ands	r3, r2
 80054fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80054fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005500:	4319      	orrs	r1, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          }

          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 8005508:	687a      	ldr	r2, [r7, #4]
 800550a:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800550e:	4013      	ands	r3, r2
 8005510:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005512:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005514:	4319      	orrs	r1, r3
 8005516:	68bb      	ldr	r3, [r7, #8]
 8005518:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800551c:	e017      	b.n	800554e <HAL_DMAEx_List_InsertNode+0x172>
        }
        /* Selected node is not the last queue node */
        else
        {
          pNewNode->LinkRegisters[cllr_offset] = pPrevNode->LinkRegisters[cllr_offset];
 800551e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005520:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005522:	68bb      	ldr	r3, [r7, #8]
 8005524:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
          pPrevNode->LinkRegisters[cllr_offset] = ((uint32_t)pNewNode & DMA_CLLR_LA) | cllr_mask;
 800552e:	687a      	ldr	r2, [r7, #4]
 8005530:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005534:	4013      	ands	r3, r2
 8005536:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005538:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800553a:	4319      	orrs	r1, r3
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8005542:	e004      	b.n	800554e <HAL_DMAEx_List_InsertNode+0x172>
        }
      }
      else
      {
        /* Update the queue error code */
        pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NOTFOUND;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2206      	movs	r2, #6
 8005548:	611a      	str	r2, [r3, #16]

        return HAL_ERROR;
 800554a:	2301      	movs	r3, #1
 800554c:	e00b      	b.n	8005566 <HAL_DMAEx_List_InsertNode+0x18a>
      }
    }

    /* Increment queue node number */
    pQList->NodeNumber++;
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	1c5a      	adds	r2, r3, #1
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	609a      	str	r2, [r3, #8]
  }

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	2201      	movs	r2, #1
 8005562:	731a      	strb	r2, [r3, #12]

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3730      	adds	r7, #48	; 0x30
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <HAL_DMAEx_List_SetCircularMode>:
  * @brief  Set circular mode for linked-list queue.
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_SetCircularMode(DMA_QListTypeDef *const pQList)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b08a      	sub	sp, #40	; 0x28
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  uint32_t cllr_mask;
  uint32_t cllr_offset;
  DMA_NodeInQInfoTypeDef node_info;

  /* Check the queue parameter */
  if (pQList == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_DMAEx_List_SetCircularMode+0x12>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e052      	b.n	8005626 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check the queue */
  if (pQList->Head == NULL)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d104      	bne.n	8005592 <HAL_DMAEx_List_SetCircularMode+0x24>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_EMPTY;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	2202      	movs	r2, #2
 800558c:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 800558e:	2301      	movs	r3, #1
 8005590:	e049      	b.n	8005626 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Check queue circular mode */
  if (pQList->FirstCircularNode != NULL)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00c      	beq.n	80055b4 <HAL_DMAEx_List_SetCircularMode+0x46>
  {
    if (pQList->FirstCircularNode == pQList->Head)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	685a      	ldr	r2, [r3, #4]
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	429a      	cmp	r2, r3
 80055a4:	d101      	bne.n	80055aa <HAL_DMAEx_List_SetCircularMode+0x3c>
    {
      return HAL_OK;
 80055a6:	2300      	movs	r3, #0
 80055a8:	e03d      	b.n	8005626 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
    else
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2204      	movs	r2, #4
 80055ae:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e038      	b.n	8005626 <HAL_DMAEx_List_SetCircularMode+0xb8>
    }
  }

  /* Check queue type */
  if (pQList->Type == QUEUE_TYPE_DYNAMIC)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	695b      	ldr	r3, [r3, #20]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d104      	bne.n	80055c6 <HAL_DMAEx_List_SetCircularMode+0x58>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2204      	movs	r2, #4
 80055c0:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e02f      	b.n	8005626 <HAL_DMAEx_List_SetCircularMode+0xb8>
  }

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_BUSY;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2202      	movs	r2, #2
 80055ca:	731a      	strb	r2, [r3, #12]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2200      	movs	r2, #0
 80055d0:	611a      	str	r2, [r3, #16]

  /* Get CLLR register mask and offset */
  DMA_List_GetCLLRNodeInfo(pQList->Head, &cllr_mask, &cllr_offset);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f107 0220 	add.w	r2, r7, #32
 80055da:	f107 0124 	add.w	r1, r7, #36	; 0x24
 80055de:	4618      	mov	r0, r3
 80055e0:	f000 fcdc 	bl	8005f9c <DMA_List_GetCLLRNodeInfo>

  /* Find the last queue node and get its position in selected queue */
  node_info.cllr_offset = cllr_offset;
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	60fb      	str	r3, [r7, #12]
  (void)DMA_List_FindNode(pQList, NULL, &node_info);
 80055e8:	f107 030c 	add.w	r3, r7, #12
 80055ec:	461a      	mov	r2, r3
 80055ee:	2100      	movs	r1, #0
 80055f0:	6878      	ldr	r0, [r7, #4]
 80055f2:	f000 fd03 	bl	8005ffc <DMA_List_FindNode>

  /* Set circular mode */
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	461a      	mov	r2, r3
 80055fc:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8005600:	4013      	ands	r3, r2
 8005602:	6a79      	ldr	r1, [r7, #36]	; 0x24
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 8005604:	69ba      	ldr	r2, [r7, #24]
 8005606:	4610      	mov	r0, r2
 8005608:	6a3a      	ldr	r2, [r7, #32]
    ((uint32_t)pQList->Head & DMA_CLLR_LA) | cllr_mask;
 800560a:	430b      	orrs	r3, r1
  ((DMA_NodeTypeDef *)(node_info.currentnode_addr))->LinkRegisters[cllr_offset] =
 800560c:	f840 3022 	str.w	r3, [r0, r2, lsl #2]

  /* Update linked-list circular state */
  pQList->FirstCircularNode = pQList->Head;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	605a      	str	r2, [r3, #4]

  /* Update the queue error code */
  pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_NONE;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

  /* Update the queue state */
  pQList->State = HAL_DMA_QUEUE_STATE_READY;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	2201      	movs	r2, #1
 8005622:	731a      	strb	r2, [r3, #12]

  /* Prevent MISRA-C2012-Rule-2.2_b */
  UNUSED(node_info);

  return HAL_OK;
 8005624:	2300      	movs	r3, #0
}
 8005626:	4618      	mov	r0, r3
 8005628:	3728      	adds	r7, #40	; 0x28
 800562a:	46bd      	mov	sp, r7
 800562c:	bd80      	pop	{r7, pc}
	...

08005630 <HAL_DMAEx_List_LinkQ>:
  * @param  pQList : Pointer to a DMA_QListTypeDef structure that contains queue information.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DMAEx_List_LinkQ(DMA_HandleTypeDef *const hdma,
                                       DMA_QListTypeDef *const pQList)
{
 8005630:	b480      	push	{r7}
 8005632:	b085      	sub	sp, #20
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
 8005638:	6039      	str	r1, [r7, #0]
  HAL_DMA_StateTypeDef state;

  /* Check the DMA channel handle and the queue parameters */
  if ((hdma == NULL) || (pQList == NULL))
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d002      	beq.n	8005646 <HAL_DMAEx_List_LinkQ+0x16>
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_DMAEx_List_LinkQ+0x1a>
  {
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e072      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Get DMA state */
  state = hdma->State;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005650:	73fb      	strb	r3, [r7, #15]

  /* Check DMA channel state */
  if ((hdma->State == HAL_DMA_STATE_BUSY) || (state == HAL_DMA_STATE_SUSPEND))
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005658:	b2db      	uxtb	r3, r3
 800565a:	2b02      	cmp	r3, #2
 800565c:	d002      	beq.n	8005664 <HAL_DMAEx_List_LinkQ+0x34>
 800565e:	7bfb      	ldrb	r3, [r7, #15]
 8005660:	2b05      	cmp	r3, #5
 8005662:	d108      	bne.n	8005676 <HAL_DMAEx_List_LinkQ+0x46>
  {
    /* Update the DMA channel error code */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2240      	movs	r2, #64	; 0x40
 8005668:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2200      	movs	r2, #0
 800566e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

    return HAL_ERROR;
 8005672:	2301      	movs	r3, #1
 8005674:	e05c      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check queue state */
  if (pQList->State == HAL_DMA_QUEUE_STATE_BUSY)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	7b1b      	ldrb	r3, [r3, #12]
 800567a:	b2db      	uxtb	r3, r3
 800567c:	2b02      	cmp	r3, #2
 800567e:	d104      	bne.n	800568a <HAL_DMAEx_List_LinkQ+0x5a>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_BUSY;
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	2201      	movs	r2, #1
 8005684:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	e052      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check linearity compatibility */
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	4a2b      	ldr	r2, [pc, #172]	; (800573c <HAL_DMAEx_List_LinkQ+0x10c>)
 8005690:	4293      	cmp	r3, r2
 8005692:	d022      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a29      	ldr	r2, [pc, #164]	; (8005740 <HAL_DMAEx_List_LinkQ+0x110>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d01d      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4a28      	ldr	r2, [pc, #160]	; (8005744 <HAL_DMAEx_List_LinkQ+0x114>)
 80056a4:	4293      	cmp	r3, r2
 80056a6:	d018      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a26      	ldr	r2, [pc, #152]	; (8005748 <HAL_DMAEx_List_LinkQ+0x118>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d013      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a25      	ldr	r2, [pc, #148]	; (800574c <HAL_DMAEx_List_LinkQ+0x11c>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d00e      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a23      	ldr	r2, [pc, #140]	; (8005750 <HAL_DMAEx_List_LinkQ+0x120>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d009      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a22      	ldr	r2, [pc, #136]	; (8005754 <HAL_DMAEx_List_LinkQ+0x124>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d004      	beq.n	80056da <HAL_DMAEx_List_LinkQ+0xaa>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a20      	ldr	r2, [pc, #128]	; (8005758 <HAL_DMAEx_List_LinkQ+0x128>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d101      	bne.n	80056de <HAL_DMAEx_List_LinkQ+0xae>
 80056da:	2301      	movs	r3, #1
 80056dc:	e000      	b.n	80056e0 <HAL_DMAEx_List_LinkQ+0xb0>
 80056de:	2300      	movs	r3, #0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d10b      	bne.n	80056fc <HAL_DMAEx_List_LinkQ+0xcc>
      ((pQList->Head->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR))
 80056e4:	683b      	ldr	r3, [r7, #0]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	6a1b      	ldr	r3, [r3, #32]
 80056ea:	f003 0302 	and.w	r3, r3, #2
  if ((IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) == 0U) &&
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d004      	beq.n	80056fc <HAL_DMAEx_List_LinkQ+0xcc>
  {
    /* Update the queue error code */
    pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_UNSUPPORTED;
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	2203      	movs	r2, #3
 80056f6:	611a      	str	r2, [r3, #16]

    return HAL_ERROR;
 80056f8:	2301      	movs	r3, #1
 80056fa:	e019      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
  }

  /* Check circularity compatibility */
  if (hdma->Mode == DMA_LINKEDLIST_CIRCULAR)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005700:	2b81      	cmp	r3, #129	; 0x81
 8005702:	d108      	bne.n	8005716 <HAL_DMAEx_List_LinkQ+0xe6>
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode == NULL)
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	685b      	ldr	r3, [r3, #4]
 8005708:	2b00      	cmp	r3, #0
 800570a:	d10d      	bne.n	8005728 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	2204      	movs	r2, #4
 8005710:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e00c      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }
  else
  {
    /* Check first circular node */
    if (pQList->FirstCircularNode != NULL)
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	685b      	ldr	r3, [r3, #4]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d004      	beq.n	8005728 <HAL_DMAEx_List_LinkQ+0xf8>
    {
      /* Update the queue error code */
      pQList->ErrorCode = HAL_DMA_QUEUE_ERROR_INVALIDTYPE;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	2204      	movs	r2, #4
 8005722:	611a      	str	r2, [r3, #16]

      return HAL_ERROR;
 8005724:	2301      	movs	r3, #1
 8005726:	e003      	b.n	8005730 <HAL_DMAEx_List_LinkQ+0x100>
    }
  }

  /* Register queue to DMA handle */
  hdma->LinkedListQueue = pQList;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	675a      	str	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800572e:	2300      	movs	r3, #0
}
 8005730:	4618      	mov	r0, r3
 8005732:	3714      	adds	r7, #20
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr
 800573c:	40020650 	.word	0x40020650
 8005740:	50020650 	.word	0x50020650
 8005744:	400206d0 	.word	0x400206d0
 8005748:	500206d0 	.word	0x500206d0
 800574c:	40020750 	.word	0x40020750
 8005750:	50020750 	.word	0x50020750
 8005754:	400207d0 	.word	0x400207d0
 8005758:	500207d0 	.word	0x500207d0

0800575c <DMA_List_Init>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains the configuration information for the
  *                specified DMA Channel.
  * @retval None.
  */
static void DMA_List_Init(DMA_HandleTypeDef const *const hdma)
{
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  /* Prepare DMA Channel Control Register (CCR) value */
  tmpreg = hdma->InitLinkedList.Priority | hdma->InitLinkedList.LinkStepMode;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800576c:	4313      	orrs	r3, r2
 800576e:	60fb      	str	r3, [r7, #12]

  /* Check DMA channel instance */
  if (IS_GPDMA_INSTANCE(hdma->Instance) != 0U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	4a85      	ldr	r2, [pc, #532]	; (800598c <DMA_List_Init+0x230>)
 8005776:	4293      	cmp	r3, r2
 8005778:	f000 80a0 	beq.w	80058bc <DMA_List_Init+0x160>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4a83      	ldr	r2, [pc, #524]	; (8005990 <DMA_List_Init+0x234>)
 8005782:	4293      	cmp	r3, r2
 8005784:	f000 809a 	beq.w	80058bc <DMA_List_Init+0x160>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a81      	ldr	r2, [pc, #516]	; (8005994 <DMA_List_Init+0x238>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f000 8094 	beq.w	80058bc <DMA_List_Init+0x160>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a7f      	ldr	r2, [pc, #508]	; (8005998 <DMA_List_Init+0x23c>)
 800579a:	4293      	cmp	r3, r2
 800579c:	f000 808e 	beq.w	80058bc <DMA_List_Init+0x160>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a7d      	ldr	r2, [pc, #500]	; (800599c <DMA_List_Init+0x240>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	f000 8088 	beq.w	80058bc <DMA_List_Init+0x160>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	4a7b      	ldr	r2, [pc, #492]	; (80059a0 <DMA_List_Init+0x244>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	f000 8082 	beq.w	80058bc <DMA_List_Init+0x160>
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	4a79      	ldr	r2, [pc, #484]	; (80059a4 <DMA_List_Init+0x248>)
 80057be:	4293      	cmp	r3, r2
 80057c0:	d07c      	beq.n	80058bc <DMA_List_Init+0x160>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	4a78      	ldr	r2, [pc, #480]	; (80059a8 <DMA_List_Init+0x24c>)
 80057c8:	4293      	cmp	r3, r2
 80057ca:	d077      	beq.n	80058bc <DMA_List_Init+0x160>
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	4a76      	ldr	r2, [pc, #472]	; (80059ac <DMA_List_Init+0x250>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d072      	beq.n	80058bc <DMA_List_Init+0x160>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	4a75      	ldr	r2, [pc, #468]	; (80059b0 <DMA_List_Init+0x254>)
 80057dc:	4293      	cmp	r3, r2
 80057de:	d06d      	beq.n	80058bc <DMA_List_Init+0x160>
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a73      	ldr	r2, [pc, #460]	; (80059b4 <DMA_List_Init+0x258>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d068      	beq.n	80058bc <DMA_List_Init+0x160>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a72      	ldr	r2, [pc, #456]	; (80059b8 <DMA_List_Init+0x25c>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d063      	beq.n	80058bc <DMA_List_Init+0x160>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a70      	ldr	r2, [pc, #448]	; (80059bc <DMA_List_Init+0x260>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d05e      	beq.n	80058bc <DMA_List_Init+0x160>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a6f      	ldr	r2, [pc, #444]	; (80059c0 <DMA_List_Init+0x264>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d059      	beq.n	80058bc <DMA_List_Init+0x160>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a6d      	ldr	r2, [pc, #436]	; (80059c4 <DMA_List_Init+0x268>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d054      	beq.n	80058bc <DMA_List_Init+0x160>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a6c      	ldr	r2, [pc, #432]	; (80059c8 <DMA_List_Init+0x26c>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d04f      	beq.n	80058bc <DMA_List_Init+0x160>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a6a      	ldr	r2, [pc, #424]	; (80059cc <DMA_List_Init+0x270>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d04a      	beq.n	80058bc <DMA_List_Init+0x160>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a69      	ldr	r2, [pc, #420]	; (80059d0 <DMA_List_Init+0x274>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d045      	beq.n	80058bc <DMA_List_Init+0x160>
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	4a67      	ldr	r2, [pc, #412]	; (80059d4 <DMA_List_Init+0x278>)
 8005836:	4293      	cmp	r3, r2
 8005838:	d040      	beq.n	80058bc <DMA_List_Init+0x160>
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a66      	ldr	r2, [pc, #408]	; (80059d8 <DMA_List_Init+0x27c>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d03b      	beq.n	80058bc <DMA_List_Init+0x160>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	4a64      	ldr	r2, [pc, #400]	; (80059dc <DMA_List_Init+0x280>)
 800584a:	4293      	cmp	r3, r2
 800584c:	d036      	beq.n	80058bc <DMA_List_Init+0x160>
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	4a63      	ldr	r2, [pc, #396]	; (80059e0 <DMA_List_Init+0x284>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d031      	beq.n	80058bc <DMA_List_Init+0x160>
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	4a61      	ldr	r2, [pc, #388]	; (80059e4 <DMA_List_Init+0x288>)
 800585e:	4293      	cmp	r3, r2
 8005860:	d02c      	beq.n	80058bc <DMA_List_Init+0x160>
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a60      	ldr	r2, [pc, #384]	; (80059e8 <DMA_List_Init+0x28c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d027      	beq.n	80058bc <DMA_List_Init+0x160>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	4a5e      	ldr	r2, [pc, #376]	; (80059ec <DMA_List_Init+0x290>)
 8005872:	4293      	cmp	r3, r2
 8005874:	d022      	beq.n	80058bc <DMA_List_Init+0x160>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	4a5d      	ldr	r2, [pc, #372]	; (80059f0 <DMA_List_Init+0x294>)
 800587c:	4293      	cmp	r3, r2
 800587e:	d01d      	beq.n	80058bc <DMA_List_Init+0x160>
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	4a5b      	ldr	r2, [pc, #364]	; (80059f4 <DMA_List_Init+0x298>)
 8005886:	4293      	cmp	r3, r2
 8005888:	d018      	beq.n	80058bc <DMA_List_Init+0x160>
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	4a5a      	ldr	r2, [pc, #360]	; (80059f8 <DMA_List_Init+0x29c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d013      	beq.n	80058bc <DMA_List_Init+0x160>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a58      	ldr	r2, [pc, #352]	; (80059fc <DMA_List_Init+0x2a0>)
 800589a:	4293      	cmp	r3, r2
 800589c:	d00e      	beq.n	80058bc <DMA_List_Init+0x160>
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a57      	ldr	r2, [pc, #348]	; (8005a00 <DMA_List_Init+0x2a4>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d009      	beq.n	80058bc <DMA_List_Init+0x160>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	4a55      	ldr	r2, [pc, #340]	; (8005a04 <DMA_List_Init+0x2a8>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d004      	beq.n	80058bc <DMA_List_Init+0x160>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a54      	ldr	r2, [pc, #336]	; (8005a08 <DMA_List_Init+0x2ac>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d101      	bne.n	80058c0 <DMA_List_Init+0x164>
 80058bc:	2301      	movs	r3, #1
 80058be:	e000      	b.n	80058c2 <DMA_List_Init+0x166>
 80058c0:	2300      	movs	r3, #0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d004      	beq.n	80058d0 <DMA_List_Init+0x174>
  {
    tmpreg |= hdma->InitLinkedList.LinkAllocatedPort;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058ca:	68fa      	ldr	r2, [r7, #12]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	60fb      	str	r3, [r7, #12]
  }

  /* Write DMA Channel Control Register (CCR) */
  MODIFY_REG(hdma->Instance->CCR, DMA_CCR_PRIO | DMA_CCR_LAP | DMA_CCR_LSM, tmpreg);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	695b      	ldr	r3, [r3, #20]
 80058d6:	f423 0143 	bic.w	r1, r3, #12779520	; 0xc30000
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68fa      	ldr	r2, [r7, #12]
 80058e0:	430a      	orrs	r2, r1
 80058e2:	615a      	str	r2, [r3, #20]

  /* Write DMA Channel Control Register (CTR1) */
  WRITE_REG(hdma->Instance->CTR1, 0U);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	2200      	movs	r2, #0
 80058ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write DMA Channel Control Register (CTR2) */
  WRITE_REG(hdma->Instance->CTR2, hdma->InitLinkedList.TransferEventMode);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	687a      	ldr	r2, [r7, #4]
 80058f2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80058f4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Write DMA Channel Control Register (CBR1) */
  WRITE_REG(hdma->Instance->CBR1, 0U);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2200      	movs	r2, #0
 80058fc:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write DMA Channel Control Register (CSAR) */
  WRITE_REG(hdma->Instance->CSAR, 0U);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	2200      	movs	r2, #0
 8005904:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write DMA Channel Control Register (CDAR) */
  WRITE_REG(hdma->Instance->CDAR, 0U);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	2200      	movs	r2, #0
 800590c:	651a      	str	r2, [r3, #80]	; 0x50

  /* If 2D Addressing is supported by current channel */
  if (IS_DMA_2D_ADDRESSING_INSTANCE(hdma->Instance) != 0U)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	4a36      	ldr	r2, [pc, #216]	; (80059ec <DMA_List_Init+0x290>)
 8005914:	4293      	cmp	r3, r2
 8005916:	d022      	beq.n	800595e <DMA_List_Init+0x202>
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a34      	ldr	r2, [pc, #208]	; (80059f0 <DMA_List_Init+0x294>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d01d      	beq.n	800595e <DMA_List_Init+0x202>
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4a33      	ldr	r2, [pc, #204]	; (80059f4 <DMA_List_Init+0x298>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d018      	beq.n	800595e <DMA_List_Init+0x202>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4a31      	ldr	r2, [pc, #196]	; (80059f8 <DMA_List_Init+0x29c>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d013      	beq.n	800595e <DMA_List_Init+0x202>
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	4a30      	ldr	r2, [pc, #192]	; (80059fc <DMA_List_Init+0x2a0>)
 800593c:	4293      	cmp	r3, r2
 800593e:	d00e      	beq.n	800595e <DMA_List_Init+0x202>
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	4a2e      	ldr	r2, [pc, #184]	; (8005a00 <DMA_List_Init+0x2a4>)
 8005946:	4293      	cmp	r3, r2
 8005948:	d009      	beq.n	800595e <DMA_List_Init+0x202>
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	4a2d      	ldr	r2, [pc, #180]	; (8005a04 <DMA_List_Init+0x2a8>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d004      	beq.n	800595e <DMA_List_Init+0x202>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4a2b      	ldr	r2, [pc, #172]	; (8005a08 <DMA_List_Init+0x2ac>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d101      	bne.n	8005962 <DMA_List_Init+0x206>
 800595e:	2301      	movs	r3, #1
 8005960:	e000      	b.n	8005964 <DMA_List_Init+0x208>
 8005962:	2300      	movs	r3, #0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d007      	beq.n	8005978 <DMA_List_Init+0x21c>
  {
    /* Write DMA Channel Control Register (CTR3) */
    WRITE_REG(hdma->Instance->CTR3, 0U);
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	2200      	movs	r2, #0
 800596e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Write DMA Channel Control Register (CBR2) */
    WRITE_REG(hdma->Instance->CBR2, 0U);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	2200      	movs	r2, #0
 8005976:	659a      	str	r2, [r3, #88]	; 0x58
  }

  /* Write DMA Channel linked-list address register (CLLR) */
  WRITE_REG(hdma->Instance->CLLR, 0U);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	2200      	movs	r2, #0
 800597e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8005980:	bf00      	nop
 8005982:	3714      	adds	r7, #20
 8005984:	46bd      	mov	sp, r7
 8005986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598a:	4770      	bx	lr
 800598c:	40020050 	.word	0x40020050
 8005990:	50020050 	.word	0x50020050
 8005994:	400200d0 	.word	0x400200d0
 8005998:	500200d0 	.word	0x500200d0
 800599c:	40020150 	.word	0x40020150
 80059a0:	50020150 	.word	0x50020150
 80059a4:	400201d0 	.word	0x400201d0
 80059a8:	500201d0 	.word	0x500201d0
 80059ac:	40020250 	.word	0x40020250
 80059b0:	50020250 	.word	0x50020250
 80059b4:	400202d0 	.word	0x400202d0
 80059b8:	500202d0 	.word	0x500202d0
 80059bc:	40020350 	.word	0x40020350
 80059c0:	50020350 	.word	0x50020350
 80059c4:	400203d0 	.word	0x400203d0
 80059c8:	500203d0 	.word	0x500203d0
 80059cc:	40020450 	.word	0x40020450
 80059d0:	50020450 	.word	0x50020450
 80059d4:	400204d0 	.word	0x400204d0
 80059d8:	500204d0 	.word	0x500204d0
 80059dc:	40020550 	.word	0x40020550
 80059e0:	50020550 	.word	0x50020550
 80059e4:	400205d0 	.word	0x400205d0
 80059e8:	500205d0 	.word	0x500205d0
 80059ec:	40020650 	.word	0x40020650
 80059f0:	50020650 	.word	0x50020650
 80059f4:	400206d0 	.word	0x400206d0
 80059f8:	500206d0 	.word	0x500206d0
 80059fc:	40020750 	.word	0x40020750
 8005a00:	50020750 	.word	0x50020750
 8005a04:	400207d0 	.word	0x400207d0
 8005a08:	500207d0 	.word	0x500207d0

08005a0c <DMA_List_BuildNode>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_BuildNode(DMA_NodeConfTypeDef const *const pNodeConfig,
                               DMA_NodeTypeDef *const pNode)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	6039      	str	r1, [r7, #0]
  int32_t blockoffset;

  /* Update CTR1 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register (CTR1) value */
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	695a      	ldr	r2, [r3, #20]
                                                   pNodeConfig->Init.DestDataWidth               |
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	69db      	ldr	r3, [r3, #28]
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a1e:	431a      	orrs	r2, r3
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
                                                   pNodeConfig->Init.DestDataWidth               |
 8005a24:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcInc                      |
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	691b      	ldr	r3, [r3, #16]
                                                   pNodeConfig->DataHandlingConfig.DataAlignment |
 8005a2a:	431a      	orrs	r2, r3
                                                   pNodeConfig->Init.SrcDataWidth;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	699b      	ldr	r3, [r3, #24]
                                                   pNodeConfig->Init.SrcInc                      |
 8005a30:	431a      	orrs	r2, r3
  pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] = pNodeConfig->Init.DestInc                     |
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	601a      	str	r2, [r3, #0]
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |= DMA_CTR1_DSEC;
  }
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

  /* Add parameters related to DMA configuration */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f003 0320 	and.w	r3, r3, #32
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d017      	beq.n	8005a72 <DMA_List_BuildNode+0x66>
  {
    /* Prepare DMA channel transfer register (CTR1) value */
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	681a      	ldr	r2, [r3, #0]
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a4e:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a54:	3b01      	subs	r3, #1
 8005a56:	051b      	lsls	r3, r3, #20
 8005a58:	f003 737c 	and.w	r3, r3, #66060288	; 0x3f00000
      (pNodeConfig->Init.TransferAllocatedPort | pNodeConfig->DataHandlingConfig.DataExchange |
 8005a5c:	4319      	orrs	r1, r3
       (((pNodeConfig->Init.SrcBurstLength - 1U) << DMA_CTR1_SBL_1_Pos) & DMA_CTR1_SBL_1));
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a62:	3b01      	subs	r3, #1
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	f403 737c 	and.w	r3, r3, #1008	; 0x3f0
       (((pNodeConfig->Init.DestBurstLength - 1U) << DMA_CTR1_DBL_1_Pos) & DMA_CTR1_DBL_1)    |
 8005a6a:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] |=
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	601a      	str	r2, [r3, #0]
  /*********************************************************************************** CTR1 register value is updated */


  /* Update CTR2 register value ***************************************************************************************/
  /* Prepare DMA channel transfer register 2 (CTR2) value */
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
                                                   (pNodeConfig->Init.Request & (DMA_CTR2_REQSEL | DMA_CTR2_SWREQ));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6859      	ldr	r1, [r3, #4]
 8005a7a:	f240 237f 	movw	r3, #639	; 0x27f
 8005a7e:	400b      	ands	r3, r1
  pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] = pNodeConfig->Init.TransferEventMode |
 8005a80:	431a      	orrs	r2, r3
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	605a      	str	r2, [r3, #4]

  /* Check for memory to peripheral transfer */
  if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	68db      	ldr	r3, [r3, #12]
 8005a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a8e:	d10c      	bne.n	8005aaa <DMA_List_BuildNode+0x9e>
  {
    /* Check for GPDMA */
    if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_GPDMA) == DMA_CHANNEL_TYPE_GPDMA)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f003 0320 	and.w	r3, r3, #32
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d011      	beq.n	8005ac0 <DMA_List_BuildNode+0xb4>
    {
      pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_DREQ;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	605a      	str	r2, [r3, #4]
 8005aa8:	e00a      	b.n	8005ac0 <DMA_List_BuildNode+0xb4>
    }
  }
  /* Memory to memory transfer */
  else if ((pNodeConfig->Init.Direction) == DMA_MEMORY_TO_MEMORY)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68db      	ldr	r3, [r3, #12]
 8005aae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ab2:	d105      	bne.n	8005ac0 <DMA_List_BuildNode+0xb4>
  {
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |= DMA_CTR2_SWREQ;
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	605a      	str	r2, [r3, #4]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check if trigger feature is active */
  if (pNodeConfig->TriggerConfig.TriggerPolarity != DMA_TRIG_POLARITY_MASKED)
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00f      	beq.n	8005ae8 <DMA_List_BuildNode+0xdc>
  {
    /* Prepare DMA channel transfer register 2 (CTR2) value */
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	685a      	ldr	r2, [r3, #4]
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ad4:	4319      	orrs	r1, r3
      ((pNodeConfig->TriggerConfig.TriggerSelection << DMA_CTR2_TRIGSEL_Pos) & DMA_CTR2_TRIGSEL);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005ada:	041b      	lsls	r3, r3, #16
 8005adc:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
      pNodeConfig->TriggerConfig.TriggerMode | pNodeConfig->TriggerConfig.TriggerPolarity |
 8005ae0:	430b      	orrs	r3, r1
    pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] |=
 8005ae2:	431a      	orrs	r2, r3
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	605a      	str	r2, [r3, #4]
  /*********************************************************************************** CTR2 register value is updated */


  /* Update CBR1 register value ***************************************************************************************/
  /* Prepare DMA channel block register 1 (CBR1) value */
  pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] = (pNodeConfig->DataSize & DMA_CBR1_BNDT);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005aec:	b29a      	uxth	r2, r3
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	609a      	str	r2, [r3, #8]

  /* If 2D addressing is supported by the selected DMA channel */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	f003 0302 	and.w	r3, r3, #2
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d04e      	beq.n	8005b9c <DMA_List_BuildNode+0x190>
  {
    /* Set the new CBR1 Register value */
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
      (((pNodeConfig->RepeatBlockConfig.RepeatCount - 1U) << DMA_CBR1_BRC_Pos) & DMA_CBR1_BRC);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b06:	3b01      	subs	r3, #1
 8005b08:	0419      	lsls	r1, r3, #16
 8005b0a:	4b67      	ldr	r3, [pc, #412]	; (8005ca8 <DMA_List_BuildNode+0x29c>)
 8005b0c:	400b      	ands	r3, r1
    pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |=
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	609a      	str	r2, [r3, #8]

    /* If the source address offset is negative, set SDEC bit */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	da06      	bge.n	8005b2a <DMA_List_BuildNode+0x11e>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_SDEC;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	609a      	str	r2, [r3, #8]
 8005b28:	e005      	b.n	8005b36 <DMA_List_BuildNode+0x12a>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_SDEC);
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	689b      	ldr	r3, [r3, #8]
 8005b2e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	609a      	str	r2, [r3, #8]
    }

    /* If the destination address offset is negative, set DDEC bit */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	da06      	bge.n	8005b4c <DMA_List_BuildNode+0x140>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_DDEC;
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	609a      	str	r2, [r3, #8]
 8005b4a:	e005      	b.n	8005b58 <DMA_List_BuildNode+0x14c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_DDEC);
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	689b      	ldr	r3, [r3, #8]
 8005b50:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005b54:	683b      	ldr	r3, [r7, #0]
 8005b56:	609a      	str	r2, [r3, #8]
    }

    /* If the repeated block source address offset is negative, set BRSEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	da06      	bge.n	8005b6e <DMA_List_BuildNode+0x162>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRSDEC;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	689b      	ldr	r3, [r3, #8]
 8005b64:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	609a      	str	r2, [r3, #8]
 8005b6c:	e005      	b.n	8005b7a <DMA_List_BuildNode+0x16e>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRSDEC);
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	609a      	str	r2, [r3, #8]
    }

    /* if the repeated block destination address offset is negative, set BRDEC bit */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b7e:	2b00      	cmp	r3, #0
 8005b80:	da06      	bge.n	8005b90 <DMA_List_BuildNode+0x184>
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] |= DMA_CBR1_BRDDEC;
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005b8a:	683b      	ldr	r3, [r7, #0]
 8005b8c:	609a      	str	r2, [r3, #8]
 8005b8e:	e005      	b.n	8005b9c <DMA_List_BuildNode+0x190>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] &= (~DMA_CBR1_BRDDEC);
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	689b      	ldr	r3, [r3, #8]
 8005b94:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	609a      	str	r2, [r3, #8]
  }
  /*********************************************************************************** CBR1 register value is updated */


  /* Update CSAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET] = pNodeConfig->SrcAddress;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	60da      	str	r2, [r3, #12]
  /*********************************************************************************** CSAR register value is updated */


  /* Update CDAR register value ***************************************************************************************/
  pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET] = pNodeConfig->DstAddress;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	611a      	str	r2, [r3, #16]
  /*********************************************************************************** CDAR register value is updated */


  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0302 	and.w	r3, r3, #2
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d059      	beq.n	8005c6c <DMA_List_BuildNode+0x260>
  {
    /* Update CTR3 register value *************************************************************************************/
    /* Write new CTR3 Register value : source address offset */
    if (pNodeConfig->RepeatBlockConfig.SrcAddrOffset < 0)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	da09      	bge.n	8005bd4 <DMA_List_BuildNode+0x1c8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.SrcAddrOffset);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bc4:	425b      	negs	r3, r3
 8005bc6:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CTR3_SAO);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	f3c3 020c 	ubfx	r2, r3, #0, #13
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	615a      	str	r2, [r3, #20]
 8005bd2:	e005      	b.n	8005be0 <DMA_List_BuildNode+0x1d4>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.SrcAddrOffset & DMA_CTR3_SAO);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005bd8:	f3c3 020c 	ubfx	r2, r3, #0, #13
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] =
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	615a      	str	r2, [r3, #20]
    }

    /* Write new CTR3 Register value : destination address offset */
    if (pNodeConfig->RepeatBlockConfig.DestAddrOffset < 0)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	da0d      	bge.n	8005c04 <DMA_List_BuildNode+0x1f8>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.DestAddrOffset);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bec:	425b      	negs	r3, r3
 8005bee:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |= (((uint32_t)blockoffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695a      	ldr	r2, [r3, #20]
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	0419      	lsls	r1, r3, #16
 8005bf8:	4b2c      	ldr	r3, [pc, #176]	; (8005cac <DMA_List_BuildNode+0x2a0>)
 8005bfa:	400b      	ands	r3, r1
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	615a      	str	r2, [r3, #20]
 8005c02:	e009      	b.n	8005c18 <DMA_List_BuildNode+0x20c>
    }
    else
    {
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005c04:	683b      	ldr	r3, [r7, #0]
 8005c06:	695a      	ldr	r2, [r3, #20]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.DestAddrOffset << DMA_CTR3_DAO_Pos) & DMA_CTR3_DAO);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c0c:	0419      	lsls	r1, r3, #16
 8005c0e:	4b27      	ldr	r3, [pc, #156]	; (8005cac <DMA_List_BuildNode+0x2a0>)
 8005c10:	400b      	ands	r3, r1
      pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] |=
 8005c12:	431a      	orrs	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	615a      	str	r2, [r3, #20]
    /********************************************************************************* CTR3 register value is updated */


    /* Update CBR2 register value *************************************************************************************/
    /* Write new CBR2 Register value : repeated block source address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset < 0)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	da08      	bge.n	8005c32 <DMA_List_BuildNode+0x226>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c24:	425b      	negs	r3, r3
 8005c26:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] = ((uint32_t)blockoffset & DMA_CBR2_BRSAO);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	b29a      	uxth	r2, r3
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	619a      	str	r2, [r3, #24]
 8005c30:	e004      	b.n	8005c3c <DMA_List_BuildNode+0x230>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
        ((uint32_t)pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset & DMA_CBR2_BRSAO);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c36:	b29a      	uxth	r2, r3
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] =
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	619a      	str	r2, [r3, #24]
    }

    /* Write new CBR2 Register value : repeated block destination address offset */
    if (pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset < 0)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	da0b      	bge.n	8005c5c <DMA_List_BuildNode+0x250>
    {
      blockoffset = (- pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c48:	425b      	negs	r3, r3
 8005c4a:	60fb      	str	r3, [r7, #12]
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)blockoffset & DMA_CBR2_BRSAO) << DMA_CBR2_BRDAO_Pos);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005c54:	431a      	orrs	r2, r3
 8005c56:	683b      	ldr	r3, [r7, #0]
 8005c58:	619a      	str	r2, [r3, #24]
 8005c5a:	e007      	b.n	8005c6c <DMA_List_BuildNode+0x260>
    }
    else
    {
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005c5c:	683b      	ldr	r3, [r7, #0]
 8005c5e:	699a      	ldr	r2, [r3, #24]
        (((uint32_t)pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset << DMA_CBR2_BRDAO_Pos) & DMA_CBR2_BRDAO);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c64:	041b      	lsls	r3, r3, #16
      pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] |=
 8005c66:	431a      	orrs	r2, r3
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	619a      	str	r2, [r3, #24]
  }


  /* Update node information value ************************************************************************************/
  /* Set node information */
  pNode->NodeInfo = pNodeConfig->NodeType;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681a      	ldr	r2, [r3, #0]
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	621a      	str	r2, [r3, #32]
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0302 	and.w	r3, r3, #2
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d006      	beq.n	8005c8e <DMA_List_BuildNode+0x282>
  {
    pNode->NodeInfo |= (NODE_CLLR_2D_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	6a1b      	ldr	r3, [r3, #32]
 8005c84:	f443 62e0 	orr.w	r2, r3, #1792	; 0x700
 8005c88:	683b      	ldr	r3, [r7, #0]
 8005c8a:	621a      	str	r2, [r3, #32]
  else
  {
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
  }
  /******************************************************************************** Node information value is updated */
}
 8005c8c:	e005      	b.n	8005c9a <DMA_List_BuildNode+0x28e>
    pNode->NodeInfo |= (NODE_CLLR_LINEAR_DEFAULT_OFFSET << NODE_CLLR_IDX_POS);
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	6a1b      	ldr	r3, [r3, #32]
 8005c92:	f443 62a0 	orr.w	r2, r3, #1280	; 0x500
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	621a      	str	r2, [r3, #32]
}
 8005c9a:	bf00      	nop
 8005c9c:	3714      	adds	r7, #20
 8005c9e:	46bd      	mov	sp, r7
 8005ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca4:	4770      	bx	lr
 8005ca6:	bf00      	nop
 8005ca8:	07ff0000 	.word	0x07ff0000
 8005cac:	1fff0000 	.word	0x1fff0000

08005cb0 <DMA_List_GetNodeConfig>:
  *                       configurations.
  * @retval None.
  */
static void DMA_List_GetNodeConfig(DMA_NodeConfTypeDef *const pNodeConfig,
                                   DMA_NodeTypeDef const *const pNode)
{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b085      	sub	sp, #20
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
 8005cb8:	6039      	str	r1, [r7, #0]
  uint16_t offset;

  /* Get node information *********************************************************************************************/
  pNodeConfig->NodeType = (pNode->NodeInfo & NODE_TYPE_MASK);
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	6a1b      	ldr	r3, [r3, #32]
 8005cbe:	b2da      	uxtb	r2, r3
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	601a      	str	r2, [r3, #0]
  /*************************************************************************************** Node type value is updated */


  /* Get CTR1 fields values *******************************************************************************************/
  pNodeConfig->Init.SrcInc                      = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SINC;
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 0208 	and.w	r2, r3, #8
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	611a      	str	r2, [r3, #16]
  pNodeConfig->Init.DestInc                     = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DINC;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f403 2200 	and.w	r2, r3, #524288	; 0x80000
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	615a      	str	r2, [r3, #20]
  pNodeConfig->Init.SrcDataWidth                = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_SDW_LOG2;
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f003 0203 	and.w	r2, r3, #3
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	619a      	str	r2, [r3, #24]
  pNodeConfig->Init.DestDataWidth               = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_DDW_LOG2;
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	61da      	str	r2, [r3, #28]
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005cf4:	683b      	ldr	r3, [r7, #0]
 8005cf6:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_SBL_1) >> DMA_CTR1_SBL_1_Pos) + 1U;
 8005cf8:	091b      	lsrs	r3, r3, #4
 8005cfa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005cfe:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.SrcBurstLength              = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	625a      	str	r2, [r3, #36]	; 0x24
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	681b      	ldr	r3, [r3, #0]
                                                    DMA_CTR1_DBL_1) >> DMA_CTR1_DBL_1_Pos) + 1U;
 8005d08:	0d1b      	lsrs	r3, r3, #20
 8005d0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d0e:	1c5a      	adds	r2, r3, #1
  pNodeConfig->Init.DestBurstLength             = ((pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET] &
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28
  pNodeConfig->Init.TransferAllocatedPort       = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f003 2240 	and.w	r2, r3, #1073758208	; 0x40004000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	62da      	str	r2, [r3, #44]	; 0x2c
                                                  (DMA_CTR1_SAP | DMA_CTR1_DAP);
  pNodeConfig->DataHandlingConfig.DataExchange  = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   &
 8005d20:	683b      	ldr	r3, [r7, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	4b66      	ldr	r3, [pc, #408]	; (8005ec0 <DMA_List_GetNodeConfig+0x210>)
 8005d26:	4013      	ands	r3, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6393      	str	r3, [r2, #56]	; 0x38
                                                  (DMA_CTR1_SBX | DMA_CTR1_DBX | DMA_CTR1_DHX);
  pNodeConfig->DataHandlingConfig.DataAlignment = pNode->LinkRegisters[NODE_CTR1_DEFAULT_OFFSET]   & DMA_CTR1_PAM;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */
  /*********************************************************************************** CTR1 fields values are updated */


  /* Get CTR2 fields values *******************************************************************************************/
  if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_SWREQ) != 0U)
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	685b      	ldr	r3, [r3, #4]
 8005d3c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d008      	beq.n	8005d56 <DMA_List_GetNodeConfig+0xa6>
  {
    pNodeConfig->Init.Request   = DMA_REQUEST_SW;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d4a:	605a      	str	r2, [r3, #4]
    pNodeConfig->Init.Direction = DMA_MEMORY_TO_MEMORY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005d52:	60da      	str	r2, [r3, #12]
 8005d54:	e013      	b.n	8005d7e <DMA_List_GetNodeConfig+0xce>
  }
  else
  {
    pNodeConfig->Init.Request   = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_REQSEL;
 8005d56:	683b      	ldr	r3, [r7, #0]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	605a      	str	r2, [r3, #4]

    if ((pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_DREQ) != 0U)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d004      	beq.n	8005d78 <DMA_List_GetNodeConfig+0xc8>
    {
      pNodeConfig->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005d74:	60da      	str	r2, [r3, #12]
 8005d76:	e002      	b.n	8005d7e <DMA_List_GetNodeConfig+0xce>
    }
    else
    {
      pNodeConfig->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	60da      	str	r2, [r3, #12]
    }
  }

  pNodeConfig->Init.BlkHWRequest              = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] & DMA_CTR2_BREQ);
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	685b      	ldr	r3, [r3, #4]
 8005d82:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	609a      	str	r2, [r3, #8]
  pNodeConfig->TriggerConfig.TriggerMode      = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGM;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	685b      	ldr	r3, [r3, #4]
 8005d8e:	f403 4240 	and.w	r2, r3, #49152	; 0xc000
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	641a      	str	r2, [r3, #64]	; 0x40
  pNodeConfig->TriggerConfig.TriggerPolarity  = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TRIGPOL;
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f003 7240 	and.w	r2, r3, #50331648	; 0x3000000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	645a      	str	r2, [r3, #68]	; 0x44
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	685b      	ldr	r3, [r3, #4]
                                                 DMA_CTR2_TRIGSEL) >> DMA_CTR2_TRIGSEL_Pos;
 8005da6:	0c1b      	lsrs	r3, r3, #16
 8005da8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
  pNodeConfig->TriggerConfig.TriggerSelection = (pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET] &
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	649a      	str	r2, [r3, #72]	; 0x48
  pNodeConfig->Init.TransferEventMode         = pNode->LinkRegisters[NODE_CTR2_DEFAULT_OFFSET]  & DMA_CTR2_TCEM;
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	685b      	ldr	r3, [r3, #4]
 8005db4:	f003 4240 	and.w	r2, r3, #3221225472	; 0xc0000000
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  /*********************************************************************************** CTR2 fields values are updated */


  /* Get CBR1 fields **************************************************************************************************/
  pNodeConfig->DataSize = pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BNDT;
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	b29a      	uxth	r2, r3
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	669a      	str	r2, [r3, #104]	; 0x68

  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	f003 0302 	and.w	r3, r3, #2
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d008      	beq.n	8005de4 <DMA_List_GetNodeConfig+0x134>
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount =
      ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRC) >> DMA_CBR1_BRC_Pos) + 1U;
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	0c1b      	lsrs	r3, r3, #16
 8005dd8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ddc:	1c5a      	adds	r2, r3, #1
    pNodeConfig->RepeatBlockConfig.RepeatCount =
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	64da      	str	r2, [r3, #76]	; 0x4c
 8005de2:	e002      	b.n	8005dea <DMA_List_GetNodeConfig+0x13a>
  }
  else
  {
    pNodeConfig->RepeatBlockConfig.RepeatCount = 1U;
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	2201      	movs	r2, #1
 8005de8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
  /*********************************************************************************** CBR1 fields values are updated */


  /* Get CSAR field ***************************************************************************************************/
  pNodeConfig->SrcAddress = pNode->LinkRegisters[NODE_CSAR_DEFAULT_OFFSET];
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	68da      	ldr	r2, [r3, #12]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	661a      	str	r2, [r3, #96]	; 0x60
  /************************************************************************************** CSAR field value is updated */


  /* Get CDAR field ***************************************************************************************************/
  pNodeConfig->DstAddress = pNode->LinkRegisters[NODE_CDAR_DEFAULT_OFFSET];
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691a      	ldr	r2, [r3, #16]
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	665a      	str	r2, [r3, #100]	; 0x64
  /************************************************************************************** CDAR field value is updated */

  /* Check if the selected channel is 2D addressing */
  if ((pNodeConfig->NodeType & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d04a      	beq.n	8005e9c <DMA_List_GetNodeConfig+0x1ec>
  {
    /* Get CTR3 field *************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_SAO);
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e10:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset  = (int32_t)offset;
 8005e12:	89fa      	ldrh	r2, [r7, #14]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	651a      	str	r2, [r3, #80]	; 0x50

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CTR3_DEFAULT_OFFSET] & DMA_CTR3_DAO) >> DMA_CTR3_DAO_Pos);
 8005e18:	683b      	ldr	r3, [r7, #0]
 8005e1a:	695b      	ldr	r3, [r3, #20]
 8005e1c:	0c1b      	lsrs	r3, r3, #16
 8005e1e:	b29b      	uxth	r3, r3
 8005e20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005e24:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.DestAddrOffset = (int32_t)offset;
 8005e26:	89fa      	ldrh	r2, [r7, #14]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	655a      	str	r2, [r3, #84]	; 0x54

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_SDEC) != 0U)
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	689b      	ldr	r3, [r3, #8]
 8005e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d004      	beq.n	8005e42 <DMA_List_GetNodeConfig+0x192>
    {
      pNodeConfig->RepeatBlockConfig.SrcAddrOffset *= (-1);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e3c:	425a      	negs	r2, r3
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	651a      	str	r2, [r3, #80]	; 0x50
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_DDEC) != 0U)
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	689b      	ldr	r3, [r3, #8]
 8005e46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d004      	beq.n	8005e58 <DMA_List_GetNodeConfig+0x1a8>
    {
      pNodeConfig->RepeatBlockConfig.DestAddrOffset *= (-1);
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e52:	425a      	negs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	655a      	str	r2, [r3, #84]	; 0x54
    }
    /************************************************************************************ CTR3 field value is updated */


    /* Get CBR2 fields ************************************************************************************************/
    offset = (uint16_t)(pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRSAO);
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	699b      	ldr	r3, [r3, #24]
 8005e5c:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset = (int32_t)offset;
 8005e5e:	89fa      	ldrh	r2, [r7, #14]
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	659a      	str	r2, [r3, #88]	; 0x58

    offset = (uint16_t)((pNode->LinkRegisters[NODE_CBR2_DEFAULT_OFFSET] & DMA_CBR2_BRDAO) >> DMA_CBR2_BRDAO_Pos);
 8005e64:	683b      	ldr	r3, [r7, #0]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	0c1b      	lsrs	r3, r3, #16
 8005e6a:	81fb      	strh	r3, [r7, #14]
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = (int32_t)offset;
 8005e6c:	89fa      	ldrh	r2, [r7, #14]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	65da      	str	r2, [r3, #92]	; 0x5c

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRSDEC) != 0U)
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d004      	beq.n	8005e88 <DMA_List_GetNodeConfig+0x1d8>
    {
      pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset *= (-1);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e82:	425a      	negs	r2, r3
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	659a      	str	r2, [r3, #88]	; 0x58
    }

    if ((pNode->LinkRegisters[NODE_CBR1_DEFAULT_OFFSET] & DMA_CBR1_BRDDEC) != 0U)
 8005e88:	683b      	ldr	r3, [r7, #0]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	da11      	bge.n	8005eb4 <DMA_List_GetNodeConfig+0x204>
    {
      pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset *= (-1);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005e94:	425a      	negs	r2, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Get CBR2 fields ************************************************************************************************/
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
    /************************************************************************************ CBR2 field value is updated */
  }
}
 8005e9a:	e00b      	b.n	8005eb4 <DMA_List_GetNodeConfig+0x204>
    pNodeConfig->RepeatBlockConfig.SrcAddrOffset     = 0;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	651a      	str	r2, [r3, #80]	; 0x50
    pNodeConfig->RepeatBlockConfig.DestAddrOffset    = 0;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	2200      	movs	r2, #0
 8005ea6:	655a      	str	r2, [r3, #84]	; 0x54
    pNodeConfig->RepeatBlockConfig.BlkSrcAddrOffset  = 0;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	659a      	str	r2, [r3, #88]	; 0x58
    pNodeConfig->RepeatBlockConfig.BlkDestAddrOffset = 0;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr
 8005ec0:	0c002000 	.word	0x0c002000

08005ec4 <DMA_List_CheckNodesBaseAddresses>:
  * @retval Return 0 when nodes addresses are compatible, 1 otherwise.
  */
static uint32_t DMA_List_CheckNodesBaseAddresses(DMA_NodeTypeDef const *const pNode1,
                                                 DMA_NodeTypeDef const *const pNode2,
                                                 DMA_NodeTypeDef const *const pNode3)
{
 8005ec4:	b480      	push	{r7}
 8005ec6:	b087      	sub	sp, #28
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	60f8      	str	r0, [r7, #12]
 8005ecc:	60b9      	str	r1, [r7, #8]
 8005ece:	607a      	str	r2, [r7, #4]
  uint32_t temp = (((uint32_t)pNode1 | (uint32_t)pNode2 | (uint32_t)pNode3) & DMA_CLBAR_LBA);
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	431a      	orrs	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	4313      	orrs	r3, r2
 8005eda:	0c1b      	lsrs	r3, r3, #16
 8005edc:	041b      	lsls	r3, r3, #16
 8005ede:	613b      	str	r3, [r7, #16]
  uint32_t ref  = 0U;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	617b      	str	r3, [r7, #20]

  /* Check node 1 address */
  if ((uint32_t)pNode1 != 0U)
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d002      	beq.n	8005ef0 <DMA_List_CheckNodesBaseAddresses+0x2c>
  {
    ref = (uint32_t)pNode1;
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	617b      	str	r3, [r7, #20]
 8005eee:	e00a      	b.n	8005f06 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 2 address */
  else if ((uint32_t)pNode2 != 0U)
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d002      	beq.n	8005efc <DMA_List_CheckNodesBaseAddresses+0x38>
  {
    ref = (uint32_t)pNode2;
 8005ef6:	68bb      	ldr	r3, [r7, #8]
 8005ef8:	617b      	str	r3, [r7, #20]
 8005efa:	e004      	b.n	8005f06 <DMA_List_CheckNodesBaseAddresses+0x42>
  }
  /* Check node 3 address */
  else if ((uint32_t)pNode3 != 0U)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d001      	beq.n	8005f06 <DMA_List_CheckNodesBaseAddresses+0x42>
  {
    ref = (uint32_t)pNode3;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check addresses compatibility */
  if (temp != ((uint32_t)ref & DMA_CLBAR_LBA))
 8005f06:	697b      	ldr	r3, [r7, #20]
 8005f08:	0c1b      	lsrs	r3, r3, #16
 8005f0a:	041b      	lsls	r3, r3, #16
 8005f0c:	693a      	ldr	r2, [r7, #16]
 8005f0e:	429a      	cmp	r2, r3
 8005f10:	d001      	beq.n	8005f16 <DMA_List_CheckNodesBaseAddresses+0x52>
  {
    return 1U;
 8005f12:	2301      	movs	r3, #1
 8005f14:	e000      	b.n	8005f18 <DMA_List_CheckNodesBaseAddresses+0x54>
  }

  return 0U;
 8005f16:	2300      	movs	r3, #0
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <DMA_List_CheckNodesTypes>:
  * @retval Return 0 when nodes types are compatible, otherwise nodes types are not compatible.
  */
static uint32_t DMA_List_CheckNodesTypes(DMA_NodeTypeDef const *const pNode1,
                                         DMA_NodeTypeDef const *const pNode2,
                                         DMA_NodeTypeDef const *const pNode3)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
  uint32_t ref = 0U;
 8005f30:	2300      	movs	r3, #0
 8005f32:	617b      	str	r3, [r7, #20]

  /* Check node 1 parameter */
  if (pNode1 != NULL)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d004      	beq.n	8005f44 <DMA_List_CheckNodesTypes+0x20>
  {
    ref = pNode1->NodeInfo & NODE_TYPE_MASK;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	6a1b      	ldr	r3, [r3, #32]
 8005f3e:	b2db      	uxtb	r3, r3
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e00e      	b.n	8005f62 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 2 parameter */
  else if (pNode2 != NULL)
 8005f44:	68bb      	ldr	r3, [r7, #8]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d004      	beq.n	8005f54 <DMA_List_CheckNodesTypes+0x30>
  {
    ref = pNode2->NodeInfo & NODE_TYPE_MASK;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
 8005f4c:	6a1b      	ldr	r3, [r3, #32]
 8005f4e:	b2db      	uxtb	r3, r3
 8005f50:	617b      	str	r3, [r7, #20]
 8005f52:	e006      	b.n	8005f62 <DMA_List_CheckNodesTypes+0x3e>
  }
  /* Check node 3 parameter */
  else if (pNode3 != NULL)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <DMA_List_CheckNodesTypes+0x3e>
  {
    ref = pNode3->NodeInfo & NODE_TYPE_MASK;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a1b      	ldr	r3, [r3, #32]
 8005f5e:	b2db      	uxtb	r3, r3
 8005f60:	617b      	str	r3, [r7, #20]
  {
    /* Prevent MISRA-C2012-Rule-15.7 */
  }

  /* Check node 2 parameter */
  if (pNode2 != NULL)
 8005f62:	68bb      	ldr	r3, [r7, #8]
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	d007      	beq.n	8005f78 <DMA_List_CheckNodesTypes+0x54>
  {
    /* Check node type compatibility */
    if (ref != (pNode2->NodeInfo & NODE_TYPE_MASK))
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	6a1b      	ldr	r3, [r3, #32]
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d001      	beq.n	8005f78 <DMA_List_CheckNodesTypes+0x54>
    {
      return 2U;
 8005f74:	2302      	movs	r3, #2
 8005f76:	e00b      	b.n	8005f90 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  /* Check node 3 parameter */
  if (pNode3 != NULL)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d007      	beq.n	8005f8e <DMA_List_CheckNodesTypes+0x6a>
  {
    /* Check node type compatibility */
    if (ref != (pNode3->NodeInfo & NODE_TYPE_MASK))
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a1b      	ldr	r3, [r3, #32]
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	697a      	ldr	r2, [r7, #20]
 8005f86:	429a      	cmp	r2, r3
 8005f88:	d001      	beq.n	8005f8e <DMA_List_CheckNodesTypes+0x6a>
    {
      return 3U;
 8005f8a:	2303      	movs	r3, #3
 8005f8c:	e000      	b.n	8005f90 <DMA_List_CheckNodesTypes+0x6c>
    }
  }

  return 0U;
 8005f8e:	2300      	movs	r3, #0
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	371c      	adds	r7, #28
 8005f94:	46bd      	mov	sp, r7
 8005f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9a:	4770      	bx	lr

08005f9c <DMA_List_GetCLLRNodeInfo>:
  * @retval None.
  */
static void DMA_List_GetCLLRNodeInfo(DMA_NodeTypeDef const *const pNode,
                                     uint32_t *const cllr_mask,
                                     uint32_t *const cllr_offset)
{
 8005f9c:	b480      	push	{r7}
 8005f9e:	b085      	sub	sp, #20
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	60f8      	str	r0, [r7, #12]
 8005fa4:	60b9      	str	r1, [r7, #8]
 8005fa6:	607a      	str	r2, [r7, #4]
  /* Check node type */
  if ((pNode->NodeInfo & DMA_CHANNEL_TYPE_2D_ADDR) == DMA_CHANNEL_TYPE_2D_ADDR)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6a1b      	ldr	r3, [r3, #32]
 8005fac:	f003 0302 	and.w	r3, r3, #2
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d00c      	beq.n	8005fce <DMA_List_GetCLLRNodeInfo+0x32>
  {
    /* Update CLLR register mask value */
    if (cllr_mask != NULL)
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d002      	beq.n	8005fc0 <DMA_List_GetCLLRNodeInfo+0x24>
    {
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_UT3 |
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	4a0d      	ldr	r2, [pc, #52]	; (8005ff4 <DMA_List_GetCLLRNodeInfo+0x58>)
 8005fbe:	601a      	str	r2, [r3, #0]
                   DMA_CLLR_UB2 | DMA_CLLR_ULL;
    }

    /* Update CLLR register offset */
    if (cllr_offset != NULL)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d00f      	beq.n	8005fe6 <DMA_List_GetCLLRNodeInfo+0x4a>
    {
      *cllr_offset = NODE_CLLR_2D_DEFAULT_OFFSET;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	2207      	movs	r2, #7
 8005fca:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
    {
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
    }
  }
}
 8005fcc:	e00b      	b.n	8005fe6 <DMA_List_GetCLLRNodeInfo+0x4a>
    if (cllr_mask != NULL)
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d002      	beq.n	8005fda <DMA_List_GetCLLRNodeInfo+0x3e>
      *cllr_mask = DMA_CLLR_UT1 | DMA_CLLR_UT2 | DMA_CLLR_UB1 | DMA_CLLR_USA | DMA_CLLR_UDA | DMA_CLLR_ULL;
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	4a08      	ldr	r2, [pc, #32]	; (8005ff8 <DMA_List_GetCLLRNodeInfo+0x5c>)
 8005fd8:	601a      	str	r2, [r3, #0]
    if (cllr_offset != NULL)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d002      	beq.n	8005fe6 <DMA_List_GetCLLRNodeInfo+0x4a>
      *cllr_offset = NODE_CLLR_LINEAR_DEFAULT_OFFSET;
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2205      	movs	r2, #5
 8005fe4:	601a      	str	r2, [r3, #0]
}
 8005fe6:	bf00      	nop
 8005fe8:	3714      	adds	r7, #20
 8005fea:	46bd      	mov	sp, r7
 8005fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	fe010000 	.word	0xfe010000
 8005ff8:	f8010000 	.word	0xf8010000

08005ffc <DMA_List_FindNode>:
  * @retval Return 0 when node is found in selected queue, otherwise node is not found.
  */
static uint32_t DMA_List_FindNode(DMA_QListTypeDef const *const pQList,
                                  DMA_NodeTypeDef const *const pNode,
                                  DMA_NodeInQInfoTypeDef *const NodeInfo)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b089      	sub	sp, #36	; 0x24
 8006000:	af00      	add	r7, sp, #0
 8006002:	60f8      	str	r0, [r7, #12]
 8006004:	60b9      	str	r1, [r7, #8]
 8006006:	607a      	str	r2, [r7, #4]
  uint32_t node_idx = 0U;
 8006008:	2300      	movs	r3, #0
 800600a:	61fb      	str	r3, [r7, #28]
  uint32_t currentnode_address  = 0U;
 800600c:	2300      	movs	r3, #0
 800600e:	61bb      	str	r3, [r7, #24]
  uint32_t previousnode_address  = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
  uint32_t cllr_offset = NodeInfo->cllr_offset;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	613b      	str	r3, [r7, #16]

  /* Find last node in queue */
  if (pNode ==  NULL)
 800601a:	68bb      	ldr	r3, [r7, #8]
 800601c:	2b00      	cmp	r3, #0
 800601e:	d142      	bne.n	80060a6 <DMA_List_FindNode+0xaa>
  {
    /* Check that previous node is linked to the selected queue */
    while (node_idx < pQList->NodeNumber)
 8006020:	e01d      	b.n	800605e <DMA_List_FindNode+0x62>
    {
      /* Get head node address */
      if (node_idx == 0U)
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	2b00      	cmp	r3, #0
 8006026:	d107      	bne.n	8006038 <DMA_List_FindNode+0x3c>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	461a      	mov	r2, r3
 800602e:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006032:	4013      	ands	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
 8006036:	e00f      	b.n	8006058 <DMA_List_FindNode+0x5c>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	0c1b      	lsrs	r3, r3, #16
 8006042:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 8006044:	69ba      	ldr	r2, [r7, #24]
 8006046:	4413      	add	r3, r2
 8006048:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006050:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8006054:	4013      	ands	r3, r2
 8006056:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	3301      	adds	r3, #1
 800605c:	61fb      	str	r3, [r7, #28]
    while (node_idx < pQList->NodeNumber)
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	689b      	ldr	r3, [r3, #8]
 8006062:	69fa      	ldr	r2, [r7, #28]
 8006064:	429a      	cmp	r2, r3
 8006066:	d3dc      	bcc.n	8006022 <DMA_List_FindNode+0x26>
 8006068:	e029      	b.n	80060be <DMA_List_FindNode+0xc2>
  {
    /* Check that previous node is linked to the selected queue */
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
    {
      /* Get head node address */
      if (node_idx == 0U)
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d107      	bne.n	8006080 <DMA_List_FindNode+0x84>
      {
        currentnode_address = (uint32_t)pQList->Head & DMA_CLLR_LA;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	461a      	mov	r2, r3
 8006076:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800607a:	4013      	ands	r3, r2
 800607c:	61bb      	str	r3, [r7, #24]
 800607e:	e00f      	b.n	80060a0 <DMA_List_FindNode+0xa4>
      }
      /* Calculate nodes addresses */
      else
      {
        previousnode_address = currentnode_address;
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	617b      	str	r3, [r7, #20]
        currentnode_address =
          ((DMA_NodeTypeDef *)(currentnode_address +
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	0c1b      	lsrs	r3, r3, #16
 800608a:	041b      	lsls	r3, r3, #16
          ((DMA_NodeTypeDef *)(currentnode_address +
 800608c:	69ba      	ldr	r2, [r7, #24]
 800608e:	4413      	add	r3, r2
 8006090:	461a      	mov	r2, r3
                               ((uint32_t)pQList->Head & DMA_CLBAR_LBA)))->LinkRegisters[cllr_offset] & DMA_CLLR_LA;
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
        currentnode_address =
 8006098:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 800609c:	4013      	ands	r3, r2
 800609e:	61bb      	str	r3, [r7, #24]
      }

      /* Increment node index */
      node_idx++;
 80060a0:	69fb      	ldr	r3, [r7, #28]
 80060a2:	3301      	adds	r3, #1
 80060a4:	61fb      	str	r3, [r7, #28]
    while ((node_idx < pQList->NodeNumber) && (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA)))
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	69fa      	ldr	r2, [r7, #28]
 80060ac:	429a      	cmp	r2, r3
 80060ae:	d206      	bcs.n	80060be <DMA_List_FindNode+0xc2>
 80060b0:	68ba      	ldr	r2, [r7, #8]
 80060b2:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80060b6:	4013      	ands	r3, r2
 80060b8:	69ba      	ldr	r2, [r7, #24]
 80060ba:	429a      	cmp	r2, r3
 80060bc:	d1d5      	bne.n	800606a <DMA_List_FindNode+0x6e>
    }
  }

  /* Check stored address */
  if (pNode != NULL)
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d008      	beq.n	80060d6 <DMA_List_FindNode+0xda>
  {
    if (currentnode_address != ((uint32_t)pNode & DMA_CLLR_LA))
 80060c4:	68ba      	ldr	r2, [r7, #8]
 80060c6:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 80060ca:	4013      	ands	r3, r2
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	429a      	cmp	r2, r3
 80060d0:	d001      	beq.n	80060d6 <DMA_List_FindNode+0xda>
    {
      return 1U;
 80060d2:	2301      	movs	r3, #1
 80060d4:	e02b      	b.n	800612e <DMA_List_FindNode+0x132>
    }
  }

  /* Update current node position */
  NodeInfo->currentnode_pos = node_idx;
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	69fa      	ldr	r2, [r7, #28]
 80060da:	609a      	str	r2, [r3, #8]

  /* Update previous node address */
  NodeInfo->previousnode_addr = previousnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	0c1b      	lsrs	r3, r3, #16
 80060e2:	041b      	lsls	r3, r3, #16
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	431a      	orrs	r2, r3
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	605a      	str	r2, [r3, #4]

  /* Update current node address */
  NodeInfo->currentnode_addr = currentnode_address | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	0c1b      	lsrs	r3, r3, #16
 80060f2:	041b      	lsls	r3, r3, #16
 80060f4:	69ba      	ldr	r2, [r7, #24]
 80060f6:	431a      	orrs	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]

  /* Update next node address */
  if (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] != 0U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68db      	ldr	r3, [r3, #12]
 8006100:	461a      	mov	r2, r3
 8006102:	693b      	ldr	r3, [r7, #16]
 8006104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d00f      	beq.n	800612c <DMA_List_FindNode+0x130>
  {
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	68db      	ldr	r3, [r3, #12]
 8006110:	461a      	mov	r2, r3
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006118:	f64f 72fc 	movw	r2, #65532	; 0xfffc
 800611c:	401a      	ands	r2, r3
                               DMA_CLLR_LA) | ((uint32_t)pQList->Head & DMA_CLBAR_LBA);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	0c1b      	lsrs	r3, r3, #16
 8006124:	041b      	lsls	r3, r3, #16
 8006126:	431a      	orrs	r2, r3
    NodeInfo->nextnode_addr = (((DMA_NodeTypeDef *)NodeInfo->currentnode_addr)->LinkRegisters[cllr_offset] &
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	611a      	str	r2, [r3, #16]
  }

  return 0U;
 800612c:	2300      	movs	r3, #0
}
 800612e:	4618      	mov	r0, r3
 8006130:	3724      	adds	r7, #36	; 0x24
 8006132:	46bd      	mov	sp, r7
 8006134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006138:	4770      	bx	lr
	...

0800613c <HAL_GPIO_Init>:
  * @param  pGPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 800613c:	b480      	push	{r7}
 800613e:	b089      	sub	sp, #36	; 0x24
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
 8006144:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t pin_position;
  uint32_t position = 0U;
 8006146:	2300      	movs	r3, #0
 8006148:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Save GPIO port address */
  p_gpio = GPIOx;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	613b      	str	r3, [r7, #16]

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 800614e:	e1ba      	b.n	80064c6 <HAL_GPIO_Init+0x38a>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681a      	ldr	r2, [r3, #0]
 8006154:	2101      	movs	r1, #1
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fa01 f303 	lsl.w	r3, r1, r3
 800615c:	4013      	ands	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]

    /* Save Pin Position */
    pin_position = position;
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	61bb      	str	r3, [r7, #24]

    if (iocurrent != 0U)
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f000 81aa 	beq.w	80064c0 <HAL_GPIO_Init+0x384>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if (GPIOx == LPGPIO1)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	4a55      	ldr	r2, [pc, #340]	; (80062c4 <HAL_GPIO_Init+0x188>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d15d      	bne.n	8006230 <HAL_GPIO_Init+0xf4>
      {
        /* MODER configuration */
        tmp = GPIOx->MODER;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	61fb      	str	r3, [r7, #28]
        tmp &= ~(LPGPIO_MODER_MOD0 << position);
 800617a:	2201      	movs	r2, #1
 800617c:	697b      	ldr	r3, [r7, #20]
 800617e:	fa02 f303 	lsl.w	r3, r2, r3
 8006182:	43db      	mvns	r3, r3
 8006184:	69fa      	ldr	r2, [r7, #28]
 8006186:	4013      	ands	r3, r2
 8006188:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE_OUTPUT_PP) << position);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	685b      	ldr	r3, [r3, #4]
 800618e:	f003 0201 	and.w	r2, r3, #1
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	69fa      	ldr	r2, [r7, #28]
 800619a:	4313      	orrs	r3, r2
 800619c:	61fb      	str	r3, [r7, #28]
        GPIOx->MODER = tmp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	69fa      	ldr	r2, [r7, #28]
 80061a2:	601a      	str	r2, [r3, #0]

        /* Save GPIO Port and pin index */
        p_gpio = LPGPIO_Map[position].GPIO_PORT;
 80061a4:	4a48      	ldr	r2, [pc, #288]	; (80062c8 <HAL_GPIO_Init+0x18c>)
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061ac:	613b      	str	r3, [r7, #16]
        pin_position = LPGPIO_Map[position].Pin_Pos;
 80061ae:	4a46      	ldr	r2, [pc, #280]	; (80062c8 <HAL_GPIO_Init+0x18c>)
 80061b0:	697b      	ldr	r3, [r7, #20]
 80061b2:	00db      	lsls	r3, r3, #3
 80061b4:	4413      	add	r3, r2
 80061b6:	685b      	ldr	r3, [r3, #4]
 80061b8:	61bb      	str	r3, [r7, #24]

        /* Configure Alternate function mapped with the current IO */
        tmp = p_gpio->AFR[(pin_position) >> 3U];
 80061ba:	69bb      	ldr	r3, [r7, #24]
 80061bc:	08da      	lsrs	r2, r3, #3
 80061be:	693b      	ldr	r3, [r7, #16]
 80061c0:	3208      	adds	r2, #8
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << (((pin_position) & 0x07U) * 4U));
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	220f      	movs	r2, #15
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	43db      	mvns	r3, r3
 80061d8:	69fa      	ldr	r2, [r7, #28]
 80061da:	4013      	ands	r3, r2
 80061dc:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_AF11_LPGPIO1 & 0x0FUL) << (((pin_position) & 0x07U) * 4U));
 80061de:	69bb      	ldr	r3, [r7, #24]
 80061e0:	f003 0307 	and.w	r3, r3, #7
 80061e4:	009b      	lsls	r3, r3, #2
 80061e6:	220b      	movs	r2, #11
 80061e8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	4313      	orrs	r3, r2
 80061f0:	61fb      	str	r3, [r7, #28]
        p_gpio->AFR[(pin_position) >> 3U] = tmp;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	08da      	lsrs	r2, r3, #3
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	3208      	adds	r2, #8
 80061fa:	69f9      	ldr	r1, [r7, #28]
 80061fc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 8006200:	693b      	ldr	r3, [r7, #16]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006206:	69bb      	ldr	r3, [r7, #24]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	2203      	movs	r2, #3
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	69fa      	ldr	r2, [r7, #28]
 8006214:	4013      	ands	r3, r2
 8006216:	61fb      	str	r3, [r7, #28]
        tmp |= ((GPIO_MODE_AF_PP & 0x0FUL) << (pin_position * 2U));
 8006218:	69bb      	ldr	r3, [r7, #24]
 800621a:	005b      	lsls	r3, r3, #1
 800621c:	2202      	movs	r2, #2
 800621e:	fa02 f303 	lsl.w	r3, r2, r3
 8006222:	69fa      	ldr	r2, [r7, #28]
 8006224:	4313      	orrs	r3, r2
 8006226:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 8006228:	693b      	ldr	r3, [r7, #16]
 800622a:	69fa      	ldr	r2, [r7, #28]
 800622c:	601a      	str	r2, [r3, #0]
 800622e:	e067      	b.n	8006300 <HAL_GPIO_Init+0x1c4>
      }
      else if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	2b02      	cmp	r3, #2
 8006236:	d003      	beq.n	8006240 <HAL_GPIO_Init+0x104>
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	2b12      	cmp	r3, #18
 800623e:	d145      	bne.n	80062cc <HAL_GPIO_Init+0x190>
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	08da      	lsrs	r2, r3, #3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	3208      	adds	r2, #8
 8006248:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624c:	61fb      	str	r3, [r7, #28]
        tmp &= ~(0x0FUL << ((position & 0x07U) * 4U));
 800624e:	697b      	ldr	r3, [r7, #20]
 8006250:	f003 0307 	and.w	r3, r3, #7
 8006254:	009b      	lsls	r3, r3, #2
 8006256:	220f      	movs	r2, #15
 8006258:	fa02 f303 	lsl.w	r3, r2, r3
 800625c:	43db      	mvns	r3, r3
 800625e:	69fa      	ldr	r2, [r7, #28]
 8006260:	4013      	ands	r3, r2
 8006262:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8006264:	683b      	ldr	r3, [r7, #0]
 8006266:	691b      	ldr	r3, [r3, #16]
 8006268:	f003 020f 	and.w	r2, r3, #15
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	009b      	lsls	r3, r3, #2
 8006274:	fa02 f303 	lsl.w	r3, r2, r3
 8006278:	69fa      	ldr	r2, [r7, #28]
 800627a:	4313      	orrs	r3, r2
 800627c:	61fb      	str	r3, [r7, #28]
        GPIOx->AFR[position >> 3U] = tmp;
 800627e:	697b      	ldr	r3, [r7, #20]
 8006280:	08da      	lsrs	r2, r3, #3
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	3208      	adds	r2, #8
 8006286:	69f9      	ldr	r1, [r7, #28]
 8006288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

        /* Configure IO Direction mode (Alternate) */
        tmp = p_gpio->MODER;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 8006292:	69bb      	ldr	r3, [r7, #24]
 8006294:	005b      	lsls	r3, r3, #1
 8006296:	2203      	movs	r2, #3
 8006298:	fa02 f303 	lsl.w	r3, r2, r3
 800629c:	43db      	mvns	r3, r3
 800629e:	69fa      	ldr	r2, [r7, #28]
 80062a0:	4013      	ands	r3, r2
 80062a2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	f003 0203 	and.w	r2, r3, #3
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	005b      	lsls	r3, r3, #1
 80062b0:	fa02 f303 	lsl.w	r3, r2, r3
 80062b4:	69fa      	ldr	r2, [r7, #28]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	69fa      	ldr	r2, [r7, #28]
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	e01e      	b.n	8006300 <HAL_GPIO_Init+0x1c4>
 80062c2:	bf00      	nop
 80062c4:	46020000 	.word	0x46020000
 80062c8:	08010ca8 	.word	0x08010ca8
      {
        /* Check the parameters */
        assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

        /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
        tmp = p_gpio->MODER;
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_MODER_MODE0 << (pin_position * 2U));
 80062d2:	69bb      	ldr	r3, [r7, #24]
 80062d4:	005b      	lsls	r3, r3, #1
 80062d6:	2203      	movs	r2, #3
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	69fa      	ldr	r2, [r7, #28]
 80062e0:	4013      	ands	r3, r2
 80062e2:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (pin_position * 2U));
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	685b      	ldr	r3, [r3, #4]
 80062e8:	f003 0203 	and.w	r2, r3, #3
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	005b      	lsls	r3, r3, #1
 80062f0:	fa02 f303 	lsl.w	r3, r2, r3
 80062f4:	69fa      	ldr	r2, [r7, #28]
 80062f6:	4313      	orrs	r3, r2
 80062f8:	61fb      	str	r3, [r7, #28]
        p_gpio->MODER = tmp;
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	69fa      	ldr	r2, [r7, #28]
 80062fe:	601a      	str	r2, [r3, #0]
      }

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006300:	683b      	ldr	r3, [r7, #0]
 8006302:	685b      	ldr	r3, [r3, #4]
 8006304:	2b01      	cmp	r3, #1
 8006306:	d00b      	beq.n	8006320 <HAL_GPIO_Init+0x1e4>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	2b02      	cmp	r3, #2
 800630e:	d007      	beq.n	8006320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006310:	683b      	ldr	r3, [r7, #0]
 8006312:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006314:	2b11      	cmp	r3, #17
 8006316:	d003      	beq.n	8006320 <HAL_GPIO_Init+0x1e4>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2b12      	cmp	r3, #18
 800631e:	d130      	bne.n	8006382 <HAL_GPIO_Init+0x246>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = p_gpio->OSPEEDR;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (pin_position * 2U));
 8006326:	69bb      	ldr	r3, [r7, #24]
 8006328:	005b      	lsls	r3, r3, #1
 800632a:	2203      	movs	r2, #3
 800632c:	fa02 f303 	lsl.w	r3, r2, r3
 8006330:	43db      	mvns	r3, r3
 8006332:	69fa      	ldr	r2, [r7, #28]
 8006334:	4013      	ands	r3, r2
 8006336:	61fb      	str	r3, [r7, #28]
        tmp |= (pGPIO_Init->Speed << (pin_position * 2U));
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	69bb      	ldr	r3, [r7, #24]
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	fa02 f303 	lsl.w	r3, r2, r3
 8006344:	69fa      	ldr	r2, [r7, #28]
 8006346:	4313      	orrs	r3, r2
 8006348:	61fb      	str	r3, [r7, #28]
        p_gpio->OSPEEDR = tmp;
 800634a:	693b      	ldr	r3, [r7, #16]
 800634c:	69fa      	ldr	r2, [r7, #28]
 800634e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = p_gpio->OTYPER;
 8006350:	693b      	ldr	r3, [r7, #16]
 8006352:	685b      	ldr	r3, [r3, #4]
 8006354:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_OTYPER_OT0 << pin_position);
 8006356:	2201      	movs	r2, #1
 8006358:	69bb      	ldr	r3, [r7, #24]
 800635a:	fa02 f303 	lsl.w	r3, r2, r3
 800635e:	43db      	mvns	r3, r3
 8006360:	69fa      	ldr	r2, [r7, #28]
 8006362:	4013      	ands	r3, r2
 8006364:	61fb      	str	r3, [r7, #28]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << pin_position);
 8006366:	683b      	ldr	r3, [r7, #0]
 8006368:	685b      	ldr	r3, [r3, #4]
 800636a:	091b      	lsrs	r3, r3, #4
 800636c:	f003 0201 	and.w	r2, r3, #1
 8006370:	69bb      	ldr	r3, [r7, #24]
 8006372:	fa02 f303 	lsl.w	r3, r2, r3
 8006376:	69fa      	ldr	r2, [r7, #28]
 8006378:	4313      	orrs	r3, r2
 800637a:	61fb      	str	r3, [r7, #28]
        p_gpio->OTYPER = tmp;
 800637c:	693b      	ldr	r3, [r7, #16]
 800637e:	69fa      	ldr	r2, [r7, #28]
 8006380:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	685b      	ldr	r3, [r3, #4]
 8006386:	2b03      	cmp	r3, #3
 8006388:	d017      	beq.n	80063ba <HAL_GPIO_Init+0x27e>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = p_gpio->PUPDR;
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	61fb      	str	r3, [r7, #28]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (pin_position * 2U));
 8006390:	69bb      	ldr	r3, [r7, #24]
 8006392:	005b      	lsls	r3, r3, #1
 8006394:	2203      	movs	r2, #3
 8006396:	fa02 f303 	lsl.w	r3, r2, r3
 800639a:	43db      	mvns	r3, r3
 800639c:	69fa      	ldr	r2, [r7, #28]
 800639e:	4013      	ands	r3, r2
 80063a0:	61fb      	str	r3, [r7, #28]
        tmp |= ((pGPIO_Init->Pull) << (pin_position * 2U));
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	689a      	ldr	r2, [r3, #8]
 80063a6:	69bb      	ldr	r3, [r7, #24]
 80063a8:	005b      	lsls	r3, r3, #1
 80063aa:	fa02 f303 	lsl.w	r3, r2, r3
 80063ae:	69fa      	ldr	r2, [r7, #28]
 80063b0:	4313      	orrs	r3, r2
 80063b2:	61fb      	str	r3, [r7, #28]
        p_gpio->PUPDR = tmp;
 80063b4:	693b      	ldr	r3, [r7, #16]
 80063b6:	69fa      	ldr	r2, [r7, #28]
 80063b8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80063ba:	683b      	ldr	r3, [r7, #0]
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d07c      	beq.n	80064c0 <HAL_GPIO_Init+0x384>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80063c6:	4a47      	ldr	r2, [pc, #284]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	089b      	lsrs	r3, r3, #2
 80063cc:	3318      	adds	r3, #24
 80063ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80063d2:	61fb      	str	r3, [r7, #28]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80063d4:	697b      	ldr	r3, [r7, #20]
 80063d6:	f003 0303 	and.w	r3, r3, #3
 80063da:	00db      	lsls	r3, r3, #3
 80063dc:	220f      	movs	r2, #15
 80063de:	fa02 f303 	lsl.w	r3, r2, r3
 80063e2:	43db      	mvns	r3, r3
 80063e4:	69fa      	ldr	r2, [r7, #28]
 80063e6:	4013      	ands	r3, r2
 80063e8:	61fb      	str	r3, [r7, #28]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	0a9a      	lsrs	r2, r3, #10
 80063ee:	4b3e      	ldr	r3, [pc, #248]	; (80064e8 <HAL_GPIO_Init+0x3ac>)
 80063f0:	4013      	ands	r3, r2
 80063f2:	697a      	ldr	r2, [r7, #20]
 80063f4:	f002 0203 	and.w	r2, r2, #3
 80063f8:	00d2      	lsls	r2, r2, #3
 80063fa:	4093      	lsls	r3, r2
 80063fc:	69fa      	ldr	r2, [r7, #28]
 80063fe:	4313      	orrs	r3, r2
 8006400:	61fb      	str	r3, [r7, #28]
        EXTI->EXTICR[position >> 2U] = tmp;
 8006402:	4938      	ldr	r1, [pc, #224]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	089b      	lsrs	r3, r3, #2
 8006408:	3318      	adds	r3, #24
 800640a:	69fa      	ldr	r2, [r7, #28]
 800640c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8006410:	4b34      	ldr	r3, [pc, #208]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	43db      	mvns	r3, r3
 800641a:	69fa      	ldr	r2, [r7, #28]
 800641c:	4013      	ands	r3, r2
 800641e:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_GPIO_Init+0x2f8>
        {
          tmp |= iocurrent;
 800642c:	69fa      	ldr	r2, [r7, #28]
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	4313      	orrs	r3, r2
 8006432:	61fb      	str	r3, [r7, #28]
        }
        EXTI->RTSR1 = tmp;
 8006434:	4a2b      	ldr	r2, [pc, #172]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006436:	69fb      	ldr	r3, [r7, #28]
 8006438:	6013      	str	r3, [r2, #0]

        tmp = EXTI->FTSR1;
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	43db      	mvns	r3, r3
 8006444:	69fa      	ldr	r2, [r7, #28]
 8006446:	4013      	ands	r3, r2
 8006448:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006452:	2b00      	cmp	r3, #0
 8006454:	d003      	beq.n	800645e <HAL_GPIO_Init+0x322>
        {
          tmp |= iocurrent;
 8006456:	69fa      	ldr	r2, [r7, #28]
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	4313      	orrs	r3, r2
 800645c:	61fb      	str	r3, [r7, #28]
        }
        EXTI->FTSR1 = tmp;
 800645e:	4a21      	ldr	r2, [pc, #132]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        tmp = EXTI->EMR1;
 8006464:	4b1f      	ldr	r3, [pc, #124]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006466:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800646a:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	43db      	mvns	r3, r3
 8006470:	69fa      	ldr	r2, [r7, #28]
 8006472:	4013      	ands	r3, r2
 8006474:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	685b      	ldr	r3, [r3, #4]
 800647a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800647e:	2b00      	cmp	r3, #0
 8006480:	d003      	beq.n	800648a <HAL_GPIO_Init+0x34e>
        {
          tmp |= iocurrent;
 8006482:	69fa      	ldr	r2, [r7, #28]
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	4313      	orrs	r3, r2
 8006488:	61fb      	str	r3, [r7, #28]
        }
        EXTI->EMR1 = tmp;
 800648a:	4a16      	ldr	r2, [pc, #88]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        tmp = EXTI->IMR1;
 8006492:	4b14      	ldr	r3, [pc, #80]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 8006494:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006498:	61fb      	str	r3, [r7, #28]
        tmp &= ~((uint32_t)iocurrent);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	43db      	mvns	r3, r3
 800649e:	69fa      	ldr	r2, [r7, #28]
 80064a0:	4013      	ands	r3, r2
 80064a2:	61fb      	str	r3, [r7, #28]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d003      	beq.n	80064b8 <HAL_GPIO_Init+0x37c>
        {
          tmp |= iocurrent;
 80064b0:	69fa      	ldr	r2, [r7, #28]
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	4313      	orrs	r3, r2
 80064b6:	61fb      	str	r3, [r7, #28]
        }
        EXTI->IMR1 = tmp;
 80064b8:	4a0a      	ldr	r2, [pc, #40]	; (80064e4 <HAL_GPIO_Init+0x3a8>)
 80064ba:	69fb      	ldr	r3, [r7, #28]
 80064bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }
    position++;
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	3301      	adds	r3, #1
 80064c4:	617b      	str	r3, [r7, #20]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80064c6:	683b      	ldr	r3, [r7, #0]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	697b      	ldr	r3, [r7, #20]
 80064cc:	fa22 f303 	lsr.w	r3, r2, r3
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	f47f ae3d 	bne.w	8006150 <HAL_GPIO_Init+0x14>
  }
}
 80064d6:	bf00      	nop
 80064d8:	bf00      	nop
 80064da:	3724      	adds	r7, #36	; 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	46022000 	.word	0x46022000
 80064e8:	002f7f7f 	.word	0x002f7f7f

080064ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064ec:	b480      	push	{r7}
 80064ee:	b083      	sub	sp, #12
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	460b      	mov	r3, r1
 80064f6:	807b      	strh	r3, [r7, #2]
 80064f8:	4613      	mov	r3, r2
 80064fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80064fc:	787b      	ldrb	r3, [r7, #1]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d003      	beq.n	800650a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006502:	887a      	ldrh	r2, [r7, #2]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
  }
}
 8006508:	e002      	b.n	8006510 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR  = (uint32_t)GPIO_Pin;
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_PWREx_ControlVoltageScaling>:
  * @note  Before moving to voltage scaling 4, it is mandatory to ensure that
  *        the system frequency is below 24 MHz.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800651c:	b480      	push	{r7}
 800651e:	b085      	sub	sp, #20
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]

  /* Check the parameter */
  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Get the current voltage scale applied */
  vos_old = READ_BIT(PWR->SVMSR, PWR_SVMSR_ACTVOS);
 8006524:	4b39      	ldr	r3, [pc, #228]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006528:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800652c:	60bb      	str	r3, [r7, #8]

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800652e:	68ba      	ldr	r2, [r7, #8]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	429a      	cmp	r2, r3
 8006534:	d10b      	bne.n	800654e <HAL_PWREx_ControlVoltageScaling+0x32>
  {
    /* Enable USB BOOST after wake up from Stop mode */
    if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653c:	d905      	bls.n	800654a <HAL_PWREx_ControlVoltageScaling+0x2e>
    {
      /* Enable USB BOOST */
      SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 800653e:	4b33      	ldr	r3, [pc, #204]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006540:	68db      	ldr	r3, [r3, #12]
 8006542:	4a32      	ldr	r2, [pc, #200]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006544:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006548:	60d3      	str	r3, [r2, #12]
    }

    return HAL_OK;
 800654a:	2300      	movs	r3, #0
 800654c:	e057      	b.n	80065fe <HAL_PWREx_ControlVoltageScaling+0xe2>
  /* Check voltage scaling level */
  /*
   *  The Embedded power distribution (EPOD) must be enabled before switching to
   *  voltage scale 1 / 2 from voltage scale lower.
   */
  if (VoltageScaling > PWR_REGULATOR_VOLTAGE_SCALE3)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006554:	d90a      	bls.n	800656c <HAL_PWREx_ControlVoltageScaling+0x50>
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), (VoltageScaling | PWR_VOSR_BOOSTEN));
 8006556:	4b2d      	ldr	r3, [pc, #180]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006558:	68db      	ldr	r3, [r3, #12]
 800655a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	4313      	orrs	r3, r2
 8006562:	4a2a      	ldr	r2, [pc, #168]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006564:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006568:	60d3      	str	r3, [r2, #12]
 800656a:	e007      	b.n	800657c <HAL_PWREx_ControlVoltageScaling+0x60>
  }
  else
  {
    MODIFY_REG(PWR->VOSR, (PWR_VOSR_VOS | PWR_VOSR_BOOSTEN), VoltageScaling);
 800656c:	4b27      	ldr	r3, [pc, #156]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 800656e:	68db      	ldr	r3, [r3, #12]
 8006570:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8006574:	4925      	ldr	r1, [pc, #148]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	4313      	orrs	r3, r2
 800657a:	60cb      	str	r3, [r1, #12]
  }

  /* Wait until VOSRDY is raised */
  timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 800657c:	4b24      	ldr	r3, [pc, #144]	; (8006610 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a24      	ldr	r2, [pc, #144]	; (8006614 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006582:	fba2 2303 	umull	r2, r3, r2, r3
 8006586:	099b      	lsrs	r3, r3, #6
 8006588:	2232      	movs	r2, #50	; 0x32
 800658a:	fb02 f303 	mul.w	r3, r2, r3
 800658e:	4a21      	ldr	r2, [pc, #132]	; (8006614 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	099b      	lsrs	r3, r3, #6
 8006596:	3301      	adds	r3, #1
 8006598:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 800659a:	e002      	b.n	80065a2 <HAL_PWREx_ControlVoltageScaling+0x86>
  {
    timeout--;
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	3b01      	subs	r3, #1
 80065a0:	60fb      	str	r3, [r7, #12]
  while (HAL_IS_BIT_CLR(PWR->VOSR, PWR_VOSR_VOSRDY) && (timeout != 0U))
 80065a2:	4b1a      	ldr	r3, [pc, #104]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065a4:	68db      	ldr	r3, [r3, #12]
 80065a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d102      	bne.n	80065b4 <HAL_PWREx_ControlVoltageScaling+0x98>
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d1f3      	bne.n	800659c <HAL_PWREx_ControlVoltageScaling+0x80>
  }

  /* Check time out */
  if (timeout != 0U)
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d01b      	beq.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0xd6>
  {
    /* Wait until ACTVOSRDY is raised */
    timeout = ((PWR_FLAG_SETTING_DELAY * (SystemCoreClock / 1000U)) / 1000U) + 1U;
 80065ba:	4b15      	ldr	r3, [pc, #84]	; (8006610 <HAL_PWREx_ControlVoltageScaling+0xf4>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a15      	ldr	r2, [pc, #84]	; (8006614 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065c0:	fba2 2303 	umull	r2, r3, r2, r3
 80065c4:	099b      	lsrs	r3, r3, #6
 80065c6:	2232      	movs	r2, #50	; 0x32
 80065c8:	fb02 f303 	mul.w	r3, r2, r3
 80065cc:	4a11      	ldr	r2, [pc, #68]	; (8006614 <HAL_PWREx_ControlVoltageScaling+0xf8>)
 80065ce:	fba2 2303 	umull	r2, r3, r2, r3
 80065d2:	099b      	lsrs	r3, r3, #6
 80065d4:	3301      	adds	r3, #1
 80065d6:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80065d8:	e002      	b.n	80065e0 <HAL_PWREx_ControlVoltageScaling+0xc4>
    {
      timeout--;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3b01      	subs	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]
    while ((HAL_IS_BIT_CLR(PWR->SVMSR, PWR_SVMSR_ACTVOSRDY)) && (timeout != 0U))
 80065e0:	4b0a      	ldr	r3, [pc, #40]	; (800660c <HAL_PWREx_ControlVoltageScaling+0xf0>)
 80065e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80065e4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d102      	bne.n	80065f2 <HAL_PWREx_ControlVoltageScaling+0xd6>
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1f3      	bne.n	80065da <HAL_PWREx_ControlVoltageScaling+0xbe>
    }
  }

  /* Check time out */
  if (timeout == 0U)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d101      	bne.n	80065fc <HAL_PWREx_ControlVoltageScaling+0xe0>
  {
    return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e000      	b.n	80065fe <HAL_PWREx_ControlVoltageScaling+0xe2>
  }

  return HAL_OK;
 80065fc:	2300      	movs	r3, #0
}
 80065fe:	4618      	mov	r0, r3
 8006600:	3714      	adds	r7, #20
 8006602:	46bd      	mov	sp, r7
 8006604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006608:	4770      	bx	lr
 800660a:	bf00      	nop
 800660c:	46020800 	.word	0x46020800
 8006610:	20000000 	.word	0x20000000
 8006614:	10624dd3 	.word	0x10624dd3

08006618 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief  Return Voltage Scaling Range.
  * @retval Applied voltage scaling value.
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006618:	b480      	push	{r7}
 800661a:	af00      	add	r7, sp, #0
  return (PWR->SVMSR & PWR_SVMSR_ACTVOS);
 800661c:	4b04      	ldr	r3, [pc, #16]	; (8006630 <HAL_PWREx_GetVoltageRange+0x18>)
 800661e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006620:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8006624:	4618      	mov	r0, r3
 8006626:	46bd      	mov	sp, r7
 8006628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800662c:	4770      	bx	lr
 800662e:	bf00      	nop
 8006630:	46020800 	.word	0x46020800

08006634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *pRCC_OscInitStruct)
{
 8006634:	b580      	push	{r7, lr}
 8006636:	b08e      	sub	sp, #56	; 0x38
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source;
  uint32_t pll_config;
  FlagStatus pwrboosten = RESET;
 800663c:	2300      	movs	r3, #0
 800663e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t temp1_pllckcfg;
  uint32_t temp2_pllckcfg;

  /* Check Null pointer */
  if (pRCC_OscInitStruct == NULL)
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	2b00      	cmp	r3, #0
 8006646:	d102      	bne.n	800664e <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8006648:	2301      	movs	r3, #1
 800664a:	f000 bec8 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(pRCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800664e:	4b99      	ldr	r3, [pc, #612]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006650:	69db      	ldr	r3, [r3, #28]
 8006652:	f003 030c 	and.w	r3, r3, #12
 8006656:	633b      	str	r3, [r7, #48]	; 0x30
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006658:	4b96      	ldr	r3, [pc, #600]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800665a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800665c:	f003 0303 	and.w	r3, r3, #3
 8006660:	62fb      	str	r3, [r7, #44]	; 0x2c

  /*----------------------------- MSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f003 0310 	and.w	r3, r3, #16
 800666a:	2b00      	cmp	r3, #0
 800666c:	f000 816c 	beq.w	8006948 <HAL_RCC_OscConfig+0x314>
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(pRCC_OscInitStruct->MSIClockRange));

    /*Check if MSI is used as system clock or as PLL source when PLL is selected as system clock*/

    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2b00      	cmp	r3, #0
 8006674:	d007      	beq.n	8006686 <HAL_RCC_OscConfig+0x52>
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	2b0c      	cmp	r3, #12
 800667a:	f040 80de 	bne.w	800683a <HAL_RCC_OscConfig+0x206>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800667e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006680:	2b01      	cmp	r3, #1
 8006682:	f040 80da 	bne.w	800683a <HAL_RCC_OscConfig+0x206>
    {
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d102      	bne.n	8006694 <HAL_RCC_OscConfig+0x60>
      {
        return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	f000 bea5 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device */
        if (pRCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006698:	4b86      	ldr	r3, [pc, #536]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800669a:	689b      	ldr	r3, [r3, #8]
 800669c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d004      	beq.n	80066ae <HAL_RCC_OscConfig+0x7a>
 80066a4:	4b83      	ldr	r3, [pc, #524]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066a6:	689b      	ldr	r3, [r3, #8]
 80066a8:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066ac:	e005      	b.n	80066ba <HAL_RCC_OscConfig+0x86>
 80066ae:	4b81      	ldr	r3, [pc, #516]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066b4:	041b      	lsls	r3, r3, #16
 80066b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80066ba:	4293      	cmp	r3, r2
 80066bc:	d255      	bcs.n	800676a <HAL_RCC_OscConfig+0x136>
        {
          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d10a      	bne.n	80066da <HAL_RCC_OscConfig+0xa6>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066c8:	4618      	mov	r0, r3
 80066ca:	f001 fa17 	bl	8007afc <RCC_SetFlashLatencyFromMSIRange>
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_RCC_OscConfig+0xa6>
            {
              return HAL_ERROR;
 80066d4:	2301      	movs	r3, #1
 80066d6:	f000 be82 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
            }
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 80066da:	4b76      	ldr	r3, [pc, #472]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	4a75      	ldr	r2, [pc, #468]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80066e4:	6093      	str	r3, [r2, #8]
 80066e6:	4b73      	ldr	r3, [pc, #460]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066f2:	4970      	ldr	r1, [pc, #448]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80066f4:	4313      	orrs	r3, r2
 80066f6:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066fc:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006700:	d309      	bcc.n	8006716 <HAL_RCC_OscConfig+0xe2>
 8006702:	4b6c      	ldr	r3, [pc, #432]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006704:	68db      	ldr	r3, [r3, #12]
 8006706:	f023 021f 	bic.w	r2, r3, #31
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	6a1b      	ldr	r3, [r3, #32]
 800670e:	4969      	ldr	r1, [pc, #420]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006710:	4313      	orrs	r3, r2
 8006712:	60cb      	str	r3, [r1, #12]
 8006714:	e07e      	b.n	8006814 <HAL_RCC_OscConfig+0x1e0>
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800671a:	2b00      	cmp	r3, #0
 800671c:	da0a      	bge.n	8006734 <HAL_RCC_OscConfig+0x100>
 800671e:	4b65      	ldr	r3, [pc, #404]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006720:	68db      	ldr	r3, [r3, #12]
 8006722:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	015b      	lsls	r3, r3, #5
 800672c:	4961      	ldr	r1, [pc, #388]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800672e:	4313      	orrs	r3, r2
 8006730:	60cb      	str	r3, [r1, #12]
 8006732:	e06f      	b.n	8006814 <HAL_RCC_OscConfig+0x1e0>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800673c:	d30a      	bcc.n	8006754 <HAL_RCC_OscConfig+0x120>
 800673e:	4b5d      	ldr	r3, [pc, #372]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	6a1b      	ldr	r3, [r3, #32]
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	4959      	ldr	r1, [pc, #356]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800674e:	4313      	orrs	r3, r2
 8006750:	60cb      	str	r3, [r1, #12]
 8006752:	e05f      	b.n	8006814 <HAL_RCC_OscConfig+0x1e0>
 8006754:	4b57      	ldr	r3, [pc, #348]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6a1b      	ldr	r3, [r3, #32]
 8006760:	03db      	lsls	r3, r3, #15
 8006762:	4954      	ldr	r1, [pc, #336]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006764:	4313      	orrs	r3, r2
 8006766:	60cb      	str	r3, [r1, #12]
 8006768:	e054      	b.n	8006814 <HAL_RCC_OscConfig+0x1e0>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range */
          __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 800676a:	4b52      	ldr	r3, [pc, #328]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800676c:	689b      	ldr	r3, [r3, #8]
 800676e:	4a51      	ldr	r2, [pc, #324]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006770:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006774:	6093      	str	r3, [r2, #8]
 8006776:	4b4f      	ldr	r3, [pc, #316]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006778:	689b      	ldr	r3, [r3, #8]
 800677a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006782:	494c      	ldr	r1, [pc, #304]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006784:	4313      	orrs	r3, r2
 8006786:	608b      	str	r3, [r1, #8]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800678c:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8006790:	d309      	bcc.n	80067a6 <HAL_RCC_OscConfig+0x172>
 8006792:	4b48      	ldr	r3, [pc, #288]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006794:	68db      	ldr	r3, [r3, #12]
 8006796:	f023 021f 	bic.w	r2, r3, #31
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6a1b      	ldr	r3, [r3, #32]
 800679e:	4945      	ldr	r1, [pc, #276]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067a0:	4313      	orrs	r3, r2
 80067a2:	60cb      	str	r3, [r1, #12]
 80067a4:	e028      	b.n	80067f8 <HAL_RCC_OscConfig+0x1c4>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	da0a      	bge.n	80067c4 <HAL_RCC_OscConfig+0x190>
 80067ae:	4b41      	ldr	r3, [pc, #260]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067b0:	68db      	ldr	r3, [r3, #12]
 80067b2:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a1b      	ldr	r3, [r3, #32]
 80067ba:	015b      	lsls	r3, r3, #5
 80067bc:	493d      	ldr	r1, [pc, #244]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067be:	4313      	orrs	r3, r2
 80067c0:	60cb      	str	r3, [r1, #12]
 80067c2:	e019      	b.n	80067f8 <HAL_RCC_OscConfig+0x1c4>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067cc:	d30a      	bcc.n	80067e4 <HAL_RCC_OscConfig+0x1b0>
 80067ce:	4b39      	ldr	r3, [pc, #228]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	029b      	lsls	r3, r3, #10
 80067dc:	4935      	ldr	r1, [pc, #212]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	60cb      	str	r3, [r1, #12]
 80067e2:	e009      	b.n	80067f8 <HAL_RCC_OscConfig+0x1c4>
 80067e4:	4b33      	ldr	r3, [pc, #204]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067e6:	68db      	ldr	r3, [r3, #12]
 80067e8:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	6a1b      	ldr	r3, [r3, #32]
 80067f0:	03db      	lsls	r3, r3, #15
 80067f2:	4930      	ldr	r1, [pc, #192]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60cb      	str	r3, [r1, #12]
                                                (pRCC_OscInitStruct->MSIClockRange));

          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d10a      	bne.n	8006814 <HAL_RCC_OscConfig+0x1e0>
          {
            if (RCC_SetFlashLatencyFromMSIRange(pRCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006802:	4618      	mov	r0, r3
 8006804:	f001 f97a 	bl	8007afc <RCC_SetFlashLatencyFromMSIRange>
 8006808:	4603      	mov	r3, r0
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_RCC_OscConfig+0x1e0>
            {
              return HAL_ERROR;
 800680e:	2301      	movs	r3, #1
 8006810:	f000 bde5 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        (void) HAL_RCC_GetHCLKFreq();
 8006814:	f001 f8e4 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <HAL_RCC_OscConfig+0x284>)
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	4618      	mov	r0, r3
 800681e:	f7fd f93f 	bl	8003aa0 <HAL_InitTick>
 8006822:	4603      	mov	r3, r0
 8006824:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        if (status != HAL_OK)
 8006828:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800682c:	2b00      	cmp	r3, #0
 800682e:	f000 808a 	beq.w	8006946 <HAL_RCC_OscConfig+0x312>
        {
          return status;
 8006832:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006836:	f000 bdd2 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Check the MSI State */
      if (pRCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	69db      	ldr	r3, [r3, #28]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d066      	beq.n	8006910 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Enable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_ENABLE();
 8006842:	4b1c      	ldr	r3, [pc, #112]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	4a1b      	ldr	r2, [pc, #108]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006848:	f043 0301 	orr.w	r3, r3, #1
 800684c:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800684e:	f7fd fb35 	bl	8003ebc <HAL_GetTick>
 8006852:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 8006854:	e009      	b.n	800686a <HAL_RCC_OscConfig+0x236>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006856:	f7fd fb31 	bl	8003ebc <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	2b02      	cmp	r3, #2
 8006862:	d902      	bls.n	800686a <HAL_RCC_OscConfig+0x236>
          {
            return HAL_TIMEOUT;
 8006864:	2303      	movs	r3, #3
 8006866:	f000 bdba 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 800686a:	4b12      	ldr	r3, [pc, #72]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0304 	and.w	r3, r3, #4
 8006872:	2b00      	cmp	r3, #0
 8006874:	d0ef      	beq.n	8006856 <HAL_RCC_OscConfig+0x222>
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range */
        __HAL_RCC_MSI_RANGE_CONFIG(pRCC_OscInitStruct->MSIClockRange);
 8006876:	4b0f      	ldr	r3, [pc, #60]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006878:	689b      	ldr	r3, [r3, #8]
 800687a:	4a0e      	ldr	r2, [pc, #56]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 800687c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006880:	6093      	str	r3, [r2, #8]
 8006882:	4b0c      	ldr	r3, [pc, #48]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006884:	689b      	ldr	r3, [r3, #8]
 8006886:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688e:	4909      	ldr	r1, [pc, #36]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 8006890:	4313      	orrs	r3, r2
 8006892:	608b      	str	r3, [r1, #8]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value */
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006898:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 800689c:	d30e      	bcc.n	80068bc <HAL_RCC_OscConfig+0x288>
 800689e:	4b05      	ldr	r3, [pc, #20]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80068a0:	68db      	ldr	r3, [r3, #12]
 80068a2:	f023 021f 	bic.w	r2, r3, #31
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6a1b      	ldr	r3, [r3, #32]
 80068aa:	4902      	ldr	r1, [pc, #8]	; (80068b4 <HAL_RCC_OscConfig+0x280>)
 80068ac:	4313      	orrs	r3, r2
 80068ae:	60cb      	str	r3, [r1, #12]
 80068b0:	e04a      	b.n	8006948 <HAL_RCC_OscConfig+0x314>
 80068b2:	bf00      	nop
 80068b4:	46020c00 	.word	0x46020c00
 80068b8:	20000004 	.word	0x20000004
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	da0a      	bge.n	80068da <HAL_RCC_OscConfig+0x2a6>
 80068c4:	4b98      	ldr	r3, [pc, #608]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	6a1b      	ldr	r3, [r3, #32]
 80068d0:	015b      	lsls	r3, r3, #5
 80068d2:	4995      	ldr	r1, [pc, #596]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80068d4:	4313      	orrs	r3, r2
 80068d6:	60cb      	str	r3, [r1, #12]
 80068d8:	e036      	b.n	8006948 <HAL_RCC_OscConfig+0x314>
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e2:	d30a      	bcc.n	80068fa <HAL_RCC_OscConfig+0x2c6>
 80068e4:	4b90      	ldr	r3, [pc, #576]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a1b      	ldr	r3, [r3, #32]
 80068f0:	029b      	lsls	r3, r3, #10
 80068f2:	498d      	ldr	r1, [pc, #564]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80068f4:	4313      	orrs	r3, r2
 80068f6:	60cb      	str	r3, [r1, #12]
 80068f8:	e026      	b.n	8006948 <HAL_RCC_OscConfig+0x314>
 80068fa:	4b8b      	ldr	r3, [pc, #556]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80068fc:	68db      	ldr	r3, [r3, #12]
 80068fe:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6a1b      	ldr	r3, [r3, #32]
 8006906:	03db      	lsls	r3, r3, #15
 8006908:	4987      	ldr	r1, [pc, #540]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 800690a:	4313      	orrs	r3, r2
 800690c:	60cb      	str	r3, [r1, #12]
 800690e:	e01b      	b.n	8006948 <HAL_RCC_OscConfig+0x314>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI) */
        __HAL_RCC_MSI_DISABLE();
 8006910:	4b85      	ldr	r3, [pc, #532]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	4a84      	ldr	r2, [pc, #528]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006916:	f023 0301 	bic.w	r3, r3, #1
 800691a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800691c:	f7fd face 	bl	8003ebc <HAL_GetTick>
 8006920:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006922:	e009      	b.n	8006938 <HAL_RCC_OscConfig+0x304>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006924:	f7fd faca 	bl	8003ebc <HAL_GetTick>
 8006928:	4602      	mov	r2, r0
 800692a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800692c:	1ad3      	subs	r3, r2, r3
 800692e:	2b02      	cmp	r3, #2
 8006930:	d902      	bls.n	8006938 <HAL_RCC_OscConfig+0x304>
          {
            return HAL_TIMEOUT;
 8006932:	2303      	movs	r3, #3
 8006934:	f000 bd53 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_MSISRDY) != 0U)
 8006938:	4b7b      	ldr	r3, [pc, #492]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f003 0304 	and.w	r3, r3, #4
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1ef      	bne.n	8006924 <HAL_RCC_OscConfig+0x2f0>
 8006944:	e000      	b.n	8006948 <HAL_RCC_OscConfig+0x314>
      if (pRCC_OscInitStruct->MSIState == RCC_MSI_OFF)
 8006946:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f003 0301 	and.w	r3, r3, #1
 8006950:	2b00      	cmp	r3, #0
 8006952:	f000 808b 	beq.w	8006a6c <HAL_RCC_OscConfig+0x438>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(pRCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 8006956:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006958:	2b08      	cmp	r3, #8
 800695a:	d005      	beq.n	8006968 <HAL_RCC_OscConfig+0x334>
 800695c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800695e:	2b0c      	cmp	r3, #12
 8006960:	d109      	bne.n	8006976 <HAL_RCC_OscConfig+0x342>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006962:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006964:	2b03      	cmp	r3, #3
 8006966:	d106      	bne.n	8006976 <HAL_RCC_OscConfig+0x342>
    {
      if (pRCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d17d      	bne.n	8006a6c <HAL_RCC_OscConfig+0x438>
      {
        return HAL_ERROR;
 8006970:	2301      	movs	r3, #1
 8006972:	f000 bd34 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(pRCC_OscInitStruct->HSEState);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	685b      	ldr	r3, [r3, #4]
 800697a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800697e:	d106      	bne.n	800698e <HAL_RCC_OscConfig+0x35a>
 8006980:	4b69      	ldr	r3, [pc, #420]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	4a68      	ldr	r2, [pc, #416]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006986:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	e041      	b.n	8006a12 <HAL_RCC_OscConfig+0x3de>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	685b      	ldr	r3, [r3, #4]
 8006992:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006996:	d112      	bne.n	80069be <HAL_RCC_OscConfig+0x38a>
 8006998:	4b63      	ldr	r3, [pc, #396]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	4a62      	ldr	r2, [pc, #392]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 800699e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069a2:	6013      	str	r3, [r2, #0]
 80069a4:	4b60      	ldr	r3, [pc, #384]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	4a5f      	ldr	r2, [pc, #380]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80069ae:	6013      	str	r3, [r2, #0]
 80069b0:	4b5d      	ldr	r3, [pc, #372]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	4a5c      	ldr	r2, [pc, #368]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ba:	6013      	str	r3, [r2, #0]
 80069bc:	e029      	b.n	8006a12 <HAL_RCC_OscConfig+0x3de>
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	f5b3 1fa8 	cmp.w	r3, #1376256	; 0x150000
 80069c6:	d112      	bne.n	80069ee <HAL_RCC_OscConfig+0x3ba>
 80069c8:	4b57      	ldr	r3, [pc, #348]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	4a56      	ldr	r2, [pc, #344]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80069d2:	6013      	str	r3, [r2, #0]
 80069d4:	4b54      	ldr	r3, [pc, #336]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a53      	ldr	r2, [pc, #332]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069da:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80069de:	6013      	str	r3, [r2, #0]
 80069e0:	4b51      	ldr	r3, [pc, #324]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	4a50      	ldr	r2, [pc, #320]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80069ea:	6013      	str	r3, [r2, #0]
 80069ec:	e011      	b.n	8006a12 <HAL_RCC_OscConfig+0x3de>
 80069ee:	4b4e      	ldr	r3, [pc, #312]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	4a4d      	ldr	r2, [pc, #308]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069f8:	6013      	str	r3, [r2, #0]
 80069fa:	4b4b      	ldr	r3, [pc, #300]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a4a      	ldr	r2, [pc, #296]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a04:	6013      	str	r3, [r2, #0]
 8006a06:	4b48      	ldr	r3, [pc, #288]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a47      	ldr	r2, [pc, #284]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a0c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8006a10:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (pRCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	685b      	ldr	r3, [r3, #4]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d014      	beq.n	8006a44 <HAL_RCC_OscConfig+0x410>
      {
        tickstart = HAL_GetTick();
 8006a1a:	f7fd fa4f 	bl	8003ebc <HAL_GetTick>
 8006a1e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a20:	e009      	b.n	8006a36 <HAL_RCC_OscConfig+0x402>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a22:	f7fd fa4b 	bl	8003ebc <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	2b64      	cmp	r3, #100	; 0x64
 8006a2e:	d902      	bls.n	8006a36 <HAL_RCC_OscConfig+0x402>
          {
            return HAL_TIMEOUT;
 8006a30:	2303      	movs	r3, #3
 8006a32:	f000 bcd4 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006a36:	4b3c      	ldr	r3, [pc, #240]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d0ef      	beq.n	8006a22 <HAL_RCC_OscConfig+0x3ee>
 8006a42:	e013      	b.n	8006a6c <HAL_RCC_OscConfig+0x438>
          }
        }
      }
      else
      {
        tickstart = HAL_GetTick();
 8006a44:	f7fd fa3a 	bl	8003ebc <HAL_GetTick>
 8006a48:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a4a:	e009      	b.n	8006a60 <HAL_RCC_OscConfig+0x42c>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006a4c:	f7fd fa36 	bl	8003ebc <HAL_GetTick>
 8006a50:	4602      	mov	r2, r0
 8006a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	2b64      	cmp	r3, #100	; 0x64
 8006a58:	d902      	bls.n	8006a60 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8006a5a:	2303      	movs	r3, #3
 8006a5c:	f000 bcbf 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006a60:	4b31      	ldr	r3, [pc, #196]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1ef      	bne.n	8006a4c <HAL_RCC_OscConfig+0x418>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f003 0302 	and.w	r3, r3, #2
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d05f      	beq.n	8006b38 <HAL_RCC_OscConfig+0x504>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(pRCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(pRCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8006a78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a7a:	2b04      	cmp	r3, #4
 8006a7c:	d005      	beq.n	8006a8a <HAL_RCC_OscConfig+0x456>
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a80:	2b0c      	cmp	r3, #12
 8006a82:	d114      	bne.n	8006aae <HAL_RCC_OscConfig+0x47a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006a84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a86:	2b02      	cmp	r3, #2
 8006a88:	d111      	bne.n	8006aae <HAL_RCC_OscConfig+0x47a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	68db      	ldr	r3, [r3, #12]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d102      	bne.n	8006a98 <HAL_RCC_OscConfig+0x464>
      {
        return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	f000 bca3 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006a98:	4b23      	ldr	r3, [pc, #140]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006a9a:	691b      	ldr	r3, [r3, #16]
 8006a9c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	041b      	lsls	r3, r3, #16
 8006aa6:	4920      	ldr	r1, [pc, #128]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	610b      	str	r3, [r1, #16]
      if (pRCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8006aac:	e044      	b.n	8006b38 <HAL_RCC_OscConfig+0x504>
      }
    }
    else
    {
      /* Check the HSI State */
      if (pRCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	68db      	ldr	r3, [r3, #12]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d024      	beq.n	8006b00 <HAL_RCC_OscConfig+0x4cc>
      {
        /* Enable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_ENABLE();
 8006ab6:	4b1c      	ldr	r3, [pc, #112]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	4a1b      	ldr	r2, [pc, #108]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006abc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ac0:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006ac2:	f7fd f9fb 	bl	8003ebc <HAL_GetTick>
 8006ac6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ac8:	e009      	b.n	8006ade <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006aca:	f7fd f9f7 	bl	8003ebc <HAL_GetTick>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ad2:	1ad3      	subs	r3, r2, r3
 8006ad4:	2b02      	cmp	r3, #2
 8006ad6:	d902      	bls.n	8006ade <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	f000 bc80 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006ade:	4b12      	ldr	r3, [pc, #72]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	d0ef      	beq.n	8006aca <HAL_RCC_OscConfig+0x496>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(pRCC_OscInitStruct->HSICalibrationValue);
 8006aea:	4b0f      	ldr	r3, [pc, #60]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006aec:	691b      	ldr	r3, [r3, #16]
 8006aee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	041b      	lsls	r3, r3, #16
 8006af8:	490b      	ldr	r1, [pc, #44]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006afa:	4313      	orrs	r3, r2
 8006afc:	610b      	str	r3, [r1, #16]
 8006afe:	e01b      	b.n	8006b38 <HAL_RCC_OscConfig+0x504>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI) */
        __HAL_RCC_HSI_DISABLE();
 8006b00:	4b09      	ldr	r3, [pc, #36]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a08      	ldr	r2, [pc, #32]	; (8006b28 <HAL_RCC_OscConfig+0x4f4>)
 8006b06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b0a:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8006b0c:	f7fd f9d6 	bl	8003ebc <HAL_GetTick>
 8006b10:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b12:	e00b      	b.n	8006b2c <HAL_RCC_OscConfig+0x4f8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b14:	f7fd f9d2 	bl	8003ebc <HAL_GetTick>
 8006b18:	4602      	mov	r2, r0
 8006b1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b1c:	1ad3      	subs	r3, r2, r3
 8006b1e:	2b02      	cmp	r3, #2
 8006b20:	d904      	bls.n	8006b2c <HAL_RCC_OscConfig+0x4f8>
          {
            return HAL_TIMEOUT;
 8006b22:	2303      	movs	r3, #3
 8006b24:	f000 bc5b 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
 8006b28:	46020c00 	.word	0x46020c00
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006b2c:	4baf      	ldr	r3, [pc, #700]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d1ed      	bne.n	8006b14 <HAL_RCC_OscConfig+0x4e0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f003 0308 	and.w	r3, r3, #8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	f000 80c8 	beq.w	8006cd6 <HAL_RCC_OscConfig+0x6a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(pRCC_OscInitStruct->LSIState));

    FlagStatus  pwrclkchanged = RESET;
 8006b46:	2300      	movs	r3, #0
 8006b48:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36

    /* Update LSI configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b4c:	4ba7      	ldr	r3, [pc, #668]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b52:	f003 0304 	and.w	r3, r3, #4
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d111      	bne.n	8006b7e <HAL_RCC_OscConfig+0x54a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b5a:	4ba4      	ldr	r3, [pc, #656]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006b5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b60:	4aa2      	ldr	r2, [pc, #648]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006b62:	f043 0304 	orr.w	r3, r3, #4
 8006b66:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006b6a:	4ba0      	ldr	r3, [pc, #640]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006b6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006b70:	f003 0304 	and.w	r3, r3, #4
 8006b74:	617b      	str	r3, [r7, #20]
 8006b76:	697b      	ldr	r3, [r7, #20]
      pwrclkchanged = SET;
 8006b78:	2301      	movs	r3, #1
 8006b7a:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b7e:	4b9c      	ldr	r3, [pc, #624]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d119      	bne.n	8006bbe <HAL_RCC_OscConfig+0x58a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006b8a:	4b99      	ldr	r3, [pc, #612]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b8e:	4a98      	ldr	r2, [pc, #608]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006b90:	f043 0301 	orr.w	r3, r3, #1
 8006b94:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b96:	f7fd f991 	bl	8003ebc <HAL_GetTick>
 8006b9a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006b9c:	e009      	b.n	8006bb2 <HAL_RCC_OscConfig+0x57e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b9e:	f7fd f98d 	bl	8003ebc <HAL_GetTick>
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ba6:	1ad3      	subs	r3, r2, r3
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d902      	bls.n	8006bb2 <HAL_RCC_OscConfig+0x57e>
        {
          return HAL_TIMEOUT;
 8006bac:	2303      	movs	r3, #3
 8006bae:	f000 bc16 	b.w	80073de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006bb2:	4b8f      	ldr	r3, [pc, #572]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	f003 0301 	and.w	r3, r3, #1
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d0ef      	beq.n	8006b9e <HAL_RCC_OscConfig+0x56a>
        }
      }
    }
    /* Check the LSI State */
    if (pRCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	695b      	ldr	r3, [r3, #20]
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d05f      	beq.n	8006c86 <HAL_RCC_OscConfig+0x652>
    {
      uint32_t bdcr_temp = RCC->BDCR;
 8006bc6:	4b89      	ldr	r3, [pc, #548]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006bc8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006bcc:	623b      	str	r3, [r7, #32]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(pRCC_OscInitStruct->LSIDiv));

      if (pRCC_OscInitStruct->LSIDiv != (bdcr_temp & RCC_BDCR_LSIPREDIV))
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	699a      	ldr	r2, [r3, #24]
 8006bd2:	6a3b      	ldr	r3, [r7, #32]
 8006bd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bd8:	429a      	cmp	r2, r3
 8006bda:	d037      	beq.n	8006c4c <HAL_RCC_OscConfig+0x618>
      {
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006bdc:	6a3b      	ldr	r3, [r7, #32]
 8006bde:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d006      	beq.n	8006bf4 <HAL_RCC_OscConfig+0x5c0>
            ((bdcr_temp & RCC_BDCR_LSION) != RCC_BDCR_LSION))
 8006be6:	6a3b      	ldr	r3, [r7, #32]
 8006be8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
        if (((bdcr_temp & RCC_BDCR_LSIRDY) == RCC_BDCR_LSIRDY) && \
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d101      	bne.n	8006bf4 <HAL_RCC_OscConfig+0x5c0>
        {
          /* If LSIRDY is set while LSION is not enabled, LSIPREDIV can't be updated */
          /* The LSIPREDIV cannot be changed if the LSI is used by the IWDG or by the RTC */
          return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e3f4      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        }

        /* Turn off LSI before changing RCC_BDCR_LSIPREDIV */
        if ((bdcr_temp & RCC_BDCR_LSION) == RCC_BDCR_LSION)
 8006bf4:	6a3b      	ldr	r3, [r7, #32]
 8006bf6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d01b      	beq.n	8006c36 <HAL_RCC_OscConfig+0x602>
        {
          __HAL_RCC_LSI_DISABLE();
 8006bfe:	4b7b      	ldr	r3, [pc, #492]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c04:	4a79      	ldr	r2, [pc, #484]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c06:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006c0a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

          tickstart = HAL_GetTick();
 8006c0e:	f7fd f955 	bl	8003ebc <HAL_GetTick>
 8006c12:	62b8      	str	r0, [r7, #40]	; 0x28

          /* Wait till LSI is disabled */
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x5f4>
          {
            if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c16:	f7fd f951 	bl	8003ebc <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b05      	cmp	r3, #5
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x5f4>
            {
              return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e3da      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
          while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c28:	4b70      	ldr	r3, [pc, #448]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c2a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c2e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d1ef      	bne.n	8006c16 <HAL_RCC_OscConfig+0x5e2>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->BDCR, RCC_BDCR_LSIPREDIV, pRCC_OscInitStruct->LSIDiv);
 8006c36:	4b6d      	ldr	r3, [pc, #436]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c3c:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699b      	ldr	r3, [r3, #24]
 8006c44:	4969      	ldr	r1, [pc, #420]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
      }

      /* Enable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_ENABLE();
 8006c4c:	4b67      	ldr	r3, [pc, #412]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c4e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c52:	4a66      	ldr	r2, [pc, #408]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c54:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006c58:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006c5c:	f7fd f92e 	bl	8003ebc <HAL_GetTick>
 8006c60:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c62:	e008      	b.n	8006c76 <HAL_RCC_OscConfig+0x642>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c64:	f7fd f92a 	bl	8003ebc <HAL_GetTick>
 8006c68:	4602      	mov	r2, r0
 8006c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c6c:	1ad3      	subs	r3, r2, r3
 8006c6e:	2b05      	cmp	r3, #5
 8006c70:	d901      	bls.n	8006c76 <HAL_RCC_OscConfig+0x642>
        {
          return HAL_TIMEOUT;
 8006c72:	2303      	movs	r3, #3
 8006c74:	e3b3      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) == 0U)
 8006c76:	4b5d      	ldr	r3, [pc, #372]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c78:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d0ef      	beq.n	8006c64 <HAL_RCC_OscConfig+0x630>
 8006c84:	e01b      	b.n	8006cbe <HAL_RCC_OscConfig+0x68a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI) */
      __HAL_RCC_LSI_DISABLE();
 8006c86:	4b59      	ldr	r3, [pc, #356]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c88:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006c8c:	4a57      	ldr	r2, [pc, #348]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006c8e:	f023 53a0 	bic.w	r3, r3, #335544320	; 0x14000000
 8006c92:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

      tickstart = HAL_GetTick();
 8006c96:	f7fd f911 	bl	8003ebc <HAL_GetTick>
 8006c9a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x67c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c9e:	f7fd f90d 	bl	8003ebc <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b05      	cmp	r3, #5
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x67c>
        {
          return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e396      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSIRDY) != 0U)
 8006cb0:	4b4e      	ldr	r3, [pc, #312]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006cb2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006cb6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d1ef      	bne.n	8006c9e <HAL_RCC_OscConfig+0x66a>
        }
      }
    }
    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006cbe:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8006cc2:	2b01      	cmp	r3, #1
 8006cc4:	d107      	bne.n	8006cd6 <HAL_RCC_OscConfig+0x6a2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006cc6:	4b49      	ldr	r3, [pc, #292]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006ccc:	4a47      	ldr	r2, [pc, #284]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006cce:	f023 0304 	bic.w	r3, r3, #4
 8006cd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	681b      	ldr	r3, [r3, #0]
 8006cda:	f003 0304 	and.w	r3, r3, #4
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	f000 8111 	beq.w	8006f06 <HAL_RCC_OscConfig+0x8d2>
  {
    FlagStatus pwrclkchanged = RESET;
 8006ce4:	2300      	movs	r3, #0
 8006ce6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    /* Check the parameters */
    assert_param(IS_RCC_LSE(pRCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006cea:	4b40      	ldr	r3, [pc, #256]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006cec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cf0:	f003 0304 	and.w	r3, r3, #4
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d111      	bne.n	8006d1c <HAL_RCC_OscConfig+0x6e8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cf8:	4b3c      	ldr	r3, [pc, #240]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006cfa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006cfe:	4a3b      	ldr	r2, [pc, #236]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d00:	f043 0304 	orr.w	r3, r3, #4
 8006d04:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8006d08:	4b38      	ldr	r3, [pc, #224]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
      pwrclkchanged = SET;
 8006d16:	2301      	movs	r3, #1
 8006d18:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
    }

    if (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d1c:	4b34      	ldr	r3, [pc, #208]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006d1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d20:	f003 0301 	and.w	r3, r3, #1
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d118      	bne.n	8006d5a <HAL_RCC_OscConfig+0x726>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 8006d28:	4b31      	ldr	r3, [pc, #196]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006d2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d2c:	4a30      	ldr	r2, [pc, #192]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006d2e:	f043 0301 	orr.w	r3, r3, #1
 8006d32:	6293      	str	r3, [r2, #40]	; 0x28

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d34:	f7fd f8c2 	bl	8003ebc <HAL_GetTick>
 8006d38:	62b8      	str	r0, [r7, #40]	; 0x28

      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d3a:	e008      	b.n	8006d4e <HAL_RCC_OscConfig+0x71a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d3c:	f7fd f8be 	bl	8003ebc <HAL_GetTick>
 8006d40:	4602      	mov	r2, r0
 8006d42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d44:	1ad3      	subs	r3, r2, r3
 8006d46:	2b02      	cmp	r3, #2
 8006d48:	d901      	bls.n	8006d4e <HAL_RCC_OscConfig+0x71a>
        {
          return HAL_TIMEOUT;
 8006d4a:	2303      	movs	r3, #3
 8006d4c:	e347      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 8006d4e:	4b28      	ldr	r3, [pc, #160]	; (8006df0 <HAL_RCC_OscConfig+0x7bc>)
 8006d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d52:	f003 0301 	and.w	r3, r3, #1
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d0f0      	beq.n	8006d3c <HAL_RCC_OscConfig+0x708>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f003 0301 	and.w	r3, r3, #1
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d01f      	beq.n	8006da6 <HAL_RCC_OscConfig+0x772>
    {
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	689b      	ldr	r3, [r3, #8]
 8006d6a:	f003 0304 	and.w	r3, r3, #4
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d010      	beq.n	8006d94 <HAL_RCC_OscConfig+0x760>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006d72:	4b1e      	ldr	r3, [pc, #120]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d74:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d78:	4a1c      	ldr	r2, [pc, #112]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d7a:	f043 0304 	orr.w	r3, r3, #4
 8006d7e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d82:	4b1a      	ldr	r3, [pc, #104]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d84:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d88:	4a18      	ldr	r2, [pc, #96]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d8a:	f043 0301 	orr.w	r3, r3, #1
 8006d8e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006d92:	e018      	b.n	8006dc6 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006d94:	4b15      	ldr	r3, [pc, #84]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d96:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006d9a:	4a14      	ldr	r2, [pc, #80]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006d9c:	f043 0301 	orr.w	r3, r3, #1
 8006da0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8006da4:	e00f      	b.n	8006dc6 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8006da6:	4b11      	ldr	r3, [pc, #68]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006da8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dac:	4a0f      	ldr	r2, [pc, #60]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006dae:	f023 0301 	bic.w	r3, r3, #1
 8006db2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8006db6:	4b0d      	ldr	r3, [pc, #52]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006db8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dbc:	4a0b      	ldr	r2, [pc, #44]	; (8006dec <HAL_RCC_OscConfig+0x7b8>)
 8006dbe:	f023 0304 	bic.w	r3, r3, #4
 8006dc2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
    }

    /* Check the LSE State */
    if (pRCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	689b      	ldr	r3, [r3, #8]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d057      	beq.n	8006e7e <HAL_RCC_OscConfig+0x84a>
    {
      tickstart = HAL_GetTick();
 8006dce:	f7fd f875 	bl	8003ebc <HAL_GetTick>
 8006dd2:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dd4:	e00e      	b.n	8006df4 <HAL_RCC_OscConfig+0x7c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dd6:	f7fd f871 	bl	8003ebc <HAL_GetTick>
 8006dda:	4602      	mov	r2, r0
 8006ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dde:	1ad3      	subs	r3, r2, r3
 8006de0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006de4:	4293      	cmp	r3, r2
 8006de6:	d905      	bls.n	8006df4 <HAL_RCC_OscConfig+0x7c0>
        {
          return HAL_TIMEOUT;
 8006de8:	2303      	movs	r3, #3
 8006dea:	e2f8      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
 8006dec:	46020c00 	.word	0x46020c00
 8006df0:	46020800 	.word	0x46020800
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df4:	4b9c      	ldr	r3, [pc, #624]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006df6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d0e9      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x7a2>
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((pRCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d01b      	beq.n	8006e46 <HAL_RCC_OscConfig+0x812>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e0e:	4b96      	ldr	r3, [pc, #600]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e10:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e14:	4a94      	ldr	r2, [pc, #592]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e1a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e1e:	e00a      	b.n	8006e36 <HAL_RCC_OscConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e20:	f7fd f84c 	bl	8003ebc <HAL_GetTick>
 8006e24:	4602      	mov	r2, r0
 8006e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e28:	1ad3      	subs	r3, r2, r3
 8006e2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e2e:	4293      	cmp	r3, r2
 8006e30:	d901      	bls.n	8006e36 <HAL_RCC_OscConfig+0x802>
          {
            return HAL_TIMEOUT;
 8006e32:	2303      	movs	r3, #3
 8006e34:	e2d3      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8006e36:	4b8c      	ldr	r3, [pc, #560]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d0ed      	beq.n	8006e20 <HAL_RCC_OscConfig+0x7ec>
 8006e44:	e053      	b.n	8006eee <HAL_RCC_OscConfig+0x8ba>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006e46:	4b88      	ldr	r3, [pc, #544]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e48:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e4c:	4a86      	ldr	r2, [pc, #536]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e4e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e52:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e56:	e00a      	b.n	8006e6e <HAL_RCC_OscConfig+0x83a>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e58:	f7fd f830 	bl	8003ebc <HAL_GetTick>
 8006e5c:	4602      	mov	r2, r0
 8006e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e60:	1ad3      	subs	r3, r2, r3
 8006e62:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e66:	4293      	cmp	r3, r2
 8006e68:	d901      	bls.n	8006e6e <HAL_RCC_OscConfig+0x83a>
          {
            return HAL_TIMEOUT;
 8006e6a:	2303      	movs	r3, #3
 8006e6c:	e2b7      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006e6e:	4b7e      	ldr	r3, [pc, #504]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006e74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d1ed      	bne.n	8006e58 <HAL_RCC_OscConfig+0x824>
 8006e7c:	e037      	b.n	8006eee <HAL_RCC_OscConfig+0x8ba>
        }
      }
    }
    else
    {
      tickstart = HAL_GetTick();
 8006e7e:	f7fd f81d 	bl	8003ebc <HAL_GetTick>
 8006e82:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e84:	e00a      	b.n	8006e9c <HAL_RCC_OscConfig+0x868>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006e86:	f7fd f819 	bl	8003ebc <HAL_GetTick>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	1ad3      	subs	r3, r2, r3
 8006e90:	f241 3288 	movw	r2, #5000	; 0x1388
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d901      	bls.n	8006e9c <HAL_RCC_OscConfig+0x868>
        {
          return HAL_TIMEOUT;
 8006e98:	2303      	movs	r3, #3
 8006e9a:	e2a0      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006e9c:	4b72      	ldr	r3, [pc, #456]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006e9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ea2:	f003 0302 	and.w	r3, r3, #2
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d1ed      	bne.n	8006e86 <HAL_RCC_OscConfig+0x852>
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8006eaa:	4b6f      	ldr	r3, [pc, #444]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006eac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006eb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01a      	beq.n	8006eee <HAL_RCC_OscConfig+0x8ba>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8006eb8:	4b6b      	ldr	r3, [pc, #428]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006eba:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ebe:	4a6a      	ldr	r2, [pc, #424]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006ec0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ec4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ec8:	e00a      	b.n	8006ee0 <HAL_RCC_OscConfig+0x8ac>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006eca:	f7fc fff7 	bl	8003ebc <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ed8:	4293      	cmp	r3, r2
 8006eda:	d901      	bls.n	8006ee0 <HAL_RCC_OscConfig+0x8ac>
          {
            return HAL_TIMEOUT;
 8006edc:	2303      	movs	r3, #3
 8006ede:	e27e      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8006ee0:	4b61      	ldr	r3, [pc, #388]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006ee2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8006ee6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d1ed      	bne.n	8006eca <HAL_RCC_OscConfig+0x896>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006eee:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8006ef2:	2b01      	cmp	r3, #1
 8006ef4:	d107      	bne.n	8006f06 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006ef6:	4b5c      	ldr	r3, [pc, #368]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006ef8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006efc:	4a5a      	ldr	r2, [pc, #360]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006efe:	f023 0304 	bic.w	r3, r3, #4
 8006f02:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	f003 0320 	and.w	r3, r3, #32
 8006f0e:	2b00      	cmp	r3, #0
 8006f10:	d036      	beq.n	8006f80 <HAL_RCC_OscConfig+0x94c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(pRCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if (pRCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d019      	beq.n	8006f4e <HAL_RCC_OscConfig+0x91a>
    {
      /* Enable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_ENABLE();
 8006f1a:	4b53      	ldr	r3, [pc, #332]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	4a52      	ldr	r2, [pc, #328]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006f24:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f26:	f7fc ffc9 	bl	8003ebc <HAL_GetTick>
 8006f2a:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f2c:	e008      	b.n	8006f40 <HAL_RCC_OscConfig+0x90c>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f2e:	f7fc ffc5 	bl	8003ebc <HAL_GetTick>
 8006f32:	4602      	mov	r2, r0
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	1ad3      	subs	r3, r2, r3
 8006f38:	2b02      	cmp	r3, #2
 8006f3a:	d901      	bls.n	8006f40 <HAL_RCC_OscConfig+0x90c>
        {
          return HAL_TIMEOUT;
 8006f3c:	2303      	movs	r3, #3
 8006f3e:	e24e      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8006f40:	4b49      	ldr	r3, [pc, #292]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d0f0      	beq.n	8006f2e <HAL_RCC_OscConfig+0x8fa>
 8006f4c:	e018      	b.n	8006f80 <HAL_RCC_OscConfig+0x94c>
      }
    }
    else
    {
      /* Disable the Internal High Speed oscillator (HSI48) */
      __HAL_RCC_HSI48_DISABLE();
 8006f4e:	4b46      	ldr	r3, [pc, #280]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a45      	ldr	r2, [pc, #276]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f54:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f58:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006f5a:	f7fc ffaf 	bl	8003ebc <HAL_GetTick>
 8006f5e:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f60:	e008      	b.n	8006f74 <HAL_RCC_OscConfig+0x940>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006f62:	f7fc ffab 	bl	8003ebc <HAL_GetTick>
 8006f66:	4602      	mov	r2, r0
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	1ad3      	subs	r3, r2, r3
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d901      	bls.n	8006f74 <HAL_RCC_OscConfig+0x940>
        {
          return HAL_TIMEOUT;
 8006f70:	2303      	movs	r3, #3
 8006f72:	e234      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8006f74:	4b3c      	ldr	r3, [pc, #240]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d1f0      	bne.n	8006f62 <HAL_RCC_OscConfig+0x92e>
      }
    }
  }

  /*------------------------------ SHSI Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_SHSI) == RCC_OSCILLATORTYPE_SHSI)
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d036      	beq.n	8006ffa <HAL_RCC_OscConfig+0x9c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SHSI(pRCC_OscInitStruct->SHSIState));

    /* Check the SHSI State */
    if (pRCC_OscInitStruct->SHSIState != RCC_SHSI_OFF)
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d019      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x994>
    {
      /* Enable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_ENABLE();
 8006f94:	4b34      	ldr	r3, [pc, #208]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a33      	ldr	r2, [pc, #204]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006f9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006f9e:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fa0:	f7fc ff8c 	bl	8003ebc <HAL_GetTick>
 8006fa4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is ready */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x986>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006fa8:	f7fc ff88 	bl	8003ebc <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x986>
        {
          return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e211      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) == 0U)
 8006fba:	4b2b      	ldr	r3, [pc, #172]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x974>
 8006fc6:	e018      	b.n	8006ffa <HAL_RCC_OscConfig+0x9c6>
      }
    }
    else
    {
      /* Disable the Secure Internal High Speed oscillator (SHSI) */
      __HAL_RCC_SHSI_DISABLE();
 8006fc8:	4b27      	ldr	r3, [pc, #156]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a26      	ldr	r2, [pc, #152]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006fce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006fd2:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 8006fd4:	f7fc ff72 	bl	8003ebc <HAL_GetTick>
 8006fd8:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till SHSI is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006fda:	e008      	b.n	8006fee <HAL_RCC_OscConfig+0x9ba>
      {
        if ((HAL_GetTick() - tickstart) > SHSI_TIMEOUT_VALUE)
 8006fdc:	f7fc ff6e 	bl	8003ebc <HAL_GetTick>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fe4:	1ad3      	subs	r3, r2, r3
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d901      	bls.n	8006fee <HAL_RCC_OscConfig+0x9ba>
        {
          return HAL_TIMEOUT;
 8006fea:	2303      	movs	r3, #3
 8006fec:	e1f7      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_SHSIRDY) != 0U)
 8006fee:	4b1e      	ldr	r3, [pc, #120]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d1f0      	bne.n	8006fdc <HAL_RCC_OscConfig+0x9a8>
        }
      }
    }
  }
  /*------------------------------ MSIK Configuration -----------------------*/
  if (((pRCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSIK) == RCC_OSCILLATORTYPE_MSIK)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007002:	2b00      	cmp	r3, #0
 8007004:	d07f      	beq.n	8007106 <HAL_RCC_OscConfig+0xad2>
    assert_param(IS_RCC_MSIK(pRCC_OscInitStruct->MSIKState));
    assert_param(IS_RCC_MSIK_CLOCK_RANGE(pRCC_OscInitStruct->MSIKClockRange));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(pRCC_OscInitStruct->MSICalibrationValue));

    /* Check the MSIK State */
    if (pRCC_OscInitStruct->MSIKState != RCC_MSIK_OFF)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800700a:	2b00      	cmp	r3, #0
 800700c:	d062      	beq.n	80070d4 <HAL_RCC_OscConfig+0xaa0>
    {

      /* Selects the Multiple Speed of kernel high speed oscillator (MSIK) clock range .*/
      __HAL_RCC_MSIK_RANGE_CONFIG(pRCC_OscInitStruct->MSIKClockRange);
 800700e:	4b16      	ldr	r3, [pc, #88]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007010:	689b      	ldr	r3, [r3, #8]
 8007012:	4a15      	ldr	r2, [pc, #84]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007014:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8007018:	6093      	str	r3, [r2, #8]
 800701a:	4b13      	ldr	r3, [pc, #76]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f023 6270 	bic.w	r2, r3, #251658240	; 0xf000000
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007026:	4910      	ldr	r1, [pc, #64]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007028:	4313      	orrs	r3, r2
 800702a:	608b      	str	r3, [r1, #8]
      /* Adjusts the Multiple Speed of kernel high speed oscillator (MSIK) calibration value.*/
      __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST((pRCC_OscInitStruct->MSICalibrationValue), \
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007030:	f1b3 4f40 	cmp.w	r3, #3221225472	; 0xc0000000
 8007034:	d309      	bcc.n	800704a <HAL_RCC_OscConfig+0xa16>
 8007036:	4b0c      	ldr	r3, [pc, #48]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f023 021f 	bic.w	r2, r3, #31
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	6a1b      	ldr	r3, [r3, #32]
 8007042:	4909      	ldr	r1, [pc, #36]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007044:	4313      	orrs	r3, r2
 8007046:	60cb      	str	r3, [r1, #12]
 8007048:	e02a      	b.n	80070a0 <HAL_RCC_OscConfig+0xa6c>
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800704e:	2b00      	cmp	r3, #0
 8007050:	da0c      	bge.n	800706c <HAL_RCC_OscConfig+0xa38>
 8007052:	4b05      	ldr	r3, [pc, #20]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007054:	68db      	ldr	r3, [r3, #12]
 8007056:	f423 7278 	bic.w	r2, r3, #992	; 0x3e0
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6a1b      	ldr	r3, [r3, #32]
 800705e:	015b      	lsls	r3, r3, #5
 8007060:	4901      	ldr	r1, [pc, #4]	; (8007068 <HAL_RCC_OscConfig+0xa34>)
 8007062:	4313      	orrs	r3, r2
 8007064:	60cb      	str	r3, [r1, #12]
 8007066:	e01b      	b.n	80070a0 <HAL_RCC_OscConfig+0xa6c>
 8007068:	46020c00 	.word	0x46020c00
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007070:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007074:	d30a      	bcc.n	800708c <HAL_RCC_OscConfig+0xa58>
 8007076:	4ba1      	ldr	r3, [pc, #644]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	6a1b      	ldr	r3, [r3, #32]
 8007082:	029b      	lsls	r3, r3, #10
 8007084:	499d      	ldr	r1, [pc, #628]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007086:	4313      	orrs	r3, r2
 8007088:	60cb      	str	r3, [r1, #12]
 800708a:	e009      	b.n	80070a0 <HAL_RCC_OscConfig+0xa6c>
 800708c:	4b9b      	ldr	r3, [pc, #620]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f423 2278 	bic.w	r2, r3, #1015808	; 0xf8000
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	6a1b      	ldr	r3, [r3, #32]
 8007098:	03db      	lsls	r3, r3, #15
 800709a:	4998      	ldr	r1, [pc, #608]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800709c:	4313      	orrs	r3, r2
 800709e:	60cb      	str	r3, [r1, #12]
                                            (pRCC_OscInitStruct->MSIClockRange));

      /* Enable the Internal kernel High Speed oscillator (MSIK) */
      __HAL_RCC_MSIK_ENABLE();
 80070a0:	4b96      	ldr	r3, [pc, #600]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a95      	ldr	r2, [pc, #596]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070a6:	f043 0310 	orr.w	r3, r3, #16
 80070aa:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070ac:	f7fc ff06 	bl	8003ebc <HAL_GetTick>
 80070b0:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is ready */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80070b2:	e008      	b.n	80070c6 <HAL_RCC_OscConfig+0xa92>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80070b4:	f7fc ff02 	bl	8003ebc <HAL_GetTick>
 80070b8:	4602      	mov	r2, r0
 80070ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070bc:	1ad3      	subs	r3, r2, r3
 80070be:	2b02      	cmp	r3, #2
 80070c0:	d901      	bls.n	80070c6 <HAL_RCC_OscConfig+0xa92>
        {
          return HAL_TIMEOUT;
 80070c2:	2303      	movs	r3, #3
 80070c4:	e18b      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) == 0U)
 80070c6:	4b8d      	ldr	r3, [pc, #564]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0320 	and.w	r3, r3, #32
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0f0      	beq.n	80070b4 <HAL_RCC_OscConfig+0xa80>
 80070d2:	e018      	b.n	8007106 <HAL_RCC_OscConfig+0xad2>
      }
    }
    else
    {
      /* Disable the Internal High Speed Kernel oscillator (MSIK) */
      __HAL_RCC_MSIK_DISABLE();
 80070d4:	4b89      	ldr	r3, [pc, #548]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	4a88      	ldr	r2, [pc, #544]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070da:	f023 0310 	bic.w	r3, r3, #16
 80070de:	6013      	str	r3, [r2, #0]

      tickstart = HAL_GetTick();
 80070e0:	f7fc feec 	bl	8003ebc <HAL_GetTick>
 80070e4:	62b8      	str	r0, [r7, #40]	; 0x28

      /* Wait till MSIK is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80070e6:	e008      	b.n	80070fa <HAL_RCC_OscConfig+0xac6>
      {
        if ((HAL_GetTick() - tickstart) > MSIK_TIMEOUT_VALUE)
 80070e8:	f7fc fee8 	bl	8003ebc <HAL_GetTick>
 80070ec:	4602      	mov	r2, r0
 80070ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	2b02      	cmp	r3, #2
 80070f4:	d901      	bls.n	80070fa <HAL_RCC_OscConfig+0xac6>
        {
          return HAL_TIMEOUT;
 80070f6:	2303      	movs	r3, #3
 80070f8:	e171      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      while (READ_BIT(RCC->CR, RCC_CR_MSIKRDY) != 0U)
 80070fa:	4b80      	ldr	r3, [pc, #512]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f003 0320 	and.w	r3, r3, #32
 8007102:	2b00      	cmp	r3, #0
 8007104:	d1f0      	bne.n	80070e8 <HAL_RCC_OscConfig+0xab4>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(pRCC_OscInitStruct->PLL.PLLState));

  if ((pRCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800710a:	2b00      	cmp	r3, #0
 800710c:	f000 8166 	beq.w	80073dc <HAL_RCC_OscConfig+0xda8>
  {
    FlagStatus  pwrclkchanged = RESET;
 8007110:	2300      	movs	r3, #0
 8007112:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007116:	4b79      	ldr	r3, [pc, #484]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007118:	69db      	ldr	r3, [r3, #28]
 800711a:	f003 030c 	and.w	r3, r3, #12
 800711e:	2b0c      	cmp	r3, #12
 8007120:	f000 80f2 	beq.w	8007308 <HAL_RCC_OscConfig+0xcd4>
    {
      if ((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007128:	2b02      	cmp	r3, #2
 800712a:	f040 80c5 	bne.w	80072b8 <HAL_RCC_OscConfig+0xc84>
        assert_param(IS_RCC_PLLP_VALUE(pRCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(pRCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(pRCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 800712e:	4b73      	ldr	r3, [pc, #460]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	4a72      	ldr	r2, [pc, #456]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007134:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007138:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 800713a:	f7fc febf 	bl	8003ebc <HAL_GetTick>
 800713e:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007140:	e008      	b.n	8007154 <HAL_RCC_OscConfig+0xb20>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007142:	f7fc febb 	bl	8003ebc <HAL_GetTick>
 8007146:	4602      	mov	r2, r0
 8007148:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800714a:	1ad3      	subs	r3, r2, r3
 800714c:	2b02      	cmp	r3, #2
 800714e:	d901      	bls.n	8007154 <HAL_RCC_OscConfig+0xb20>
          {
            return HAL_TIMEOUT;
 8007150:	2303      	movs	r3, #3
 8007152:	e144      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 8007154:	4b69      	ldr	r3, [pc, #420]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1f0      	bne.n	8007142 <HAL_RCC_OscConfig+0xb0e>
          }
        }

        /* Requires to enable write access to Backup Domain of necessary */
        if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007160:	4b66      	ldr	r3, [pc, #408]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007162:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007166:	f003 0304 	and.w	r3, r3, #4
 800716a:	2b00      	cmp	r3, #0
 800716c:	d111      	bne.n	8007192 <HAL_RCC_OscConfig+0xb5e>
        {
          __HAL_RCC_PWR_CLK_ENABLE();
 800716e:	4b63      	ldr	r3, [pc, #396]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007170:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007174:	4a61      	ldr	r2, [pc, #388]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007176:	f043 0304 	orr.w	r3, r3, #4
 800717a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800717e:	4b5f      	ldr	r3, [pc, #380]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007180:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007184:	f003 0304 	and.w	r3, r3, #4
 8007188:	60fb      	str	r3, [r7, #12]
 800718a:	68fb      	ldr	r3, [r7, #12]
          pwrclkchanged = SET;
 800718c:	2301      	movs	r3, #1
 800718e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
        }

        /*Disable EPOD to configure PLL1MBOOST*/
        if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) == PWR_VOSR_BOOSTEN)
 8007192:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <HAL_RCC_OscConfig+0xccc>)
 8007194:	68db      	ldr	r3, [r3, #12]
 8007196:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800719a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800719e:	d102      	bne.n	80071a6 <HAL_RCC_OscConfig+0xb72>
        {
          pwrboosten = SET;
 80071a0:	2301      	movs	r3, #1
 80071a2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
        CLEAR_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 80071a6:	4b56      	ldr	r3, [pc, #344]	; (8007300 <HAL_RCC_OscConfig+0xccc>)
 80071a8:	68db      	ldr	r3, [r3, #12]
 80071aa:	4a55      	ldr	r2, [pc, #340]	; (8007300 <HAL_RCC_OscConfig+0xccc>)
 80071ac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80071b0:	60d3      	str	r3, [r2, #12]

        /* Configure the main PLL clock source, multiplication and division factors */
        __HAL_RCC_PLL_CONFIG(pRCC_OscInitStruct->PLL.PLLSource,
 80071b2:	4b52      	ldr	r3, [pc, #328]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80071b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80071ba:	f023 0303 	bic.w	r3, r3, #3
 80071be:	687a      	ldr	r2, [r7, #4]
 80071c0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80071c2:	687a      	ldr	r2, [r7, #4]
 80071c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80071c6:	3a01      	subs	r2, #1
 80071c8:	0212      	lsls	r2, r2, #8
 80071ca:	4311      	orrs	r1, r2
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80071d0:	430a      	orrs	r2, r1
 80071d2:	494a      	ldr	r1, [pc, #296]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80071d4:	4313      	orrs	r3, r2
 80071d6:	628b      	str	r3, [r1, #40]	; 0x28
 80071d8:	4b48      	ldr	r3, [pc, #288]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80071da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071dc:	4b49      	ldr	r3, [pc, #292]	; (8007304 <HAL_RCC_OscConfig+0xcd0>)
 80071de:	4013      	ands	r3, r2
 80071e0:	687a      	ldr	r2, [r7, #4]
 80071e2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80071e4:	3a01      	subs	r2, #1
 80071e6:	f3c2 0108 	ubfx	r1, r2, #0, #9
 80071ea:	687a      	ldr	r2, [r7, #4]
 80071ec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80071ee:	3a01      	subs	r2, #1
 80071f0:	0252      	lsls	r2, r2, #9
 80071f2:	b292      	uxth	r2, r2
 80071f4:	4311      	orrs	r1, r2
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80071fa:	3a01      	subs	r2, #1
 80071fc:	0412      	lsls	r2, r2, #16
 80071fe:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 8007202:	4311      	orrs	r1, r2
 8007204:	687a      	ldr	r2, [r7, #4]
 8007206:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8007208:	3a01      	subs	r2, #1
 800720a:	0612      	lsls	r2, r2, #24
 800720c:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 8007210:	430a      	orrs	r2, r1
 8007212:	493a      	ldr	r1, [pc, #232]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007214:	4313      	orrs	r3, r2
 8007216:	634b      	str	r3, [r1, #52]	; 0x34
                             pRCC_OscInitStruct->PLL.PLLR);

        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_DISABLE();
 8007218:	4b38      	ldr	r3, [pc, #224]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800721a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800721c:	4a37      	ldr	r2, [pc, #220]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800721e:	f023 0310 	bic.w	r3, r3, #16
 8007222:	6293      	str	r3, [r2, #40]	; 0x28

        /* Configure PLL  PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007228:	4a34      	ldr	r2, [pc, #208]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800722a:	00db      	lsls	r3, r3, #3
 800722c:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN  */
        __HAL_RCC_PLL_FRACN_ENABLE();
 800722e:	4b33      	ldr	r3, [pc, #204]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007232:	4a32      	ldr	r2, [pc, #200]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007234:	f043 0310 	orr.w	r3, r3, #16
 8007238:	6293      	str	r3, [r2, #40]	; 0x28

        assert_param(IS_RCC_PLLRGE_VALUE(pRCC_OscInitStruct->PLL.PLLRGE));

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(pRCC_OscInitStruct->PLL.PLLRGE);
 800723a:	4b30      	ldr	r3, [pc, #192]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800723c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800723e:	f023 020c 	bic.w	r2, r3, #12
 8007242:	687b      	ldr	r3, [r7, #4]
 8007244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007246:	492d      	ldr	r1, [pc, #180]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007248:	4313      	orrs	r3, r2
 800724a:	628b      	str	r3, [r1, #40]	; 0x28

        if (pwrboosten == SET)
 800724c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007250:	2b01      	cmp	r3, #1
 8007252:	d105      	bne.n	8007260 <HAL_RCC_OscConfig+0xc2c>
        {
          /* Enable the EPOD to reach max frequency */
          SET_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN);
 8007254:	4b2a      	ldr	r3, [pc, #168]	; (8007300 <HAL_RCC_OscConfig+0xccc>)
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4a29      	ldr	r2, [pc, #164]	; (8007300 <HAL_RCC_OscConfig+0xccc>)
 800725a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800725e:	60d3      	str	r3, [r2, #12]
        }

        /* Restore clock configuration if changed */
        if (pwrclkchanged == SET)
 8007260:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8007264:	2b01      	cmp	r3, #1
 8007266:	d107      	bne.n	8007278 <HAL_RCC_OscConfig+0xc44>
        {
          __HAL_RCC_PWR_CLK_DISABLE();
 8007268:	4b24      	ldr	r3, [pc, #144]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800726a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800726e:	4a23      	ldr	r2, [pc, #140]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
        }

        /* Enable PLL System Clock output */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8007278:	4b20      	ldr	r3, [pc, #128]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800727a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800727c:	4a1f      	ldr	r2, [pc, #124]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800727e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007282:	6293      	str	r3, [r2, #40]	; 0x28

        /* Enable the main PLL */
        __HAL_RCC_PLL_ENABLE();
 8007284:	4b1d      	ldr	r3, [pc, #116]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	4a1c      	ldr	r2, [pc, #112]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 800728a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800728e:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 8007290:	f7fc fe14 	bl	8003ebc <HAL_GetTick>
 8007294:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 8007296:	e008      	b.n	80072aa <HAL_RCC_OscConfig+0xc76>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007298:	f7fc fe10 	bl	8003ebc <HAL_GetTick>
 800729c:	4602      	mov	r2, r0
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	1ad3      	subs	r3, r2, r3
 80072a2:	2b02      	cmp	r3, #2
 80072a4:	d901      	bls.n	80072aa <HAL_RCC_OscConfig+0xc76>
          {
            return HAL_TIMEOUT;
 80072a6:	2303      	movs	r3, #3
 80072a8:	e099      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 80072aa:	4b14      	ldr	r3, [pc, #80]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d0f0      	beq.n	8007298 <HAL_RCC_OscConfig+0xc64>
 80072b6:	e091      	b.n	80073dc <HAL_RCC_OscConfig+0xda8>
        }
      }
      else
      {
        /* Disable the main PLL */
        __HAL_RCC_PLL_DISABLE();
 80072b8:	4b10      	ldr	r3, [pc, #64]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a0f      	ldr	r2, [pc, #60]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c2:	6013      	str	r3, [r2, #0]

        tickstart = HAL_GetTick();
 80072c4:	f7fc fdfa 	bl	8003ebc <HAL_GetTick>
 80072c8:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80072ca:	e008      	b.n	80072de <HAL_RCC_OscConfig+0xcaa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072cc:	f7fc fdf6 	bl	8003ebc <HAL_GetTick>
 80072d0:	4602      	mov	r2, r0
 80072d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	2b02      	cmp	r3, #2
 80072d8:	d901      	bls.n	80072de <HAL_RCC_OscConfig+0xcaa>
          {
            return HAL_TIMEOUT;
 80072da:	2303      	movs	r3, #3
 80072dc:	e07f      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
        while (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) != 0U)
 80072de:	4b07      	ldr	r3, [pc, #28]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d1f0      	bne.n	80072cc <HAL_RCC_OscConfig+0xc98>
          }
        }

        /* Unselect main PLL clock source and disable main PLL outputs to save power */
        RCC->PLL1CFGR &= ~(RCC_PLL1CFGR_PLL1SRC | RCC_PLL1CFGR_PLL1PEN | RCC_PLL1CFGR_PLL1QEN | RCC_PLL1CFGR_PLL1REN);
 80072ea:	4b04      	ldr	r3, [pc, #16]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072ee:	4a03      	ldr	r2, [pc, #12]	; (80072fc <HAL_RCC_OscConfig+0xcc8>)
 80072f0:	f423 23e0 	bic.w	r3, r3, #458752	; 0x70000
 80072f4:	f023 0303 	bic.w	r3, r3, #3
 80072f8:	6293      	str	r3, [r2, #40]	; 0x28
 80072fa:	e06f      	b.n	80073dc <HAL_RCC_OscConfig+0xda8>
 80072fc:	46020c00 	.word	0x46020c00
 8007300:	46020800 	.word	0x46020800
 8007304:	80800000 	.word	0x80800000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLL1CFGR;
 8007308:	4b37      	ldr	r3, [pc, #220]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 800730a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800730c:	61fb      	str	r3, [r7, #28]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800730e:	4b36      	ldr	r3, [pc, #216]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 8007310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007312:	61bb      	str	r3, [r7, #24]
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007318:	2b01      	cmp	r3, #1
 800731a:	d039      	beq.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 800731c:	69fb      	ldr	r3, [r7, #28]
 800731e:	f003 0203 	and.w	r2, r3, #3
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
      if (((pRCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007326:	429a      	cmp	r2, r3
 8007328:	d132      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1M) >> \
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	0a1b      	lsrs	r3, r3, #8
 800732e:	f003 020f 	and.w	r2, r3, #15
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1SRC) != pRCC_OscInitStruct->PLL.PLLSource) ||
 8007338:	429a      	cmp	r2, r3
 800733a:	d129      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	f403 4270 	and.w	r2, r3, #61440	; 0xf000
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6c5b      	ldr	r3, [r3, #68]	; 0x44
            RCC_PLL1CFGR_PLL1M_Pos) != (pRCC_OscInitStruct->PLL.PLLM - 1U)) ||
 8007346:	429a      	cmp	r2, r3
 8007348:	d122      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007354:	3b01      	subs	r3, #1
          (READ_BIT(temp1_pllckcfg, RCC_PLL1CFGR_PLL1MBOOST) != pRCC_OscInitStruct->PLL.PLLMBOOST) ||
 8007356:	429a      	cmp	r2, r3
 8007358:	d11a      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1P) >> \
 800735a:	69bb      	ldr	r3, [r7, #24]
 800735c:	0a5b      	lsrs	r3, r3, #9
 800735e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007366:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1N) != (pRCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8007368:	429a      	cmp	r2, r3
 800736a:	d111      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1Q) >> \
 800736c:	69bb      	ldr	r3, [r7, #24]
 800736e:	0c1b      	lsrs	r3, r3, #16
 8007370:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007378:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1P_Pos) != (pRCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800737a:	429a      	cmp	r2, r3
 800737c:	d108      	bne.n	8007390 <HAL_RCC_OscConfig+0xd5c>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_PLL1R) >> \
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	0e1b      	lsrs	r3, r3, #24
 8007382:	f003 027f 	and.w	r2, r3, #127	; 0x7f
            RCC_PLL1DIVR_PLL1R_Pos) != (pRCC_OscInitStruct->PLL.PLLR - 1U)))
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800738a:	3b01      	subs	r3, #1
            RCC_PLL1DIVR_PLL1Q_Pos) != (pRCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_OscConfig+0xd60>
      {
        return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e024      	b.n	80073de <HAL_RCC_OscConfig+0xdaa>
      }

      /* FRACN1 on-the-fly value update */
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 8007394:	4b14      	ldr	r3, [pc, #80]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 8007396:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007398:	08db      	lsrs	r3, r3, #3
 800739a:	f3c3 020c 	ubfx	r2, r3, #0, #13
           RCC_PLL1FRACR_PLL1FRACN_Pos) != (pRCC_OscInitStruct->PLL.PLLFRACN))
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
      if ((READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_PLL1FRACN) >> \
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d01a      	beq.n	80073dc <HAL_RCC_OscConfig+0xda8>
      {
        assert_param(IS_RCC_PLL_FRACN_VALUE(pRCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable PLL1FRACN. */
        __HAL_RCC_PLL_FRACN_DISABLE();
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 80073a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073aa:	4a0f      	ldr	r2, [pc, #60]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 80073ac:	f023 0310 	bic.w	r3, r3, #16
 80073b0:	6293      	str	r3, [r2, #40]	; 0x28

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80073b2:	f7fc fd83 	bl	8003ebc <HAL_GetTick>
 80073b6:	62b8      	str	r0, [r7, #40]	; 0x28

        /* Wait at least 2 CK_REF (PLL1 input source divided by M) period to make sure next latched value
           will be taken into account. */
        while ((HAL_GetTick() - tickstart) < PLL_FRAC_WAIT_VALUE)
 80073b8:	bf00      	nop
 80073ba:	f7fc fd7f 	bl	8003ebc <HAL_GetTick>
 80073be:	4602      	mov	r2, r0
 80073c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073c2:	4293      	cmp	r3, r2
 80073c4:	d0f9      	beq.n	80073ba <HAL_RCC_OscConfig+0xd86>
        {
        }

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLL_FRACN_CONFIG(pRCC_OscInitStruct->PLL.PLLFRACN);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80073ca:	4a07      	ldr	r2, [pc, #28]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 80073cc:	00db      	lsls	r3, r3, #3
 80073ce:	6393      	str	r3, [r2, #56]	; 0x38

        /* Enable PLL1FRACN to latch the new value. */
        __HAL_RCC_PLL_FRACN_ENABLE();
 80073d0:	4b05      	ldr	r3, [pc, #20]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 80073d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073d4:	4a04      	ldr	r2, [pc, #16]	; (80073e8 <HAL_RCC_OscConfig+0xdb4>)
 80073d6:	f043 0310 	orr.w	r3, r3, #16
 80073da:	6293      	str	r3, [r2, #40]	; 0x28
      }
    }
  }
  return HAL_OK;
 80073dc:	2300      	movs	r3, #0
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3738      	adds	r7, #56	; 0x38
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	46020c00 	.word	0x46020c00

080073ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef   *const pRCC_ClkInitStruct, uint32_t FLatency)
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b086      	sub	sp, #24
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart;

  /* Check Null pointer */
  if (pRCC_ClkInitStruct == NULL)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d101      	bne.n	8007400 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80073fc:	2301      	movs	r3, #1
 80073fe:	e1d9      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
   must be correctly programmed according to the frequency of the CPU clock
   (HCLK) and the supply voltage of the device */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007400:	4b9b      	ldr	r3, [pc, #620]	; (8007670 <HAL_RCC_ClockConfig+0x284>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	f003 030f 	and.w	r3, r3, #15
 8007408:	683a      	ldr	r2, [r7, #0]
 800740a:	429a      	cmp	r2, r3
 800740c:	d910      	bls.n	8007430 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800740e:	4b98      	ldr	r3, [pc, #608]	; (8007670 <HAL_RCC_ClockConfig+0x284>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f023 020f 	bic.w	r2, r3, #15
 8007416:	4996      	ldr	r1, [pc, #600]	; (8007670 <HAL_RCC_ClockConfig+0x284>)
 8007418:	683b      	ldr	r3, [r7, #0]
 800741a:	4313      	orrs	r3, r2
 800741c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800741e:	4b94      	ldr	r3, [pc, #592]	; (8007670 <HAL_RCC_ClockConfig+0x284>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 030f 	and.w	r3, r3, #15
 8007426:	683a      	ldr	r2, [r7, #0]
 8007428:	429a      	cmp	r2, r3
 800742a:	d001      	beq.n	8007430 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	e1c1      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	f003 0310 	and.w	r3, r3, #16
 8007438:	2b00      	cmp	r3, #0
 800743a:	d010      	beq.n	800745e <HAL_RCC_ClockConfig+0x72>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) > (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	695a      	ldr	r2, [r3, #20]
 8007440:	4b8c      	ldr	r3, [pc, #560]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007444:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007448:	429a      	cmp	r2, r3
 800744a:	d908      	bls.n	800745e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, pRCC_ClkInitStruct->APB3CLKDivider);
 800744c:	4b89      	ldr	r3, [pc, #548]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 800744e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007450:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	695b      	ldr	r3, [r3, #20]
 8007458:	4986      	ldr	r1, [pc, #536]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 800745a:	4313      	orrs	r3, r2
 800745c:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f003 0308 	and.w	r3, r3, #8
 8007466:	2b00      	cmp	r3, #0
 8007468:	d012      	beq.n	8007490 <HAL_RCC_ClockConfig+0xa4>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) > ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	691a      	ldr	r2, [r3, #16]
 800746e:	4b81      	ldr	r3, [pc, #516]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	091b      	lsrs	r3, r3, #4
 8007474:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007478:	429a      	cmp	r2, r3
 800747a:	d909      	bls.n	8007490 <HAL_RCC_ClockConfig+0xa4>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 800747c:	4b7d      	ldr	r3, [pc, #500]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 800747e:	6a1b      	ldr	r3, [r3, #32]
 8007480:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	691b      	ldr	r3, [r3, #16]
 8007488:	011b      	lsls	r3, r3, #4
 800748a:	497a      	ldr	r1, [pc, #488]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 800748c:	4313      	orrs	r3, r2
 800748e:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f003 0304 	and.w	r3, r3, #4
 8007498:	2b00      	cmp	r3, #0
 800749a:	d010      	beq.n	80074be <HAL_RCC_ClockConfig+0xd2>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) > (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	4b74      	ldr	r3, [pc, #464]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074a2:	6a1b      	ldr	r3, [r3, #32]
 80074a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80074a8:	429a      	cmp	r2, r3
 80074aa:	d908      	bls.n	80074be <HAL_RCC_ClockConfig+0xd2>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 80074ac:	4b71      	ldr	r3, [pc, #452]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074ae:	6a1b      	ldr	r3, [r3, #32]
 80074b0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	496e      	ldr	r1, [pc, #440]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074ba:	4313      	orrs	r3, r2
 80074bc:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d010      	beq.n	80074ec <HAL_RCC_ClockConfig+0x100>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) > (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	689a      	ldr	r2, [r3, #8]
 80074ce:	4b69      	ldr	r3, [pc, #420]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074d0:	6a1b      	ldr	r3, [r3, #32]
 80074d2:	f003 030f 	and.w	r3, r3, #15
 80074d6:	429a      	cmp	r2, r3
 80074d8:	d908      	bls.n	80074ec <HAL_RCC_ClockConfig+0x100>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80074da:	4b66      	ldr	r3, [pc, #408]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074dc:	6a1b      	ldr	r3, [r3, #32]
 80074de:	f023 020f 	bic.w	r2, r3, #15
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	689b      	ldr	r3, [r3, #8]
 80074e6:	4963      	ldr	r1, [pc, #396]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80074e8:	4313      	orrs	r3, r2
 80074ea:	620b      	str	r3, [r1, #32]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0301 	and.w	r3, r3, #1
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	f000 80d2 	beq.w	800769e <HAL_RCC_ClockConfig+0x2b2>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(pRCC_ClkInitStruct->SYSCLKSource));
    FlagStatus  pwrclkchanged = RESET;
 80074fa:	2300      	movs	r3, #0
 80074fc:	75fb      	strb	r3, [r7, #23]

    /* PLL is selected as System Clock Source */
    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	685b      	ldr	r3, [r3, #4]
 8007502:	2b03      	cmp	r3, #3
 8007504:	d143      	bne.n	800758e <HAL_RCC_ClockConfig+0x1a2>
    {
      if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007506:	4b5b      	ldr	r3, [pc, #364]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007508:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800750c:	f003 0304 	and.w	r3, r3, #4
 8007510:	2b00      	cmp	r3, #0
 8007512:	d110      	bne.n	8007536 <HAL_RCC_ClockConfig+0x14a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8007514:	4b57      	ldr	r3, [pc, #348]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007516:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800751a:	4a56      	ldr	r2, [pc, #344]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 800751c:	f043 0304 	orr.w	r3, r3, #4
 8007520:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007524:	4b53      	ldr	r3, [pc, #332]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800752a:	f003 0304 	and.w	r3, r3, #4
 800752e:	60bb      	str	r3, [r7, #8]
 8007530:	68bb      	ldr	r3, [r7, #8]
        pwrclkchanged = SET;
 8007532:	2301      	movs	r3, #1
 8007534:	75fb      	strb	r3, [r7, #23]
      }
      tickstart = HAL_GetTick();
 8007536:	f7fc fcc1 	bl	8003ebc <HAL_GetTick>
 800753a:	6138      	str	r0, [r7, #16]
      /* Check if EPOD is enabled */
      if (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTEN) != 0U)
 800753c:	4b4e      	ldr	r3, [pc, #312]	; (8007678 <HAL_RCC_ClockConfig+0x28c>)
 800753e:	68db      	ldr	r3, [r3, #12]
 8007540:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007544:	2b00      	cmp	r3, #0
 8007546:	d00f      	beq.n	8007568 <HAL_RCC_ClockConfig+0x17c>
      {
        /* Wait till BOOST is ready */
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 8007548:	e008      	b.n	800755c <HAL_RCC_ClockConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > EPOD_TIMEOUT_VALUE)
 800754a:	f7fc fcb7 	bl	8003ebc <HAL_GetTick>
 800754e:	4602      	mov	r2, r0
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	1ad3      	subs	r3, r2, r3
 8007554:	2b02      	cmp	r3, #2
 8007556:	d901      	bls.n	800755c <HAL_RCC_ClockConfig+0x170>
          {
            return HAL_TIMEOUT;
 8007558:	2303      	movs	r3, #3
 800755a:	e12b      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        while (READ_BIT(PWR->VOSR, PWR_VOSR_BOOSTRDY) == 0U)
 800755c:	4b46      	ldr	r3, [pc, #280]	; (8007678 <HAL_RCC_ClockConfig+0x28c>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007564:	2b00      	cmp	r3, #0
 8007566:	d0f0      	beq.n	800754a <HAL_RCC_ClockConfig+0x15e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8007568:	7dfb      	ldrb	r3, [r7, #23]
 800756a:	2b01      	cmp	r3, #1
 800756c:	d107      	bne.n	800757e <HAL_RCC_ClockConfig+0x192>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800756e:	4b41      	ldr	r3, [pc, #260]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007574:	4a3f      	ldr	r2, [pc, #252]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007576:	f023 0304 	bic.w	r3, r3, #4
 800757a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == 0U)
 800757e:	4b3d      	ldr	r3, [pc, #244]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007586:	2b00      	cmp	r3, #0
 8007588:	d121      	bne.n	80075ce <HAL_RCC_ClockConfig+0x1e2>
      {
        return HAL_ERROR;
 800758a:	2301      	movs	r3, #1
 800758c:	e112      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d107      	bne.n	80075a6 <HAL_RCC_ClockConfig+0x1ba>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007596:	4b37      	ldr	r3, [pc, #220]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d115      	bne.n	80075ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e106      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	685b      	ldr	r3, [r3, #4]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d107      	bne.n	80075be <HAL_RCC_ClockConfig+0x1d2>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSISRDY) == 0U)
 80075ae:	4b31      	ldr	r3, [pc, #196]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	f003 0304 	and.w	r3, r3, #4
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d109      	bne.n	80075ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075ba:	2301      	movs	r3, #1
 80075bc:	e0fa      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80075be:	4b2d      	ldr	r3, [pc, #180]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d101      	bne.n	80075ce <HAL_RCC_ClockConfig+0x1e2>
        {
          return HAL_ERROR;
 80075ca:	2301      	movs	r3, #1
 80075cc:	e0f2      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        }
      }
    }

    MODIFY_REG(RCC->CFGR1, RCC_CFGR1_SW, pRCC_ClkInitStruct->SYSCLKSource);
 80075ce:	4b29      	ldr	r3, [pc, #164]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80075d0:	69db      	ldr	r3, [r3, #28]
 80075d2:	f023 0203 	bic.w	r2, r3, #3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	685b      	ldr	r3, [r3, #4]
 80075da:	4926      	ldr	r1, [pc, #152]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 80075dc:	4313      	orrs	r3, r2
 80075de:	61cb      	str	r3, [r1, #28]

    tickstart = HAL_GetTick();
 80075e0:	f7fc fc6c 	bl	8003ebc <HAL_GetTick>
 80075e4:	6138      	str	r0, [r7, #16]

    if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	685b      	ldr	r3, [r3, #4]
 80075ea:	2b03      	cmp	r3, #3
 80075ec:	d112      	bne.n	8007614 <HAL_RCC_ClockConfig+0x228>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80075ee:	e00a      	b.n	8007606 <HAL_RCC_ClockConfig+0x21a>
      {
        if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075f0:	f7fc fc64 	bl	8003ebc <HAL_GetTick>
 80075f4:	4602      	mov	r2, r0
 80075f6:	693b      	ldr	r3, [r7, #16]
 80075f8:	1ad3      	subs	r3, r2, r3
 80075fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80075fe:	4293      	cmp	r3, r2
 8007600:	d901      	bls.n	8007606 <HAL_RCC_ClockConfig+0x21a>
        {
          return HAL_TIMEOUT;
 8007602:	2303      	movs	r3, #3
 8007604:	e0d6      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007606:	4b1b      	ldr	r3, [pc, #108]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007608:	69db      	ldr	r3, [r3, #28]
 800760a:	f003 030c 	and.w	r3, r3, #12
 800760e:	2b0c      	cmp	r3, #12
 8007610:	d1ee      	bne.n	80075f0 <HAL_RCC_ClockConfig+0x204>
 8007612:	e044      	b.n	800769e <HAL_RCC_ClockConfig+0x2b2>
        }
      }
    }
    else
    {
      if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	685b      	ldr	r3, [r3, #4]
 8007618:	2b02      	cmp	r3, #2
 800761a:	d112      	bne.n	8007642 <HAL_RCC_ClockConfig+0x256>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800761c:	e00a      	b.n	8007634 <HAL_RCC_ClockConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800761e:	f7fc fc4d 	bl	8003ebc <HAL_GetTick>
 8007622:	4602      	mov	r2, r0
 8007624:	693b      	ldr	r3, [r7, #16]
 8007626:	1ad3      	subs	r3, r2, r3
 8007628:	f241 3288 	movw	r2, #5000	; 0x1388
 800762c:	4293      	cmp	r3, r2
 800762e:	d901      	bls.n	8007634 <HAL_RCC_ClockConfig+0x248>
          {
            return HAL_TIMEOUT;
 8007630:	2303      	movs	r3, #3
 8007632:	e0bf      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007634:	4b0f      	ldr	r3, [pc, #60]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f003 030c 	and.w	r3, r3, #12
 800763c:	2b08      	cmp	r3, #8
 800763e:	d1ee      	bne.n	800761e <HAL_RCC_ClockConfig+0x232>
 8007640:	e02d      	b.n	800769e <HAL_RCC_ClockConfig+0x2b2>
          }
        }
      }
      else if (pRCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	2b00      	cmp	r3, #0
 8007648:	d123      	bne.n	8007692 <HAL_RCC_ClockConfig+0x2a6>
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800764a:	e00a      	b.n	8007662 <HAL_RCC_ClockConfig+0x276>
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800764c:	f7fc fc36 	bl	8003ebc <HAL_GetTick>
 8007650:	4602      	mov	r2, r0
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	1ad3      	subs	r3, r2, r3
 8007656:	f241 3288 	movw	r2, #5000	; 0x1388
 800765a:	4293      	cmp	r3, r2
 800765c:	d901      	bls.n	8007662 <HAL_RCC_ClockConfig+0x276>
          {
            return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e0a8      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007662:	4b04      	ldr	r3, [pc, #16]	; (8007674 <HAL_RCC_ClockConfig+0x288>)
 8007664:	69db      	ldr	r3, [r3, #28]
 8007666:	f003 030c 	and.w	r3, r3, #12
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1ee      	bne.n	800764c <HAL_RCC_ClockConfig+0x260>
 800766e:	e016      	b.n	800769e <HAL_RCC_ClockConfig+0x2b2>
 8007670:	40022000 	.word	0x40022000
 8007674:	46020c00 	.word	0x46020c00
 8007678:	46020800 	.word	0x46020800
      }
      else
      {
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
        {
          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800767c:	f7fc fc1e 	bl	8003ebc <HAL_GetTick>
 8007680:	4602      	mov	r2, r0
 8007682:	693b      	ldr	r3, [r7, #16]
 8007684:	1ad3      	subs	r3, r2, r3
 8007686:	f241 3288 	movw	r2, #5000	; 0x1388
 800768a:	4293      	cmp	r3, r2
 800768c:	d901      	bls.n	8007692 <HAL_RCC_ClockConfig+0x2a6>
          {
            return HAL_TIMEOUT;
 800768e:	2303      	movs	r3, #3
 8007690:	e090      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007692:	4b4a      	ldr	r3, [pc, #296]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 8007694:	69db      	ldr	r3, [r3, #28]
 8007696:	f003 030c 	and.w	r3, r3, #12
 800769a:	2b04      	cmp	r3, #4
 800769c:	d1ee      	bne.n	800767c <HAL_RCC_ClockConfig+0x290>
    }
  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f003 0302 	and.w	r3, r3, #2
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d010      	beq.n	80076cc <HAL_RCC_ClockConfig+0x2e0>
  {
    if ((pRCC_ClkInitStruct->AHBCLKDivider) < (RCC->CFGR2 & RCC_CFGR2_HPRE))
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	689a      	ldr	r2, [r3, #8]
 80076ae:	4b43      	ldr	r3, [pc, #268]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 80076b0:	6a1b      	ldr	r3, [r3, #32]
 80076b2:	f003 030f 	and.w	r3, r3, #15
 80076b6:	429a      	cmp	r2, r3
 80076b8:	d208      	bcs.n	80076cc <HAL_RCC_ClockConfig+0x2e0>
    {
      assert_param(IS_RCC_HCLK(pRCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_HPRE, pRCC_ClkInitStruct->AHBCLKDivider);
 80076ba:	4b40      	ldr	r3, [pc, #256]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 80076bc:	6a1b      	ldr	r3, [r3, #32]
 80076be:	f023 020f 	bic.w	r2, r3, #15
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	689b      	ldr	r3, [r3, #8]
 80076c6:	493d      	ldr	r1, [pc, #244]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 80076c8:	4313      	orrs	r3, r2
 80076ca:	620b      	str	r3, [r1, #32]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80076cc:	4b3c      	ldr	r3, [pc, #240]	; (80077c0 <HAL_RCC_ClockConfig+0x3d4>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	f003 030f 	and.w	r3, r3, #15
 80076d4:	683a      	ldr	r2, [r7, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d210      	bcs.n	80076fc <HAL_RCC_ClockConfig+0x310>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076da:	4b39      	ldr	r3, [pc, #228]	; (80077c0 <HAL_RCC_ClockConfig+0x3d4>)
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f023 020f 	bic.w	r2, r3, #15
 80076e2:	4937      	ldr	r1, [pc, #220]	; (80077c0 <HAL_RCC_ClockConfig+0x3d4>)
 80076e4:	683b      	ldr	r3, [r7, #0]
 80076e6:	4313      	orrs	r3, r2
 80076e8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ea:	4b35      	ldr	r3, [pc, #212]	; (80077c0 <HAL_RCC_ClockConfig+0x3d4>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	f003 030f 	and.w	r3, r3, #15
 80076f2:	683a      	ldr	r2, [r7, #0]
 80076f4:	429a      	cmp	r2, r3
 80076f6:	d001      	beq.n	80076fc <HAL_RCC_ClockConfig+0x310>
    {
      return HAL_ERROR;
 80076f8:	2301      	movs	r3, #1
 80076fa:	e05b      	b.n	80077b4 <HAL_RCC_ClockConfig+0x3c8>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	f003 0304 	and.w	r3, r3, #4
 8007704:	2b00      	cmp	r3, #0
 8007706:	d010      	beq.n	800772a <HAL_RCC_ClockConfig+0x33e>
  {
    if ((pRCC_ClkInitStruct->APB1CLKDivider) < (RCC->CFGR2 & RCC_CFGR2_PPRE1))
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	68da      	ldr	r2, [r3, #12]
 800770c:	4b2b      	ldr	r3, [pc, #172]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800770e:	6a1b      	ldr	r3, [r3, #32]
 8007710:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007714:	429a      	cmp	r2, r3
 8007716:	d208      	bcs.n	800772a <HAL_RCC_ClockConfig+0x33e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE1, pRCC_ClkInitStruct->APB1CLKDivider);
 8007718:	4b28      	ldr	r3, [pc, #160]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800771a:	6a1b      	ldr	r3, [r3, #32]
 800771c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	4925      	ldr	r1, [pc, #148]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 8007726:	4313      	orrs	r3, r2
 8007728:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	f003 0308 	and.w	r3, r3, #8
 8007732:	2b00      	cmp	r3, #0
 8007734:	d012      	beq.n	800775c <HAL_RCC_ClockConfig+0x370>
  {
    if ((pRCC_ClkInitStruct->APB2CLKDivider) < ((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4))
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	691a      	ldr	r2, [r3, #16]
 800773a:	4b20      	ldr	r3, [pc, #128]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800773c:	6a1b      	ldr	r3, [r3, #32]
 800773e:	091b      	lsrs	r3, r3, #4
 8007740:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007744:	429a      	cmp	r2, r3
 8007746:	d209      	bcs.n	800775c <HAL_RCC_ClockConfig+0x370>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->CFGR2, RCC_CFGR2_PPRE2, ((pRCC_ClkInitStruct->APB2CLKDivider) << 4));
 8007748:	4b1c      	ldr	r3, [pc, #112]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800774a:	6a1b      	ldr	r3, [r3, #32]
 800774c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	691b      	ldr	r3, [r3, #16]
 8007754:	011b      	lsls	r3, r3, #4
 8007756:	4919      	ldr	r1, [pc, #100]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 8007758:	4313      	orrs	r3, r2
 800775a:	620b      	str	r3, [r1, #32]
    }
  }

  /*-------------------------- PCLK3 Configuration ---------------------------*/
  if (((pRCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK3) == RCC_CLOCKTYPE_PCLK3)
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	f003 0310 	and.w	r3, r3, #16
 8007764:	2b00      	cmp	r3, #0
 8007766:	d010      	beq.n	800778a <HAL_RCC_ClockConfig+0x39e>
  {
    if ((pRCC_ClkInitStruct->APB3CLKDivider) < (RCC->CFGR3 & RCC_CFGR3_PPRE3))
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	695a      	ldr	r2, [r3, #20]
 800776c:	4b13      	ldr	r3, [pc, #76]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800776e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007770:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007774:	429a      	cmp	r2, r3
 8007776:	d208      	bcs.n	800778a <HAL_RCC_ClockConfig+0x39e>
    {
      assert_param(IS_RCC_PCLK(pRCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->CFGR3, RCC_CFGR3_PPRE3, (pRCC_ClkInitStruct->APB3CLKDivider));
 8007778:	4b10      	ldr	r3, [pc, #64]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 800777a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	695b      	ldr	r3, [r3, #20]
 8007784:	490d      	ldr	r1, [pc, #52]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 8007786:	4313      	orrs	r3, r2
 8007788:	624b      	str	r3, [r1, #36]	; 0x24
    }
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 800778a:	f000 f821 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 800778e:	4602      	mov	r2, r0
 8007790:	4b0a      	ldr	r3, [pc, #40]	; (80077bc <HAL_RCC_ClockConfig+0x3d0>)
 8007792:	6a1b      	ldr	r3, [r3, #32]
 8007794:	f003 030f 	and.w	r3, r3, #15
 8007798:	490a      	ldr	r1, [pc, #40]	; (80077c4 <HAL_RCC_ClockConfig+0x3d8>)
 800779a:	5ccb      	ldrb	r3, [r1, r3]
 800779c:	fa22 f303 	lsr.w	r3, r2, r3
 80077a0:	4a09      	ldr	r2, [pc, #36]	; (80077c8 <HAL_RCC_ClockConfig+0x3dc>)
 80077a2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80077a4:	4b09      	ldr	r3, [pc, #36]	; (80077cc <HAL_RCC_ClockConfig+0x3e0>)
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	4618      	mov	r0, r3
 80077aa:	f7fc f979 	bl	8003aa0 <HAL_InitTick>
 80077ae:	4603      	mov	r3, r0
 80077b0:	73fb      	strb	r3, [r7, #15]

  return status;
 80077b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3718      	adds	r7, #24
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}
 80077bc:	46020c00 	.word	0x46020c00
 80077c0:	40022000 	.word	0x40022000
 80077c4:	08010c50 	.word	0x08010c50
 80077c8:	20000000 	.word	0x20000000
 80077cc:	20000004 	.word	0x20000004

080077d0 <HAL_RCC_GetSysClockFreq>:
  * @note   Each time SYSCLK changes, this function must be called to update the
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b08b      	sub	sp, #44	; 0x2c
 80077d4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pllsource;
  uint32_t pllr;
  uint32_t pllm;
  uint32_t pllfracen;
  uint32_t sysclockfreq = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	623b      	str	r3, [r7, #32]
  uint32_t sysclk_source;
  uint32_t pll_oscsource;
  float_t fracn1;
  float_t pllvco;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80077de:	4b7b      	ldr	r3, [pc, #492]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077e0:	69db      	ldr	r3, [r3, #28]
 80077e2:	f003 030c 	and.w	r3, r3, #12
 80077e6:	61bb      	str	r3, [r7, #24]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80077e8:	4b78      	ldr	r3, [pc, #480]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80077ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077ec:	f003 0303 	and.w	r3, r3, #3
 80077f0:	617b      	str	r3, [r7, #20]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d005      	beq.n	8007804 <HAL_RCC_GetSysClockFreq+0x34>
 80077f8:	69bb      	ldr	r3, [r7, #24]
 80077fa:	2b0c      	cmp	r3, #12
 80077fc:	d121      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80077fe:	697b      	ldr	r3, [r7, #20]
 8007800:	2b01      	cmp	r3, #1
 8007802:	d11e      	bne.n	8007842 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->ICSCR1, RCC_ICSCR1_MSIRGSEL) == 0U)
 8007804:	4b71      	ldr	r3, [pc, #452]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800780c:	2b00      	cmp	r3, #0
 800780e:	d107      	bne.n	8007820 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = (RCC->CSR & RCC_CSR_MSISSRANGE) >> RCC_CSR_MSISSRANGE_Pos;
 8007810:	4b6e      	ldr	r3, [pc, #440]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007812:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007816:	0b1b      	lsrs	r3, r3, #12
 8007818:	f003 030f 	and.w	r3, r3, #15
 800781c:	627b      	str	r3, [r7, #36]	; 0x24
 800781e:	e005      	b.n	800782c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = (RCC->ICSCR1 & RCC_ICSCR1_MSISRANGE) >> RCC_ICSCR1_MSISRANGE_Pos;
 8007820:	4b6a      	ldr	r3, [pc, #424]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007822:	689b      	ldr	r3, [r3, #8]
 8007824:	0f1b      	lsrs	r3, r3, #28
 8007826:	f003 030f 	and.w	r3, r3, #15
 800782a:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800782c:	4a68      	ldr	r2, [pc, #416]	; (80079d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800782e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007834:	627b      	str	r3, [r7, #36]	; 0x24

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007836:	69bb      	ldr	r3, [r7, #24]
 8007838:	2b00      	cmp	r3, #0
 800783a:	d110      	bne.n	800785e <HAL_RCC_GetSysClockFreq+0x8e>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800783c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800783e:	623b      	str	r3, [r7, #32]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8007840:	e00d      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x8e>
    }
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007842:	4b62      	ldr	r3, [pc, #392]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007844:	69db      	ldr	r3, [r3, #28]
 8007846:	f003 030c 	and.w	r3, r3, #12
 800784a:	2b04      	cmp	r3, #4
 800784c:	d102      	bne.n	8007854 <HAL_RCC_GetSysClockFreq+0x84>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800784e:	4b61      	ldr	r3, [pc, #388]	; (80079d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8007850:	623b      	str	r3, [r7, #32]
 8007852:	e004      	b.n	800785e <HAL_RCC_GetSysClockFreq+0x8e>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007854:	69bb      	ldr	r3, [r7, #24]
 8007856:	2b08      	cmp	r3, #8
 8007858:	d101      	bne.n	800785e <HAL_RCC_GetSysClockFreq+0x8e>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800785a:	4b5e      	ldr	r3, [pc, #376]	; (80079d4 <HAL_RCC_GetSysClockFreq+0x204>)
 800785c:	623b      	str	r3, [r7, #32]
  else
  {
    /* Nothing to do */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	2b0c      	cmp	r3, #12
 8007862:	f040 80ac 	bne.w	80079be <HAL_RCC_GetSysClockFreq+0x1ee>
  {
    /* PLL used as system clock  source
       PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
       SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 8007866:	4b59      	ldr	r3, [pc, #356]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800786a:	f003 0303 	and.w	r3, r3, #3
 800786e:	613b      	str	r3, [r7, #16]
    pllm = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 8007870:	4b56      	ldr	r3, [pc, #344]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	0a1b      	lsrs	r3, r3, #8
 8007876:	f003 030f 	and.w	r3, r3, #15
 800787a:	3301      	adds	r3, #1
 800787c:	60fb      	str	r3, [r7, #12]
    pllfracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 800787e:	4b53      	ldr	r3, [pc, #332]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007882:	091b      	lsrs	r3, r3, #4
 8007884:	f003 0301 	and.w	r3, r3, #1
 8007888:	60bb      	str	r3, [r7, #8]
    fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 800788a:	4b50      	ldr	r3, [pc, #320]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800788c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800788e:	08db      	lsrs	r3, r3, #3
 8007890:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8007894:	68ba      	ldr	r2, [r7, #8]
 8007896:	fb02 f303 	mul.w	r3, r2, r3
 800789a:	ee07 3a90 	vmov	s15, r3
 800789e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078a2:	edc7 7a01 	vstr	s15, [r7, #4]
                                              RCC_PLL1FRACR_PLL1FRACN_Pos));

    if (pllm != 0U)
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	f000 8086 	beq.w	80079ba <HAL_RCC_GetSysClockFreq+0x1ea>
    {
      switch (pllsource)
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	2b02      	cmp	r3, #2
 80078b2:	d003      	beq.n	80078bc <HAL_RCC_GetSysClockFreq+0xec>
 80078b4:	693b      	ldr	r3, [r7, #16]
 80078b6:	2b03      	cmp	r3, #3
 80078b8:	d022      	beq.n	8007900 <HAL_RCC_GetSysClockFreq+0x130>
 80078ba:	e043      	b.n	8007944 <HAL_RCC_GetSysClockFreq+0x174>
      {
        case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078bc:	68fb      	ldr	r3, [r7, #12]
 80078be:	ee07 3a90 	vmov	s15, r3
 80078c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80078c6:	eddf 6a44 	vldr	s13, [pc, #272]	; 80079d8 <HAL_RCC_GetSysClockFreq+0x208>
 80078ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80078ce:	4b3f      	ldr	r3, [pc, #252]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 80078d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80078d6:	ee07 3a90 	vmov	s15, r3
 80078da:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078de:	ed97 6a01 	vldr	s12, [r7, #4]
 80078e2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80079dc <HAL_RCC_GetSysClockFreq+0x20c>
 80078e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 80078ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80078f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80078f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80078fa:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 80078fe:	e046      	b.n	800798e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	ee07 3a90 	vmov	s15, r3
 8007906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800790a:	eddf 6a33 	vldr	s13, [pc, #204]	; 80079d8 <HAL_RCC_GetSysClockFreq+0x208>
 800790e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007912:	4b2e      	ldr	r3, [pc, #184]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007914:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007916:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800791a:	ee07 3a90 	vmov	s15, r3
 800791e:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007922:	ed97 6a01 	vldr	s12, [r7, #4]
 8007926:	eddf 5a2d 	vldr	s11, [pc, #180]	; 80079dc <HAL_RCC_GetSysClockFreq+0x20c>
 800792a:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800792e:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 8007932:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007936:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800793a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800793e:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 8007942:	e024      	b.n	800798e <HAL_RCC_GetSysClockFreq+0x1be>

        case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        default:
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007944:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007946:	ee07 3a90 	vmov	s15, r3
 800794a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	ee07 3a90 	vmov	s15, r3
 8007954:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007958:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800795c:	4b1b      	ldr	r3, [pc, #108]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 800795e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007960:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007964:	ee07 3a90 	vmov	s15, r3
 8007968:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800796c:	ed97 6a01 	vldr	s12, [r7, #4]
 8007970:	eddf 5a1a 	vldr	s11, [pc, #104]	; 80079dc <HAL_RCC_GetSysClockFreq+0x20c>
 8007974:	eec6 7a25 	vdiv.f32	s15, s12, s11
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007978:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1U);
 800797c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8007980:	ee77 7aa6 	vadd.f32	s15, s15, s13
          pllvco = ((float_t) msirange / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8007984:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007988:	edc7 7a07 	vstr	s15, [r7, #28]
          break;
 800798c:	bf00      	nop
      }

      pllr = (((RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + 1U);
 800798e:	4b0f      	ldr	r3, [pc, #60]	; (80079cc <HAL_RCC_GetSysClockFreq+0x1fc>)
 8007990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007992:	0e1b      	lsrs	r3, r3, #24
 8007994:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007998:	3301      	adds	r3, #1
 800799a:	603b      	str	r3, [r7, #0]
      sysclockfreq = (uint32_t)(float_t)((float_t)pllvco / (float_t)pllr);
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	ee07 3a90 	vmov	s15, r3
 80079a2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80079a6:	edd7 6a07 	vldr	s13, [r7, #28]
 80079aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80079ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80079b2:	ee17 3a90 	vmov	r3, s15
 80079b6:	623b      	str	r3, [r7, #32]
 80079b8:	e001      	b.n	80079be <HAL_RCC_GetSysClockFreq+0x1ee>
    }
    else
    {
      sysclockfreq = 0;
 80079ba:	2300      	movs	r3, #0
 80079bc:	623b      	str	r3, [r7, #32]
    }
  }

  return sysclockfreq;
 80079be:	6a3b      	ldr	r3, [r7, #32]
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	372c      	adds	r7, #44	; 0x2c
 80079c4:	46bd      	mov	sp, r7
 80079c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ca:	4770      	bx	lr
 80079cc:	46020c00 	.word	0x46020c00
 80079d0:	08010c68 	.word	0x08010c68
 80079d4:	00f42400 	.word	0x00f42400
 80079d8:	4b742400 	.word	0x4b742400
 80079dc:	46000000 	.word	0x46000000

080079e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80079e0:	b580      	push	{r7, lr}
 80079e2:	af00      	add	r7, sp, #0
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR2 & RCC_CFGR2_HPRE) >> RCC_CFGR2_HPRE_Pos];
 80079e4:	f7ff fef4 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 80079e8:	4602      	mov	r2, r0
 80079ea:	4b07      	ldr	r3, [pc, #28]	; (8007a08 <HAL_RCC_GetHCLKFreq+0x28>)
 80079ec:	6a1b      	ldr	r3, [r3, #32]
 80079ee:	f003 030f 	and.w	r3, r3, #15
 80079f2:	4906      	ldr	r1, [pc, #24]	; (8007a0c <HAL_RCC_GetHCLKFreq+0x2c>)
 80079f4:	5ccb      	ldrb	r3, [r1, r3]
 80079f6:	fa22 f303 	lsr.w	r3, r2, r3
 80079fa:	4a05      	ldr	r2, [pc, #20]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x30>)
 80079fc:	6013      	str	r3, [r2, #0]
  return SystemCoreClock;
 80079fe:	4b04      	ldr	r3, [pc, #16]	; (8007a10 <HAL_RCC_GetHCLKFreq+0x30>)
 8007a00:	681b      	ldr	r3, [r3, #0]
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	46020c00 	.word	0x46020c00
 8007a0c:	08010c50 	.word	0x08010c50
 8007a10:	20000000 	.word	0x20000000

08007a14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007a14:	b580      	push	{r7, lr}
 8007a16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE1) >> RCC_CFGR2_PPRE1_Pos]);
 8007a18:	f7ff ffe2 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 8007a1c:	4602      	mov	r2, r0
 8007a1e:	4b05      	ldr	r3, [pc, #20]	; (8007a34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007a20:	6a1b      	ldr	r3, [r3, #32]
 8007a22:	091b      	lsrs	r3, r3, #4
 8007a24:	f003 0307 	and.w	r3, r3, #7
 8007a28:	4903      	ldr	r1, [pc, #12]	; (8007a38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007a2a:	5ccb      	ldrb	r3, [r1, r3]
 8007a2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a30:	4618      	mov	r0, r3
 8007a32:	bd80      	pop	{r7, pc}
 8007a34:	46020c00 	.word	0x46020c00
 8007a38:	08010c60 	.word	0x08010c60

08007a3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007a3c:	b580      	push	{r7, lr}
 8007a3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR2 & RCC_CFGR2_PPRE2) >> RCC_CFGR2_PPRE2_Pos]);
 8007a40:	f7ff ffce 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 8007a44:	4602      	mov	r2, r0
 8007a46:	4b05      	ldr	r3, [pc, #20]	; (8007a5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007a48:	6a1b      	ldr	r3, [r3, #32]
 8007a4a:	0a1b      	lsrs	r3, r3, #8
 8007a4c:	f003 0307 	and.w	r3, r3, #7
 8007a50:	4903      	ldr	r1, [pc, #12]	; (8007a60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007a52:	5ccb      	ldrb	r3, [r1, r3]
 8007a54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a58:	4618      	mov	r0, r3
 8007a5a:	bd80      	pop	{r7, pc}
 8007a5c:	46020c00 	.word	0x46020c00
 8007a60:	08010c60 	.word	0x08010c60

08007a64 <HAL_RCC_GetPCLK3Freq>:
  * @note   Each time PCLK3 changes, this function must be called to update the
  *         right PCLK3 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK3 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK3Freq(void)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR3 & RCC_CFGR3_PPRE3) >> RCC_CFGR3_PPRE3_Pos]);
 8007a68:	f7ff ffba 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	4b05      	ldr	r3, [pc, #20]	; (8007a84 <HAL_RCC_GetPCLK3Freq+0x20>)
 8007a70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a72:	091b      	lsrs	r3, r3, #4
 8007a74:	f003 0307 	and.w	r3, r3, #7
 8007a78:	4903      	ldr	r1, [pc, #12]	; (8007a88 <HAL_RCC_GetPCLK3Freq+0x24>)
 8007a7a:	5ccb      	ldrb	r3, [r1, r3]
 8007a7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007a80:	4618      	mov	r0, r3
 8007a82:	bd80      	pop	{r7, pc}
 8007a84:	46020c00 	.word	0x46020c00
 8007a88:	08010c60 	.word	0x08010c60

08007a8c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *pRCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
 8007a94:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(pRCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  pRCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | \
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	221f      	movs	r2, #31
 8007a9a:	601a      	str	r2, [r3, #0]
                                  RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_PCLK3;

  /* Get the SYSCLK configuration --------------------------------------------*/
  pRCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR1 & RCC_CFGR1_SW);
 8007a9c:	4b15      	ldr	r3, [pc, #84]	; (8007af4 <HAL_RCC_GetClockConfig+0x68>)
 8007a9e:	69db      	ldr	r3, [r3, #28]
 8007aa0:	f003 0203 	and.w	r2, r3, #3
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_HPRE);
 8007aa8:	4b12      	ldr	r3, [pc, #72]	; (8007af4 <HAL_RCC_GetClockConfig+0x68>)
 8007aaa:	6a1b      	ldr	r3, [r3, #32]
 8007aac:	f003 020f 	and.w	r2, r3, #15
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR2 & RCC_CFGR2_PPRE1);
 8007ab4:	4b0f      	ldr	r3, [pc, #60]	; (8007af4 <HAL_RCC_GetClockConfig+0x68>)
 8007ab6:	6a1b      	ldr	r3, [r3, #32]
 8007ab8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR2 & RCC_CFGR2_PPRE2) >> 4);
 8007ac0:	4b0c      	ldr	r3, [pc, #48]	; (8007af4 <HAL_RCC_GetClockConfig+0x68>)
 8007ac2:	6a1b      	ldr	r3, [r3, #32]
 8007ac4:	091b      	lsrs	r3, r3, #4
 8007ac6:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	611a      	str	r2, [r3, #16]

  /* Get the APB3 configuration ----------------------------------------------*/
  pRCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->CFGR3 & RCC_CFGR3_PPRE3);
 8007ace:	4b09      	ldr	r3, [pc, #36]	; (8007af4 <HAL_RCC_GetClockConfig+0x68>)
 8007ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	615a      	str	r2, [r3, #20]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007ada:	4b07      	ldr	r3, [pc, #28]	; (8007af8 <HAL_RCC_GetClockConfig+0x6c>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f003 020f 	and.w	r2, r3, #15
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	601a      	str	r2, [r3, #0]
}
 8007ae6:	bf00      	nop
 8007ae8:	370c      	adds	r7, #12
 8007aea:	46bd      	mov	sp, r7
 8007aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af0:	4770      	bx	lr
 8007af2:	bf00      	nop
 8007af4:	46020c00 	.word	0x46020c00
 8007af8:	40022000 	.word	0x40022000

08007afc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_15
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b086      	sub	sp, #24
 8007b00:	af00      	add	r7, sp, #0
 8007b02:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency;  /* default value 0WS */

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007b04:	4b3e      	ldr	r3, [pc, #248]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d003      	beq.n	8007b1a <RCC_SetFlashLatencyFromMSIRange+0x1e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007b12:	f7fe fd81 	bl	8006618 <HAL_PWREx_GetVoltageRange>
 8007b16:	6178      	str	r0, [r7, #20]
 8007b18:	e019      	b.n	8007b4e <RCC_SetFlashLatencyFromMSIRange+0x52>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007b1a:	4b39      	ldr	r3, [pc, #228]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b20:	4a37      	ldr	r2, [pc, #220]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b22:	f043 0304 	orr.w	r3, r3, #4
 8007b26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 8007b2a:	4b35      	ldr	r3, [pc, #212]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b30:	f003 0304 	and.w	r3, r3, #4
 8007b34:	60fb      	str	r3, [r7, #12]
 8007b36:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007b38:	f7fe fd6e 	bl	8006618 <HAL_PWREx_GetVoltageRange>
 8007b3c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8007b3e:	4b30      	ldr	r3, [pc, #192]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b40:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007b44:	4a2e      	ldr	r2, [pc, #184]	; (8007c00 <RCC_SetFlashLatencyFromMSIRange+0x104>)
 8007b46:	f023 0304 	bic.w	r3, r3, #4
 8007b4a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE1) || (vos == PWR_REGULATOR_VOLTAGE_SCALE2))
 8007b4e:	697b      	ldr	r3, [r7, #20]
 8007b50:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8007b54:	d003      	beq.n	8007b5e <RCC_SetFlashLatencyFromMSIRange+0x62>
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007b5c:	d109      	bne.n	8007b72 <RCC_SetFlashLatencyFromMSIRange+0x76>
  {

    if (msirange < RCC_MSIRANGE_1)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b64:	d202      	bcs.n	8007b6c <RCC_SetFlashLatencyFromMSIRange+0x70>
    {
      /* MSI = 48Mhz */
      latency = FLASH_LATENCY_1; /* 1WS */
 8007b66:	2301      	movs	r3, #1
 8007b68:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007b6a:	e033      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
    else
    {
      /*  MSI < 48Mhz */
      latency = FLASH_LATENCY_0; /* 0WS */
 8007b6c:	2300      	movs	r3, #0
 8007b6e:	613b      	str	r3, [r7, #16]
    if (msirange < RCC_MSIRANGE_1)
 8007b70:	e030      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
    }
  }
  else
  {
    if (msirange < RCC_MSIRANGE_1)
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b78:	d208      	bcs.n	8007b8c <RCC_SetFlashLatencyFromMSIRange+0x90>
    {
      /* MSI = 48Mhz */
      if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007b7a:	697b      	ldr	r3, [r7, #20]
 8007b7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007b80:	d102      	bne.n	8007b88 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        latency = FLASH_LATENCY_3; /* 3WS */
 8007b82:	2303      	movs	r3, #3
 8007b84:	613b      	str	r3, [r7, #16]
 8007b86:	e025      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
      }
      else
      {
        return HAL_ERROR;
 8007b88:	2301      	movs	r3, #1
 8007b8a:	e035      	b.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
      }
    }
    else
    {
      if (msirange > RCC_MSIRANGE_2)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007b92:	d90f      	bls.n	8007bb4 <RCC_SetFlashLatencyFromMSIRange+0xb8>
      {
        if (vos == PWR_REGULATOR_VOLTAGE_SCALE4)
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d109      	bne.n	8007bae <RCC_SetFlashLatencyFromMSIRange+0xb2>
        {
          if (msirange > RCC_MSIRANGE_3)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8007ba0:	d902      	bls.n	8007ba8 <RCC_SetFlashLatencyFromMSIRange+0xac>
          {
            latency = FLASH_LATENCY_0; /* 1WS */
 8007ba2:	2300      	movs	r3, #0
 8007ba4:	613b      	str	r3, [r7, #16]
 8007ba6:	e015      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_1; /* 0WS */
 8007ba8:	2301      	movs	r3, #1
 8007baa:	613b      	str	r3, [r7, #16]
 8007bac:	e012      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_0; /* 0WS */
 8007bae:	2300      	movs	r3, #0
 8007bb0:	613b      	str	r3, [r7, #16]
 8007bb2:	e00f      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
        }
      }
      else
      {
        if (msirange == RCC_MSIRANGE_1)
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007bba:	d109      	bne.n	8007bd0 <RCC_SetFlashLatencyFromMSIRange+0xd4>
        {
          if (vos == PWR_REGULATOR_VOLTAGE_SCALE3)
 8007bbc:	697b      	ldr	r3, [r7, #20]
 8007bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bc2:	d102      	bne.n	8007bca <RCC_SetFlashLatencyFromMSIRange+0xce>
          {
            latency = FLASH_LATENCY_1; /* 1WS */
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	613b      	str	r3, [r7, #16]
 8007bc8:	e004      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
          else
          {
            latency = FLASH_LATENCY_2; /* 2WS */
 8007bca:	2302      	movs	r3, #2
 8007bcc:	613b      	str	r3, [r7, #16]
 8007bce:	e001      	b.n	8007bd4 <RCC_SetFlashLatencyFromMSIRange+0xd8>
          }
        }
        else
        {
          latency = FLASH_LATENCY_1; /* 1WS */
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007bd4:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f023 020f 	bic.w	r2, r3, #15
 8007bdc:	4909      	ldr	r1, [pc, #36]	; (8007c04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	4313      	orrs	r3, r2
 8007be2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
  memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8007be4:	4b07      	ldr	r3, [pc, #28]	; (8007c04 <RCC_SetFlashLatencyFromMSIRange+0x108>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	f003 030f 	and.w	r3, r3, #15
 8007bec:	693a      	ldr	r2, [r7, #16]
 8007bee:	429a      	cmp	r2, r3
 8007bf0:	d001      	beq.n	8007bf6 <RCC_SetFlashLatencyFromMSIRange+0xfa>
  {
    return HAL_ERROR;
 8007bf2:	2301      	movs	r3, #1
 8007bf4:	e000      	b.n	8007bf8 <RCC_SetFlashLatencyFromMSIRange+0xfc>
  }

  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3718      	adds	r7, #24
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}
 8007c00:	46020c00 	.word	0x46020c00
 8007c04:	40022000 	.word	0x40022000

08007c08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *pPeriphClkInit)
{
 8007c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c0c:	b0ba      	sub	sp, #232	; 0xe8
 8007c0e:	af00      	add	r7, sp, #0
 8007c10:	f8c7 00d4 	str.w	r0, [r7, #212]	; 0xd4
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007c14:	2300      	movs	r3, #0
 8007c16:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(pPeriphClkInit->PeriphClockSelection));

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007c20:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c28:	f002 0401 	and.w	r4, r2, #1
 8007c2c:	2500      	movs	r5, #0
 8007c2e:	ea54 0305 	orrs.w	r3, r4, r5
 8007c32:	d00b      	beq.n	8007c4c <HAL_RCCEx_PeriphCLKConfig+0x44>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(pPeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(pPeriphClkInit->Usart1ClockSelection);
 8007c34:	4bcb      	ldr	r3, [pc, #812]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c3a:	f023 0103 	bic.w	r1, r3, #3
 8007c3e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c42:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007c44:	4ac7      	ldr	r2, [pc, #796]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c46:	430b      	orrs	r3, r1
 8007c48:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

#if defined(USART2)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007c4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c54:	f002 0802 	and.w	r8, r2, #2
 8007c58:	f04f 0900 	mov.w	r9, #0
 8007c5c:	ea58 0309 	orrs.w	r3, r8, r9
 8007c60:	d00b      	beq.n	8007c7a <HAL_RCCEx_PeriphCLKConfig+0x72>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(pPeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(pPeriphClkInit->Usart2ClockSelection);
 8007c62:	4bc0      	ldr	r3, [pc, #768]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c68:	f023 010c 	bic.w	r1, r3, #12
 8007c6c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007c72:	4abc      	ldr	r2, [pc, #752]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c74:	430b      	orrs	r3, r1
 8007c76:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }
#endif /* USART2 */

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007c7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c82:	f002 0a04 	and.w	sl, r2, #4
 8007c86:	f04f 0b00 	mov.w	fp, #0
 8007c8a:	ea5a 030b 	orrs.w	r3, sl, fp
 8007c8e:	d00b      	beq.n	8007ca8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(pPeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(pPeriphClkInit->Usart3ClockSelection);
 8007c90:	4bb4      	ldr	r3, [pc, #720]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007c92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007c96:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8007c9a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007ca0:	4ab0      	ldr	r2, [pc, #704]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ca2:	430b      	orrs	r3, r1
 8007ca4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007ca8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cb0:	f002 0308 	and.w	r3, r2, #8
 8007cb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cb8:	2300      	movs	r3, #0
 8007cba:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cbe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8007cc2:	460b      	mov	r3, r1
 8007cc4:	4313      	orrs	r3, r2
 8007cc6:	d00b      	beq.n	8007ce0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(pPeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(pPeriphClkInit->Uart4ClockSelection);
 8007cc8:	4ba6      	ldr	r3, [pc, #664]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007cce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007cd2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007cd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cd8:	4aa2      	ldr	r2, [pc, #648]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007cda:	430b      	orrs	r3, r1
 8007cdc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8007ce0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ce8:	f002 0310 	and.w	r3, r2, #16
 8007cec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007cf6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	4313      	orrs	r3, r2
 8007cfe:	d00b      	beq.n	8007d18 <HAL_RCCEx_PeriphCLKConfig+0x110>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(pPeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(pPeriphClkInit->Uart5ClockSelection);
 8007d00:	4b98      	ldr	r3, [pc, #608]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d06:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007d0a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d0e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d10:	4a94      	ldr	r2, [pc, #592]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d12:	430b      	orrs	r3, r1
 8007d14:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_USART6_CONFIG(pPeriphClkInit->Usart6ClockSelection);
  }
#endif /* USART6 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007d18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d20:	f002 0320 	and.w	r3, r2, #32
 8007d24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007d2e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8007d32:	460b      	mov	r3, r1
 8007d34:	4313      	orrs	r3, r2
 8007d36:	d00b      	beq.n	8007d50 <HAL_RCCEx_PeriphCLKConfig+0x148>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(pPeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(pPeriphClkInit->Lpuart1ClockSelection);
 8007d38:	4b8a      	ldr	r3, [pc, #552]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d3a:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007d3e:	f023 0107 	bic.w	r1, r3, #7
 8007d42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d46:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007d48:	4a86      	ldr	r2, [pc, #536]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d4a:	430b      	orrs	r3, r1
 8007d4c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007d50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d58:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8007d5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d60:	2300      	movs	r3, #0
 8007d62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8007d6a:	460b      	mov	r3, r1
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	d00b      	beq.n	8007d88 <HAL_RCCEx_PeriphCLKConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(pPeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(pPeriphClkInit->I2c1ClockSelection);
 8007d70:	4b7c      	ldr	r3, [pc, #496]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d72:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007d76:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d7e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007d80:	4a78      	ldr	r2, [pc, #480]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007d82:	430b      	orrs	r3, r1
 8007d84:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007d88:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d90:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8007d94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d98:	2300      	movs	r3, #0
 8007d9a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007d9e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007da2:	460b      	mov	r3, r1
 8007da4:	4313      	orrs	r3, r2
 8007da6:	d00b      	beq.n	8007dc0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(pPeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(pPeriphClkInit->I2c2ClockSelection);
 8007da8:	4b6e      	ldr	r3, [pc, #440]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007daa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007dae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007db2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007db6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007db8:	4a6a      	ldr	r2, [pc, #424]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007dba:	430b      	orrs	r3, r1
 8007dbc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007dc0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007dc8:	f402 7380 	and.w	r3, r2, #256	; 0x100
 8007dcc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8007dd6:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8007dda:	460b      	mov	r3, r1
 8007ddc:	4313      	orrs	r3, r2
 8007dde:	d00b      	beq.n	8007df8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(pPeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(pPeriphClkInit->I2c3ClockSelection);
 8007de0:	4b60      	ldr	r3, [pc, #384]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007de2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007de6:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8007dea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007df0:	4a5c      	ldr	r2, [pc, #368]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007df2:	430b      	orrs	r3, r1
 8007df4:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8007df8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e00:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8007e04:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e08:	2300      	movs	r3, #0
 8007e0a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e0e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8007e12:	460b      	mov	r3, r1
 8007e14:	4313      	orrs	r3, r2
 8007e16:	d00b      	beq.n	8007e30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(pPeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(pPeriphClkInit->I2c4ClockSelection);
 8007e18:	4b52      	ldr	r3, [pc, #328]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e1e:	f423 4140 	bic.w	r1, r3, #49152	; 0xc000
 8007e22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007e28:	4a4e      	ldr	r2, [pc, #312]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e2a:	430b      	orrs	r3, r1
 8007e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
    __HAL_RCC_I2C6_CONFIG(pPeriphClkInit->I2c6ClockSelection);
  }
#endif /* I2C6 */

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007e30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e38:	f402 7300 	and.w	r3, r2, #512	; 0x200
 8007e3c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e40:	2300      	movs	r3, #0
 8007e42:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007e46:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	d00b      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x260>
  {
    assert_param(IS_RCC_LPTIM1CLK(pPeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(pPeriphClkInit->Lptim1ClockSelection);
 8007e50:	4b44      	ldr	r3, [pc, #272]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007e56:	f423 6140 	bic.w	r1, r3, #3072	; 0xc00
 8007e5a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e5e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007e60:	4a40      	ldr	r2, [pc, #256]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e62:	430b      	orrs	r3, r1
 8007e64:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007e68:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007e70:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8007e74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e78:	2300      	movs	r3, #0
 8007e7a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007e7e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8007e82:	460b      	mov	r3, r1
 8007e84:	4313      	orrs	r3, r2
 8007e86:	d00b      	beq.n	8007ea0 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    assert_param(IS_RCC_LPTIM2CLK(pPeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(pPeriphClkInit->Lptim2ClockSelection);
 8007e88:	4b36      	ldr	r3, [pc, #216]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e8a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8007e8e:	f423 2140 	bic.w	r1, r3, #786432	; 0xc0000
 8007e92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007e96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007e98:	4a32      	ldr	r2, [pc, #200]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007e9a:	430b      	orrs	r3, r1
 8007e9c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
  }

  /*-------------------------- LPTIM34 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM34) == (RCC_PERIPHCLK_LPTIM34))
 8007ea0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ea8:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8007eac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007eb0:	2300      	movs	r3, #0
 8007eb2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007eb6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8007eba:	460b      	mov	r3, r1
 8007ebc:	4313      	orrs	r3, r2
 8007ebe:	d00c      	beq.n	8007eda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    assert_param(IS_RCC_LPTIM34CLK(pPeriphClkInit->Lptim34ClockSelection));
    __HAL_RCC_LPTIM34_CONFIG(pPeriphClkInit->Lptim34ClockSelection);
 8007ec0:	4b28      	ldr	r3, [pc, #160]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ec2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8007ec6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8007eca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ece:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007ed2:	4a24      	ldr	r2, [pc, #144]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007ed4:	430b      	orrs	r3, r1
 8007ed6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007eda:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007ee2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8007ee6:	67bb      	str	r3, [r7, #120]	; 0x78
 8007ee8:	2300      	movs	r3, #0
 8007eea:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007eec:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8007ef0:	460b      	mov	r3, r1
 8007ef2:	4313      	orrs	r3, r2
 8007ef4:	d04f      	beq.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(pPeriphClkInit->Sai1ClockSelection));

    switch (pPeriphClkInit->Sai1ClockSelection)
 8007ef6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007efe:	2b80      	cmp	r3, #128	; 0x80
 8007f00:	d02d      	beq.n	8007f5e <HAL_RCCEx_PeriphCLKConfig+0x356>
 8007f02:	2b80      	cmp	r3, #128	; 0x80
 8007f04:	d827      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f06:	2b60      	cmp	r3, #96	; 0x60
 8007f08:	d02e      	beq.n	8007f68 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8007f0a:	2b60      	cmp	r3, #96	; 0x60
 8007f0c:	d823      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f0e:	2b40      	cmp	r3, #64	; 0x40
 8007f10:	d006      	beq.n	8007f20 <HAL_RCCEx_PeriphCLKConfig+0x318>
 8007f12:	2b40      	cmp	r3, #64	; 0x40
 8007f14:	d81f      	bhi.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d009      	beq.n	8007f2e <HAL_RCCEx_PeriphCLKConfig+0x326>
 8007f1a:	2b20      	cmp	r3, #32
 8007f1c:	d011      	beq.n	8007f42 <HAL_RCCEx_PeriphCLKConfig+0x33a>
 8007f1e:	e01a      	b.n	8007f56 <HAL_RCCEx_PeriphCLKConfig+0x34e>
    {
      case RCC_SAI1CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007f20:	4b10      	ldr	r3, [pc, #64]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f24:	4a0f      	ldr	r2, [pc, #60]	; (8007f64 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007f2a:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f2c:	e01d      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for SAI1*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007f2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f32:	3308      	adds	r3, #8
 8007f34:	4618      	mov	r0, r3
 8007f36:	f002 fa41 	bl	800a3bc <RCCEx_PLL2_Config>
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f40:	e013      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        /* PLL3 P input clock, parameters M, N & P configuration clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8007f42:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f46:	332c      	adds	r3, #44	; 0x2c
 8007f48:	4618      	mov	r0, r3
 8007f4a:	f002 facf 	bl	800a4ec <RCCEx_PLL3_Config>
 8007f4e:	4603      	mov	r3, r0
 8007f50:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI1 clock source config set later after clock selection check */
        break;
 8007f54:	e009      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8007f56:	2301      	movs	r3, #1
 8007f58:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8007f5c:	e005      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
        break;
 8007f5e:	bf00      	nop
 8007f60:	e003      	b.n	8007f6a <HAL_RCCEx_PeriphCLKConfig+0x362>
 8007f62:	bf00      	nop
 8007f64:	46020c00 	.word	0x46020c00
        break;
 8007f68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8007f6a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d10d      	bne.n	8007f8e <HAL_RCCEx_PeriphCLKConfig+0x386>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(pPeriphClkInit->Sai1ClockSelection);
 8007f72:	4bb6      	ldr	r3, [pc, #728]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f74:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8007f78:	f023 01e0 	bic.w	r1, r3, #224	; 0xe0
 8007f7c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007f84:	4ab1      	ldr	r2, [pc, #708]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007f86:	430b      	orrs	r3, r1
 8007f88:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8007f8c:	e003      	b.n	8007f96 <HAL_RCCEx_PeriphCLKConfig+0x38e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007f8e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8007f92:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

#if defined(SAI2)
  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007f96:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007f9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f9e:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8007fa2:	673b      	str	r3, [r7, #112]	; 0x70
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	677b      	str	r3, [r7, #116]	; 0x74
 8007fa8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8007fac:	460b      	mov	r3, r1
 8007fae:	4313      	orrs	r3, r2
 8007fb0:	d053      	beq.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(pPeriphClkInit->Sai2ClockSelection));

    switch (pPeriphClkInit->Sai2ClockSelection)
 8007fb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007fb6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007fba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fbe:	d033      	beq.n	8008028 <HAL_RCCEx_PeriphCLKConfig+0x420>
 8007fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007fc4:	d82c      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007fc6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fca:	d02f      	beq.n	800802c <HAL_RCCEx_PeriphCLKConfig+0x424>
 8007fcc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007fd0:	d826      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fd6:	d008      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
 8007fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007fdc:	d820      	bhi.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x418>
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d00a      	beq.n	8007ff8 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
 8007fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007fe6:	d011      	beq.n	800800c <HAL_RCCEx_PeriphCLKConfig+0x404>
 8007fe8:	e01a      	b.n	8008020 <HAL_RCCEx_PeriphCLKConfig+0x418>
    {
      case RCC_SAI2CLKSOURCE_PLL1:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8007fea:	4b98      	ldr	r3, [pc, #608]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fee:	4a97      	ldr	r2, [pc, #604]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8007ff0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ff4:	6293      	str	r3, [r2, #40]	; 0x28
        /* SAI2 clock source config set later after clock selection check */
        break;
 8007ff6:	e01a      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/
        /* PLL2 P input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8007ff8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ffc:	3308      	adds	r3, #8
 8007ffe:	4618      	mov	r0, r3
 8008000:	f002 f9dc 	bl	800a3bc <RCCEx_PLL2_Config>
 8008004:	4603      	mov	r3, r0
 8008006:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800800a:	e010      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x426>

      case RCC_SAI2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        /* PLL3 P input clock, parameters M, N & P configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 800800c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008010:	332c      	adds	r3, #44	; 0x2c
 8008012:	4618      	mov	r0, r3
 8008014:	f002 fa6a 	bl	800a4ec <RCCEx_PLL3_Config>
 8008018:	4603      	mov	r3, r0
 800801a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* SAI2 clock source config set later after clock selection check */
        break;
 800801e:	e006      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x426>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008026:	e002      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 8008028:	bf00      	nop
 800802a:	e000      	b.n	800802e <HAL_RCCEx_PeriphCLKConfig+0x426>
        break;
 800802c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800802e:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008032:	2b00      	cmp	r3, #0
 8008034:	d10d      	bne.n	8008052 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(pPeriphClkInit->Sai2ClockSelection);
 8008036:	4b85      	ldr	r3, [pc, #532]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008038:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800803c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8008040:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008048:	4a80      	ldr	r2, [pc, #512]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800804a:	430b      	orrs	r3, r1
 800804c:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008050:	e003      	b.n	800805a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008052:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008056:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* SAI2 */

  /*-------------------------- ADCDAC clock source configuration ----------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADCDAC) == RCC_PERIPHCLK_ADCDAC)
 800805a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800805e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008062:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8008066:	66bb      	str	r3, [r7, #104]	; 0x68
 8008068:	2300      	movs	r3, #0
 800806a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800806c:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8008070:	460b      	mov	r3, r1
 8008072:	4313      	orrs	r3, r2
 8008074:	d046      	beq.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCDACCLKSOURCE(pPeriphClkInit->AdcDacClockSelection));

    switch (pPeriphClkInit->AdcDacClockSelection)
 8008076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800807a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800807e:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008082:	d028      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008084:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8008088:	d821      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 800808a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800808e:	d022      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 8008090:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008094:	d81b      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 8008096:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800809a:	d01c      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 800809c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80080a0:	d815      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80080a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080a6:	d008      	beq.n	80080ba <HAL_RCCEx_PeriphCLKConfig+0x4b2>
 80080a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080ac:	d80f      	bhi.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
 80080ae:	2b00      	cmp	r3, #0
 80080b0:	d011      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80080b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080b6:	d00e      	beq.n	80080d6 <HAL_RCCEx_PeriphCLKConfig+0x4ce>
 80080b8:	e009      	b.n	80080ce <HAL_RCCEx_PeriphCLKConfig+0x4c6>
    {
      case RCC_ADCDACCLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P, & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80080ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080be:	3308      	adds	r3, #8
 80080c0:	4618      	mov	r0, r3
 80080c2:	f002 f97b 	bl	800a3bc <RCCEx_PLL2_Config>
 80080c6:	4603      	mov	r3, r0
 80080c8:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80080cc:	e004      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
      case RCC_ADCDACCLKSOURCE_HSE:
      case RCC_ADCDACCLKSOURCE_HSI:
      case RCC_ADCDACCLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 80080ce:	2301      	movs	r3, #1
 80080d0:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80080d4:	e000      	b.n	80080d8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
        break;
 80080d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80080d8:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d10d      	bne.n	80080fc <HAL_RCCEx_PeriphCLKConfig+0x4f4>
    {
      /* Configure the ADC1 interface clock source */
      __HAL_RCC_ADCDAC_CONFIG(pPeriphClkInit->AdcDacClockSelection);
 80080e0:	4b5a      	ldr	r3, [pc, #360]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80080e6:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80080ea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80080f2:	4a56      	ldr	r2, [pc, #344]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80080f4:	430b      	orrs	r3, r1
 80080f6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80080fa:	e003      	b.n	8008104 <HAL_RCCEx_PeriphCLKConfig+0x4fc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80080fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008100:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- MDF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_MDF1) == RCC_PERIPHCLK_MDF1)
 8008104:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800810c:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8008110:	663b      	str	r3, [r7, #96]	; 0x60
 8008112:	2300      	movs	r3, #0
 8008114:	667b      	str	r3, [r7, #100]	; 0x64
 8008116:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800811a:	460b      	mov	r3, r1
 800811c:	4313      	orrs	r3, r2
 800811e:	d03f      	beq.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
  {
    /* Check the parameters */
    assert_param(IS_RCC_MDF1CLKSOURCE(pPeriphClkInit->Mdf1ClockSelection));

    switch (pPeriphClkInit->Mdf1ClockSelection)
 8008120:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008128:	2b04      	cmp	r3, #4
 800812a:	d81e      	bhi.n	800816a <HAL_RCCEx_PeriphCLKConfig+0x562>
 800812c:	a201      	add	r2, pc, #4	; (adr r2, 8008134 <HAL_RCCEx_PeriphCLKConfig+0x52c>)
 800812e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008132:	bf00      	nop
 8008134:	08008173 	.word	0x08008173
 8008138:	08008149 	.word	0x08008149
 800813c:	08008157 	.word	0x08008157
 8008140:	08008173 	.word	0x08008173
 8008144:	08008173 	.word	0x08008173
    {
      case RCC_MDF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008148:	4b40      	ldr	r3, [pc, #256]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800814a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800814c:	4a3f      	ldr	r2, [pc, #252]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800814e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008152:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008154:	e00e      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008156:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800815a:	332c      	adds	r3, #44	; 0x2c
 800815c:	4618      	mov	r0, r3
 800815e:	f002 f9c5 	bl	800a4ec <RCCEx_PLL3_Config>
 8008162:	4603      	mov	r3, r0
 8008164:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008168:	e004      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
      case RCC_MDF1CLKSOURCE_PIN:
        break;
      case RCC_MDF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 800816a:	2301      	movs	r3, #1
 800816c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008170:	e000      	b.n	8008174 <HAL_RCCEx_PeriphCLKConfig+0x56c>
        break;
 8008172:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008174:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008178:	2b00      	cmp	r3, #0
 800817a:	d10d      	bne.n	8008198 <HAL_RCCEx_PeriphCLKConfig+0x590>
    {
      /* Configure the MDF1 interface clock source */
      __HAL_RCC_MDF1_CONFIG(pPeriphClkInit->Mdf1ClockSelection);
 800817c:	4b33      	ldr	r3, [pc, #204]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 800817e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008182:	f023 0107 	bic.w	r1, r3, #7
 8008186:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800818a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800818e:	4a2f      	ldr	r2, [pc, #188]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008190:	430b      	orrs	r3, r1
 8008192:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 8008196:	e003      	b.n	80081a0 <HAL_RCCEx_PeriphCLKConfig+0x598>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008198:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800819c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- ADF1 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADF1) == RCC_PERIPHCLK_ADF1)
 80081a0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80081ac:	65bb      	str	r3, [r7, #88]	; 0x58
 80081ae:	2300      	movs	r3, #0
 80081b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80081b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80081b6:	460b      	mov	r3, r1
 80081b8:	4313      	orrs	r3, r2
 80081ba:	d04d      	beq.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADF1CLKSOURCE(pPeriphClkInit->Adf1ClockSelection));
    switch (pPeriphClkInit->Adf1ClockSelection)
 80081bc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80081c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081c4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081c8:	d028      	beq.n	800821c <HAL_RCCEx_PeriphCLKConfig+0x614>
 80081ca:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80081ce:	d821      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80081d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081d4:	d024      	beq.n	8008220 <HAL_RCCEx_PeriphCLKConfig+0x618>
 80081d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80081da:	d81b      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80081dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e0:	d00e      	beq.n	8008200 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
 80081e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80081e6:	d815      	bhi.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x60c>
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01b      	beq.n	8008224 <HAL_RCCEx_PeriphCLKConfig+0x61c>
 80081ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80081f0:	d110      	bne.n	8008214 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    {
      case RCC_ADF1CLKSOURCE_PLL1:
        /* Enable PLL1 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80081f2:	4b16      	ldr	r3, [pc, #88]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80081f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80081f6:	4a15      	ldr	r2, [pc, #84]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 80081f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80081fc:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 80081fe:	e012      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PLL3:
        /* PLL3 Q input clock, parameters M, N & Q configuration and clock output (PLL3ClockOut) */
        ret = RCCEx_PLL3_Config(&(pPeriphClkInit->PLL3));
 8008200:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008204:	332c      	adds	r3, #44	; 0x2c
 8008206:	4618      	mov	r0, r3
 8008208:	f002 f970 	bl	800a4ec <RCCEx_PLL3_Config>
 800820c:	4603      	mov	r3, r0
 800820e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008212:	e008      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      case RCC_ADF1CLKSOURCE_PIN:
        break;
      case RCC_ADF1CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008214:	2301      	movs	r3, #1
 8008216:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800821a:	e004      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 800821c:	bf00      	nop
 800821e:	e002      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008220:	bf00      	nop
 8008222:	e000      	b.n	8008226 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        break;
 8008224:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008226:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d110      	bne.n	8008250 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      /* Configure the ADF1 interface clock source */
      __HAL_RCC_ADF1_CONFIG(pPeriphClkInit->Adf1ClockSelection);
 800822e:	4b07      	ldr	r3, [pc, #28]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008230:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008234:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8008238:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800823c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008240:	4a02      	ldr	r2, [pc, #8]	; (800824c <HAL_RCCEx_PeriphCLKConfig+0x644>)
 8008242:	430b      	orrs	r3, r1
 8008244:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008248:	e006      	b.n	8008258 <HAL_RCCEx_PeriphCLKConfig+0x650>
 800824a:	bf00      	nop
 800824c:	46020c00 	.word	0x46020c00
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008250:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008254:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((pPeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008258:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800825c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008260:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8008264:	653b      	str	r3, [r7, #80]	; 0x50
 8008266:	2300      	movs	r3, #0
 8008268:	657b      	str	r3, [r7, #84]	; 0x54
 800826a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800826e:	460b      	mov	r3, r1
 8008270:	4313      	orrs	r3, r2
 8008272:	f000 80b5 	beq.w	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008276:	2300      	movs	r3, #0
 8008278:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(pPeriphClkInit->RTCClockSelection));
    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800827c:	4b9d      	ldr	r3, [pc, #628]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800827e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008282:	f003 0304 	and.w	r3, r3, #4
 8008286:	2b00      	cmp	r3, #0
 8008288:	d113      	bne.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x6aa>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800828a:	4b9a      	ldr	r3, [pc, #616]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800828c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008290:	4a98      	ldr	r2, [pc, #608]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008292:	f043 0304 	orr.w	r3, r3, #4
 8008296:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800829a:	4b96      	ldr	r3, [pc, #600]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800829c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80082a0:	f003 0304 	and.w	r3, r3, #4
 80082a4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80082a8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
      pwrclkchanged = SET;
 80082ac:	2301      	movs	r3, #1
 80082ae:	f887 30e1 	strb.w	r3, [r7, #225]	; 0xe1
    }
    /* Enable write access to Backup domain */
    SET_BIT(PWR->DBPR, PWR_DBPR_DBP);
 80082b2:	4b91      	ldr	r3, [pc, #580]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082b6:	4a90      	ldr	r2, [pc, #576]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082b8:	f043 0301 	orr.w	r3, r3, #1
 80082bc:	6293      	str	r3, [r2, #40]	; 0x28

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80082be:	f7fb fdfd 	bl	8003ebc <HAL_GetTick>
 80082c2:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082c6:	e00b      	b.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80082c8:	f7fb fdf8 	bl	8003ebc <HAL_GetTick>
 80082cc:	4602      	mov	r2, r0
 80082ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80082d2:	1ad3      	subs	r3, r2, r3
 80082d4:	2b02      	cmp	r3, #2
 80082d6:	d903      	bls.n	80082e0 <HAL_RCCEx_PeriphCLKConfig+0x6d8>
      {
        ret = HAL_TIMEOUT;
 80082d8:	2303      	movs	r3, #3
 80082da:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80082de:	e005      	b.n	80082ec <HAL_RCCEx_PeriphCLKConfig+0x6e4>
    while (HAL_IS_BIT_CLR(PWR->DBPR, PWR_DBPR_DBP))
 80082e0:	4b85      	ldr	r3, [pc, #532]	; (80084f8 <HAL_RCCEx_PeriphCLKConfig+0x8f0>)
 80082e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e4:	f003 0301 	and.w	r3, r3, #1
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d0ed      	beq.n	80082c8 <HAL_RCCEx_PeriphCLKConfig+0x6c0>
      }
    }

    if (ret == HAL_OK)
 80082ec:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d165      	bne.n	80083c0 <HAL_RCCEx_PeriphCLKConfig+0x7b8>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80082f4:	4b7f      	ldr	r3, [pc, #508]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80082f6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80082fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

      if ((tmpregister != RCC_RTCCLKSOURCE_NO_CLK) && (tmpregister != pPeriphClkInit->RTCClockSelection))
 8008302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008306:	2b00      	cmp	r3, #0
 8008308:	d023      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x74a>
 800830a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800830e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8008312:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008316:	4293      	cmp	r3, r2
 8008318:	d01b      	beq.n	8008352 <HAL_RCCEx_PeriphCLKConfig+0x74a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800831a:	4b76      	ldr	r3, [pc, #472]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800831c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8008320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008324:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8008328:	4b72      	ldr	r3, [pc, #456]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800832a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800832e:	4a71      	ldr	r2, [pc, #452]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008330:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008334:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        __HAL_RCC_BACKUPRESET_RELEASE();
 8008338:	4b6e      	ldr	r3, [pc, #440]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800833a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800833e:	4a6d      	ldr	r2, [pc, #436]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008344:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8008348:	4a6a      	ldr	r2, [pc, #424]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800834a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800834e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8008352:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008356:	f003 0301 	and.w	r3, r3, #1
 800835a:	2b00      	cmp	r3, #0
 800835c:	d019      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x78a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800835e:	f7fb fdad 	bl	8003ebc <HAL_GetTick>
 8008362:	f8c7 00dc 	str.w	r0, [r7, #220]	; 0xdc

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008366:	e00d      	b.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x77c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008368:	f7fb fda8 	bl	8003ebc <HAL_GetTick>
 800836c:	4602      	mov	r2, r0
 800836e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008372:	1ad2      	subs	r2, r2, r3
 8008374:	f241 3388 	movw	r3, #5000	; 0x1388
 8008378:	429a      	cmp	r2, r3
 800837a:	d903      	bls.n	8008384 <HAL_RCCEx_PeriphCLKConfig+0x77c>
          {
            ret = HAL_TIMEOUT;
 800837c:	2303      	movs	r3, #3
 800837e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
            break;
 8008382:	e006      	b.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0x78a>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008384:	4b5b      	ldr	r3, [pc, #364]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008386:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800838a:	f003 0302 	and.w	r3, r3, #2
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0ea      	beq.n	8008368 <HAL_RCCEx_PeriphCLKConfig+0x760>
          }
        }
      }

      if (ret == HAL_OK)
 8008392:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10d      	bne.n	80083b6 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(pPeriphClkInit->RTCClockSelection);
 800839a:	4b56      	ldr	r3, [pc, #344]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800839c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80083a0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80083a4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083a8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80083ac:	4a51      	ldr	r2, [pc, #324]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80083ae:	430b      	orrs	r3, r1
 80083b0:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80083b4:	e008      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80083b6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80083ba:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
 80083be:	e003      	b.n	80083c8 <HAL_RCCEx_PeriphCLKConfig+0x7c0>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80083c0:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80083c4:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80083c8:	f897 30e1 	ldrb.w	r3, [r7, #225]	; 0xe1
 80083cc:	2b01      	cmp	r3, #1
 80083ce:	d107      	bne.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80083d0:	4b48      	ldr	r3, [pc, #288]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80083d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80083d6:	4a47      	ldr	r2, [pc, #284]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80083d8:	f023 0304 	bic.w	r3, r3, #4
 80083dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
    }
  }

  /*-------------------------------------- ICLK Configuration -----------------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ICLK) == RCC_PERIPHCLK_ICLK)
 80083e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80083e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80083ec:	64bb      	str	r3, [r7, #72]	; 0x48
 80083ee:	2300      	movs	r3, #0
 80083f0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80083f2:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80083f6:	460b      	mov	r3, r1
 80083f8:	4313      	orrs	r3, r2
 80083fa:	d042      	beq.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x87a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ICLKCLKSOURCE(pPeriphClkInit->IclkClockSelection));

    switch (pPeriphClkInit->IclkClockSelection)
 80083fc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008400:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008404:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8008408:	d022      	beq.n	8008450 <HAL_RCCEx_PeriphCLKConfig+0x848>
 800840a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800840e:	d81b      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x840>
 8008410:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008414:	d011      	beq.n	800843a <HAL_RCCEx_PeriphCLKConfig+0x832>
 8008416:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800841a:	d815      	bhi.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x840>
 800841c:	2b00      	cmp	r3, #0
 800841e:	d019      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x84c>
 8008420:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8008424:	d110      	bne.n	8008448 <HAL_RCCEx_PeriphCLKConfig+0x840>
    {
      case RCC_ICLK_CLKSOURCE_PLL2:
        /* PLL2 input clock, parameters M, N,P,Q & R configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008426:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800842a:	3308      	adds	r3, #8
 800842c:	4618      	mov	r0, r3
 800842e:	f001 ffc5 	bl	800a3bc <RCCEx_PLL2_Config>
 8008432:	4603      	mov	r3, r0
 8008434:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008438:	e00d      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_PLL1:
        /* Enable ICLK Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800843a:	4b2e      	ldr	r3, [pc, #184]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 800843c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800843e:	4a2d      	ldr	r2, [pc, #180]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008440:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008444:	6293      	str	r3, [r2, #40]	; 0x28
        break;
 8008446:	e006      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x84e>
      case RCC_ICLK_CLKSOURCE_HSI48:
        break;
      case RCC_ICLK_CLKSOURCE_MSIK:
        break;
      default:
        ret = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 800844e:	e002      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8008450:	bf00      	nop
 8008452:	e000      	b.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0x84e>
        break;
 8008454:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008456:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800845a:	2b00      	cmp	r3, #0
 800845c:	d10d      	bne.n	800847a <HAL_RCCEx_PeriphCLKConfig+0x872>
    {
      /* Configure the CLK48 source */
      __HAL_RCC_CLK48_CONFIG(pPeriphClkInit->IclkClockSelection);
 800845e:	4b25      	ldr	r3, [pc, #148]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008460:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008464:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8008468:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800846c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8008470:	4a20      	ldr	r2, [pc, #128]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 8008472:	430b      	orrs	r3, r1
 8008474:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008478:	e003      	b.n	8008482 <HAL_RCCEx_PeriphCLKConfig+0x87a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800847a:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800847e:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*------------------------------ RNG Configuration -------------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8008482:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800848a:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800848e:	643b      	str	r3, [r7, #64]	; 0x40
 8008490:	2300      	movs	r3, #0
 8008492:	647b      	str	r3, [r7, #68]	; 0x44
 8008494:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8008498:	460b      	mov	r3, r1
 800849a:	4313      	orrs	r3, r2
 800849c:	d032      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
  {

    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(pPeriphClkInit->RngClockSelection));

    switch (pPeriphClkInit->RngClockSelection)
 800849e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084a2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084aa:	d00b      	beq.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x8bc>
 80084ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80084b0:	d804      	bhi.n	80084bc <HAL_RCCEx_PeriphCLKConfig+0x8b4>
 80084b2:	2b00      	cmp	r3, #0
 80084b4:	d008      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x8c0>
 80084b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084ba:	d007      	beq.n	80084cc <HAL_RCCEx_PeriphCLKConfig+0x8c4>
      case RCC_RNGCLKSOURCE_HSI48:
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;
      default:
        ret = HAL_ERROR;
 80084bc:	2301      	movs	r3, #1
 80084be:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 80084c2:	e004      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80084c4:	bf00      	nop
 80084c6:	e002      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80084c8:	bf00      	nop
 80084ca:	e000      	b.n	80084ce <HAL_RCCEx_PeriphCLKConfig+0x8c6>
        break;
 80084cc:	bf00      	nop
    }
    if (ret == HAL_OK)
 80084ce:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80084d2:	2b00      	cmp	r3, #0
 80084d4:	d112      	bne.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x8f4>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(pPeriphClkInit->RngClockSelection);
 80084d6:	4b07      	ldr	r3, [pc, #28]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80084d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80084dc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80084e0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80084e4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80084e8:	4a02      	ldr	r2, [pc, #8]	; (80084f4 <HAL_RCCEx_PeriphCLKConfig+0x8ec>)
 80084ea:	430b      	orrs	r3, r1
 80084ec:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
 80084f0:	e008      	b.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x8fc>
 80084f2:	bf00      	nop
 80084f4:	46020c00 	.word	0x46020c00
 80084f8:	46020800 	.word	0x46020800
    }
    else
    {
      /* set overall return value */
      status = ret;
 80084fc:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008500:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
  /*-------------------------- SAES clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAES) == RCC_PERIPHCLK_SAES)
 8008504:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800850c:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8008510:	63bb      	str	r3, [r7, #56]	; 0x38
 8008512:	2300      	movs	r3, #0
 8008514:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008516:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800851a:	460b      	mov	r3, r1
 800851c:	4313      	orrs	r3, r2
 800851e:	d00c      	beq.n	800853a <HAL_RCCEx_PeriphCLKConfig+0x932>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAESCLKSOURCE(pPeriphClkInit->SaesClockSelection));

    /* Configure the SAES clock source */
    __HAL_RCC_SAES_CONFIG(pPeriphClkInit->SaesClockSelection);
 8008520:	4b98      	ldr	r3, [pc, #608]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008522:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008526:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 800852a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800852e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008532:	4a94      	ldr	r2, [pc, #592]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008534:	430b      	orrs	r3, r1
 8008536:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }
  /*-------------------------- SDMMC1/2 clock source configuration -------------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == (RCC_PERIPHCLK_SDMMC))
 800853a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800853e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008542:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8008546:	633b      	str	r3, [r7, #48]	; 0x30
 8008548:	2300      	movs	r3, #0
 800854a:	637b      	str	r3, [r7, #52]	; 0x34
 800854c:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8008550:	460b      	mov	r3, r1
 8008552:	4313      	orrs	r3, r2
 8008554:	d019      	beq.n	800858a <HAL_RCCEx_PeriphCLKConfig+0x982>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMCCLKSOURCE(pPeriphClkInit->SdmmcClockSelection));

    if (pPeriphClkInit->SdmmcClockSelection == RCC_SDMMCCLKSOURCE_PLL1)
 8008556:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800855a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800855e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008562:	d105      	bne.n	8008570 <HAL_RCCEx_PeriphCLKConfig+0x968>
    {
      /* Enable PLL1 P CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008564:	4b87      	ldr	r3, [pc, #540]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008568:	4a86      	ldr	r2, [pc, #536]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800856a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800856e:	6293      	str	r3, [r2, #40]	; 0x28
    }

    /* Configure the SDMMC1/2 clock source */
    __HAL_RCC_SDMMC_CONFIG(pPeriphClkInit->SdmmcClockSelection);
 8008570:	4b84      	ldr	r3, [pc, #528]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008572:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008576:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800857a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800857e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8008582:	4a80      	ldr	r2, [pc, #512]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008584:	430b      	orrs	r3, r1
 8008586:	f8c2 30e4 	str.w	r3, [r2, #228]	; 0xe4
  }

  /*-------------------------- SPI1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI1) == RCC_PERIPHCLK_SPI1)
 800858a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800858e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008592:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8008596:	62bb      	str	r3, [r7, #40]	; 0x28
 8008598:	2300      	movs	r3, #0
 800859a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800859c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80085a0:	460b      	mov	r3, r1
 80085a2:	4313      	orrs	r3, r2
 80085a4:	d00c      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x9b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI1CLKSOURCE(pPeriphClkInit->Spi1ClockSelection));

    /* Configure the SPI1 clock source */
    __HAL_RCC_SPI1_CONFIG(pPeriphClkInit->Spi1ClockSelection);
 80085a6:	4b77      	ldr	r3, [pc, #476]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085ac:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80085b0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80085b8:	4972      	ldr	r1, [pc, #456]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI2 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI2) == RCC_PERIPHCLK_SPI2)
 80085c0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085c8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80085cc:	623b      	str	r3, [r7, #32]
 80085ce:	2300      	movs	r3, #0
 80085d0:	627b      	str	r3, [r7, #36]	; 0x24
 80085d2:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80085d6:	460b      	mov	r3, r1
 80085d8:	4313      	orrs	r3, r2
 80085da:	d00c      	beq.n	80085f6 <HAL_RCCEx_PeriphCLKConfig+0x9ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI2CLKSOURCE(pPeriphClkInit->Spi2ClockSelection));

    /* Configure the SPI2 clock source */
    __HAL_RCC_SPI2_CONFIG(pPeriphClkInit->Spi2ClockSelection);
 80085dc:	4b69      	ldr	r3, [pc, #420]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80085e2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085ea:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80085ee:	4965      	ldr	r1, [pc, #404]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80085f0:	4313      	orrs	r3, r2
 80085f2:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  }

  /*-------------------------- SPI3 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI3) == RCC_PERIPHCLK_SPI3)
 80085f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80085fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085fe:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8008602:	61bb      	str	r3, [r7, #24]
 8008604:	2300      	movs	r3, #0
 8008606:	61fb      	str	r3, [r7, #28]
 8008608:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800860c:	460b      	mov	r3, r1
 800860e:	4313      	orrs	r3, r2
 8008610:	d00c      	beq.n	800862c <HAL_RCCEx_PeriphCLKConfig+0xa24>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPI3CLKSOURCE(pPeriphClkInit->Spi3ClockSelection));

    /* Configure the SPI3 clock source */
    __HAL_RCC_SPI3_CONFIG(pPeriphClkInit->Spi3ClockSelection);
 8008612:	4b5c      	ldr	r3, [pc, #368]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008614:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008618:	f023 0218 	bic.w	r2, r3, #24
 800861c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008620:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8008624:	4957      	ldr	r1, [pc, #348]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008626:	4313      	orrs	r3, r2
 8008628:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800862c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008630:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008634:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 8008638:	613b      	str	r3, [r7, #16]
 800863a:	2300      	movs	r3, #0
 800863c:	617b      	str	r3, [r7, #20]
 800863e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8008642:	460b      	mov	r3, r1
 8008644:	4313      	orrs	r3, r2
 8008646:	d032      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(pPeriphClkInit->OspiClockSelection));

    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL1)
 8008648:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800864c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8008650:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008654:	d105      	bne.n	8008662 <HAL_RCCEx_PeriphCLKConfig+0xa5a>
    {
      /* Enable PLL1 Q CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008656:	4b4b      	ldr	r3, [pc, #300]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008658:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800865a:	4a4a      	ldr	r2, [pc, #296]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800865c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008660:	6293      	str	r3, [r2, #40]	; 0x28
    }
    if (pPeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL2)
 8008662:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008666:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800866a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800866e:	d108      	bne.n	8008682 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
    {
      /* PLL2 input clock, parameters M, N & Q configuration and clock output (PLL2ClockOut) */
      ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 8008670:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008674:	3308      	adds	r3, #8
 8008676:	4618      	mov	r0, r3
 8008678:	f001 fea0 	bl	800a3bc <RCCEx_PLL2_Config>
 800867c:	4603      	mov	r3, r0
 800867e:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
    }
    if (ret == HAL_OK)
 8008682:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008686:	2b00      	cmp	r3, #0
 8008688:	d10d      	bne.n	80086a6 <HAL_RCCEx_PeriphCLKConfig+0xa9e>
    {
      /* Configure the OctoSPI clock source */
      __HAL_RCC_OSPI_CONFIG(pPeriphClkInit->OspiClockSelection);
 800868a:	4b3e      	ldr	r3, [pc, #248]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800868c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8008690:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008694:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008698:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800869c:	4939      	ldr	r1, [pc, #228]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800869e:	4313      	orrs	r3, r2
 80086a0:	f8c1 30e4 	str.w	r3, [r1, #228]	; 0xe4
 80086a4:	e003      	b.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0xaa6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80086a6:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 80086aa:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }
#endif /* defined(HSPI1) */

  /*-------------------------- FDCAN1 kernel clock source configuration -------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN1) == (RCC_PERIPHCLK_FDCAN1))
 80086ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f002 6300 	and.w	r3, r2, #134217728	; 0x8000000
 80086ba:	60bb      	str	r3, [r7, #8]
 80086bc:	2300      	movs	r3, #0
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80086c4:	460b      	mov	r3, r1
 80086c6:	4313      	orrs	r3, r2
 80086c8:	d03a      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xb38>
  {
    assert_param(IS_RCC_FDCAN1CLK(pPeriphClkInit->Fdcan1ClockSelection));

    switch (pPeriphClkInit->Fdcan1ClockSelection)
 80086ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086d2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086d6:	d00e      	beq.n	80086f6 <HAL_RCCEx_PeriphCLKConfig+0xaee>
 80086d8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80086dc:	d815      	bhi.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d017      	beq.n	8008712 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
 80086e2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086e6:	d110      	bne.n	800870a <HAL_RCCEx_PeriphCLKConfig+0xb02>
      case RCC_FDCAN1CLKSOURCE_HSE:      /* HSE is used as source of FDCAN1 kernel clock*/
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
      case RCC_FDCAN1CLKSOURCE_PLL1:      /* PLL1 is used as clock source for FDCAN1 kernel clock*/
        /* Enable 48M2 Clock output generated from System PLL  */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80086e8:	4b26      	ldr	r3, [pc, #152]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80086ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086ec:	4a25      	ldr	r2, [pc, #148]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 80086ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086f2:	6293      	str	r3, [r2, #40]	; 0x28
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 80086f4:	e00e      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      case RCC_FDCAN1CLKSOURCE_PLL2:  /* PLL2 is used as clock source for FDCAN1 kernel clock*/
        /* PLL2 input clock, parameters M, N & P configuration and clock output (PLL2ClockOut) */
        ret = RCCEx_PLL2_Config(&(pPeriphClkInit->PLL2));
 80086f6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086fa:	3308      	adds	r3, #8
 80086fc:	4618      	mov	r0, r3
 80086fe:	f001 fe5d 	bl	800a3bc <RCCEx_PLL2_Config>
 8008702:	4603      	mov	r3, r0
 8008704:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        /* FDCAN1 kernel clock source config set later after clock selection check */
        break;
 8008708:	e004      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
      default:
        ret = HAL_ERROR;
 800870a:	2301      	movs	r3, #1
 800870c:	f887 30e3 	strb.w	r3, [r7, #227]	; 0xe3
        break;
 8008710:	e000      	b.n	8008714 <HAL_RCCEx_PeriphCLKConfig+0xb0c>
        break;
 8008712:	bf00      	nop
    }
    if (ret == HAL_OK)
 8008714:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 8008718:	2b00      	cmp	r3, #0
 800871a:	d10d      	bne.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0xb30>
    {
      /* Set the source of FDCAN1 kernel clock*/
      __HAL_RCC_FDCAN1_CONFIG(pPeriphClkInit->Fdcan1ClockSelection);
 800871c:	4b19      	ldr	r3, [pc, #100]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800871e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008722:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008726:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800872a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800872e:	4915      	ldr	r1, [pc, #84]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008730:	4313      	orrs	r3, r2
 8008732:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
 8008736:	e003      	b.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0xb38>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008738:	f897 30e3 	ldrb.w	r3, [r7, #227]	; 0xe3
 800873c:	f887 30e2 	strb.w	r3, [r7, #226]	; 0xe2
    }
  }

  /*-------------------------- DAC1 clock source configuration ----------------*/
  if (((pPeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DAC1) == RCC_PERIPHCLK_DAC1)
 8008740:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008748:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800874c:	603b      	str	r3, [r7, #0]
 800874e:	2300      	movs	r3, #0
 8008750:	607b      	str	r3, [r7, #4]
 8008752:	e9d7 1200 	ldrd	r1, r2, [r7]
 8008756:	460b      	mov	r3, r1
 8008758:	4313      	orrs	r3, r2
 800875a:	d00c      	beq.n	8008776 <HAL_RCCEx_PeriphCLKConfig+0xb6e>

    /* Check the parameters */
    assert_param(IS_RCC_DAC1CLKSOURCE(pPeriphClkInit->Dac1ClockSelection));

    /* Configure the DAC1 clock source */
    __HAL_RCC_DAC1_CONFIG(pPeriphClkInit->Dac1ClockSelection);
 800875c:	4b09      	ldr	r3, [pc, #36]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 800875e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008762:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 8008766:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800876a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800876e:	4905      	ldr	r1, [pc, #20]	; (8008784 <HAL_RCCEx_PeriphCLKConfig+0xb7c>)
 8008770:	4313      	orrs	r3, r2
 8008772:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
    }
  }

#endif /* defined(USB_OTG_HS) */

  return status;
 8008776:	f897 30e2 	ldrb.w	r3, [r7, #226]	; 0xe2
}
 800877a:	4618      	mov	r0, r3
 800877c:	37e8      	adds	r7, #232	; 0xe8
 800877e:	46bd      	mov	sp, r7
 8008780:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008784:	46020c00 	.word	0x46020c00

08008788 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8008788:	b480      	push	{r7}
 800878a:	b089      	sub	sp, #36	; 0x24
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  uint32_t pll1n;
  uint32_t pll1fracen;
  float_t fracn1;
  float_t pll1vco;

  pll1n = (RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N);
 8008790:	4bad      	ldr	r3, [pc, #692]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008794:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008798:	61bb      	str	r3, [r7, #24]
  pll1source = (RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1SRC);
 800879a:	4bab      	ldr	r3, [pc, #684]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800879c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800879e:	f003 0303 	and.w	r3, r3, #3
 80087a2:	617b      	str	r3, [r7, #20]
  pll1m = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1M) >> RCC_PLL1CFGR_PLL1M_Pos) + 1U;
 80087a4:	4ba8      	ldr	r3, [pc, #672]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	0a1b      	lsrs	r3, r3, #8
 80087aa:	f003 030f 	and.w	r3, r3, #15
 80087ae:	3301      	adds	r3, #1
 80087b0:	613b      	str	r3, [r7, #16]
  pll1fracen = ((RCC->PLL1CFGR & RCC_PLL1CFGR_PLL1FRACEN) >> RCC_PLL1CFGR_PLL1FRACEN_Pos);
 80087b2:	4ba5      	ldr	r3, [pc, #660]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80087b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087b6:	091b      	lsrs	r3, r3, #4
 80087b8:	f003 0301 	and.w	r3, r3, #1
 80087bc:	60fb      	str	r3, [r7, #12]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_PLL1FRACN) >> \
 80087be:	4ba2      	ldr	r3, [pc, #648]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80087c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087c2:	08db      	lsrs	r3, r3, #3
 80087c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80087c8:	68fa      	ldr	r2, [r7, #12]
 80087ca:	fb02 f303 	mul.w	r3, r2, r3
 80087ce:	ee07 3a90 	vmov	s15, r3
 80087d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80087d6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL1FRACR_PLL1FRACN_Pos));

  if (pll1m != 0U)
 80087da:	693b      	ldr	r3, [r7, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 8123 	beq.w	8008a28 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
  {
    switch (pll1source)
 80087e2:	697b      	ldr	r3, [r7, #20]
 80087e4:	2b03      	cmp	r3, #3
 80087e6:	d062      	beq.n	80088ae <HAL_RCCEx_GetPLL1ClockFreq+0x126>
 80087e8:	697b      	ldr	r3, [r7, #20]
 80087ea:	2b03      	cmp	r3, #3
 80087ec:	f200 8081 	bhi.w	80088f2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
 80087f0:	697b      	ldr	r3, [r7, #20]
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d024      	beq.n	8008840 <HAL_RCCEx_GetPLL1ClockFreq+0xb8>
 80087f6:	697b      	ldr	r3, [r7, #20]
 80087f8:	2b02      	cmp	r3, #2
 80087fa:	d17a      	bne.n	80088f2 <HAL_RCCEx_GetPLL1ClockFreq+0x16a>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	ee07 3a90 	vmov	s15, r3
 8008802:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008806:	eddf 6a91 	vldr	s13, [pc, #580]	; 8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 800880a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800880e:	4b8e      	ldr	r3, [pc, #568]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008812:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008816:	ee07 3a90 	vmov	s15, r3
 800881a:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800881e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008822:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008826:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 800882a:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 800882e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008832:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 8008836:	ee67 7a27 	vmul.f32	s15, s14, s15
 800883a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800883e:	e08f      	b.n	8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008840:	4b81      	ldr	r3, [pc, #516]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008842:	689b      	ldr	r3, [r3, #8]
 8008844:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008848:	2b00      	cmp	r3, #0
 800884a:	d005      	beq.n	8008858 <HAL_RCCEx_GetPLL1ClockFreq+0xd0>
 800884c:	4b7e      	ldr	r3, [pc, #504]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800884e:	689b      	ldr	r3, [r3, #8]
 8008850:	0f1b      	lsrs	r3, r3, #28
 8008852:	f003 030f 	and.w	r3, r3, #15
 8008856:	e006      	b.n	8008866 <HAL_RCCEx_GetPLL1ClockFreq+0xde>
 8008858:	4b7b      	ldr	r3, [pc, #492]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800885a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800885e:	041b      	lsls	r3, r3, #16
 8008860:	0f1b      	lsrs	r3, r3, #28
 8008862:	f003 030f 	and.w	r3, r3, #15
 8008866:	4a7b      	ldr	r2, [pc, #492]	; (8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 8008868:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800886c:	ee07 3a90 	vmov	s15, r3
 8008870:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	ee07 3a90 	vmov	s15, r3
 800887a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800887e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008882:	69bb      	ldr	r3, [r7, #24]
 8008884:	ee07 3a90 	vmov	s15, r3
 8008888:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800888c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008890:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008894:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008898:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800889c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088ac:	e058      	b.n	8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088ae:	693b      	ldr	r3, [r7, #16]
 80088b0:	ee07 3a90 	vmov	s15, r3
 80088b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80088b8:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008a4c <HAL_RCCEx_GetPLL1ClockFreq+0x2c4>
 80088bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80088c0:	4b61      	ldr	r3, [pc, #388]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80088c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80088c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80088c8:	ee07 3a90 	vmov	s15, r3
 80088cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80088d0:	ed97 6a02 	vldr	s12, [r7, #8]
 80088d4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 80088d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn1 / (float_t)0x2000) + (float_t)1);
 80088e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80088e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_PLL1N) + \
 80088e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80088ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80088f0:	e036      	b.n	8008960 <HAL_RCCEx_GetPLL1ClockFreq+0x1d8>
      default:
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 80088f2:	4b55      	ldr	r3, [pc, #340]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80088f4:	689b      	ldr	r3, [r3, #8]
 80088f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <HAL_RCCEx_GetPLL1ClockFreq+0x182>
 80088fe:	4b52      	ldr	r3, [pc, #328]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008900:	689b      	ldr	r3, [r3, #8]
 8008902:	0f1b      	lsrs	r3, r3, #28
 8008904:	f003 030f 	and.w	r3, r3, #15
 8008908:	e006      	b.n	8008918 <HAL_RCCEx_GetPLL1ClockFreq+0x190>
 800890a:	4b4f      	ldr	r3, [pc, #316]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800890c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	0f1b      	lsrs	r3, r3, #28
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	4a4e      	ldr	r2, [pc, #312]	; (8008a54 <HAL_RCCEx_GetPLL1ClockFreq+0x2cc>)
 800891a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800891e:	ee07 3a90 	vmov	s15, r3
 8008922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	ee07 3a90 	vmov	s15, r3
 800892c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008930:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll1n + (fracn1 / (float_t)0x2000) + (float_t)1);
 8008934:	69bb      	ldr	r3, [r7, #24]
 8008936:	ee07 3a90 	vmov	s15, r3
 800893a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800893e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008942:	eddf 5a43 	vldr	s11, [pc, #268]	; 8008a50 <HAL_RCCEx_GetPLL1ClockFreq+0x2c8>
 8008946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800894a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800894e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008952:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll1vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll1m) * \
 8008956:	ee67 7a27 	vmul.f32	s15, s14, s15
 800895a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800895e:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVP) != 0U)
 8008960:	4b39      	ldr	r3, [pc, #228]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 8008962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008964:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008968:	2b00      	cmp	r3, #0
 800896a:	d017      	beq.n	800899c <HAL_RCCEx_GetPLL1ClockFreq+0x214>
    {
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 800896c:	4b36      	ldr	r3, [pc, #216]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 800896e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008970:	0a5b      	lsrs	r3, r3, #9
 8008972:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008976:	ee07 3a90 	vmov	s15, r3
 800897a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1P) >> RCC_PLL1DIVR_PLL1P_Pos) + \
 800897e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008982:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008986:	edd7 6a07 	vldr	s13, [r7, #28]
 800898a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800898e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008992:	ee17 2a90 	vmov	r2, s15
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	601a      	str	r2, [r3, #0]
 800899a:	e002      	b.n	80089a2 <HAL_RCCEx_GetPLL1ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_P_Frequency = 0U;
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVQ) != 0U)
 80089a2:	4b29      	ldr	r3, [pc, #164]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80089a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d017      	beq.n	80089de <HAL_RCCEx_GetPLL1ClockFreq+0x256>
    {
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089ae:	4b26      	ldr	r3, [pc, #152]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80089b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089b2:	0c1b      	lsrs	r3, r3, #16
 80089b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089b8:	ee07 3a90 	vmov	s15, r3
 80089bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1Q) >> RCC_PLL1DIVR_PLL1Q_Pos) + \
 80089c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80089c4:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80089cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80089d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80089d4:	ee17 2a90 	vmov	r2, s15
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	605a      	str	r2, [r3, #4]
 80089dc:	e002      	b.n	80089e4 <HAL_RCCEx_GetPLL1ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL1_DIVR) != 0U)
 80089e4:	4b18      	ldr	r3, [pc, #96]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80089e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089e8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d017      	beq.n	8008a20 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
    {
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 80089f0:	4b15      	ldr	r3, [pc, #84]	; (8008a48 <HAL_RCCEx_GetPLL1ClockFreq+0x2c0>)
 80089f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80089f4:	0e1b      	lsrs	r3, r3, #24
 80089f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80089fa:	ee07 3a90 	vmov	s15, r3
 80089fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL1DIVR_PLL1R) >> RCC_PLL1DIVR_PLL1R_Pos) + \
 8008a02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008a06:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & \
 8008a0a:	edd7 6a07 	vldr	s13, [r7, #28]
 8008a0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008a12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008a16:	ee17 2a90 	vmov	r2, s15
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8008a1e:	e00c      	b.n	8008a3a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
      PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	2200      	movs	r2, #0
 8008a24:	609a      	str	r2, [r3, #8]
}
 8008a26:	e008      	b.n	8008a3a <HAL_RCCEx_GetPLL1ClockFreq+0x2b2>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	2200      	movs	r2, #0
 8008a32:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	2200      	movs	r2, #0
 8008a38:	609a      	str	r2, [r3, #8]
}
 8008a3a:	bf00      	nop
 8008a3c:	3724      	adds	r7, #36	; 0x24
 8008a3e:	46bd      	mov	sp, r7
 8008a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a44:	4770      	bx	lr
 8008a46:	bf00      	nop
 8008a48:	46020c00 	.word	0x46020c00
 8008a4c:	4b742400 	.word	0x4b742400
 8008a50:	46000000 	.word	0x46000000
 8008a54:	08010c68 	.word	0x08010c68

08008a58 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b089      	sub	sp, #36	; 0x24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  float_t fracn2;
  float_t pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x */
  pll2n = (RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N);
 8008a60:	4bad      	ldr	r3, [pc, #692]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008a64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008a68:	61bb      	str	r3, [r7, #24]
  pll2source = (RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2SRC);
 8008a6a:	4bab      	ldr	r3, [pc, #684]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a6e:	f003 0303 	and.w	r3, r3, #3
 8008a72:	617b      	str	r3, [r7, #20]
  pll2m = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2M) >> RCC_PLL2CFGR_PLL2M_Pos) + 1U;
 8008a74:	4ba8      	ldr	r3, [pc, #672]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a78:	0a1b      	lsrs	r3, r3, #8
 8008a7a:	f003 030f 	and.w	r3, r3, #15
 8008a7e:	3301      	adds	r3, #1
 8008a80:	613b      	str	r3, [r7, #16]
  pll2fracen = ((RCC->PLL2CFGR & RCC_PLL2CFGR_PLL2FRACEN) >> RCC_PLL2CFGR_PLL2FRACEN_Pos);
 8008a82:	4ba5      	ldr	r3, [pc, #660]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a86:	091b      	lsrs	r3, r3, #4
 8008a88:	f003 0301 	and.w	r3, r3, #1
 8008a8c:	60fb      	str	r3, [r7, #12]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_PLL2FRACN) >> \
 8008a8e:	4ba2      	ldr	r3, [pc, #648]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008a90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a92:	08db      	lsrs	r3, r3, #3
 8008a94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008a98:	68fa      	ldr	r2, [r7, #12]
 8008a9a:	fb02 f303 	mul.w	r3, r2, r3
 8008a9e:	ee07 3a90 	vmov	s15, r3
 8008aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008aa6:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL2FRACR_PLL2FRACN_Pos));

  if (pll2m != 0U)
 8008aaa:	693b      	ldr	r3, [r7, #16]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	f000 8123 	beq.w	8008cf8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
  {
    switch (pll2source)
 8008ab2:	697b      	ldr	r3, [r7, #20]
 8008ab4:	2b03      	cmp	r3, #3
 8008ab6:	d062      	beq.n	8008b7e <HAL_RCCEx_GetPLL2ClockFreq+0x126>
 8008ab8:	697b      	ldr	r3, [r7, #20]
 8008aba:	2b03      	cmp	r3, #3
 8008abc:	f200 8081 	bhi.w	8008bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
 8008ac0:	697b      	ldr	r3, [r7, #20]
 8008ac2:	2b01      	cmp	r3, #1
 8008ac4:	d024      	beq.n	8008b10 <HAL_RCCEx_GetPLL2ClockFreq+0xb8>
 8008ac6:	697b      	ldr	r3, [r7, #20]
 8008ac8:	2b02      	cmp	r3, #2
 8008aca:	d17a      	bne.n	8008bc2 <HAL_RCCEx_GetPLL2ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008acc:	693b      	ldr	r3, [r7, #16]
 8008ace:	ee07 3a90 	vmov	s15, r3
 8008ad2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ad6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008ada:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008ade:	4b8e      	ldr	r3, [pc, #568]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008ae0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ae2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008ae6:	ee07 3a90 	vmov	s15, r3
 8008aea:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008aee:	ed97 6a02 	vldr	s12, [r7, #8]
 8008af2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008af6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008afa:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008afe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b02:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b06:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b0a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b0e:	e08f      	b.n	8008c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b10:	4b81      	ldr	r3, [pc, #516]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b12:	689b      	ldr	r3, [r3, #8]
 8008b14:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d005      	beq.n	8008b28 <HAL_RCCEx_GetPLL2ClockFreq+0xd0>
 8008b1c:	4b7e      	ldr	r3, [pc, #504]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0f1b      	lsrs	r3, r3, #28
 8008b22:	f003 030f 	and.w	r3, r3, #15
 8008b26:	e006      	b.n	8008b36 <HAL_RCCEx_GetPLL2ClockFreq+0xde>
 8008b28:	4b7b      	ldr	r3, [pc, #492]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008b2e:	041b      	lsls	r3, r3, #16
 8008b30:	0f1b      	lsrs	r3, r3, #28
 8008b32:	f003 030f 	and.w	r3, r3, #15
 8008b36:	4a7b      	ldr	r2, [pc, #492]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8008b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b3c:	ee07 3a90 	vmov	s15, r3
 8008b40:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b44:	693b      	ldr	r3, [r7, #16]
 8008b46:	ee07 3a90 	vmov	s15, r3
 8008b4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b4e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008b52:	69bb      	ldr	r3, [r7, #24]
 8008b54:	ee07 3a90 	vmov	s15, r3
 8008b58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008b5c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008b60:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008b64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008b68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008b6c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008b70:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll2m) * \
 8008b74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008b78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008b7c:	e058      	b.n	8008c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	ee07 3a90 	vmov	s15, r3
 8008b84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008b88:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008d1c <HAL_RCCEx_GetPLL2ClockFreq+0x2c4>
 8008b8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008b90:	4b61      	ldr	r3, [pc, #388]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008b98:	ee07 3a90 	vmov	s15, r3
 8008b9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008ba0:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ba4:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008ba8:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008bac:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn2 / (float_t)0x2000) + (float_t)1);
 8008bb0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008bb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_PLL2N) + \
 8008bb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008bbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008bc0:	e036      	b.n	8008c30 <HAL_RCCEx_GetPLL2ClockFreq+0x1d8>

      default:
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008bc2:	4b55      	ldr	r3, [pc, #340]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d005      	beq.n	8008bda <HAL_RCCEx_GetPLL2ClockFreq+0x182>
 8008bce:	4b52      	ldr	r3, [pc, #328]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008bd0:	689b      	ldr	r3, [r3, #8]
 8008bd2:	0f1b      	lsrs	r3, r3, #28
 8008bd4:	f003 030f 	and.w	r3, r3, #15
 8008bd8:	e006      	b.n	8008be8 <HAL_RCCEx_GetPLL2ClockFreq+0x190>
 8008bda:	4b4f      	ldr	r3, [pc, #316]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008bdc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008be0:	041b      	lsls	r3, r3, #16
 8008be2:	0f1b      	lsrs	r3, r3, #28
 8008be4:	f003 030f 	and.w	r3, r3, #15
 8008be8:	4a4e      	ldr	r2, [pc, #312]	; (8008d24 <HAL_RCCEx_GetPLL2ClockFreq+0x2cc>)
 8008bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bee:	ee07 3a90 	vmov	s15, r3
 8008bf2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008bf6:	693b      	ldr	r3, [r7, #16]
 8008bf8:	ee07 3a90 	vmov	s15, r3
 8008bfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008c00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  * ((float_t)pll2n + (fracn2 / (float_t)0x2000) + (float_t)1);
 8008c04:	69bb      	ldr	r3, [r7, #24]
 8008c06:	ee07 3a90 	vmov	s15, r3
 8008c0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008c0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8008c12:	eddf 5a43 	vldr	s11, [pc, #268]	; 8008d20 <HAL_RCCEx_GetPLL2ClockFreq+0x2c8>
 8008c16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008c1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008c1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008c22:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll2vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t) pll2m) \
 8008c26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008c2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008c2e:	bf00      	nop
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVP) != 0U)
 8008c30:	4b39      	ldr	r3, [pc, #228]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c34:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	d017      	beq.n	8008c6c <HAL_RCCEx_GetPLL2ClockFreq+0x214>
    {
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c3c:	4b36      	ldr	r3, [pc, #216]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c3e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c40:	0a5b      	lsrs	r3, r3, #9
 8008c42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c46:	ee07 3a90 	vmov	s15, r3
 8008c4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2P) >> RCC_PLL2DIVR_PLL2P_Pos) + \
 8008c4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c52:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c56:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008c5e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008c62:	ee17 2a90 	vmov	r2, s15
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	601a      	str	r2, [r3, #0]
 8008c6a:	e002      	b.n	8008c72 <HAL_RCCEx_GetPLL2ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	2200      	movs	r2, #0
 8008c70:	601a      	str	r2, [r3, #0]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVQ) != 0U)
 8008c72:	4b29      	ldr	r3, [pc, #164]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d017      	beq.n	8008cae <HAL_RCCEx_GetPLL2ClockFreq+0x256>
    {
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c7e:	4b26      	ldr	r3, [pc, #152]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008c82:	0c1b      	lsrs	r3, r3, #16
 8008c84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c88:	ee07 3a90 	vmov	s15, r3
 8008c8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2Q) >> RCC_PLL2DIVR_PLL2Q_Pos) + \
 8008c90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008c94:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008c98:	edd7 6a07 	vldr	s13, [r7, #28]
 8008c9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ca0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ca4:	ee17 2a90 	vmov	r2, s15
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	605a      	str	r2, [r3, #4]
 8008cac:	e002      	b.n	8008cb4 <HAL_RCCEx_GetPLL2ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	605a      	str	r2, [r3, #4]
    }
    if (__HAL_RCC_GET_PLL2CLKOUT_CONFIG(RCC_PLL2_DIVR) != 0U)
 8008cb4:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cb8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d017      	beq.n	8008cf0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
    {
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <HAL_RCCEx_GetPLL2ClockFreq+0x2c0>)
 8008cc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008cc4:	0e1b      	lsrs	r3, r3, #24
 8008cc6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008cca:	ee07 3a90 	vmov	s15, r3
 8008cce:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL2DIVR_PLL2R) >> RCC_PLL2DIVR_PLL2R_Pos) + \
 8008cd2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008cd6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & \
 8008cda:	edd7 6a07 	vldr	s13, [r7, #28]
 8008cde:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008ce2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008ce6:	ee17 2a90 	vmov	r2, s15
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8008cee:	e00c      	b.n	8008d0a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
      PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	609a      	str	r2, [r3, #8]
}
 8008cf6:	e008      	b.n	8008d0a <HAL_RCCEx_GetPLL2ClockFreq+0x2b2>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2200      	movs	r2, #0
 8008d02:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2200      	movs	r2, #0
 8008d08:	609a      	str	r2, [r3, #8]
}
 8008d0a:	bf00      	nop
 8008d0c:	3724      	adds	r7, #36	; 0x24
 8008d0e:	46bd      	mov	sp, r7
 8008d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d14:	4770      	bx	lr
 8008d16:	bf00      	nop
 8008d18:	46020c00 	.word	0x46020c00
 8008d1c:	4b742400 	.word	0x4b742400
 8008d20:	46000000 	.word	0x46000000
 8008d24:	08010c68 	.word	0x08010c68

08008d28 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b089      	sub	sp, #36	; 0x24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
  PLL3xCLK = PLL3_VCO / PLLxR
  */

  pll3n = (RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N);
 8008d30:	4bad      	ldr	r3, [pc, #692]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008d34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d38:	61bb      	str	r3, [r7, #24]
  pll3source = (RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3SRC);
 8008d3a:	4bab      	ldr	r3, [pc, #684]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d3e:	f003 0303 	and.w	r3, r3, #3
 8008d42:	617b      	str	r3, [r7, #20]
  pll3m = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3M) >> RCC_PLL3CFGR_PLL3M_Pos) + 1U;
 8008d44:	4ba8      	ldr	r3, [pc, #672]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d48:	0a1b      	lsrs	r3, r3, #8
 8008d4a:	f003 030f 	and.w	r3, r3, #15
 8008d4e:	3301      	adds	r3, #1
 8008d50:	613b      	str	r3, [r7, #16]
  pll3fracen = ((RCC->PLL3CFGR & RCC_PLL3CFGR_PLL3FRACEN) >> RCC_PLL3CFGR_PLL3FRACEN_Pos);
 8008d52:	4ba5      	ldr	r3, [pc, #660]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d56:	091b      	lsrs	r3, r3, #4
 8008d58:	f003 0301 	and.w	r3, r3, #1
 8008d5c:	60fb      	str	r3, [r7, #12]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_PLL3FRACN) >> \
 8008d5e:	4ba2      	ldr	r3, [pc, #648]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008d60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008d62:	08db      	lsrs	r3, r3, #3
 8008d64:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8008d68:	68fa      	ldr	r2, [r7, #12]
 8008d6a:	fb02 f303 	mul.w	r3, r2, r3
 8008d6e:	ee07 3a90 	vmov	s15, r3
 8008d72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008d76:	edc7 7a02 	vstr	s15, [r7, #8]
                                             RCC_PLL3FRACR_PLL3FRACN_Pos));

  if (pll3m != 0U)
 8008d7a:	693b      	ldr	r3, [r7, #16]
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	f000 8123 	beq.w	8008fc8 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
  {
    switch (pll3source)
 8008d82:	697b      	ldr	r3, [r7, #20]
 8008d84:	2b03      	cmp	r3, #3
 8008d86:	d062      	beq.n	8008e4e <HAL_RCCEx_GetPLL3ClockFreq+0x126>
 8008d88:	697b      	ldr	r3, [r7, #20]
 8008d8a:	2b03      	cmp	r3, #3
 8008d8c:	f200 8081 	bhi.w	8008e92 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
 8008d90:	697b      	ldr	r3, [r7, #20]
 8008d92:	2b01      	cmp	r3, #1
 8008d94:	d024      	beq.n	8008de0 <HAL_RCCEx_GetPLL3ClockFreq+0xb8>
 8008d96:	697b      	ldr	r3, [r7, #20]
 8008d98:	2b02      	cmp	r3, #2
 8008d9a:	d17a      	bne.n	8008e92 <HAL_RCCEx_GetPLL3ClockFreq+0x16a>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	ee07 3a90 	vmov	s15, r3
 8008da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008da6:	eddf 6a91 	vldr	s13, [pc, #580]	; 8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008daa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008dae:	4b8e      	ldr	r3, [pc, #568]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008db2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008db6:	ee07 3a90 	vmov	s15, r3
 8008dba:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8008dc2:	eddf 5a8b 	vldr	s11, [pc, #556]	; 8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008dc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008dca:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008dce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008dd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008dd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008dda:	edc7 7a07 	vstr	s15, [r7, #28]

        break;
 8008dde:	e08f      	b.n	8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>
      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008de0:	4b81      	ldr	r3, [pc, #516]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008de8:	2b00      	cmp	r3, #0
 8008dea:	d005      	beq.n	8008df8 <HAL_RCCEx_GetPLL3ClockFreq+0xd0>
 8008dec:	4b7e      	ldr	r3, [pc, #504]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008dee:	689b      	ldr	r3, [r3, #8]
 8008df0:	0f1b      	lsrs	r3, r3, #28
 8008df2:	f003 030f 	and.w	r3, r3, #15
 8008df6:	e006      	b.n	8008e06 <HAL_RCCEx_GetPLL3ClockFreq+0xde>
 8008df8:	4b7b      	ldr	r3, [pc, #492]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008dfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008dfe:	041b      	lsls	r3, r3, #16
 8008e00:	0f1b      	lsrs	r3, r3, #28
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	4a7b      	ldr	r2, [pc, #492]	; (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8008e08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008e0c:	ee07 3a90 	vmov	s15, r3
 8008e10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e14:	693b      	ldr	r3, [r7, #16]
 8008e16:	ee07 3a90 	vmov	s15, r3
 8008e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e1e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e22:	69bb      	ldr	r3, [r7, #24]
 8008e24:	ee07 3a90 	vmov	s15, r3
 8008e28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008e2c:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e30:	eddf 5a6f 	vldr	s11, [pc, #444]	; 8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008e34:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008e38:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008e3c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e40:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e48:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e4c:	e058      	b.n	8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	ee07 3a90 	vmov	s15, r3
 8008e54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008e58:	eddf 6a64 	vldr	s13, [pc, #400]	; 8008fec <HAL_RCCEx_GetPLL3ClockFreq+0x2c4>
 8008e5c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008e60:	4b61      	ldr	r3, [pc, #388]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e64:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e68:	ee07 3a90 	vmov	s15, r3
 8008e6c:	eef8 6a67 	vcvt.f32.u32	s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e70:	ed97 6a02 	vldr	s12, [r7, #8]
 8008e74:	eddf 5a5e 	vldr	s11, [pc, #376]	; 8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008e78:	eec6 7a25 	vdiv.f32	s15, s12, s11
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e7c:	ee76 7aa7 	vadd.f32	s15, s13, s15
                                                           (fracn3 / (float_t)0x2000) + (float_t)1);
 8008e80:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008e84:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_PLL3N) + \
 8008e88:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008e8c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008e90:	e036      	b.n	8008f00 <HAL_RCCEx_GetPLL3ClockFreq+0x1d8>

      default:
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008e92:	4b55      	ldr	r3, [pc, #340]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008e94:	689b      	ldr	r3, [r3, #8]
 8008e96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d005      	beq.n	8008eaa <HAL_RCCEx_GetPLL3ClockFreq+0x182>
 8008e9e:	4b52      	ldr	r3, [pc, #328]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008ea0:	689b      	ldr	r3, [r3, #8]
 8008ea2:	0f1b      	lsrs	r3, r3, #28
 8008ea4:	f003 030f 	and.w	r3, r3, #15
 8008ea8:	e006      	b.n	8008eb8 <HAL_RCCEx_GetPLL3ClockFreq+0x190>
 8008eaa:	4b4f      	ldr	r3, [pc, #316]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008eac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008eb0:	041b      	lsls	r3, r3, #16
 8008eb2:	0f1b      	lsrs	r3, r3, #28
 8008eb4:	f003 030f 	and.w	r3, r3, #15
 8008eb8:	4a4e      	ldr	r2, [pc, #312]	; (8008ff4 <HAL_RCCEx_GetPLL3ClockFreq+0x2cc>)
 8008eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ebe:	ee07 3a90 	vmov	s15, r3
 8008ec2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	ee07 3a90 	vmov	s15, r3
 8008ecc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8008ed0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
                  ((float_t)pll3n + (fracn3 / (float_t)0x2000) + (float_t)1);
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	ee07 3a90 	vmov	s15, r3
 8008eda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8008ede:	ed97 6a02 	vldr	s12, [r7, #8]
 8008ee2:	eddf 5a43 	vldr	s11, [pc, #268]	; 8008ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x2c8>
 8008ee6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8008eea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8008eee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8008ef2:	ee77 7aa6 	vadd.f32	s15, s15, s13
        pll3vco = ((float_t)MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> RCC_ICSCR1_MSISRANGE_Pos)] / (float_t)pll3m) * \
 8008ef6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8008efa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8008efe:	bf00      	nop
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVP) != 0U)
 8008f00:	4b39      	ldr	r3, [pc, #228]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f04:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d017      	beq.n	8008f3c <HAL_RCCEx_GetPLL3ClockFreq+0x214>
    {
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f0c:	4b36      	ldr	r3, [pc, #216]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f0e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f10:	0a5b      	lsrs	r3, r3, #9
 8008f12:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f16:	ee07 3a90 	vmov	s15, r3
 8008f1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3P) >> RCC_PLL3DIVR_PLL3P_Pos) + \
 8008f1e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f22:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f26:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f2e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f32:	ee17 2a90 	vmov	r2, s15
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	601a      	str	r2, [r3, #0]
 8008f3a:	e002      	b.n	8008f42 <HAL_RCCEx_GetPLL3ClockFreq+0x21a>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2200      	movs	r2, #0
 8008f40:	601a      	str	r2, [r3, #0]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVQ) != 0U)
 8008f42:	4b29      	ldr	r3, [pc, #164]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d017      	beq.n	8008f7e <HAL_RCCEx_GetPLL3ClockFreq+0x256>
    {
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f4e:	4b26      	ldr	r3, [pc, #152]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f52:	0c1b      	lsrs	r3, r3, #16
 8008f54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f58:	ee07 3a90 	vmov	s15, r3
 8008f5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3Q) >> RCC_PLL3DIVR_PLL3Q_Pos) + \
 8008f60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008f64:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f68:	edd7 6a07 	vldr	s13, [r7, #28]
 8008f6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008f70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008f74:	ee17 2a90 	vmov	r2, s15
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	605a      	str	r2, [r3, #4]
 8008f7c:	e002      	b.n	8008f84 <HAL_RCCEx_GetPLL3ClockFreq+0x25c>
                                                                     (float_t)1));
    }
    else
    {
      PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	2200      	movs	r2, #0
 8008f82:	605a      	str	r2, [r3, #4]
    }

    if (__HAL_RCC_GET_PLL3CLKOUT_CONFIG(RCC_PLL3_DIVR) != 0U)
 8008f84:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	d017      	beq.n	8008fc0 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
    {
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008f90:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <HAL_RCCEx_GetPLL3ClockFreq+0x2c0>)
 8008f92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f94:	0e1b      	lsrs	r3, r3, #24
 8008f96:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f9a:	ee07 3a90 	vmov	s15, r3
 8008f9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
                                                                     RCC_PLL3DIVR_PLL3R) >> RCC_PLL3DIVR_PLL3R_Pos) + \
 8008fa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8008fa6:	ee37 7a87 	vadd.f32	s14, s15, s14
      PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & \
 8008faa:	edd7 6a07 	vldr	s13, [r7, #28]
 8008fae:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8008fb2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008fb6:	ee17 2a90 	vmov	r2, s15
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	609a      	str	r2, [r3, #8]
  {
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }
}
 8008fbe:	e00c      	b.n	8008fda <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
      PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	2200      	movs	r2, #0
 8008fc4:	609a      	str	r2, [r3, #8]
}
 8008fc6:	e008      	b.n	8008fda <HAL_RCCEx_GetPLL3ClockFreq+0x2b2>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2200      	movs	r2, #0
 8008fcc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2200      	movs	r2, #0
 8008fd2:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	609a      	str	r2, [r3, #8]
}
 8008fda:	bf00      	nop
 8008fdc:	3724      	adds	r7, #36	; 0x24
 8008fde:	46bd      	mov	sp, r7
 8008fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fe4:	4770      	bx	lr
 8008fe6:	bf00      	nop
 8008fe8:	46020c00 	.word	0x46020c00
 8008fec:	4b742400 	.word	0x4b742400
 8008ff0:	46000000 	.word	0x46000000
 8008ff4:	08010c68 	.word	0x08010c68

08008ff8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in Hz
  *
  *        (*) value not defined in all devices.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b08e      	sub	sp, #56	; 0x38
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	e9c7 0100 	strd	r0, r1, [r7]
  uint32_t srcclk;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8009002:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009006:	f5a2 2180 	sub.w	r1, r2, #262144	; 0x40000
 800900a:	430b      	orrs	r3, r1
 800900c:	d145      	bne.n	800909a <HAL_RCCEx_GetPeriphCLKFreq+0xa2>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 800900e:	4ba7      	ldr	r3, [pc, #668]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009010:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009014:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009018:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if RTC clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_RTCCLKSOURCE_LSE))
 800901a:	4ba4      	ldr	r3, [pc, #656]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800901c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009020:	f003 0302 	and.w	r3, r3, #2
 8009024:	2b02      	cmp	r3, #2
 8009026:	d108      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
 8009028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800902a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800902e:	d104      	bne.n	800903a <HAL_RCCEx_GetPeriphCLKFreq+0x42>
    {
      frequency = LSE_VALUE;
 8009030:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009034:	637b      	str	r3, [r7, #52]	; 0x34
 8009036:	f001 b9b3 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Check if LSI is ready and if RTC clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_RTCCLKSOURCE_LSI))
 800903a:	4b9c      	ldr	r3, [pc, #624]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800903c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009040:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009044:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009048:	d114      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
 800904a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800904c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009050:	d110      	bne.n	8009074 <HAL_RCCEx_GetPeriphCLKFreq+0x7c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009052:	4b96      	ldr	r3, [pc, #600]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009054:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009060:	d103      	bne.n	800906a <HAL_RCCEx_GetPeriphCLKFreq+0x72>
      {
        frequency = LSI_VALUE / 128U;
 8009062:	23fa      	movs	r3, #250	; 0xfa
 8009064:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009066:	f001 b99b 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800906a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800906e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009070:	f001 b996 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Check if HSE is ready  and if RTC clock selection is HSI_DIV32*/
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_RTCCLKSOURCE_HSE_DIV32))
 8009074:	4b8d      	ldr	r3, [pc, #564]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800907c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009080:	d107      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
 8009082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009084:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009088:	d103      	bne.n	8009092 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
    {
      frequency = HSE_VALUE / 32U;
 800908a:	4b89      	ldr	r3, [pc, #548]	; (80092b0 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>)
 800908c:	637b      	str	r3, [r7, #52]	; 0x34
 800908e:	f001 b987 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RTC*/
    else
    {
      frequency = 0U;
 8009092:	2300      	movs	r3, #0
 8009094:	637b      	str	r3, [r7, #52]	; 0x34
 8009096:	f001 b983 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800909a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800909e:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 80090a2:	430b      	orrs	r3, r1
 80090a4:	d151      	bne.n	800914a <HAL_RCCEx_GetPeriphCLKFreq+0x152>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 80090a6:	4b81      	ldr	r3, [pc, #516]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80090a8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80090ac:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80090b0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 80090b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b4:	2b80      	cmp	r3, #128	; 0x80
 80090b6:	d035      	beq.n	8009124 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
 80090b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090ba:	2b80      	cmp	r3, #128	; 0x80
 80090bc:	d841      	bhi.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c0:	2b60      	cmp	r3, #96	; 0x60
 80090c2:	d02a      	beq.n	800911a <HAL_RCCEx_GetPeriphCLKFreq+0x122>
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	2b60      	cmp	r3, #96	; 0x60
 80090c8:	d83b      	bhi.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090cc:	2b40      	cmp	r3, #64	; 0x40
 80090ce:	d009      	beq.n	80090e4 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80090d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d2:	2b40      	cmp	r3, #64	; 0x40
 80090d4:	d835      	bhi.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
 80090d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00c      	beq.n	80090f6 <HAL_RCCEx_GetPeriphCLKFreq+0xfe>
 80090dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090de:	2b20      	cmp	r3, #32
 80090e0:	d012      	beq.n	8009108 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 80090e2:	e02e      	b.n	8009142 <HAL_RCCEx_GetPeriphCLKFreq+0x14a>
    {
      case RCC_SAI1CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80090e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80090e8:	4618      	mov	r0, r3
 80090ea:	f7ff fb4d 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80090ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80090f2:	f001 b955 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80090f6:	f107 0318 	add.w	r3, r7, #24
 80090fa:	4618      	mov	r0, r3
 80090fc:	f7ff fcac 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 8009100:	69bb      	ldr	r3, [r7, #24]
 8009102:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009104:	f001 b94c 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8009108:	f107 030c 	add.w	r3, r7, #12
 800910c:	4618      	mov	r0, r3
 800910e:	f7ff fe0b 	bl	8008d28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009116:	f001 b943 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800911a:	f64b 3380 	movw	r3, #48000	; 0xbb80
 800911e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009120:	f001 b93e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI1CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009124:	4b61      	ldr	r3, [pc, #388]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800912c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009130:	d103      	bne.n	800913a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        {
          frequency = HSI_VALUE;
 8009132:	4b60      	ldr	r3, [pc, #384]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009134:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009136:	f001 b933 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800913a:	2300      	movs	r3, #0
 800913c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800913e:	f001 b92f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :
      {
        frequency = 0U;
 8009142:	2300      	movs	r3, #0
 8009144:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009146:	f001 b92b 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
#if defined(SAI2)
  else if (PeriphClk == RCC_PERIPHCLK_SAI2)
 800914a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800914e:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8009152:	430b      	orrs	r3, r1
 8009154:	d158      	bne.n	8009208 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8009156:	4b55      	ldr	r3, [pc, #340]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009158:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800915c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009160:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009164:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009168:	d03b      	beq.n	80091e2 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
 800916a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800916c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009170:	d846      	bhi.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009174:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009178:	d02e      	beq.n	80091d8 <HAL_RCCEx_GetPeriphCLKFreq+0x1e0>
 800917a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800917c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009180:	d83e      	bhi.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009188:	d00b      	beq.n	80091a2 <HAL_RCCEx_GetPeriphCLKFreq+0x1aa>
 800918a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800918c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009190:	d836      	bhi.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
 8009192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009194:	2b00      	cmp	r3, #0
 8009196:	d00d      	beq.n	80091b4 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8009198:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800919a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800919e:	d012      	beq.n	80091c6 <HAL_RCCEx_GetPeriphCLKFreq+0x1ce>
 80091a0:	e02e      	b.n	8009200 <HAL_RCCEx_GetPeriphCLKFreq+0x208>
    {
      case RCC_SAI2CLKSOURCE_PLL1: /* PLL1P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80091a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7ff faee 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80091ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091b0:	f001 b8f6 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL2: /* PLL2P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80091b4:	f107 0318 	add.w	r3, r7, #24
 80091b8:	4618      	mov	r0, r3
 80091ba:	f7ff fc4d 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_P_Frequency;
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091c2:	f001 b8ed 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PLL3: /* PLLI3P is the clock source for SAI1 */

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80091c6:	f107 030c 	add.w	r3, r7, #12
 80091ca:	4618      	mov	r0, r3
 80091cc:	f7ff fdac 	bl	8008d28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_P_Frequency;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091d4:	f001 b8e4 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80091d8:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80091dc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091de:	f001 b8df 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SAI2CLKSOURCE_HSI: /* HSI is the clock source for SAI1 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80091e2:	4b32      	ldr	r3, [pc, #200]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80091ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80091ee:	d103      	bne.n	80091f8 <HAL_RCCEx_GetPeriphCLKFreq+0x200>
        {
          frequency = HSI_VALUE;
 80091f0:	4b30      	ldr	r3, [pc, #192]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 80091f2:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80091f4:	f001 b8d4 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80091f8:	2300      	movs	r3, #0
 80091fa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80091fc:	f001 b8d0 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8009200:	2300      	movs	r3, #0
 8009202:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009204:	f001 b8cc 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* SAI2 */
  else if (PeriphClk == RCC_PERIPHCLK_SAES)
 8009208:	e9d7 2300 	ldrd	r2, r3, [r7]
 800920c:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8009210:	430b      	orrs	r3, r1
 8009212:	d126      	bne.n	8009262 <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
  {
    /* Get the current SAES source */
    srcclk = __HAL_RCC_GET_SAES_SOURCE();
 8009214:	4b25      	ldr	r3, [pc, #148]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009216:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800921a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800921e:	633b      	str	r3, [r7, #48]	; 0x30

    if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI))
 8009220:	4b22      	ldr	r3, [pc, #136]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800922c:	d106      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
 800922e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d103      	bne.n	800923c <HAL_RCCEx_GetPeriphCLKFreq+0x244>
    {
      frequency = HSI_VALUE;
 8009234:	4b1f      	ldr	r3, [pc, #124]	; (80092b4 <HAL_RCCEx_GetPeriphCLKFreq+0x2bc>)
 8009236:	637b      	str	r3, [r7, #52]	; 0x34
 8009238:	f001 b8b2 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY) && (srcclk == RCC_SAESCLKSOURCE_SHSI_DIV2))
 800923c:	4b1b      	ldr	r3, [pc, #108]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009248:	d107      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
 800924a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800924c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009250:	d103      	bne.n	800925a <HAL_RCCEx_GetPeriphCLKFreq+0x262>
    {
      frequency = HSI_VALUE >> 1U;
 8009252:	4b19      	ldr	r3, [pc, #100]	; (80092b8 <HAL_RCCEx_GetPeriphCLKFreq+0x2c0>)
 8009254:	637b      	str	r3, [r7, #52]	; 0x34
 8009256:	f001 b8a3 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for SAES */
    else
    {
      frequency = 0U;
 800925a:	2300      	movs	r3, #0
 800925c:	637b      	str	r3, [r7, #52]	; 0x34
 800925e:	f001 b89f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ICLK)
 8009262:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009266:	f5a2 1180 	sub.w	r1, r2, #1048576	; 0x100000
 800926a:	430b      	orrs	r3, r1
 800926c:	d16e      	bne.n	800934c <HAL_RCCEx_GetPeriphCLKFreq+0x354>
  {
    srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800926e:	4b0f      	ldr	r3, [pc, #60]	; (80092ac <HAL_RCCEx_GetPeriphCLKFreq+0x2b4>)
 8009270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009274:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009278:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800927a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800927c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009280:	d03d      	beq.n	80092fe <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 8009282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009284:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009288:	d85c      	bhi.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800928a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800928c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009290:	d014      	beq.n	80092bc <HAL_RCCEx_GetPeriphCLKFreq+0x2c4>
 8009292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009294:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009298:	d854      	bhi.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 800929a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01f      	beq.n	80092e0 <HAL_RCCEx_GetPeriphCLKFreq+0x2e8>
 80092a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80092a2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80092a6:	d012      	beq.n	80092ce <HAL_RCCEx_GetPeriphCLKFreq+0x2d6>
 80092a8:	e04c      	b.n	8009344 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 80092aa:	bf00      	nop
 80092ac:	46020c00 	.word	0x46020c00
 80092b0:	0007a120 	.word	0x0007a120
 80092b4:	00f42400 	.word	0x00f42400
 80092b8:	007a1200 	.word	0x007a1200
    {
      case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80092bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80092c0:	4618      	mov	r0, r3
 80092c2:	f7ff fa61 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 80092c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092c8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092ca:	f001 b869 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80092ce:	f107 0318 	add.w	r3, r7, #24
 80092d2:	4618      	mov	r0, r3
 80092d4:	f7ff fbc0 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 80092d8:	69fb      	ldr	r3, [r7, #28]
 80092da:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092dc:	f001 b860 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80092e0:	4ba7      	ldr	r3, [pc, #668]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80092ec:	d103      	bne.n	80092f6 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
        {
          frequency = HSI48_VALUE;
 80092ee:	4ba5      	ldr	r3, [pc, #660]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80092f0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 80092f2:	f001 b855 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 80092f6:	2300      	movs	r3, #0
 80092f8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80092fa:	f001 b851 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80092fe:	4ba0      	ldr	r3, [pc, #640]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f003 0320 	and.w	r3, r3, #32
 8009306:	2b20      	cmp	r3, #32
 8009308:	d118      	bne.n	800933c <HAL_RCCEx_GetPeriphCLKFreq+0x344>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800930a:	4b9d      	ldr	r3, [pc, #628]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d005      	beq.n	8009322 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 8009316:	4b9a      	ldr	r3, [pc, #616]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	0e1b      	lsrs	r3, r3, #24
 800931c:	f003 030f 	and.w	r3, r3, #15
 8009320:	e006      	b.n	8009330 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8009322:	4b97      	ldr	r3, [pc, #604]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009324:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009328:	041b      	lsls	r3, r3, #16
 800932a:	0e1b      	lsrs	r3, r3, #24
 800932c:	f003 030f 	and.w	r3, r3, #15
 8009330:	4a95      	ldr	r2, [pc, #596]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8009332:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009336:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009338:	f001 b832 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800933c:	2300      	movs	r3, #0
 800933e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009340:	f001 b82e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default :

        frequency = 0U;
 8009344:	2300      	movs	r3, #0
 8009346:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009348:	f001 b82a 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800934c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009350:	f5a2 1100 	sub.w	r1, r2, #2097152	; 0x200000
 8009354:	430b      	orrs	r3, r1
 8009356:	d17f      	bne.n	8009458 <HAL_RCCEx_GetPeriphCLKFreq+0x460>
  {
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8009358:	4b89      	ldr	r3, [pc, #548]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800935a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800935e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009362:	633b      	str	r3, [r7, #48]	; 0x30
    if (srcclk == RCC_SDMMCCLKSOURCE_CLK48)
 8009364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009366:	2b00      	cmp	r3, #0
 8009368:	d165      	bne.n	8009436 <HAL_RCCEx_GetPeriphCLKFreq+0x43e>
    {
      srcclk = __HAL_RCC_GET_ICLK_SOURCE();
 800936a:	4b85      	ldr	r3, [pc, #532]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800936c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009370:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8009374:	633b      	str	r3, [r7, #48]	; 0x30

      switch (srcclk)
 8009376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009378:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 800937c:	d034      	beq.n	80093e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3f0>
 800937e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009380:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8009384:	d853      	bhi.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009388:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800938c:	d00b      	beq.n	80093a6 <HAL_RCCEx_GetPeriphCLKFreq+0x3ae>
 800938e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009394:	d84b      	bhi.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
 8009396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009398:	2b00      	cmp	r3, #0
 800939a:	d016      	beq.n	80093ca <HAL_RCCEx_GetPeriphCLKFreq+0x3d2>
 800939c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800939e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80093a2:	d009      	beq.n	80093b8 <HAL_RCCEx_GetPeriphCLKFreq+0x3c0>
 80093a4:	e043      	b.n	800942e <HAL_RCCEx_GetPeriphCLKFreq+0x436>
      {
        case RCC_ICLK_CLKSOURCE_PLL1: /* PLL1Q  */
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80093a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7ff f9ec 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80093b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093b2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80093b4:	f000 bff4 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_PLL2: /* PLL2Q */
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80093b8:	f107 0318 	add.w	r3, r7, #24
 80093bc:	4618      	mov	r0, r3
 80093be:	f7ff fb4b 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80093c2:	69fb      	ldr	r3, [r7, #28]
 80093c4:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80093c6:	f000 bfeb 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_HSI48: /* HSI48 */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY))
 80093ca:	4b6d      	ldr	r3, [pc, #436]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093d6:	d103      	bne.n	80093e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
          {
            frequency = HSI48_VALUE;
 80093d8:	4b6a      	ldr	r3, [pc, #424]	; (8009584 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 80093da:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 80093dc:	f000 bfe0 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 80093e0:	2300      	movs	r3, #0
 80093e2:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 80093e4:	f000 bfdc 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        case RCC_ICLK_CLKSOURCE_MSIK: /* MSIK frequency range in HZ */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80093e8:	4b65      	ldr	r3, [pc, #404]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093ea:	681b      	ldr	r3, [r3, #0]
 80093ec:	f003 0320 	and.w	r3, r3, #32
 80093f0:	2b20      	cmp	r3, #32
 80093f2:	d118      	bne.n	8009426 <HAL_RCCEx_GetPeriphCLKFreq+0x42e>
          {
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80093f4:	4b62      	ldr	r3, [pc, #392]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80093f6:	689b      	ldr	r3, [r3, #8]
 80093f8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d005      	beq.n	800940c <HAL_RCCEx_GetPeriphCLKFreq+0x414>
 8009400:	4b5f      	ldr	r3, [pc, #380]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	0e1b      	lsrs	r3, r3, #24
 8009406:	f003 030f 	and.w	r3, r3, #15
 800940a:	e006      	b.n	800941a <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 800940c:	4b5c      	ldr	r3, [pc, #368]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 800940e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009412:	041b      	lsls	r3, r3, #16
 8009414:	0e1b      	lsrs	r3, r3, #24
 8009416:	f003 030f 	and.w	r3, r3, #15
 800941a:	4a5b      	ldr	r2, [pc, #364]	; (8009588 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 800941c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009420:	637b      	str	r3, [r7, #52]	; 0x34
          }
          else
          {
            frequency = 0U;
          }
          break;
 8009422:	f000 bfbd 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
            frequency = 0U;
 8009426:	2300      	movs	r3, #0
 8009428:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 800942a:	f000 bfb9 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
        default :
        {
          frequency = 0U;
 800942e:	2300      	movs	r3, #0
 8009430:	637b      	str	r3, [r7, #52]	; 0x34
          break;
 8009432:	f000 bfb5 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        }
      }
    }
    else if (srcclk == RCC_SDMMCCLKSOURCE_PLL1)
 8009436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009438:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800943c:	d108      	bne.n	8009450 <HAL_RCCEx_GetPeriphCLKFreq+0x458>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800943e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009442:	4618      	mov	r0, r3
 8009444:	f7ff f9a0 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_P_Frequency;
 8009448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800944a:	637b      	str	r3, [r7, #52]	; 0x34
 800944c:	f000 bfa8 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else
    {
      frequency = 0U;
 8009450:	2300      	movs	r3, #0
 8009452:	637b      	str	r3, [r7, #52]	; 0x34
 8009454:	f000 bfa4 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_USART1)
 8009458:	e9d7 2300 	ldrd	r2, r3, [r7]
 800945c:	1e51      	subs	r1, r2, #1
 800945e:	430b      	orrs	r3, r1
 8009460:	d136      	bne.n	80094d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4d8>
  {
    /* Get the current USART1 source */
    srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8009462:	4b47      	ldr	r3, [pc, #284]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009464:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009468:	f003 0303 	and.w	r3, r3, #3
 800946c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART1CLKSOURCE_PCLK2)
 800946e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009470:	2b00      	cmp	r3, #0
 8009472:	d104      	bne.n	800947e <HAL_RCCEx_GetPeriphCLKFreq+0x486>
    {
      frequency = HAL_RCC_GetPCLK2Freq();
 8009474:	f7fe fae2 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 8009478:	6378      	str	r0, [r7, #52]	; 0x34
 800947a:	f000 bf91 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART1CLKSOURCE_SYSCLK)
 800947e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009480:	2b01      	cmp	r3, #1
 8009482:	d104      	bne.n	800948e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009484:	f7fe f9a4 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009488:	6378      	str	r0, [r7, #52]	; 0x34
 800948a:	f000 bf89 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART1CLKSOURCE_HSI))
 800948e:	4b3c      	ldr	r3, [pc, #240]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009496:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800949a:	d106      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
 800949c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800949e:	2b02      	cmp	r3, #2
 80094a0:	d103      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x4b2>
    {
      frequency = HSI_VALUE;
 80094a2:	4b3a      	ldr	r3, [pc, #232]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 80094a4:	637b      	str	r3, [r7, #52]	; 0x34
 80094a6:	f000 bf7b 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART1CLKSOURCE_LSE))
 80094aa:	4b35      	ldr	r3, [pc, #212]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80094ac:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80094b0:	f003 0302 	and.w	r3, r3, #2
 80094b4:	2b02      	cmp	r3, #2
 80094b6:	d107      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
 80094b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094ba:	2b03      	cmp	r3, #3
 80094bc:	d104      	bne.n	80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0x4d0>
    {
      frequency = LSE_VALUE;
 80094be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80094c2:	637b      	str	r3, [r7, #52]	; 0x34
 80094c4:	f000 bf6c 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART1 */
    else
    {
      frequency = 0U;
 80094c8:	2300      	movs	r3, #0
 80094ca:	637b      	str	r3, [r7, #52]	; 0x34
 80094cc:	f000 bf68 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#if defined(USART2)
  else if (PeriphClk == RCC_PERIPHCLK_USART2)
 80094d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094d4:	1e91      	subs	r1, r2, #2
 80094d6:	430b      	orrs	r3, r1
 80094d8:	d136      	bne.n	8009548 <HAL_RCCEx_GetPeriphCLKFreq+0x550>
  {
    /* Get the current USART2 source */
    srcclk = __HAL_RCC_GET_USART2_SOURCE();
 80094da:	4b29      	ldr	r3, [pc, #164]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 80094dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80094e0:	f003 030c 	and.w	r3, r3, #12
 80094e4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART2CLKSOURCE_PCLK1)
 80094e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094e8:	2b00      	cmp	r3, #0
 80094ea:	d104      	bne.n	80094f6 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80094ec:	f7fe fa92 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 80094f0:	6378      	str	r0, [r7, #52]	; 0x34
 80094f2:	f000 bf55 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART2CLKSOURCE_SYSCLK)
 80094f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80094f8:	2b04      	cmp	r3, #4
 80094fa:	d104      	bne.n	8009506 <HAL_RCCEx_GetPeriphCLKFreq+0x50e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80094fc:	f7fe f968 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009500:	6378      	str	r0, [r7, #52]	; 0x34
 8009502:	f000 bf4d 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART2CLKSOURCE_HSI))
 8009506:	4b1e      	ldr	r3, [pc, #120]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800950e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009512:	d106      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8009514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009516:	2b08      	cmp	r3, #8
 8009518:	d103      	bne.n	8009522 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
    {
      frequency = HSI_VALUE;
 800951a:	4b1c      	ldr	r3, [pc, #112]	; (800958c <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 800951c:	637b      	str	r3, [r7, #52]	; 0x34
 800951e:	f000 bf3f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART2CLKSOURCE_LSE))
 8009522:	4b17      	ldr	r3, [pc, #92]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009524:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009528:	f003 0302 	and.w	r3, r3, #2
 800952c:	2b02      	cmp	r3, #2
 800952e:	d107      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
 8009530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009532:	2b0c      	cmp	r3, #12
 8009534:	d104      	bne.n	8009540 <HAL_RCCEx_GetPeriphCLKFreq+0x548>
    {
      frequency = LSE_VALUE;
 8009536:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800953a:	637b      	str	r3, [r7, #52]	; 0x34
 800953c:	f000 bf30 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART2 */
    else
    {
      frequency = 0U;
 8009540:	2300      	movs	r3, #0
 8009542:	637b      	str	r3, [r7, #52]	; 0x34
 8009544:	f000 bf2c 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
#endif /* USART2 */
  else if (PeriphClk == RCC_PERIPHCLK_USART3)
 8009548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800954c:	1f11      	subs	r1, r2, #4
 800954e:	430b      	orrs	r3, r1
 8009550:	d13f      	bne.n	80095d2 <HAL_RCCEx_GetPeriphCLKFreq+0x5da>
  {
    /* Get the current USART3 source */
    srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8009552:	4b0b      	ldr	r3, [pc, #44]	; (8009580 <HAL_RCCEx_GetPeriphCLKFreq+0x588>)
 8009554:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009558:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800955c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_USART3CLKSOURCE_PCLK1)
 800955e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009560:	2b00      	cmp	r3, #0
 8009562:	d104      	bne.n	800956e <HAL_RCCEx_GetPeriphCLKFreq+0x576>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009564:	f7fe fa56 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009568:	6378      	str	r0, [r7, #52]	; 0x34
 800956a:	f000 bf19 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_USART3CLKSOURCE_SYSCLK)
 800956e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009570:	2b10      	cmp	r3, #16
 8009572:	d10d      	bne.n	8009590 <HAL_RCCEx_GetPeriphCLKFreq+0x598>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009574:	f7fe f92c 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009578:	6378      	str	r0, [r7, #52]	; 0x34
 800957a:	f000 bf11 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800957e:	bf00      	nop
 8009580:	46020c00 	.word	0x46020c00
 8009584:	02dc6c00 	.word	0x02dc6c00
 8009588:	08010c68 	.word	0x08010c68
 800958c:	00f42400 	.word	0x00f42400
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_USART3CLKSOURCE_HSI))
 8009590:	4ba6      	ldr	r3, [pc, #664]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009598:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800959c:	d106      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
 800959e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	d103      	bne.n	80095ac <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>
    {
      frequency = HSI_VALUE;
 80095a4:	4ba2      	ldr	r3, [pc, #648]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 80095a6:	637b      	str	r3, [r7, #52]	; 0x34
 80095a8:	f000 befa 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_USART3CLKSOURCE_LSE))
 80095ac:	4b9f      	ldr	r3, [pc, #636]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095ae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80095b2:	f003 0302 	and.w	r3, r3, #2
 80095b6:	2b02      	cmp	r3, #2
 80095b8:	d107      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
 80095ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095bc:	2b30      	cmp	r3, #48	; 0x30
 80095be:	d104      	bne.n	80095ca <HAL_RCCEx_GetPeriphCLKFreq+0x5d2>
    {
      frequency = LSE_VALUE;
 80095c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80095c4:	637b      	str	r3, [r7, #52]	; 0x34
 80095c6:	f000 beeb 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for USART3 */
    else
    {
      frequency = 0U;
 80095ca:	2300      	movs	r3, #0
 80095cc:	637b      	str	r3, [r7, #52]	; 0x34
 80095ce:	f000 bee7 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART4)
 80095d2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80095d6:	f1a2 0108 	sub.w	r1, r2, #8
 80095da:	430b      	orrs	r3, r1
 80095dc:	d136      	bne.n	800964c <HAL_RCCEx_GetPeriphCLKFreq+0x654>
  {
    /* Get the current UART4 source */
    srcclk = __HAL_RCC_GET_UART4_SOURCE();
 80095de:	4b93      	ldr	r3, [pc, #588]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80095e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80095e4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80095e8:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART4CLKSOURCE_PCLK1)
 80095ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d104      	bne.n	80095fa <HAL_RCCEx_GetPeriphCLKFreq+0x602>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 80095f0:	f7fe fa10 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 80095f4:	6378      	str	r0, [r7, #52]	; 0x34
 80095f6:	f000 bed3 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART4CLKSOURCE_SYSCLK)
 80095fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80095fc:	2b40      	cmp	r3, #64	; 0x40
 80095fe:	d104      	bne.n	800960a <HAL_RCCEx_GetPeriphCLKFreq+0x612>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009600:	f7fe f8e6 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009604:	6378      	str	r0, [r7, #52]	; 0x34
 8009606:	f000 becb 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART4CLKSOURCE_HSI))
 800960a:	4b88      	ldr	r3, [pc, #544]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009612:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009616:	d106      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
 8009618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800961a:	2b80      	cmp	r3, #128	; 0x80
 800961c:	d103      	bne.n	8009626 <HAL_RCCEx_GetPeriphCLKFreq+0x62e>
    {
      frequency = HSI_VALUE;
 800961e:	4b84      	ldr	r3, [pc, #528]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8009620:	637b      	str	r3, [r7, #52]	; 0x34
 8009622:	f000 bebd 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART4CLKSOURCE_LSE))
 8009626:	4b81      	ldr	r3, [pc, #516]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009628:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800962c:	f003 0302 	and.w	r3, r3, #2
 8009630:	2b02      	cmp	r3, #2
 8009632:	d107      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
 8009634:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009636:	2bc0      	cmp	r3, #192	; 0xc0
 8009638:	d104      	bne.n	8009644 <HAL_RCCEx_GetPeriphCLKFreq+0x64c>
    {
      frequency = LSE_VALUE;
 800963a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800963e:	637b      	str	r3, [r7, #52]	; 0x34
 8009640:	f000 beae 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART4 */
    else
    {
      frequency = 0U;
 8009644:	2300      	movs	r3, #0
 8009646:	637b      	str	r3, [r7, #52]	; 0x34
 8009648:	f000 beaa 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_UART5)
 800964c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009650:	f1a2 0110 	sub.w	r1, r2, #16
 8009654:	430b      	orrs	r3, r1
 8009656:	d139      	bne.n	80096cc <HAL_RCCEx_GetPeriphCLKFreq+0x6d4>
  {
    /* Get the current UART5 source */
    srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8009658:	4b74      	ldr	r3, [pc, #464]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800965a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800965e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009662:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_UART5CLKSOURCE_PCLK1)
 8009664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 800966a:	f7fe f9d3 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 800966e:	6378      	str	r0, [r7, #52]	; 0x34
 8009670:	f000 be96 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_UART5CLKSOURCE_SYSCLK)
 8009674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009676:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800967a:	d104      	bne.n	8009686 <HAL_RCCEx_GetPeriphCLKFreq+0x68e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 800967c:	f7fe f8a8 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009680:	6378      	str	r0, [r7, #52]	; 0x34
 8009682:	f000 be8d 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_UART5CLKSOURCE_HSI))
 8009686:	4b69      	ldr	r3, [pc, #420]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009688:	681b      	ldr	r3, [r3, #0]
 800968a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800968e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009692:	d107      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
 8009694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009696:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800969a:	d103      	bne.n	80096a4 <HAL_RCCEx_GetPeriphCLKFreq+0x6ac>
    {
      frequency = HSI_VALUE;
 800969c:	4b64      	ldr	r3, [pc, #400]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800969e:	637b      	str	r3, [r7, #52]	; 0x34
 80096a0:	f000 be7e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_UART5CLKSOURCE_LSE))
 80096a4:	4b61      	ldr	r3, [pc, #388]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096a6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80096aa:	f003 0302 	and.w	r3, r3, #2
 80096ae:	2b02      	cmp	r3, #2
 80096b0:	d108      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
 80096b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096b4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80096b8:	d104      	bne.n	80096c4 <HAL_RCCEx_GetPeriphCLKFreq+0x6cc>
    {
      frequency = LSE_VALUE;
 80096ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80096be:	637b      	str	r3, [r7, #52]	; 0x34
 80096c0:	f000 be6e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for UART5 */
    else
    {
      frequency = 0U;
 80096c4:	2300      	movs	r3, #0
 80096c6:	637b      	str	r3, [r7, #52]	; 0x34
 80096c8:	f000 be6a 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* USART6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPUART1)
 80096cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80096d0:	f1a2 0120 	sub.w	r1, r2, #32
 80096d4:	430b      	orrs	r3, r1
 80096d6:	d158      	bne.n	800978a <HAL_RCCEx_GetPeriphCLKFreq+0x792>
  {
    /* Get the current LPUART1 source */
    srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 80096d8:	4b54      	ldr	r3, [pc, #336]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80096da:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80096de:	f003 0307 	and.w	r3, r3, #7
 80096e2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPUART1CLKSOURCE_PCLK3)
 80096e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d104      	bne.n	80096f4 <HAL_RCCEx_GetPeriphCLKFreq+0x6fc>
    {
      frequency = HAL_RCC_GetPCLK3Freq();
 80096ea:	f7fe f9bb 	bl	8007a64 <HAL_RCC_GetPCLK3Freq>
 80096ee:	6378      	str	r0, [r7, #52]	; 0x34
 80096f0:	f000 be56 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_LPUART1CLKSOURCE_SYSCLK)
 80096f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80096f6:	2b01      	cmp	r3, #1
 80096f8:	d104      	bne.n	8009704 <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80096fa:	f7fe f869 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 80096fe:	6378      	str	r0, [r7, #52]	; 0x34
 8009700:	f000 be4e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_HSI))
 8009704:	4b49      	ldr	r3, [pc, #292]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800970c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009710:	d106      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
 8009712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009714:	2b02      	cmp	r3, #2
 8009716:	d103      	bne.n	8009720 <HAL_RCCEx_GetPeriphCLKFreq+0x728>
    {
      frequency = HSI_VALUE;
 8009718:	4b45      	ldr	r3, [pc, #276]	; (8009830 <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 800971a:	637b      	str	r3, [r7, #52]	; 0x34
 800971c:	f000 be40 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPUART1CLKSOURCE_LSE))
 8009720:	4b42      	ldr	r3, [pc, #264]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009722:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009726:	f003 0302 	and.w	r3, r3, #2
 800972a:	2b02      	cmp	r3, #2
 800972c:	d107      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 800972e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009730:	2b03      	cmp	r3, #3
 8009732:	d104      	bne.n	800973e <HAL_RCCEx_GetPeriphCLKFreq+0x746>
    {
      frequency = LSE_VALUE;
 8009734:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009738:	637b      	str	r3, [r7, #52]	; 0x34
 800973a:	f000 be31 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_LPUART1CLKSOURCE_MSIK))
 800973e:	4b3b      	ldr	r3, [pc, #236]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	f003 0320 	and.w	r3, r3, #32
 8009746:	2b20      	cmp	r3, #32
 8009748:	d11b      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
 800974a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800974c:	2b04      	cmp	r3, #4
 800974e:	d118      	bne.n	8009782 <HAL_RCCEx_GetPeriphCLKFreq+0x78a>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009750:	4b36      	ldr	r3, [pc, #216]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009752:	689b      	ldr	r3, [r3, #8]
 8009754:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009758:	2b00      	cmp	r3, #0
 800975a:	d005      	beq.n	8009768 <HAL_RCCEx_GetPeriphCLKFreq+0x770>
 800975c:	4b33      	ldr	r3, [pc, #204]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800975e:	689b      	ldr	r3, [r3, #8]
 8009760:	0e1b      	lsrs	r3, r3, #24
 8009762:	f003 030f 	and.w	r3, r3, #15
 8009766:	e006      	b.n	8009776 <HAL_RCCEx_GetPeriphCLKFreq+0x77e>
 8009768:	4b30      	ldr	r3, [pc, #192]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800976a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800976e:	041b      	lsls	r3, r3, #16
 8009770:	0e1b      	lsrs	r3, r3, #24
 8009772:	f003 030f 	and.w	r3, r3, #15
 8009776:	4a2f      	ldr	r2, [pc, #188]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8009778:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800977c:	637b      	str	r3, [r7, #52]	; 0x34
 800977e:	f000 be0f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPUART1 */
    else
    {
      frequency = 0U;
 8009782:	2300      	movs	r3, #0
 8009784:	637b      	str	r3, [r7, #52]	; 0x34
 8009786:	f000 be0b 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADCDAC)
 800978a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800978e:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8009792:	430b      	orrs	r3, r1
 8009794:	d172      	bne.n	800987c <HAL_RCCEx_GetPeriphCLKFreq+0x884>
  {
    srcclk = __HAL_RCC_GET_ADCDAC_SOURCE();
 8009796:	4b25      	ldr	r3, [pc, #148]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009798:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800979c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 80097a0:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_ADCDACCLKSOURCE_SYSCLK)
 80097a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097a8:	d104      	bne.n	80097b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 80097aa:	f7fe f811 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 80097ae:	6378      	str	r0, [r7, #52]	; 0x34
 80097b0:	f000 bdf6 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_PLL2)
 80097b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80097ba:	d108      	bne.n	80097ce <HAL_RCCEx_GetPeriphCLKFreq+0x7d6>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80097bc:	f107 0318 	add.w	r3, r7, #24
 80097c0:	4618      	mov	r0, r3
 80097c2:	f7ff f949 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_R_Frequency;
 80097c6:	6a3b      	ldr	r3, [r7, #32]
 80097c8:	637b      	str	r3, [r7, #52]	; 0x34
 80097ca:	f000 bde9 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_HCLK)
 80097ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d104      	bne.n	80097de <HAL_RCCEx_GetPeriphCLKFreq+0x7e6>
    {
      frequency = HAL_RCC_GetHCLKFreq();
 80097d4:	f7fe f904 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 80097d8:	6378      	str	r0, [r7, #52]	; 0x34
 80097da:	f000 bde1 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_ADCDACCLKSOURCE_MSIK)
 80097de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80097e0:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 80097e4:	d128      	bne.n	8009838 <HAL_RCCEx_GetPeriphCLKFreq+0x840>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80097e6:	4b11      	ldr	r3, [pc, #68]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 0320 	and.w	r3, r3, #32
 80097ee:	2b20      	cmp	r3, #32
 80097f0:	d118      	bne.n	8009824 <HAL_RCCEx_GetPeriphCLKFreq+0x82c>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80097f2:	4b0e      	ldr	r3, [pc, #56]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 80097f4:	689b      	ldr	r3, [r3, #8]
 80097f6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80097fa:	2b00      	cmp	r3, #0
 80097fc:	d005      	beq.n	800980a <HAL_RCCEx_GetPeriphCLKFreq+0x812>
 80097fe:	4b0b      	ldr	r3, [pc, #44]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8009800:	689b      	ldr	r3, [r3, #8]
 8009802:	0e1b      	lsrs	r3, r3, #24
 8009804:	f003 030f 	and.w	r3, r3, #15
 8009808:	e006      	b.n	8009818 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
 800980a:	4b08      	ldr	r3, [pc, #32]	; (800982c <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 800980c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009810:	041b      	lsls	r3, r3, #16
 8009812:	0e1b      	lsrs	r3, r3, #24
 8009814:	f003 030f 	and.w	r3, r3, #15
 8009818:	4a06      	ldr	r2, [pc, #24]	; (8009834 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 800981a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800981e:	637b      	str	r3, [r7, #52]	; 0x34
 8009820:	f000 bdbe 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009824:	2300      	movs	r3, #0
 8009826:	637b      	str	r3, [r7, #52]	; 0x34
 8009828:	f000 bdba 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800982c:	46020c00 	.word	0x46020c00
 8009830:	00f42400 	.word	0x00f42400
 8009834:	08010c68 	.word	0x08010c68
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSE))
 8009838:	4baf      	ldr	r3, [pc, #700]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009840:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009844:	d107      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
 8009846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009848:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800984c:	d103      	bne.n	8009856 <HAL_RCCEx_GetPeriphCLKFreq+0x85e>
    {
      frequency = HSE_VALUE;
 800984e:	4bab      	ldr	r3, [pc, #684]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009850:	637b      	str	r3, [r7, #52]	; 0x34
 8009852:	f000 bda5 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_ADCDACCLKSOURCE_HSI))
 8009856:	4ba8      	ldr	r3, [pc, #672]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800985e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009862:	d107      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
 8009864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009866:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800986a:	d103      	bne.n	8009874 <HAL_RCCEx_GetPeriphCLKFreq+0x87c>
    {
      frequency = HSI_VALUE;
 800986c:	4ba3      	ldr	r3, [pc, #652]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 800986e:	637b      	str	r3, [r7, #52]	; 0x34
 8009870:	f000 bd96 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for ADC */
    else
    {
      frequency = 0U;
 8009874:	2300      	movs	r3, #0
 8009876:	637b      	str	r3, [r7, #52]	; 0x34
 8009878:	f000 bd92 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_MDF1)
 800987c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009880:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8009884:	430b      	orrs	r3, r1
 8009886:	d158      	bne.n	800993a <HAL_RCCEx_GetPeriphCLKFreq+0x942>
  {
    /* Get the current MDF1 source */
    srcclk = __HAL_RCC_GET_MDF1_SOURCE();
 8009888:	4b9b      	ldr	r3, [pc, #620]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 800988a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800988e:	f003 0307 	and.w	r3, r3, #7
 8009892:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009896:	2b04      	cmp	r3, #4
 8009898:	d84b      	bhi.n	8009932 <HAL_RCCEx_GetPeriphCLKFreq+0x93a>
 800989a:	a201      	add	r2, pc, #4	; (adr r2, 80098a0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>)
 800989c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80098a0:	080098d9 	.word	0x080098d9
 80098a4:	080098b5 	.word	0x080098b5
 80098a8:	080098c7 	.word	0x080098c7
 80098ac:	080098e3 	.word	0x080098e3
 80098b0:	080098ed 	.word	0x080098ed
    {
      case RCC_MDF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80098b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80098b8:	4618      	mov	r0, r3
 80098ba:	f7fe ff65 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 80098be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098c2:	f000 bd6d 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80098c6:	f107 030c 	add.w	r3, r7, #12
 80098ca:	4618      	mov	r0, r3
 80098cc:	f7ff fa2c 	bl	8008d28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80098d0:	693b      	ldr	r3, [r7, #16]
 80098d2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098d4:	f000 bd64 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80098d8:	f7fe f882 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 80098dc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80098de:	f000 bd5f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80098e2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80098e6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80098e8:	f000 bd5a 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_MDF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80098ec:	4b82      	ldr	r3, [pc, #520]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f003 0320 	and.w	r3, r3, #32
 80098f4:	2b20      	cmp	r3, #32
 80098f6:	d118      	bne.n	800992a <HAL_RCCEx_GetPeriphCLKFreq+0x932>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80098f8:	4b7f      	ldr	r3, [pc, #508]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80098fa:	689b      	ldr	r3, [r3, #8]
 80098fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009900:	2b00      	cmp	r3, #0
 8009902:	d005      	beq.n	8009910 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
 8009904:	4b7c      	ldr	r3, [pc, #496]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	0e1b      	lsrs	r3, r3, #24
 800990a:	f003 030f 	and.w	r3, r3, #15
 800990e:	e006      	b.n	800991e <HAL_RCCEx_GetPeriphCLKFreq+0x926>
 8009910:	4b79      	ldr	r3, [pc, #484]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009912:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009916:	041b      	lsls	r3, r3, #16
 8009918:	0e1b      	lsrs	r3, r3, #24
 800991a:	f003 030f 	and.w	r3, r3, #15
 800991e:	4a78      	ldr	r2, [pc, #480]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009920:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009924:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009926:	f000 bd3b 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800992a:	2300      	movs	r3, #0
 800992c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800992e:	f000 bd37 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009932:	2300      	movs	r3, #0
 8009934:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009936:	f000 bd33 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADF1)
 800993a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800993e:	f5a2 3100 	sub.w	r1, r2, #131072	; 0x20000
 8009942:	430b      	orrs	r3, r1
 8009944:	d167      	bne.n	8009a16 <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
  {
    /* Get the current ADF1 source */
    srcclk = __HAL_RCC_GET_ADF1_SOURCE();
 8009946:	4b6c      	ldr	r3, [pc, #432]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009948:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800994c:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8009950:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009954:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009958:	d036      	beq.n	80099c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009960:	d855      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009964:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009968:	d029      	beq.n	80099be <HAL_RCCEx_GetPeriphCLKFreq+0x9c6>
 800996a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009970:	d84d      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009974:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009978:	d013      	beq.n	80099a2 <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 800997a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800997c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009980:	d845      	bhi.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
 8009982:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009984:	2b00      	cmp	r3, #0
 8009986:	d015      	beq.n	80099b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9bc>
 8009988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800998a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800998e:	d13e      	bne.n	8009a0e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
    {
      case RCC_ADF1CLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009990:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009994:	4618      	mov	r0, r3
 8009996:	f7fe fef7 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_P_Frequency;
 800999a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800999c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800999e:	f000 bcff 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PLL3:

        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80099a2:	f107 030c 	add.w	r3, r7, #12
 80099a6:	4618      	mov	r0, r3
 80099a8:	f7ff f9be 	bl	8008d28 <HAL_RCCEx_GetPLL3ClockFreq>
        frequency = pll3_clocks.PLL3_Q_Frequency;
 80099ac:	693b      	ldr	r3, [r7, #16]
 80099ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099b0:	f000 bcf6 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_HCLK:

        frequency = HAL_RCC_GetHCLKFreq();
 80099b4:	f7fe f814 	bl	80079e0 <HAL_RCC_GetHCLKFreq>
 80099b8:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 80099ba:	f000 bcf1 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_PIN:

        frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 80099be:	f64b 3380 	movw	r3, #48000	; 0xbb80
 80099c2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80099c4:	f000 bcec 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_ADF1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 80099c8:	4b4b      	ldr	r3, [pc, #300]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d118      	bne.n	8009a06 <HAL_RCCEx_GetPeriphCLKFreq+0xa0e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 80099d4:	4b48      	ldr	r3, [pc, #288]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099d6:	689b      	ldr	r3, [r3, #8]
 80099d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d005      	beq.n	80099ec <HAL_RCCEx_GetPeriphCLKFreq+0x9f4>
 80099e0:	4b45      	ldr	r3, [pc, #276]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099e2:	689b      	ldr	r3, [r3, #8]
 80099e4:	0e1b      	lsrs	r3, r3, #24
 80099e6:	f003 030f 	and.w	r3, r3, #15
 80099ea:	e006      	b.n	80099fa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 80099ec:	4b42      	ldr	r3, [pc, #264]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 80099ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80099f2:	041b      	lsls	r3, r3, #16
 80099f4:	0e1b      	lsrs	r3, r3, #24
 80099f6:	f003 030f 	and.w	r3, r3, #15
 80099fa:	4a41      	ldr	r2, [pc, #260]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 80099fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009a00:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009a02:	f000 bccd 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009a06:	2300      	movs	r3, #0
 8009a08:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a0a:	f000 bcc9 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009a12:	f000 bcc5 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C1)
 8009a16:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009a1a:	f1a2 0140 	sub.w	r1, r2, #64	; 0x40
 8009a1e:	430b      	orrs	r3, r1
 8009a20:	d14c      	bne.n	8009abc <HAL_RCCEx_GetPeriphCLKFreq+0xac4>
  {
    /* Get the current I2C1 source */
    srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8009a22:	4b35      	ldr	r3, [pc, #212]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009a28:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009a2c:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C1CLKSOURCE_PCLK1)
 8009a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d104      	bne.n	8009a3e <HAL_RCCEx_GetPeriphCLKFreq+0xa46>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009a34:	f7fd ffee 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009a38:	6378      	str	r0, [r7, #52]	; 0x34
 8009a3a:	f000 bcb1 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C1CLKSOURCE_SYSCLK)
 8009a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a44:	d104      	bne.n	8009a50 <HAL_RCCEx_GetPeriphCLKFreq+0xa58>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009a46:	f7fd fec3 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009a4a:	6378      	str	r0, [r7, #52]	; 0x34
 8009a4c:	f000 bca8 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C1CLKSOURCE_HSI))
 8009a50:	4b29      	ldr	r3, [pc, #164]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009a5c:	d107      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
 8009a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009a64:	d103      	bne.n	8009a6e <HAL_RCCEx_GetPeriphCLKFreq+0xa76>
    {
      frequency = HSI_VALUE;
 8009a66:	4b25      	ldr	r3, [pc, #148]	; (8009afc <HAL_RCCEx_GetPeriphCLKFreq+0xb04>)
 8009a68:	637b      	str	r3, [r7, #52]	; 0x34
 8009a6a:	f000 bc99 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C1CLKSOURCE_MSIK))
 8009a6e:	4b22      	ldr	r3, [pc, #136]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	f003 0320 	and.w	r3, r3, #32
 8009a76:	2b20      	cmp	r3, #32
 8009a78:	d11c      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
 8009a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a7c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009a80:	d118      	bne.n	8009ab4 <HAL_RCCEx_GetPeriphCLKFreq+0xabc>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009a82:	4b1d      	ldr	r3, [pc, #116]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a84:	689b      	ldr	r3, [r3, #8]
 8009a86:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d005      	beq.n	8009a9a <HAL_RCCEx_GetPeriphCLKFreq+0xaa2>
 8009a8e:	4b1a      	ldr	r3, [pc, #104]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a90:	689b      	ldr	r3, [r3, #8]
 8009a92:	0e1b      	lsrs	r3, r3, #24
 8009a94:	f003 030f 	and.w	r3, r3, #15
 8009a98:	e006      	b.n	8009aa8 <HAL_RCCEx_GetPeriphCLKFreq+0xab0>
 8009a9a:	4b17      	ldr	r3, [pc, #92]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009a9c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009aa0:	041b      	lsls	r3, r3, #16
 8009aa2:	0e1b      	lsrs	r3, r3, #24
 8009aa4:	f003 030f 	and.w	r3, r3, #15
 8009aa8:	4a15      	ldr	r2, [pc, #84]	; (8009b00 <HAL_RCCEx_GetPeriphCLKFreq+0xb08>)
 8009aaa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009aae:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab0:	f000 bc76 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C1 */
    else
    {
      frequency = 0U;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	637b      	str	r3, [r7, #52]	; 0x34
 8009ab8:	f000 bc72 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C2)
 8009abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009ac0:	f1a2 0180 	sub.w	r1, r2, #128	; 0x80
 8009ac4:	430b      	orrs	r3, r1
 8009ac6:	d153      	bne.n	8009b70 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
  {
    /* Get the current I2C2 source */
    srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 8009ac8:	4b0b      	ldr	r3, [pc, #44]	; (8009af8 <HAL_RCCEx_GetPeriphCLKFreq+0xb00>)
 8009aca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009ace:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8009ad2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C2CLKSOURCE_PCLK1)
 8009ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d104      	bne.n	8009ae4 <HAL_RCCEx_GetPeriphCLKFreq+0xaec>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009ada:	f7fd ff9b 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009ade:	6378      	str	r0, [r7, #52]	; 0x34
 8009ae0:	f000 bc5e 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C2CLKSOURCE_SYSCLK)
 8009ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ae6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aea:	d10b      	bne.n	8009b04 <HAL_RCCEx_GetPeriphCLKFreq+0xb0c>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009aec:	f7fd fe70 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009af0:	6378      	str	r0, [r7, #52]	; 0x34
 8009af2:	f000 bc55 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009af6:	bf00      	nop
 8009af8:	46020c00 	.word	0x46020c00
 8009afc:	00f42400 	.word	0x00f42400
 8009b00:	08010c68 	.word	0x08010c68
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C2CLKSOURCE_HSI))
 8009b04:	4ba1      	ldr	r3, [pc, #644]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009b0c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b10:	d107      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
 8009b12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009b18:	d103      	bne.n	8009b22 <HAL_RCCEx_GetPeriphCLKFreq+0xb2a>
    {
      frequency = HSI_VALUE;
 8009b1a:	4b9d      	ldr	r3, [pc, #628]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009b1c:	637b      	str	r3, [r7, #52]	; 0x34
 8009b1e:	f000 bc3f 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C2CLKSOURCE_MSIK))
 8009b22:	4b9a      	ldr	r3, [pc, #616]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	f003 0320 	and.w	r3, r3, #32
 8009b2a:	2b20      	cmp	r3, #32
 8009b2c:	d11c      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
 8009b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b30:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009b34:	d118      	bne.n	8009b68 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009b36:	4b95      	ldr	r3, [pc, #596]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b38:	689b      	ldr	r3, [r3, #8]
 8009b3a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d005      	beq.n	8009b4e <HAL_RCCEx_GetPeriphCLKFreq+0xb56>
 8009b42:	4b92      	ldr	r3, [pc, #584]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b44:	689b      	ldr	r3, [r3, #8]
 8009b46:	0e1b      	lsrs	r3, r3, #24
 8009b48:	f003 030f 	and.w	r3, r3, #15
 8009b4c:	e006      	b.n	8009b5c <HAL_RCCEx_GetPeriphCLKFreq+0xb64>
 8009b4e:	4b8f      	ldr	r3, [pc, #572]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b50:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009b54:	041b      	lsls	r3, r3, #16
 8009b56:	0e1b      	lsrs	r3, r3, #24
 8009b58:	f003 030f 	and.w	r3, r3, #15
 8009b5c:	4a8d      	ldr	r2, [pc, #564]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009b5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009b62:	637b      	str	r3, [r7, #52]	; 0x34
 8009b64:	f000 bc1c 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C2 */
    else
    {
      frequency = 0U;
 8009b68:	2300      	movs	r3, #0
 8009b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009b6c:	f000 bc18 	b.w	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C3)
 8009b70:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b74:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8009b78:	430b      	orrs	r3, r1
 8009b7a:	d151      	bne.n	8009c20 <HAL_RCCEx_GetPeriphCLKFreq+0xc28>
  {
    /* Get the current I2C3 source */
    srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8009b7c:	4b83      	ldr	r3, [pc, #524]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009b7e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009b82:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009b86:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 8009b88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b8a:	2bc0      	cmp	r3, #192	; 0xc0
 8009b8c:	d024      	beq.n	8009bd8 <HAL_RCCEx_GetPeriphCLKFreq+0xbe0>
 8009b8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b90:	2bc0      	cmp	r3, #192	; 0xc0
 8009b92:	d842      	bhi.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b96:	2b80      	cmp	r3, #128	; 0x80
 8009b98:	d00d      	beq.n	8009bb6 <HAL_RCCEx_GetPeriphCLKFreq+0xbbe>
 8009b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009b9c:	2b80      	cmp	r3, #128	; 0x80
 8009b9e:	d83c      	bhi.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 8009ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d003      	beq.n	8009bae <HAL_RCCEx_GetPeriphCLKFreq+0xbb6>
 8009ba6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ba8:	2b40      	cmp	r3, #64	; 0x40
 8009baa:	d011      	beq.n	8009bd0 <HAL_RCCEx_GetPeriphCLKFreq+0xbd8>
 8009bac:	e035      	b.n	8009c1a <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
    {
      case RCC_I2C3CLKSOURCE_PCLK3:
      {
        frequency = HAL_RCC_GetPCLK3Freq();
 8009bae:	f7fd ff59 	bl	8007a64 <HAL_RCC_GetPCLK3Freq>
 8009bb2:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009bb4:	e3f4      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_HSI:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009bb6:	4b75      	ldr	r3, [pc, #468]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009bbe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009bc2:	d102      	bne.n	8009bca <HAL_RCCEx_GetPeriphCLKFreq+0xbd2>
        {
          frequency = HSI_VALUE;
 8009bc4:	4b72      	ldr	r3, [pc, #456]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009bc6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009bc8:	e3ea      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009bca:	2300      	movs	r3, #0
 8009bcc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009bce:	e3e7      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_SYSCLK:
      {
        frequency = HAL_RCC_GetSysClockFreq();
 8009bd0:	f7fd fdfe 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009bd4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009bd6:	e3e3      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      case RCC_I2C3CLKSOURCE_MSIK:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009bd8:	4b6c      	ldr	r3, [pc, #432]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f003 0320 	and.w	r3, r3, #32
 8009be0:	2b20      	cmp	r3, #32
 8009be2:	d117      	bne.n	8009c14 <HAL_RCCEx_GetPeriphCLKFreq+0xc1c>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009be4:	4b69      	ldr	r3, [pc, #420]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009be6:	689b      	ldr	r3, [r3, #8]
 8009be8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d005      	beq.n	8009bfc <HAL_RCCEx_GetPeriphCLKFreq+0xc04>
 8009bf0:	4b66      	ldr	r3, [pc, #408]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bf2:	689b      	ldr	r3, [r3, #8]
 8009bf4:	0e1b      	lsrs	r3, r3, #24
 8009bf6:	f003 030f 	and.w	r3, r3, #15
 8009bfa:	e006      	b.n	8009c0a <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 8009bfc:	4b63      	ldr	r3, [pc, #396]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009bfe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009c02:	041b      	lsls	r3, r3, #16
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	f003 030f 	and.w	r3, r3, #15
 8009c0a:	4a62      	ldr	r2, [pc, #392]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009c0c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009c10:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009c12:	e3c5      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009c14:	2300      	movs	r3, #0
 8009c16:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c18:	e3c2      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      default:
      {
        frequency = 0U;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009c1e:	e3bf      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_I2C4)
 8009c20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009c24:	f5a2 0180 	sub.w	r1, r2, #4194304	; 0x400000
 8009c28:	430b      	orrs	r3, r1
 8009c2a:	d147      	bne.n	8009cbc <HAL_RCCEx_GetPeriphCLKFreq+0xcc4>
  {
    /* Get the current I2C4 source */
    srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 8009c2c:	4b57      	ldr	r3, [pc, #348]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009c32:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8009c36:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_I2C4CLKSOURCE_PCLK1)
 8009c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c3a:	2b00      	cmp	r3, #0
 8009c3c:	d103      	bne.n	8009c46 <HAL_RCCEx_GetPeriphCLKFreq+0xc4e>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009c3e:	f7fd fee9 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009c42:	6378      	str	r0, [r7, #52]	; 0x34
 8009c44:	e3ac      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_I2C4CLKSOURCE_SYSCLK)
 8009c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c48:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c4c:	d103      	bne.n	8009c56 <HAL_RCCEx_GetPeriphCLKFreq+0xc5e>
    {
      frequency = HAL_RCC_GetSysClockFreq();
 8009c4e:	f7fd fdbf 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009c52:	6378      	str	r0, [r7, #52]	; 0x34
 8009c54:	e3a4      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_I2C4CLKSOURCE_HSI))
 8009c56:	4b4d      	ldr	r3, [pc, #308]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009c5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c62:	d106      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 8009c64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c6a:	d102      	bne.n	8009c72 <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
    {
      frequency = HSI_VALUE;
 8009c6c:	4b48      	ldr	r3, [pc, #288]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009c6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009c70:	e396      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY)) && (srcclk == RCC_I2C4CLKSOURCE_MSIK))
 8009c72:	4b46      	ldr	r3, [pc, #280]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	f003 0320 	and.w	r3, r3, #32
 8009c7a:	2b20      	cmp	r3, #32
 8009c7c:	d11b      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
 8009c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009c80:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8009c84:	d117      	bne.n	8009cb6 <HAL_RCCEx_GetPeriphCLKFreq+0xcbe>
    {
      frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009c86:	4b41      	ldr	r3, [pc, #260]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c88:	689b      	ldr	r3, [r3, #8]
 8009c8a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d005      	beq.n	8009c9e <HAL_RCCEx_GetPeriphCLKFreq+0xca6>
 8009c92:	4b3e      	ldr	r3, [pc, #248]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009c94:	689b      	ldr	r3, [r3, #8]
 8009c96:	0e1b      	lsrs	r3, r3, #24
 8009c98:	f003 030f 	and.w	r3, r3, #15
 8009c9c:	e006      	b.n	8009cac <HAL_RCCEx_GetPeriphCLKFreq+0xcb4>
 8009c9e:	4b3b      	ldr	r3, [pc, #236]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009ca0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009ca4:	041b      	lsls	r3, r3, #16
 8009ca6:	0e1b      	lsrs	r3, r3, #24
 8009ca8:	f003 030f 	and.w	r3, r3, #15
 8009cac:	4a39      	ldr	r2, [pc, #228]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009cae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009cb2:	637b      	str	r3, [r7, #52]	; 0x34
 8009cb4:	e374      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for I2C4 */
    else
    {
      frequency = 0U;
 8009cb6:	2300      	movs	r3, #0
 8009cb8:	637b      	str	r3, [r7, #52]	; 0x34
 8009cba:	e371      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    {
      frequency = 0U;
    }
  }
#endif /* I2C6 */
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM34)
 8009cbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009cc0:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 8009cc4:	430b      	orrs	r3, r1
 8009cc6:	d16a      	bne.n	8009d9e <HAL_RCCEx_GetPeriphCLKFreq+0xda6>
  {
    /* Get the current LPTIM34 source */
    srcclk = __HAL_RCC_GET_LPTIM34_SOURCE();
 8009cc8:	4b30      	ldr	r3, [pc, #192]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009cca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009cce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009cd2:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM34CLKSOURCE_MSIK)
 8009cd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d120      	bne.n	8009d1c <HAL_RCCEx_GetPeriphCLKFreq+0xd24>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009cda:	4b2c      	ldr	r3, [pc, #176]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f003 0320 	and.w	r3, r3, #32
 8009ce2:	2b20      	cmp	r3, #32
 8009ce4:	d117      	bne.n	8009d16 <HAL_RCCEx_GetPeriphCLKFreq+0xd1e>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ce6:	4b29      	ldr	r3, [pc, #164]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d005      	beq.n	8009cfe <HAL_RCCEx_GetPeriphCLKFreq+0xd06>
 8009cf2:	4b26      	ldr	r3, [pc, #152]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	0e1b      	lsrs	r3, r3, #24
 8009cf8:	f003 030f 	and.w	r3, r3, #15
 8009cfc:	e006      	b.n	8009d0c <HAL_RCCEx_GetPeriphCLKFreq+0xd14>
 8009cfe:	4b23      	ldr	r3, [pc, #140]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009d00:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009d04:	041b      	lsls	r3, r3, #16
 8009d06:	0e1b      	lsrs	r3, r3, #24
 8009d08:	f003 030f 	and.w	r3, r3, #15
 8009d0c:	4a21      	ldr	r2, [pc, #132]	; (8009d94 <HAL_RCCEx_GetPeriphCLKFreq+0xd9c>)
 8009d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009d12:	637b      	str	r3, [r7, #52]	; 0x34
 8009d14:	e344      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009d16:	2300      	movs	r3, #0
 8009d18:	637b      	str	r3, [r7, #52]	; 0x34
 8009d1a:	e341      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSI))
 8009d1c:	4b1b      	ldr	r3, [pc, #108]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009d1e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d22:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009d2a:	d112      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
 8009d2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009d32:	d10e      	bne.n	8009d52 <HAL_RCCEx_GetPeriphCLKFreq+0xd5a>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d34:	4b15      	ldr	r3, [pc, #84]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009d36:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009d3e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009d42:	d102      	bne.n	8009d4a <HAL_RCCEx_GetPeriphCLKFreq+0xd52>
      {
        frequency = LSI_VALUE / 128U;
 8009d44:	23fa      	movs	r3, #250	; 0xfa
 8009d46:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d48:	e32a      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009d4a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009d4e:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009d50:	e326      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_HSI))
 8009d52:	4b0e      	ldr	r3, [pc, #56]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009d54:	681b      	ldr	r3, [r3, #0]
 8009d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d5e:	d106      	bne.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
 8009d60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009d66:	d102      	bne.n	8009d6e <HAL_RCCEx_GetPeriphCLKFreq+0xd76>
    {
      frequency = HSI_VALUE;
 8009d68:	4b09      	ldr	r3, [pc, #36]	; (8009d90 <HAL_RCCEx_GetPeriphCLKFreq+0xd98>)
 8009d6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d6c:	e318      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM34CLKSOURCE_LSE))
 8009d6e:	4b07      	ldr	r3, [pc, #28]	; (8009d8c <HAL_RCCEx_GetPeriphCLKFreq+0xd94>)
 8009d70:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009d74:	f003 0302 	and.w	r3, r3, #2
 8009d78:	2b02      	cmp	r3, #2
 8009d7a:	d10d      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
 8009d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009d82:	d109      	bne.n	8009d98 <HAL_RCCEx_GetPeriphCLKFreq+0xda0>
    {
      frequency = LSE_VALUE;
 8009d84:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009d88:	637b      	str	r3, [r7, #52]	; 0x34
 8009d8a:	e309      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 8009d8c:	46020c00 	.word	0x46020c00
 8009d90:	00f42400 	.word	0x00f42400
 8009d94:	08010c68 	.word	0x08010c68
    }
    /* Clock not enabled for LPTIM34 */
    else
    {
      frequency = 0U;
 8009d98:	2300      	movs	r3, #0
 8009d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8009d9c:	e300      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM1)
 8009d9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da2:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8009da6:	430b      	orrs	r3, r1
 8009da8:	d164      	bne.n	8009e74 <HAL_RCCEx_GetPeriphCLKFreq+0xe7c>
  {
    /* Get the current LPTIM1 source */
    srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009daa:	4ba2      	ldr	r3, [pc, #648]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009dac:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8009db0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8009db4:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM1CLKSOURCE_MSIK)
 8009db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009db8:	2b00      	cmp	r3, #0
 8009dba:	d120      	bne.n	8009dfe <HAL_RCCEx_GetPeriphCLKFreq+0xe06>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009dbc:	4b9d      	ldr	r3, [pc, #628]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	f003 0320 	and.w	r3, r3, #32
 8009dc4:	2b20      	cmp	r3, #32
 8009dc6:	d117      	bne.n	8009df8 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
      {
        frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009dc8:	4b9a      	ldr	r3, [pc, #616]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009dca:	689b      	ldr	r3, [r3, #8]
 8009dcc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d005      	beq.n	8009de0 <HAL_RCCEx_GetPeriphCLKFreq+0xde8>
 8009dd4:	4b97      	ldr	r3, [pc, #604]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009dd6:	689b      	ldr	r3, [r3, #8]
 8009dd8:	0e1b      	lsrs	r3, r3, #24
 8009dda:	f003 030f 	and.w	r3, r3, #15
 8009dde:	e006      	b.n	8009dee <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
 8009de0:	4b94      	ldr	r3, [pc, #592]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009de2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8009de6:	041b      	lsls	r3, r3, #16
 8009de8:	0e1b      	lsrs	r3, r3, #24
 8009dea:	f003 030f 	and.w	r3, r3, #15
 8009dee:	4a92      	ldr	r2, [pc, #584]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 8009df0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009df4:	637b      	str	r3, [r7, #52]	; 0x34
 8009df6:	e2d3      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = 0U;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	637b      	str	r3, [r7, #52]	; 0x34
 8009dfc:	e2d0      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSI))
 8009dfe:	4b8d      	ldr	r3, [pc, #564]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e00:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009e08:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e0c:	d112      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e14:	d10e      	bne.n	8009e34 <HAL_RCCEx_GetPeriphCLKFreq+0xe3c>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e16:	4b87      	ldr	r3, [pc, #540]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009e20:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e24:	d102      	bne.n	8009e2c <HAL_RCCEx_GetPeriphCLKFreq+0xe34>
      {
        frequency = LSI_VALUE / 128U;
 8009e26:	23fa      	movs	r3, #250	; 0xfa
 8009e28:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e2a:	e2b9      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009e2c:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009e30:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009e32:	e2b5      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_HSI))
 8009e34:	4b7f      	ldr	r3, [pc, #508]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009e3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009e40:	d106      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
 8009e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009e48:	d102      	bne.n	8009e50 <HAL_RCCEx_GetPeriphCLKFreq+0xe58>
    {
      frequency = HSI_VALUE;
 8009e4a:	4b7c      	ldr	r3, [pc, #496]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009e4c:	637b      	str	r3, [r7, #52]	; 0x34
 8009e4e:	e2a7      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM1CLKSOURCE_LSE))
 8009e50:	4b78      	ldr	r3, [pc, #480]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e52:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009e56:	f003 0302 	and.w	r3, r3, #2
 8009e5a:	2b02      	cmp	r3, #2
 8009e5c:	d107      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
 8009e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e60:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8009e64:	d103      	bne.n	8009e6e <HAL_RCCEx_GetPeriphCLKFreq+0xe76>
    {
      frequency = LSE_VALUE;
 8009e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009e6a:	637b      	str	r3, [r7, #52]	; 0x34
 8009e6c:	e298      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM1 */
    else
    {
      frequency = 0U;
 8009e6e:	2300      	movs	r3, #0
 8009e70:	637b      	str	r3, [r7, #52]	; 0x34
 8009e72:	e295      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_LPTIM2)
 8009e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009e78:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 8009e7c:	430b      	orrs	r3, r1
 8009e7e:	d147      	bne.n	8009f10 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
  {
    /* Get the current LPTIM2 source */
    srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009e80:	4b6c      	ldr	r3, [pc, #432]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009e86:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8009e8a:	633b      	str	r3, [r7, #48]	; 0x30

    if (srcclk == RCC_LPTIM2CLKSOURCE_PCLK1)
 8009e8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d103      	bne.n	8009e9a <HAL_RCCEx_GetPeriphCLKFreq+0xea2>
    {
      frequency = HAL_RCC_GetPCLK1Freq();
 8009e92:	f7fd fdbf 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 8009e96:	6378      	str	r0, [r7, #52]	; 0x34
 8009e98:	e282      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSI))
 8009e9a:	4b66      	ldr	r3, [pc, #408]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009e9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ea0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009ea4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009ea8:	d112      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
 8009eaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009eac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009eb0:	d10e      	bne.n	8009ed0 <HAL_RCCEx_GetPeriphCLKFreq+0xed8>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009eb2:	4b60      	ldr	r3, [pc, #384]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009eb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ebc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009ec0:	d102      	bne.n	8009ec8 <HAL_RCCEx_GetPeriphCLKFreq+0xed0>
      {
        frequency = LSI_VALUE / 128U;
 8009ec2:	23fa      	movs	r3, #250	; 0xfa
 8009ec4:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ec6:	e26b      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 8009ec8:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8009ecc:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 8009ece:	e267      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_HSI))
 8009ed0:	4b58      	ldr	r3, [pc, #352]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ed2:	681b      	ldr	r3, [r3, #0]
 8009ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009edc:	d106      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8009ee4:	d102      	bne.n	8009eec <HAL_RCCEx_GetPeriphCLKFreq+0xef4>
    {
      frequency = HSI_VALUE;
 8009ee6:	4b55      	ldr	r3, [pc, #340]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009ee8:	637b      	str	r3, [r7, #52]	; 0x34
 8009eea:	e259      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_LPTIM2CLKSOURCE_LSE))
 8009eec:	4b51      	ldr	r3, [pc, #324]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8009ef2:	f003 0302 	and.w	r3, r3, #2
 8009ef6:	2b02      	cmp	r3, #2
 8009ef8:	d107      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
 8009efa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009efc:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8009f00:	d103      	bne.n	8009f0a <HAL_RCCEx_GetPeriphCLKFreq+0xf12>
    {
      frequency = LSE_VALUE;
 8009f02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009f06:	637b      	str	r3, [r7, #52]	; 0x34
 8009f08:	e24a      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for LPTIM2 */
    else
    {
      frequency = 0U;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	637b      	str	r3, [r7, #52]	; 0x34
 8009f0e:	e247      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN1)
 8009f10:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f14:	f102 4178 	add.w	r1, r2, #4160749568	; 0xf8000000
 8009f18:	430b      	orrs	r3, r1
 8009f1a:	d12d      	bne.n	8009f78 <HAL_RCCEx_GetPeriphCLKFreq+0xf80>
  {
    /* Get the current FDCAN1 kernel source */
    srcclk = __HAL_RCC_GET_FDCAN1_SOURCE();
 8009f1c:	4b45      	ldr	r3, [pc, #276]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f22:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8009f26:	633b      	str	r3, [r7, #48]	; 0x30

    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (srcclk == RCC_FDCAN1CLKSOURCE_HSE))
 8009f28:	4b42      	ldr	r3, [pc, #264]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f30:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009f34:	d105      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
 8009f36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f38:	2b00      	cmp	r3, #0
 8009f3a:	d102      	bne.n	8009f42 <HAL_RCCEx_GetPeriphCLKFreq+0xf4a>
    {
      frequency = HSE_VALUE;
 8009f3c:	4b3f      	ldr	r3, [pc, #252]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009f3e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f40:	e22e      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL1) /* PLL1 ? */
 8009f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009f48:	d107      	bne.n	8009f5a <HAL_RCCEx_GetPeriphCLKFreq+0xf62>
    {
      HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8009f4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009f4e:	4618      	mov	r0, r3
 8009f50:	f7fe fc1a 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
      frequency = pll1_clocks.PLL1_Q_Frequency;
 8009f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009f56:	637b      	str	r3, [r7, #52]	; 0x34
 8009f58:	e222      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    else if (srcclk == RCC_FDCAN1CLKSOURCE_PLL2) /* PLL2 ? */
 8009f5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f5c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009f60:	d107      	bne.n	8009f72 <HAL_RCCEx_GetPeriphCLKFreq+0xf7a>
    {
      HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8009f62:	f107 0318 	add.w	r3, r7, #24
 8009f66:	4618      	mov	r0, r3
 8009f68:	f7fe fd76 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
      frequency = pll2_clocks.PLL2_P_Frequency;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	637b      	str	r3, [r7, #52]	; 0x34
 8009f70:	e216      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for FDCAN1 */
    else
    {
      frequency = 0U;
 8009f72:	2300      	movs	r3, #0
 8009f74:	637b      	str	r3, [r7, #52]	; 0x34
 8009f76:	e213      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI1)
 8009f78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f7c:	f5a2 0100 	sub.w	r1, r2, #8388608	; 0x800000
 8009f80:	430b      	orrs	r3, r1
 8009f82:	d15d      	bne.n	800a040 <HAL_RCCEx_GetPeriphCLKFreq+0x1048>
  {
    /* Get the current SPI1 kernel source */
    srcclk = __HAL_RCC_GET_SPI1_SOURCE();
 8009f84:	4b2b      	ldr	r3, [pc, #172]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009f86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009f8a:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8009f8e:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 8009f90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f92:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f96:	d028      	beq.n	8009fea <HAL_RCCEx_GetPeriphCLKFreq+0xff2>
 8009f98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009f9a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009f9e:	d845      	bhi.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009fa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fa2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fa6:	d013      	beq.n	8009fd0 <HAL_RCCEx_GetPeriphCLKFreq+0xfd8>
 8009fa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009faa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009fae:	d83d      	bhi.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
 8009fb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d004      	beq.n	8009fc0 <HAL_RCCEx_GetPeriphCLKFreq+0xfc8>
 8009fb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009fb8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009fbc:	d004      	beq.n	8009fc8 <HAL_RCCEx_GetPeriphCLKFreq+0xfd0>
 8009fbe:	e035      	b.n	800a02c <HAL_RCCEx_GetPeriphCLKFreq+0x1034>
    {
      case RCC_SPI1CLKSOURCE_PCLK2:

        frequency = HAL_RCC_GetPCLK2Freq();
 8009fc0:	f7fd fd3c 	bl	8007a3c <HAL_RCC_GetPCLK2Freq>
 8009fc4:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009fc6:	e1eb      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 8009fc8:	f7fd fc02 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 8009fcc:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 8009fce:	e1e7      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8009fd0:	4b18      	ldr	r3, [pc, #96]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009fdc:	d102      	bne.n	8009fe4 <HAL_RCCEx_GetPeriphCLKFreq+0xfec>
        {
          frequency = HSI_VALUE;
 8009fde:	4b17      	ldr	r3, [pc, #92]	; (800a03c <HAL_RCCEx_GetPeriphCLKFreq+0x1044>)
 8009fe0:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 8009fe2:	e1dd      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8009fe8:	e1da      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI1CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 8009fea:	4b12      	ldr	r3, [pc, #72]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	f003 0320 	and.w	r3, r3, #32
 8009ff2:	2b20      	cmp	r3, #32
 8009ff4:	d117      	bne.n	800a026 <HAL_RCCEx_GetPeriphCLKFreq+0x102e>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 8009ff6:	4b0f      	ldr	r3, [pc, #60]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 8009ff8:	689b      	ldr	r3, [r3, #8]
 8009ffa:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009ffe:	2b00      	cmp	r3, #0
 800a000:	d005      	beq.n	800a00e <HAL_RCCEx_GetPeriphCLKFreq+0x1016>
 800a002:	4b0c      	ldr	r3, [pc, #48]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a004:	689b      	ldr	r3, [r3, #8]
 800a006:	0e1b      	lsrs	r3, r3, #24
 800a008:	f003 030f 	and.w	r3, r3, #15
 800a00c:	e006      	b.n	800a01c <HAL_RCCEx_GetPeriphCLKFreq+0x1024>
 800a00e:	4b09      	ldr	r3, [pc, #36]	; (800a034 <HAL_RCCEx_GetPeriphCLKFreq+0x103c>)
 800a010:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a014:	041b      	lsls	r3, r3, #16
 800a016:	0e1b      	lsrs	r3, r3, #24
 800a018:	f003 030f 	and.w	r3, r3, #15
 800a01c:	4a06      	ldr	r2, [pc, #24]	; (800a038 <HAL_RCCEx_GetPeriphCLKFreq+0x1040>)
 800a01e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a022:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a024:	e1bc      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a026:	2300      	movs	r3, #0
 800a028:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a02a:	e1b9      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a02c:	2300      	movs	r3, #0
 800a02e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a030:	e1b6      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800a032:	bf00      	nop
 800a034:	46020c00 	.word	0x46020c00
 800a038:	08010c68 	.word	0x08010c68
 800a03c:	00f42400 	.word	0x00f42400
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI2)
 800a040:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a044:	f102 417f 	add.w	r1, r2, #4278190080	; 0xff000000
 800a048:	430b      	orrs	r3, r1
 800a04a:	d156      	bne.n	800a0fa <HAL_RCCEx_GetPeriphCLKFreq+0x1102>
  {
    /* Get the current SPI2 kernel source */
    srcclk = __HAL_RCC_GET_SPI2_SOURCE();
 800a04c:	4ba5      	ldr	r3, [pc, #660]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a04e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a052:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a056:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a05e:	d028      	beq.n	800a0b2 <HAL_RCCEx_GetPeriphCLKFreq+0x10ba>
 800a060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a062:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800a066:	d845      	bhi.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800a068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a06a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a06e:	d013      	beq.n	800a098 <HAL_RCCEx_GetPeriphCLKFreq+0x10a0>
 800a070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a072:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a076:	d83d      	bhi.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
 800a078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d004      	beq.n	800a088 <HAL_RCCEx_GetPeriphCLKFreq+0x1090>
 800a07e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a084:	d004      	beq.n	800a090 <HAL_RCCEx_GetPeriphCLKFreq+0x1098>
 800a086:	e035      	b.n	800a0f4 <HAL_RCCEx_GetPeriphCLKFreq+0x10fc>
    {
      case RCC_SPI2CLKSOURCE_PCLK1:

        frequency = HAL_RCC_GetPCLK1Freq();
 800a088:	f7fd fcc4 	bl	8007a14 <HAL_RCC_GetPCLK1Freq>
 800a08c:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a08e:	e187      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a090:	f7fd fb9e 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 800a094:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a096:	e183      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a098:	4b92      	ldr	r3, [pc, #584]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a0a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a0a4:	d102      	bne.n	800a0ac <HAL_RCCEx_GetPeriphCLKFreq+0x10b4>
        {
          frequency = HSI_VALUE;
 800a0a6:	4b90      	ldr	r3, [pc, #576]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800a0a8:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0aa:	e179      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0b0:	e176      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI2CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a0b2:	4b8c      	ldr	r3, [pc, #560]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a0b4:	681b      	ldr	r3, [r3, #0]
 800a0b6:	f003 0320 	and.w	r3, r3, #32
 800a0ba:	2b20      	cmp	r3, #32
 800a0bc:	d117      	bne.n	800a0ee <HAL_RCCEx_GetPeriphCLKFreq+0x10f6>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a0be:	4b89      	ldr	r3, [pc, #548]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a0c0:	689b      	ldr	r3, [r3, #8]
 800a0c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d005      	beq.n	800a0d6 <HAL_RCCEx_GetPeriphCLKFreq+0x10de>
 800a0ca:	4b86      	ldr	r3, [pc, #536]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	0e1b      	lsrs	r3, r3, #24
 800a0d0:	f003 030f 	and.w	r3, r3, #15
 800a0d4:	e006      	b.n	800a0e4 <HAL_RCCEx_GetPeriphCLKFreq+0x10ec>
 800a0d6:	4b83      	ldr	r3, [pc, #524]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a0d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a0dc:	041b      	lsls	r3, r3, #16
 800a0de:	0e1b      	lsrs	r3, r3, #24
 800a0e0:	f003 030f 	and.w	r3, r3, #15
 800a0e4:	4a81      	ldr	r2, [pc, #516]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a0e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0ea:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a0ec:	e158      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a0ee:	2300      	movs	r3, #0
 800a0f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0f2:	e155      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a0f8:	e152      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI3)
 800a0fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a0fe:	f102 417e 	add.w	r1, r2, #4261412864	; 0xfe000000
 800a102:	430b      	orrs	r3, r1
 800a104:	d177      	bne.n	800a1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x11fe>
  {
    /* Get the current SPI3 kernel source */
    srcclk = __HAL_RCC_GET_SPI3_SOURCE();
 800a106:	4b77      	ldr	r3, [pc, #476]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a108:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a10c:	f003 0318 	and.w	r3, r3, #24
 800a110:	633b      	str	r3, [r7, #48]	; 0x30
    switch (srcclk)
 800a112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a114:	2b18      	cmp	r3, #24
 800a116:	d86b      	bhi.n	800a1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x11f8>
 800a118:	a201      	add	r2, pc, #4	; (adr r2, 800a120 <HAL_RCCEx_GetPeriphCLKFreq+0x1128>)
 800a11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a11e:	bf00      	nop
 800a120:	0800a185 	.word	0x0800a185
 800a124:	0800a1f1 	.word	0x0800a1f1
 800a128:	0800a1f1 	.word	0x0800a1f1
 800a12c:	0800a1f1 	.word	0x0800a1f1
 800a130:	0800a1f1 	.word	0x0800a1f1
 800a134:	0800a1f1 	.word	0x0800a1f1
 800a138:	0800a1f1 	.word	0x0800a1f1
 800a13c:	0800a1f1 	.word	0x0800a1f1
 800a140:	0800a18d 	.word	0x0800a18d
 800a144:	0800a1f1 	.word	0x0800a1f1
 800a148:	0800a1f1 	.word	0x0800a1f1
 800a14c:	0800a1f1 	.word	0x0800a1f1
 800a150:	0800a1f1 	.word	0x0800a1f1
 800a154:	0800a1f1 	.word	0x0800a1f1
 800a158:	0800a1f1 	.word	0x0800a1f1
 800a15c:	0800a1f1 	.word	0x0800a1f1
 800a160:	0800a195 	.word	0x0800a195
 800a164:	0800a1f1 	.word	0x0800a1f1
 800a168:	0800a1f1 	.word	0x0800a1f1
 800a16c:	0800a1f1 	.word	0x0800a1f1
 800a170:	0800a1f1 	.word	0x0800a1f1
 800a174:	0800a1f1 	.word	0x0800a1f1
 800a178:	0800a1f1 	.word	0x0800a1f1
 800a17c:	0800a1f1 	.word	0x0800a1f1
 800a180:	0800a1af 	.word	0x0800a1af
    {
      case RCC_SPI3CLKSOURCE_PCLK3:

        frequency = HAL_RCC_GetPCLK3Freq();
 800a184:	f7fd fc6e 	bl	8007a64 <HAL_RCC_GetPCLK3Freq>
 800a188:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a18a:	e109      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a18c:	f7fd fb20 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 800a190:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a192:	e105      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_HSI:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800a194:	4b53      	ldr	r3, [pc, #332]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a19c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1a0:	d102      	bne.n	800a1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x11b0>
        {
          frequency = HSI_VALUE;
 800a1a2:	4b51      	ldr	r3, [pc, #324]	; (800a2e8 <HAL_RCCEx_GetPeriphCLKFreq+0x12f0>)
 800a1a4:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1a6:	e0fb      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a1a8:	2300      	movs	r3, #0
 800a1aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1ac:	e0f8      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_SPI3CLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a1ae:	4b4d      	ldr	r3, [pc, #308]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0320 	and.w	r3, r3, #32
 800a1b6:	2b20      	cmp	r3, #32
 800a1b8:	d117      	bne.n	800a1ea <HAL_RCCEx_GetPeriphCLKFreq+0x11f2>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a1ba:	4b4a      	ldr	r3, [pc, #296]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1bc:	689b      	ldr	r3, [r3, #8]
 800a1be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d005      	beq.n	800a1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x11da>
 800a1c6:	4b47      	ldr	r3, [pc, #284]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1c8:	689b      	ldr	r3, [r3, #8]
 800a1ca:	0e1b      	lsrs	r3, r3, #24
 800a1cc:	f003 030f 	and.w	r3, r3, #15
 800a1d0:	e006      	b.n	800a1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x11e8>
 800a1d2:	4b44      	ldr	r3, [pc, #272]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a1d4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a1d8:	041b      	lsls	r3, r3, #16
 800a1da:	0e1b      	lsrs	r3, r3, #24
 800a1dc:	f003 030f 	and.w	r3, r3, #15
 800a1e0:	4a42      	ldr	r2, [pc, #264]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a1e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a1e6:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a1e8:	e0da      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1ee:	e0d7      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a1f4:	e0d4      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_OSPI)
 800a1f6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a1fa:	f102 417c 	add.w	r1, r2, #4227858432	; 0xfc000000
 800a1fe:	430b      	orrs	r3, r1
 800a200:	d155      	bne.n	800a2ae <HAL_RCCEx_GetPeriphCLKFreq+0x12b6>
  {
    /* Get the current OSPI kernel source */
    srcclk = __HAL_RCC_GET_OSPI_SOURCE();
 800a202:	4b38      	ldr	r3, [pc, #224]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a204:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a208:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800a20c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (srcclk)
 800a20e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a214:	d013      	beq.n	800a23e <HAL_RCCEx_GetPeriphCLKFreq+0x1246>
 800a216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a218:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a21c:	d844      	bhi.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800a21e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a220:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a224:	d013      	beq.n	800a24e <HAL_RCCEx_GetPeriphCLKFreq+0x1256>
 800a226:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a228:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a22c:	d83c      	bhi.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
 800a22e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a230:	2b00      	cmp	r3, #0
 800a232:	d014      	beq.n	800a25e <HAL_RCCEx_GetPeriphCLKFreq+0x1266>
 800a234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a23a:	d014      	beq.n	800a266 <HAL_RCCEx_GetPeriphCLKFreq+0x126e>
 800a23c:	e034      	b.n	800a2a8 <HAL_RCCEx_GetPeriphCLKFreq+0x12b0>
    {
      case RCC_OSPICLKSOURCE_PLL2:

        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800a23e:	f107 0318 	add.w	r3, r7, #24
 800a242:	4618      	mov	r0, r3
 800a244:	f7fe fc08 	bl	8008a58 <HAL_RCCEx_GetPLL2ClockFreq>
        frequency = pll2_clocks.PLL2_Q_Frequency;
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a24c:	e0a8      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_PLL1:

        HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800a24e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800a252:	4618      	mov	r0, r3
 800a254:	f7fe fa98 	bl	8008788 <HAL_RCCEx_GetPLL1ClockFreq>
        frequency = pll1_clocks.PLL1_Q_Frequency;
 800a258:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a25a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a25c:	e0a0      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_SYSCLK:

        frequency = HAL_RCC_GetSysClockFreq();
 800a25e:	f7fd fab7 	bl	80077d0 <HAL_RCC_GetSysClockFreq>
 800a262:	6378      	str	r0, [r7, #52]	; 0x34
        break;
 800a264:	e09c      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      case RCC_OSPICLKSOURCE_MSIK:

        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIKRDY))
 800a266:	4b1f      	ldr	r3, [pc, #124]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a268:	681b      	ldr	r3, [r3, #0]
 800a26a:	f003 0320 	and.w	r3, r3, #32
 800a26e:	2b20      	cmp	r3, #32
 800a270:	d117      	bne.n	800a2a2 <HAL_RCCEx_GetPeriphCLKFreq+0x12aa>
        {
          frequency = MSIRangeTable[(__HAL_RCC_GET_MSIK_RANGE() >> RCC_ICSCR1_MSIKRANGE_Pos)];
 800a272:	4b1c      	ldr	r3, [pc, #112]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a274:	689b      	ldr	r3, [r3, #8]
 800a276:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d005      	beq.n	800a28a <HAL_RCCEx_GetPeriphCLKFreq+0x1292>
 800a27e:	4b19      	ldr	r3, [pc, #100]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a280:	689b      	ldr	r3, [r3, #8]
 800a282:	0e1b      	lsrs	r3, r3, #24
 800a284:	f003 030f 	and.w	r3, r3, #15
 800a288:	e006      	b.n	800a298 <HAL_RCCEx_GetPeriphCLKFreq+0x12a0>
 800a28a:	4b16      	ldr	r3, [pc, #88]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a28c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a290:	041b      	lsls	r3, r3, #16
 800a292:	0e1b      	lsrs	r3, r3, #24
 800a294:	f003 030f 	and.w	r3, r3, #15
 800a298:	4a14      	ldr	r2, [pc, #80]	; (800a2ec <HAL_RCCEx_GetPeriphCLKFreq+0x12f4>)
 800a29a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a29e:	637b      	str	r3, [r7, #52]	; 0x34
        }
        else
        {
          frequency = 0U;
        }
        break;
 800a2a0:	e07e      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
          frequency = 0U;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2a6:	e07b      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>

      default:

        frequency = 0U;
 800a2a8:	2300      	movs	r3, #0
 800a2aa:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800a2ac:	e078      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
        frequency = 0U;
        break;
    }
  }
#endif /* defined(HSPI1) */
  else if (PeriphClk == RCC_PERIPHCLK_DAC1)
 800a2ae:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a2b2:	f102 4170 	add.w	r1, r2, #4026531840	; 0xf0000000
 800a2b6:	430b      	orrs	r3, r1
 800a2b8:	d138      	bne.n	800a32c <HAL_RCCEx_GetPeriphCLKFreq+0x1334>
  {
    /* Get the current DAC1 kernel source */
    srcclk = __HAL_RCC_GET_DAC1_SOURCE();
 800a2ba:	4b0a      	ldr	r3, [pc, #40]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a2bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800a2c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a2c4:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if LSE is ready and if DAC1 clock selection is LSE */
    if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSE))
 800a2c6:	4b07      	ldr	r3, [pc, #28]	; (800a2e4 <HAL_RCCEx_GetPeriphCLKFreq+0x12ec>)
 800a2c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2cc:	f003 0302 	and.w	r3, r3, #2
 800a2d0:	2b02      	cmp	r3, #2
 800a2d2:	d10d      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
 800a2d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d10a      	bne.n	800a2f0 <HAL_RCCEx_GetPeriphCLKFreq+0x12f8>
    {
      frequency = LSE_VALUE;
 800a2da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a2de:	637b      	str	r3, [r7, #52]	; 0x34
 800a2e0:	e05e      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
 800a2e2:	bf00      	nop
 800a2e4:	46020c00 	.word	0x46020c00
 800a2e8:	00f42400 	.word	0x00f42400
 800a2ec:	08010c68 	.word	0x08010c68
    }
    /* Check if LSI is ready and if DAC1 clock selection is LSI */
    else if ((HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIRDY)) && (srcclk == RCC_DAC1CLKSOURCE_LSI))
 800a2f0:	4b2e      	ldr	r3, [pc, #184]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a2f2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a2f6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a2fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a2fe:	d112      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
 800a300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a302:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a306:	d10e      	bne.n	800a326 <HAL_RCCEx_GetPeriphCLKFreq+0x132e>
    {
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a308:	4b28      	ldr	r3, [pc, #160]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a30a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a30e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a312:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a316:	d102      	bne.n	800a31e <HAL_RCCEx_GetPeriphCLKFreq+0x1326>
      {
        frequency = LSI_VALUE / 128U;
 800a318:	23fa      	movs	r3, #250	; 0xfa
 800a31a:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a31c:	e040      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
      else
      {
        frequency = LSI_VALUE;
 800a31e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 800a322:	637b      	str	r3, [r7, #52]	; 0x34
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSIPREDIV))
 800a324:	e03c      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
      }
    }
    /* Clock not enabled for DAC1*/
    else
    {
      frequency = 0U;
 800a326:	2300      	movs	r3, #0
 800a328:	637b      	str	r3, [r7, #52]	; 0x34
 800a32a:	e039      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

  }
  else if (PeriphClk == RCC_PERIPHCLK_RNG)
 800a32c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a330:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800a334:	430b      	orrs	r3, r1
 800a336:	d131      	bne.n	800a39c <HAL_RCCEx_GetPeriphCLKFreq+0x13a4>
  {
    /* Get the current RNG kernel source */
    srcclk = __HAL_RCC_GET_RNG_SOURCE();
 800a338:	4b1c      	ldr	r3, [pc, #112]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a33a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800a33e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a342:	633b      	str	r3, [r7, #48]	; 0x30

    /* Check if HSI48 is ready and if RNG clock selection is HSI48 */
    if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48))
 800a344:	4b19      	ldr	r3, [pc, #100]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a34c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a350:	d105      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
 800a352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a354:	2b00      	cmp	r3, #0
 800a356:	d102      	bne.n	800a35e <HAL_RCCEx_GetPeriphCLKFreq+0x1366>
    {
      frequency = HSI48_VALUE;
 800a358:	4b15      	ldr	r3, [pc, #84]	; (800a3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x13b8>)
 800a35a:	637b      	str	r3, [r7, #52]	; 0x34
 800a35c:	e020      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI48 is ready and if RNG clock selection is HSI48_DIV2 */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSI48RDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI48_DIV2))
 800a35e:	4b13      	ldr	r3, [pc, #76]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a36a:	d106      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
 800a36c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a36e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a372:	d102      	bne.n	800a37a <HAL_RCCEx_GetPeriphCLKFreq+0x1382>
    {
      frequency = HSI48_VALUE >> 1U ;
 800a374:	4b0f      	ldr	r3, [pc, #60]	; (800a3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x13bc>)
 800a376:	637b      	str	r3, [r7, #52]	; 0x34
 800a378:	e012      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }

    /* Check if HSI is ready and if RNG clock selection is HSI */
    else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (srcclk == RCC_RNGCLKSOURCE_HSI))
 800a37a:	4b0c      	ldr	r3, [pc, #48]	; (800a3ac <HAL_RCCEx_GetPeriphCLKFreq+0x13b4>)
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a386:	d106      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
 800a388:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a38a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a38e:	d102      	bne.n	800a396 <HAL_RCCEx_GetPeriphCLKFreq+0x139e>
    {
      frequency = HSI_VALUE;
 800a390:	4b09      	ldr	r3, [pc, #36]	; (800a3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x13c0>)
 800a392:	637b      	str	r3, [r7, #52]	; 0x34
 800a394:	e004      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
    }
    /* Clock not enabled for RNG */
    else
    {
      frequency = 0U;
 800a396:	2300      	movs	r3, #0
 800a398:	637b      	str	r3, [r7, #52]	; 0x34
 800a39a:	e001      	b.n	800a3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x13a8>
  }
#endif /* defined(USB_OTG_HS) */

  else
  {
    frequency = 0;
 800a39c:	2300      	movs	r3, #0
 800a39e:	637b      	str	r3, [r7, #52]	; 0x34
  }
  return (frequency);
 800a3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	3738      	adds	r7, #56	; 0x38
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	bd80      	pop	{r7, pc}
 800a3aa:	bf00      	nop
 800a3ac:	46020c00 	.word	0x46020c00
 800a3b0:	02dc6c00 	.word	0x02dc6c00
 800a3b4:	016e3600 	.word	0x016e3600
 800a3b8:	00f42400 	.word	0x00f42400

0800a3bc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2)
{
 800a3bc:	b580      	push	{r7, lr}
 800a3be:	b084      	sub	sp, #16
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll2->PLL2P));
  assert_param(IS_RCC_PLLQ_VALUE(pll2->PLL2Q));
  assert_param(IS_RCC_PLLR_VALUE(pll2->PLL2R));

  /* Disable  PLL2 */
  __HAL_RCC_PLL2_DISABLE();
 800a3c4:	4b47      	ldr	r3, [pc, #284]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	4a46      	ldr	r2, [pc, #280]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a3ca:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a3ce:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a3d0:	f7f9 fd74 	bl	8003ebc <HAL_GetTick>
 800a3d4:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3d6:	e008      	b.n	800a3ea <RCCEx_PLL2_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a3d8:	f7f9 fd70 	bl	8003ebc <HAL_GetTick>
 800a3dc:	4602      	mov	r2, r0
 800a3de:	68fb      	ldr	r3, [r7, #12]
 800a3e0:	1ad3      	subs	r3, r2, r3
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d901      	bls.n	800a3ea <RCCEx_PLL2_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a3e6:	2303      	movs	r3, #3
 800a3e8:	e077      	b.n	800a4da <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a3ea:	4b3e      	ldr	r3, [pc, #248]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a3ec:	681b      	ldr	r3, [r3, #0]
 800a3ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d1f0      	bne.n	800a3d8 <RCCEx_PLL2_Config+0x1c>
    }
  }

  /* Configure PLL2 multiplication and division factors */
  __HAL_RCC_PLL2_CONFIG(pll2->PLL2Source,
 800a3f6:	4b3b      	ldr	r3, [pc, #236]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a3f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fa:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a3fe:	f023 0303 	bic.w	r3, r3, #3
 800a402:	687a      	ldr	r2, [r7, #4]
 800a404:	6811      	ldr	r1, [r2, #0]
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	6852      	ldr	r2, [r2, #4]
 800a40a:	3a01      	subs	r2, #1
 800a40c:	0212      	lsls	r2, r2, #8
 800a40e:	430a      	orrs	r2, r1
 800a410:	4934      	ldr	r1, [pc, #208]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a412:	4313      	orrs	r3, r2
 800a414:	62cb      	str	r3, [r1, #44]	; 0x2c
 800a416:	4b33      	ldr	r3, [pc, #204]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a418:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a41a:	4b33      	ldr	r3, [pc, #204]	; (800a4e8 <RCCEx_PLL2_Config+0x12c>)
 800a41c:	4013      	ands	r3, r2
 800a41e:	687a      	ldr	r2, [r7, #4]
 800a420:	6892      	ldr	r2, [r2, #8]
 800a422:	3a01      	subs	r2, #1
 800a424:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a428:	687a      	ldr	r2, [r7, #4]
 800a42a:	68d2      	ldr	r2, [r2, #12]
 800a42c:	3a01      	subs	r2, #1
 800a42e:	0252      	lsls	r2, r2, #9
 800a430:	b292      	uxth	r2, r2
 800a432:	4311      	orrs	r1, r2
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6912      	ldr	r2, [r2, #16]
 800a438:	3a01      	subs	r2, #1
 800a43a:	0412      	lsls	r2, r2, #16
 800a43c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a440:	4311      	orrs	r1, r2
 800a442:	687a      	ldr	r2, [r7, #4]
 800a444:	6952      	ldr	r2, [r2, #20]
 800a446:	3a01      	subs	r2, #1
 800a448:	0612      	lsls	r2, r2, #24
 800a44a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a44e:	430a      	orrs	r2, r1
 800a450:	4924      	ldr	r1, [pc, #144]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a452:	4313      	orrs	r3, r2
 800a454:	63cb      	str	r3, [r1, #60]	; 0x3c
                        pll2->PLL2P,
                        pll2->PLL2Q,
                        pll2->PLL2R);

  /* Select PLL2 input reference frequency range: VCI */
  __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE);
 800a456:	4b23      	ldr	r3, [pc, #140]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a45a:	f023 020c 	bic.w	r2, r3, #12
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	699b      	ldr	r3, [r3, #24]
 800a462:	4920      	ldr	r1, [pc, #128]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a464:	4313      	orrs	r3, r2
 800a466:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Configure the PLL2 Clock output(s) */
  __HAL_RCC_PLL2CLKOUT_ENABLE(pll2->PLL2ClockOut);
 800a468:	4b1e      	ldr	r3, [pc, #120]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a46a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	6a1b      	ldr	r3, [r3, #32]
 800a470:	491c      	ldr	r1, [pc, #112]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a472:	4313      	orrs	r3, r2
 800a474:	62cb      	str	r3, [r1, #44]	; 0x2c

  /* Disable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_DISABLE();
 800a476:	4b1b      	ldr	r3, [pc, #108]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a478:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a47a:	4a1a      	ldr	r2, [pc, #104]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a47c:	f023 0310 	bic.w	r3, r3, #16
 800a480:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a482:	4b18      	ldr	r3, [pc, #96]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a48a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	69d2      	ldr	r2, [r2, #28]
 800a492:	00d2      	lsls	r2, r2, #3
 800a494:	4913      	ldr	r1, [pc, #76]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a496:	4313      	orrs	r3, r2
 800a498:	640b      	str	r3, [r1, #64]	; 0x40

  /* Enable PLL2FRACN  */
  __HAL_RCC_PLL2FRACN_ENABLE();
 800a49a:	4b12      	ldr	r3, [pc, #72]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a49c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a49e:	4a11      	ldr	r2, [pc, #68]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a4a0:	f043 0310 	orr.w	r3, r3, #16
 800a4a4:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Enable  PLL2 */
  __HAL_RCC_PLL2_ENABLE();
 800a4a6:	4b0f      	ldr	r3, [pc, #60]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a0e      	ldr	r2, [pc, #56]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a4ac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a4b0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a4b2:	f7f9 fd03 	bl	8003ebc <HAL_GetTick>
 800a4b6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL2 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4b8:	e008      	b.n	800a4cc <RCCEx_PLL2_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a4ba:	f7f9 fcff 	bl	8003ebc <HAL_GetTick>
 800a4be:	4602      	mov	r2, r0
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	1ad3      	subs	r3, r2, r3
 800a4c4:	2b02      	cmp	r3, #2
 800a4c6:	d901      	bls.n	800a4cc <RCCEx_PLL2_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a4c8:	2303      	movs	r3, #3
 800a4ca:	e006      	b.n	800a4da <RCCEx_PLL2_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a4cc:	4b05      	ldr	r3, [pc, #20]	; (800a4e4 <RCCEx_PLL2_Config+0x128>)
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a4d4:	2b00      	cmp	r3, #0
 800a4d6:	d0f0      	beq.n	800a4ba <RCCEx_PLL2_Config+0xfe>
    }
  }
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0

}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}
 800a4e2:	bf00      	nop
 800a4e4:	46020c00 	.word	0x46020c00
 800a4e8:	80800000 	.word	0x80800000

0800a4ec <RCCEx_PLL3_Config>:
  *         contains the configuration parameters as well as VCI clock ranges.
  * @note   PLL3 is temporary disabled to apply new parameters
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3)
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_PLLP_VALUE(pll3->PLL3P));
  assert_param(IS_RCC_PLLQ_VALUE(pll3->PLL3Q));
  assert_param(IS_RCC_PLLR_VALUE(pll3->PLL3R));

  /* Disable  PLL3 */
  __HAL_RCC_PLL3_DISABLE();
 800a4f4:	4b47      	ldr	r3, [pc, #284]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	4a46      	ldr	r2, [pc, #280]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a4fa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4fe:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a500:	f7f9 fcdc 	bl	8003ebc <HAL_GetTick>
 800a504:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a506:	e008      	b.n	800a51a <RCCEx_PLL3_Config+0x2e>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a508:	f7f9 fcd8 	bl	8003ebc <HAL_GetTick>
 800a50c:	4602      	mov	r2, r0
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	1ad3      	subs	r3, r2, r3
 800a512:	2b02      	cmp	r3, #2
 800a514:	d901      	bls.n	800a51a <RCCEx_PLL3_Config+0x2e>
    {
      return HAL_TIMEOUT;
 800a516:	2303      	movs	r3, #3
 800a518:	e077      	b.n	800a60a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a51a:	4b3e      	ldr	r3, [pc, #248]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a522:	2b00      	cmp	r3, #0
 800a524:	d1f0      	bne.n	800a508 <RCCEx_PLL3_Config+0x1c>
    }
  }

  /* Configure PLL3 multiplication and division factors */
  __HAL_RCC_PLL3_CONFIG(pll3->PLL3Source,
 800a526:	4b3b      	ldr	r3, [pc, #236]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a52a:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800a52e:	f023 0303 	bic.w	r3, r3, #3
 800a532:	687a      	ldr	r2, [r7, #4]
 800a534:	6811      	ldr	r1, [r2, #0]
 800a536:	687a      	ldr	r2, [r7, #4]
 800a538:	6852      	ldr	r2, [r2, #4]
 800a53a:	3a01      	subs	r2, #1
 800a53c:	0212      	lsls	r2, r2, #8
 800a53e:	430a      	orrs	r2, r1
 800a540:	4934      	ldr	r1, [pc, #208]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a542:	4313      	orrs	r3, r2
 800a544:	630b      	str	r3, [r1, #48]	; 0x30
 800a546:	4b33      	ldr	r3, [pc, #204]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a548:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a54a:	4b33      	ldr	r3, [pc, #204]	; (800a618 <RCCEx_PLL3_Config+0x12c>)
 800a54c:	4013      	ands	r3, r2
 800a54e:	687a      	ldr	r2, [r7, #4]
 800a550:	6892      	ldr	r2, [r2, #8]
 800a552:	3a01      	subs	r2, #1
 800a554:	f3c2 0108 	ubfx	r1, r2, #0, #9
 800a558:	687a      	ldr	r2, [r7, #4]
 800a55a:	68d2      	ldr	r2, [r2, #12]
 800a55c:	3a01      	subs	r2, #1
 800a55e:	0252      	lsls	r2, r2, #9
 800a560:	b292      	uxth	r2, r2
 800a562:	4311      	orrs	r1, r2
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	6912      	ldr	r2, [r2, #16]
 800a568:	3a01      	subs	r2, #1
 800a56a:	0412      	lsls	r2, r2, #16
 800a56c:	f402 02fe 	and.w	r2, r2, #8323072	; 0x7f0000
 800a570:	4311      	orrs	r1, r2
 800a572:	687a      	ldr	r2, [r7, #4]
 800a574:	6952      	ldr	r2, [r2, #20]
 800a576:	3a01      	subs	r2, #1
 800a578:	0612      	lsls	r2, r2, #24
 800a57a:	f002 42fe 	and.w	r2, r2, #2130706432	; 0x7f000000
 800a57e:	430a      	orrs	r2, r1
 800a580:	4924      	ldr	r1, [pc, #144]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a582:	4313      	orrs	r3, r2
 800a584:	644b      	str	r3, [r1, #68]	; 0x44
                        pll3->PLL3P,
                        pll3->PLL3Q,
                        pll3->PLL3R);

  /* Select PLL3 input reference frequency range: VCI */
  __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE);
 800a586:	4b23      	ldr	r3, [pc, #140]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a58a:	f023 020c 	bic.w	r2, r3, #12
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	4920      	ldr	r1, [pc, #128]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a594:	4313      	orrs	r3, r2
 800a596:	630b      	str	r3, [r1, #48]	; 0x30

  /* Configure the PLL3 Clock output(s) */
  __HAL_RCC_PLL3CLKOUT_ENABLE(pll3->PLL3ClockOut);
 800a598:	4b1e      	ldr	r3, [pc, #120]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a59a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6a1b      	ldr	r3, [r3, #32]
 800a5a0:	491c      	ldr	r1, [pc, #112]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_DISABLE();
 800a5a6:	4b1b      	ldr	r3, [pc, #108]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5aa:	4a1a      	ldr	r2, [pc, #104]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5ac:	f023 0310 	bic.w	r3, r3, #16
 800a5b0:	6313      	str	r3, [r2, #48]	; 0x30

  /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
  __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a5b2:	4b18      	ldr	r3, [pc, #96]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ba:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a5be:	687a      	ldr	r2, [r7, #4]
 800a5c0:	69d2      	ldr	r2, [r2, #28]
 800a5c2:	00d2      	lsls	r2, r2, #3
 800a5c4:	4913      	ldr	r1, [pc, #76]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	648b      	str	r3, [r1, #72]	; 0x48

  /* Enable PLL3FRACN  */
  __HAL_RCC_PLL3FRACN_ENABLE();
 800a5ca:	4b12      	ldr	r3, [pc, #72]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5ce:	4a11      	ldr	r2, [pc, #68]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5d0:	f043 0310 	orr.w	r3, r3, #16
 800a5d4:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable  PLL3 */
  __HAL_RCC_PLL3_ENABLE();
 800a5d6:	4b0f      	ldr	r3, [pc, #60]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	4a0e      	ldr	r2, [pc, #56]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a5e0:	6013      	str	r3, [r2, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 800a5e2:	f7f9 fc6b 	bl	8003ebc <HAL_GetTick>
 800a5e6:	60f8      	str	r0, [r7, #12]

  /* Wait till PLL3 is ready */
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5e8:	e008      	b.n	800a5fc <RCCEx_PLL3_Config+0x110>
  {
    if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a5ea:	f7f9 fc67 	bl	8003ebc <HAL_GetTick>
 800a5ee:	4602      	mov	r2, r0
 800a5f0:	68fb      	ldr	r3, [r7, #12]
 800a5f2:	1ad3      	subs	r3, r2, r3
 800a5f4:	2b02      	cmp	r3, #2
 800a5f6:	d901      	bls.n	800a5fc <RCCEx_PLL3_Config+0x110>
    {
      return HAL_TIMEOUT;
 800a5f8:	2303      	movs	r3, #3
 800a5fa:	e006      	b.n	800a60a <RCCEx_PLL3_Config+0x11e>
  while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a5fc:	4b05      	ldr	r3, [pc, #20]	; (800a614 <RCCEx_PLL3_Config+0x128>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800a604:	2b00      	cmp	r3, #0
 800a606:	d0f0      	beq.n	800a5ea <RCCEx_PLL3_Config+0xfe>
    }
  }
  return HAL_OK;
 800a608:	2300      	movs	r3, #0
}
 800a60a:	4618      	mov	r0, r3
 800a60c:	3710      	adds	r7, #16
 800a60e:	46bd      	mov	sp, r7
 800a610:	bd80      	pop	{r7, pc}
 800a612:	bf00      	nop
 800a614:	46020c00 	.word	0x46020c00
 800a618:	80800000 	.word	0x80800000

0800a61c <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 800a61c:	b580      	push	{r7, lr}
 800a61e:	b084      	sub	sp, #16
 800a620:	af00      	add	r7, sp, #0
 800a622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800a624:	2301      	movs	r3, #1
 800a626:	73fb      	strb	r3, [r7, #15]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d071      	beq.n	800a712 <HAL_RTC_Init+0xf6>
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
    }
#else
    if (hrtc->State == HAL_RTC_STATE_RESET)
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800a634:	b2db      	uxtb	r3, r3
 800a636:	2b00      	cmp	r3, #0
 800a638:	d106      	bne.n	800a648 <HAL_RTC_Init+0x2c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	2200      	movs	r2, #0
 800a63e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 800a642:	6878      	ldr	r0, [r7, #4]
 800a644:	f7f9 f8de 	bl	8003804 <HAL_RTC_MspInit>
    }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2202      	movs	r2, #2
 800a64c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Check if the calendar has been not initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 800a650:	4b32      	ldr	r3, [pc, #200]	; (800a71c <HAL_RTC_Init+0x100>)
 800a652:	68db      	ldr	r3, [r3, #12]
 800a654:	f003 0310 	and.w	r3, r3, #16
 800a658:	2b10      	cmp	r3, #16
 800a65a:	d051      	beq.n	800a700 <HAL_RTC_Init+0xe4>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a65c:	4b2f      	ldr	r3, [pc, #188]	; (800a71c <HAL_RTC_Init+0x100>)
 800a65e:	22ca      	movs	r2, #202	; 0xca
 800a660:	625a      	str	r2, [r3, #36]	; 0x24
 800a662:	4b2e      	ldr	r3, [pc, #184]	; (800a71c <HAL_RTC_Init+0x100>)
 800a664:	2253      	movs	r2, #83	; 0x53
 800a666:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	f000 f88b 	bl	800a784 <RTC_EnterInitMode>
 800a66e:	4603      	mov	r3, r0
 800a670:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_OK)
 800a672:	7bfb      	ldrb	r3, [r7, #15]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d13f      	bne.n	800a6f8 <HAL_RTC_Init+0xdc>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        CLEAR_BIT(RTC->CR, (RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE));
 800a678:	4b28      	ldr	r3, [pc, #160]	; (800a71c <HAL_RTC_Init+0x100>)
 800a67a:	699b      	ldr	r3, [r3, #24]
 800a67c:	4a27      	ldr	r2, [pc, #156]	; (800a71c <HAL_RTC_Init+0x100>)
 800a67e:	f023 638e 	bic.w	r3, r3, #74448896	; 0x4700000
 800a682:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a686:	6193      	str	r3, [r2, #24]
        /* Set RTC_CR register */
        SET_BIT(RTC->CR, (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity));
 800a688:	4b24      	ldr	r3, [pc, #144]	; (800a71c <HAL_RTC_Init+0x100>)
 800a68a:	699a      	ldr	r2, [r3, #24]
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6859      	ldr	r1, [r3, #4]
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	691b      	ldr	r3, [r3, #16]
 800a694:	4319      	orrs	r1, r3
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	699b      	ldr	r3, [r3, #24]
 800a69a:	430b      	orrs	r3, r1
 800a69c:	491f      	ldr	r1, [pc, #124]	; (800a71c <HAL_RTC_Init+0x100>)
 800a69e:	4313      	orrs	r3, r2
 800a6a0:	618b      	str	r3, [r1, #24]

        /* Configure the RTC PRER */
        WRITE_REG(RTC->PRER, ((hrtc->Init.SynchPrediv) | (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos)));
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	68da      	ldr	r2, [r3, #12]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	689b      	ldr	r3, [r3, #8]
 800a6aa:	041b      	lsls	r3, r3, #16
 800a6ac:	491b      	ldr	r1, [pc, #108]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	610b      	str	r3, [r1, #16]

        /* Configure the Binary mode */
        MODIFY_REG(RTC->ICSR, RTC_ICSR_BIN | RTC_ICSR_BCDU, hrtc->Init.BinMode | hrtc->Init.BinMixBcdU);
 800a6b2:	4b1a      	ldr	r3, [pc, #104]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6b4:	68db      	ldr	r3, [r3, #12]
 800a6b6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800a6ba:	687b      	ldr	r3, [r7, #4]
 800a6bc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6c2:	430b      	orrs	r3, r1
 800a6c4:	4915      	ldr	r1, [pc, #84]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60cb      	str	r3, [r1, #12]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 800a6ca:	6878      	ldr	r0, [r7, #4]
 800a6cc:	f000 f896 	bl	800a7fc <RTC_ExitInitMode>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	73fb      	strb	r3, [r7, #15]
        if (status == HAL_OK)
 800a6d4:	7bfb      	ldrb	r3, [r7, #15]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10e      	bne.n	800a6f8 <HAL_RTC_Init+0xdc>
        {
          MODIFY_REG(RTC->CR, \
 800a6da:	4b10      	ldr	r3, [pc, #64]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6dc:	699b      	ldr	r3, [r3, #24]
 800a6de:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	6a19      	ldr	r1, [r3, #32]
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	69db      	ldr	r3, [r3, #28]
 800a6ea:	4319      	orrs	r1, r3
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	695b      	ldr	r3, [r3, #20]
 800a6f0:	430b      	orrs	r3, r1
 800a6f2:	490a      	ldr	r1, [pc, #40]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6f4:	4313      	orrs	r3, r2
 800a6f6:	618b      	str	r3, [r1, #24]
                     hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
        }
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a6f8:	4b08      	ldr	r3, [pc, #32]	; (800a71c <HAL_RTC_Init+0x100>)
 800a6fa:	22ff      	movs	r2, #255	; 0xff
 800a6fc:	625a      	str	r2, [r3, #36]	; 0x24
 800a6fe:	e001      	b.n	800a704 <HAL_RTC_Init+0xe8>
    }
    else
    {
      /* Calendar is already initialized */
      /* Set flag to OK */
      status = HAL_OK;
 800a700:	2300      	movs	r3, #0
 800a702:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 800a704:	7bfb      	ldrb	r3, [r7, #15]
 800a706:	2b00      	cmp	r3, #0
 800a708:	d103      	bne.n	800a712 <HAL_RTC_Init+0xf6>
    {
      /* Change RTC state */
      hrtc->State = HAL_RTC_STATE_READY;
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	2201      	movs	r2, #1
 800a70e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    }
  }

  return status;
 800a712:	7bfb      	ldrb	r3, [r7, #15]
}
 800a714:	4618      	mov	r0, r3
 800a716:	3710      	adds	r7, #16
 800a718:	46bd      	mov	sp, r7
 800a71a:	bd80      	pop	{r7, pc}
 800a71c:	46007800 	.word	0x46007800

0800a720 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800a720:	b580      	push	{r7, lr}
 800a722:	b084      	sub	sp, #16
 800a724:	af00      	add	r7, sp, #0
 800a726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_RSF);
 800a728:	4b15      	ldr	r3, [pc, #84]	; (800a780 <HAL_RTC_WaitForSynchro+0x60>)
 800a72a:	68db      	ldr	r3, [r3, #12]
 800a72c:	4a14      	ldr	r2, [pc, #80]	; (800a780 <HAL_RTC_WaitForSynchro+0x60>)
 800a72e:	f023 0320 	bic.w	r3, r3, #32
 800a732:	60d3      	str	r3, [r2, #12]

  tickstart = HAL_GetTick();
 800a734:	f7f9 fbc2 	bl	8003ebc <HAL_GetTick>
 800a738:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a73a:	e013      	b.n	800a764 <HAL_RTC_WaitForSynchro+0x44>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800a73c:	f7f9 fbbe 	bl	8003ebc <HAL_GetTick>
 800a740:	4602      	mov	r2, r0
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	1ad3      	subs	r3, r2, r3
 800a746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a74a:	d90b      	bls.n	800a764 <HAL_RTC_WaitForSynchro+0x44>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a74c:	4b0c      	ldr	r3, [pc, #48]	; (800a780 <HAL_RTC_WaitForSynchro+0x60>)
 800a74e:	68db      	ldr	r3, [r3, #12]
 800a750:	f003 0320 	and.w	r3, r3, #32
 800a754:	2b00      	cmp	r3, #0
 800a756:	d10c      	bne.n	800a772 <HAL_RTC_WaitForSynchro+0x52>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2203      	movs	r2, #3
 800a75c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
        return HAL_TIMEOUT;
 800a760:	2303      	movs	r3, #3
 800a762:	e008      	b.n	800a776 <HAL_RTC_WaitForSynchro+0x56>
  while (READ_BIT(RTC->ICSR, RTC_ICSR_RSF) == 0U)
 800a764:	4b06      	ldr	r3, [pc, #24]	; (800a780 <HAL_RTC_WaitForSynchro+0x60>)
 800a766:	68db      	ldr	r3, [r3, #12]
 800a768:	f003 0320 	and.w	r3, r3, #32
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d0e5      	beq.n	800a73c <HAL_RTC_WaitForSynchro+0x1c>
 800a770:	e000      	b.n	800a774 <HAL_RTC_WaitForSynchro+0x54>
      }
      else
      {
        break;
 800a772:	bf00      	nop
      }
    }
  }

  return HAL_OK;
 800a774:	2300      	movs	r3, #0
}
 800a776:	4618      	mov	r0, r3
 800a778:	3710      	adds	r7, #16
 800a77a:	46bd      	mov	sp, r7
 800a77c:	bd80      	pop	{r7, pc}
 800a77e:	bf00      	nop
 800a780:	46007800 	.word	0x46007800

0800a784 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 800a784:	b580      	push	{r7, lr}
 800a786:	b084      	sub	sp, #16
 800a788:	af00      	add	r7, sp, #0
 800a78a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a78c:	2300      	movs	r3, #0
 800a78e:	73fb      	strb	r3, [r7, #15]

  /* Check if the Initialization mode is set */
  if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a790:	4b19      	ldr	r3, [pc, #100]	; (800a7f8 <RTC_EnterInitMode+0x74>)
 800a792:	68db      	ldr	r3, [r3, #12]
 800a794:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a798:	2b00      	cmp	r3, #0
 800a79a:	d128      	bne.n	800a7ee <RTC_EnterInitMode+0x6a>
  {
    /* Set the Initialization mode */
    SET_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a79c:	4b16      	ldr	r3, [pc, #88]	; (800a7f8 <RTC_EnterInitMode+0x74>)
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	4a15      	ldr	r2, [pc, #84]	; (800a7f8 <RTC_EnterInitMode+0x74>)
 800a7a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a7a6:	60d3      	str	r3, [r2, #12]

    tickstart = HAL_GetTick();
 800a7a8:	f7f9 fb88 	bl	8003ebc <HAL_GetTick>
 800a7ac:	60b8      	str	r0, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7ae:	e013      	b.n	800a7d8 <RTC_EnterInitMode+0x54>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 800a7b0:	f7f9 fb84 	bl	8003ebc <HAL_GetTick>
 800a7b4:	4602      	mov	r2, r0
 800a7b6:	68bb      	ldr	r3, [r7, #8]
 800a7b8:	1ad3      	subs	r3, r2, r3
 800a7ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a7be:	d90b      	bls.n	800a7d8 <RTC_EnterInitMode+0x54>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U)
 800a7c0:	4b0d      	ldr	r3, [pc, #52]	; (800a7f8 <RTC_EnterInitMode+0x74>)
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d10f      	bne.n	800a7ec <RTC_EnterInitMode+0x68>
        {
          status = HAL_TIMEOUT;
 800a7cc:	2303      	movs	r3, #3
 800a7ce:	73fb      	strb	r3, [r7, #15]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	2203      	movs	r2, #3
 800a7d4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    while ((READ_BIT(RTC->ICSR, RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 800a7d8:	4b07      	ldr	r3, [pc, #28]	; (800a7f8 <RTC_EnterInitMode+0x74>)
 800a7da:	68db      	ldr	r3, [r3, #12]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d104      	bne.n	800a7ee <RTC_EnterInitMode+0x6a>
 800a7e4:	7bfb      	ldrb	r3, [r7, #15]
 800a7e6:	2b03      	cmp	r3, #3
 800a7e8:	d1e2      	bne.n	800a7b0 <RTC_EnterInitMode+0x2c>
 800a7ea:	e000      	b.n	800a7ee <RTC_EnterInitMode+0x6a>
        }
        else
        {
          break;
 800a7ec:	bf00      	nop
        }
      }
    }
  }

  return status;
 800a7ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a7f0:	4618      	mov	r0, r3
 800a7f2:	3710      	adds	r7, #16
 800a7f4:	46bd      	mov	sp, r7
 800a7f6:	bd80      	pop	{r7, pc}
 800a7f8:	46007800 	.word	0x46007800

0800a7fc <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800a7fc:	b580      	push	{r7, lr}
 800a7fe:	b084      	sub	sp, #16
 800a800:	af00      	add	r7, sp, #0
 800a802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a804:	2300      	movs	r3, #0
 800a806:	73fb      	strb	r3, [r7, #15]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800a808:	4b1a      	ldr	r3, [pc, #104]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a80a:	68db      	ldr	r3, [r3, #12]
 800a80c:	4a19      	ldr	r2, [pc, #100]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a80e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a812:	60d3      	str	r3, [r2, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 800a814:	4b17      	ldr	r3, [pc, #92]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a816:	699b      	ldr	r3, [r3, #24]
 800a818:	f003 0320 	and.w	r3, r3, #32
 800a81c:	2b00      	cmp	r3, #0
 800a81e:	d10c      	bne.n	800a83a <RTC_ExitInitMode+0x3e>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff ff7d 	bl	800a720 <HAL_RTC_WaitForSynchro>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d01e      	beq.n	800a86a <RTC_ExitInitMode+0x6e>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2203      	movs	r2, #3
 800a830:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	73fb      	strb	r3, [r7, #15]
 800a838:	e017      	b.n	800a86a <RTC_ExitInitMode+0x6e>
    }
  }
  else /* WA 2.9.6 Calendar initialization may fail in case of consecutive INIT mode entry. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a83a:	4b0e      	ldr	r3, [pc, #56]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a83c:	699b      	ldr	r3, [r3, #24]
 800a83e:	4a0d      	ldr	r2, [pc, #52]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a840:	f023 0320 	bic.w	r3, r3, #32
 800a844:	6193      	str	r3, [r2, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800a846:	6878      	ldr	r0, [r7, #4]
 800a848:	f7ff ff6a 	bl	800a720 <HAL_RTC_WaitForSynchro>
 800a84c:	4603      	mov	r3, r0
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d005      	beq.n	800a85e <RTC_ExitInitMode+0x62>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	2203      	movs	r2, #3
 800a856:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      status = HAL_TIMEOUT;
 800a85a:	2303      	movs	r3, #3
 800a85c:	73fb      	strb	r3, [r7, #15]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800a85e:	4b05      	ldr	r3, [pc, #20]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a860:	699b      	ldr	r3, [r3, #24]
 800a862:	4a04      	ldr	r2, [pc, #16]	; (800a874 <RTC_ExitInitMode+0x78>)
 800a864:	f043 0320 	orr.w	r3, r3, #32
 800a868:	6193      	str	r3, [r2, #24]
  }
  return status;
 800a86a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	3710      	adds	r7, #16
 800a870:	46bd      	mov	sp, r7
 800a872:	bd80      	pop	{r7, pc}
 800a874:	46007800 	.word	0x46007800

0800a878 <HAL_RTCEx_SetRefClock>:
  * @brief  Enable the RTC reference clock detection.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetRefClock(RTC_HandleTypeDef *hrtc)
{
 800a878:	b580      	push	{r7, lr}
 800a87a:	b084      	sub	sp, #16
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a886:	2b01      	cmp	r3, #1
 800a888:	d101      	bne.n	800a88e <HAL_RTCEx_SetRefClock+0x16>
 800a88a:	2302      	movs	r3, #2
 800a88c:	e02f      	b.n	800a8ee <HAL_RTCEx_SetRefClock+0x76>
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	2202      	movs	r2, #2
 800a89a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a89e:	4b16      	ldr	r3, [pc, #88]	; (800a8f8 <HAL_RTCEx_SetRefClock+0x80>)
 800a8a0:	22ca      	movs	r2, #202	; 0xca
 800a8a2:	625a      	str	r2, [r3, #36]	; 0x24
 800a8a4:	4b14      	ldr	r3, [pc, #80]	; (800a8f8 <HAL_RTCEx_SetRefClock+0x80>)
 800a8a6:	2253      	movs	r2, #83	; 0x53
 800a8a8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800a8aa:	6878      	ldr	r0, [r7, #4]
 800a8ac:	f7ff ff6a 	bl	800a784 <RTC_EnterInitMode>
 800a8b0:	4603      	mov	r3, r0
 800a8b2:	73fb      	strb	r3, [r7, #15]
  if (status == HAL_OK)
 800a8b4:	7bfb      	ldrb	r3, [r7, #15]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d10a      	bne.n	800a8d0 <HAL_RTCEx_SetRefClock+0x58>
  {
    /* Enable clockref detection */
    SET_BIT(RTC->CR, RTC_CR_REFCKON);
 800a8ba:	4b0f      	ldr	r3, [pc, #60]	; (800a8f8 <HAL_RTCEx_SetRefClock+0x80>)
 800a8bc:	699b      	ldr	r3, [r3, #24]
 800a8be:	4a0e      	ldr	r2, [pc, #56]	; (800a8f8 <HAL_RTCEx_SetRefClock+0x80>)
 800a8c0:	f043 0310 	orr.w	r3, r3, #16
 800a8c4:	6193      	str	r3, [r2, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f7ff ff98 	bl	800a7fc <RTC_ExitInitMode>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a8d0:	4b09      	ldr	r3, [pc, #36]	; (800a8f8 <HAL_RTCEx_SetRefClock+0x80>)
 800a8d2:	22ff      	movs	r2, #255	; 0xff
 800a8d4:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b00      	cmp	r3, #0
 800a8da:	d103      	bne.n	800a8e4 <HAL_RTCEx_SetRefClock+0x6c>
  {
    /* Change RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	2201      	movs	r2, #1
 800a8e0:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2200      	movs	r2, #0
 800a8e8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return status;
 800a8ec:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8ee:	4618      	mov	r0, r3
 800a8f0:	3710      	adds	r7, #16
 800a8f2:	46bd      	mov	sp, r7
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	46007800 	.word	0x46007800

0800a8fc <HAL_RTCEx_PrivilegeModeSet>:
  * @param  hrtc RTC handle
  * @param  privilegeState  Privilege state
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef HAL_RTCEx_PrivilegeModeSet(RTC_HandleTypeDef *hrtc, RTC_PrivilegeStateTypeDef *privilegeState)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b083      	sub	sp, #12
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  assert_param(IS_RTC_PRIVILEGE_BKUP_ZONE(privilegeState->backupRegisterPrivZone));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone2));
  assert_param(IS_RTC_BKP(privilegeState->backupRegisterStartZone3));

  /* RTC privilege configuration */
  WRITE_REG(RTC->PRIVCFGR, privilegeState->rtcPrivilegeFull | privilegeState->rtcPrivilegeFeatures);
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	681a      	ldr	r2, [r3, #0]
 800a90a:	683b      	ldr	r3, [r7, #0]
 800a90c:	685b      	ldr	r3, [r3, #4]
 800a90e:	4910      	ldr	r1, [pc, #64]	; (800a950 <HAL_RTCEx_PrivilegeModeSet+0x54>)
 800a910:	4313      	orrs	r3, r2
 800a912:	61cb      	str	r3, [r1, #28]

  /* TAMP, Monotonic counter and Backup registers privilege configuration
     Warning : privilegeState->backupRegisterPrivZone is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written. */
  WRITE_REG(TAMP->PRIVCFGR, privilegeState->tampPrivilegeFull | privilegeState->backupRegisterPrivZone | \
 800a914:	683b      	ldr	r3, [r7, #0]
 800a916:	689a      	ldr	r2, [r3, #8]
 800a918:	683b      	ldr	r3, [r7, #0]
 800a91a:	68db      	ldr	r3, [r3, #12]
 800a91c:	431a      	orrs	r2, r3
 800a91e:	683b      	ldr	r3, [r7, #0]
 800a920:	699b      	ldr	r3, [r3, #24]
 800a922:	490c      	ldr	r1, [pc, #48]	; (800a954 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a924:	4313      	orrs	r3, r2
 800a926:	624b      	str	r3, [r1, #36]	; 0x24
  /* Backup register start zone
     Warning : This parameter is only writable in secure mode or if trustzone is disabled.
               In non secure mode, a notification is generated through a flag/interrupt in the TZIC
         (TrustZone interrupt controller). The bits are not written.
     Warning : Backup register start zones are shared with secure configuration */
  MODIFY_REG(TAMP->SECCFGR,
 800a928:	4b0a      	ldr	r3, [pc, #40]	; (800a954 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a92a:	6a1b      	ldr	r3, [r3, #32]
 800a92c:	f003 22ff 	and.w	r2, r3, #4278255360	; 0xff00ff00
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	6919      	ldr	r1, [r3, #16]
 800a934:	683b      	ldr	r3, [r7, #0]
 800a936:	695b      	ldr	r3, [r3, #20]
 800a938:	041b      	lsls	r3, r3, #16
 800a93a:	430b      	orrs	r3, r1
 800a93c:	4905      	ldr	r1, [pc, #20]	; (800a954 <HAL_RTCEx_PrivilegeModeSet+0x58>)
 800a93e:	4313      	orrs	r3, r2
 800a940:	620b      	str	r3, [r1, #32]
             (TAMP_SECCFGR_BKPRWSEC | TAMP_SECCFGR_BKPWSEC),
             ((privilegeState->backupRegisterStartZone2 << TAMP_SECCFGR_BKPRWSEC_Pos) | \
              (privilegeState->backupRegisterStartZone3 << TAMP_SECCFGR_BKPWSEC_Pos)));

  return HAL_OK;
 800a942:	2300      	movs	r3, #0
}
 800a944:	4618      	mov	r0, r3
 800a946:	370c      	adds	r7, #12
 800a948:	46bd      	mov	sp, r7
 800a94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a94e:	4770      	bx	lr
 800a950:	46007800 	.word	0x46007800
 800a954:	46007c00 	.word	0x46007c00

0800a958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a958:	b580      	push	{r7, lr}
 800a95a:	b082      	sub	sp, #8
 800a95c:	af00      	add	r7, sp, #0
 800a95e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	2b00      	cmp	r3, #0
 800a964:	d101      	bne.n	800a96a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a966:	2301      	movs	r3, #1
 800a968:	e049      	b.n	800a9fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a970:	b2db      	uxtb	r3, r3
 800a972:	2b00      	cmp	r3, #0
 800a974:	d106      	bne.n	800a984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	2200      	movs	r2, #0
 800a97a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a97e:	6878      	ldr	r0, [r7, #4]
 800a980:	f7f8 ffb2 	bl	80038e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2202      	movs	r2, #2
 800a988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	681a      	ldr	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	3304      	adds	r3, #4
 800a994:	4619      	mov	r1, r3
 800a996:	4610      	mov	r0, r2
 800a998:	f000 fc40 	bl	800b21c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	2201      	movs	r2, #1
 800a9c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	2201      	movs	r2, #1
 800a9c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2201      	movs	r2, #1
 800a9d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a9d4:	687b      	ldr	r3, [r7, #4]
 800a9d6:	2201      	movs	r2, #1
 800a9d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9dc:	687b      	ldr	r3, [r7, #4]
 800a9de:	2201      	movs	r2, #1
 800a9e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	2201      	movs	r2, #1
 800a9e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	2201      	movs	r2, #1
 800a9f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2201      	movs	r2, #1
 800a9f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9fc:	2300      	movs	r3, #0
}
 800a9fe:	4618      	mov	r0, r3
 800aa00:	3708      	adds	r7, #8
 800aa02:	46bd      	mov	sp, r7
 800aa04:	bd80      	pop	{r7, pc}
	...

0800aa08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800aa08:	b480      	push	{r7}
 800aa0a:	b085      	sub	sp, #20
 800aa0c:	af00      	add	r7, sp, #0
 800aa0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa16:	b2db      	uxtb	r3, r3
 800aa18:	2b01      	cmp	r3, #1
 800aa1a:	d001      	beq.n	800aa20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800aa1c:	2301      	movs	r3, #1
 800aa1e:	e06a      	b.n	800aaf6 <HAL_TIM_Base_Start+0xee>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2202      	movs	r2, #2
 800aa24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	4a35      	ldr	r2, [pc, #212]	; (800ab04 <HAL_TIM_Base_Start+0xfc>)
 800aa2e:	4293      	cmp	r3, r2
 800aa30:	d040      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	4a34      	ldr	r2, [pc, #208]	; (800ab08 <HAL_TIM_Base_Start+0x100>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d03b      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aa44:	d036      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	681b      	ldr	r3, [r3, #0]
 800aa4a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800aa4e:	d031      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	4a2d      	ldr	r2, [pc, #180]	; (800ab0c <HAL_TIM_Base_Start+0x104>)
 800aa56:	4293      	cmp	r3, r2
 800aa58:	d02c      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa5a:	687b      	ldr	r3, [r7, #4]
 800aa5c:	681b      	ldr	r3, [r3, #0]
 800aa5e:	4a2c      	ldr	r2, [pc, #176]	; (800ab10 <HAL_TIM_Base_Start+0x108>)
 800aa60:	4293      	cmp	r3, r2
 800aa62:	d027      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	681b      	ldr	r3, [r3, #0]
 800aa68:	4a2a      	ldr	r2, [pc, #168]	; (800ab14 <HAL_TIM_Base_Start+0x10c>)
 800aa6a:	4293      	cmp	r3, r2
 800aa6c:	d022      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	681b      	ldr	r3, [r3, #0]
 800aa72:	4a29      	ldr	r2, [pc, #164]	; (800ab18 <HAL_TIM_Base_Start+0x110>)
 800aa74:	4293      	cmp	r3, r2
 800aa76:	d01d      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	4a27      	ldr	r2, [pc, #156]	; (800ab1c <HAL_TIM_Base_Start+0x114>)
 800aa7e:	4293      	cmp	r3, r2
 800aa80:	d018      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	4a26      	ldr	r2, [pc, #152]	; (800ab20 <HAL_TIM_Base_Start+0x118>)
 800aa88:	4293      	cmp	r3, r2
 800aa8a:	d013      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	4a24      	ldr	r2, [pc, #144]	; (800ab24 <HAL_TIM_Base_Start+0x11c>)
 800aa92:	4293      	cmp	r3, r2
 800aa94:	d00e      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	681b      	ldr	r3, [r3, #0]
 800aa9a:	4a23      	ldr	r2, [pc, #140]	; (800ab28 <HAL_TIM_Base_Start+0x120>)
 800aa9c:	4293      	cmp	r3, r2
 800aa9e:	d009      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	4a21      	ldr	r2, [pc, #132]	; (800ab2c <HAL_TIM_Base_Start+0x124>)
 800aaa6:	4293      	cmp	r3, r2
 800aaa8:	d004      	beq.n	800aab4 <HAL_TIM_Base_Start+0xac>
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	4a20      	ldr	r2, [pc, #128]	; (800ab30 <HAL_TIM_Base_Start+0x128>)
 800aab0:	4293      	cmp	r3, r2
 800aab2:	d115      	bne.n	800aae0 <HAL_TIM_Base_Start+0xd8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	689a      	ldr	r2, [r3, #8]
 800aaba:	4b1e      	ldr	r3, [pc, #120]	; (800ab34 <HAL_TIM_Base_Start+0x12c>)
 800aabc:	4013      	ands	r3, r2
 800aabe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	2b06      	cmp	r3, #6
 800aac4:	d015      	beq.n	800aaf2 <HAL_TIM_Base_Start+0xea>
 800aac6:	68fb      	ldr	r3, [r7, #12]
 800aac8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aacc:	d011      	beq.n	800aaf2 <HAL_TIM_Base_Start+0xea>
    {
      __HAL_TIM_ENABLE(htim);
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	681a      	ldr	r2, [r3, #0]
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	f042 0201 	orr.w	r2, r2, #1
 800aadc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aade:	e008      	b.n	800aaf2 <HAL_TIM_Base_Start+0xea>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	681a      	ldr	r2, [r3, #0]
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	f042 0201 	orr.w	r2, r2, #1
 800aaee:	601a      	str	r2, [r3, #0]
 800aaf0:	e000      	b.n	800aaf4 <HAL_TIM_Base_Start+0xec>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaf2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaf4:	2300      	movs	r3, #0
}
 800aaf6:	4618      	mov	r0, r3
 800aaf8:	3714      	adds	r7, #20
 800aafa:	46bd      	mov	sp, r7
 800aafc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab00:	4770      	bx	lr
 800ab02:	bf00      	nop
 800ab04:	40012c00 	.word	0x40012c00
 800ab08:	50012c00 	.word	0x50012c00
 800ab0c:	40000400 	.word	0x40000400
 800ab10:	50000400 	.word	0x50000400
 800ab14:	40000800 	.word	0x40000800
 800ab18:	50000800 	.word	0x50000800
 800ab1c:	40000c00 	.word	0x40000c00
 800ab20:	50000c00 	.word	0x50000c00
 800ab24:	40013400 	.word	0x40013400
 800ab28:	50013400 	.word	0x50013400
 800ab2c:	40014000 	.word	0x40014000
 800ab30:	50014000 	.word	0x50014000
 800ab34:	00010007 	.word	0x00010007

0800ab38 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 800ab38:	b480      	push	{r7}
 800ab3a:	b083      	sub	sp, #12
 800ab3c:	af00      	add	r7, sp, #0
 800ab3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	6a1a      	ldr	r2, [r3, #32]
 800ab46:	f241 1311 	movw	r3, #4369	; 0x1111
 800ab4a:	4013      	ands	r3, r2
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	d10f      	bne.n	800ab70 <HAL_TIM_Base_Stop+0x38>
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	6a1a      	ldr	r2, [r3, #32]
 800ab56:	f244 4344 	movw	r3, #17476	; 0x4444
 800ab5a:	4013      	ands	r3, r2
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d107      	bne.n	800ab70 <HAL_TIM_Base_Stop+0x38>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	681a      	ldr	r2, [r3, #0]
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	f022 0201 	bic.w	r2, r2, #1
 800ab6e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	2201      	movs	r2, #1
 800ab74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ab78:	2300      	movs	r3, #0
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	370c      	adds	r7, #12
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
	...

0800ab88 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800ab88:	b480      	push	{r7}
 800ab8a:	b085      	sub	sp, #20
 800ab8c:	af00      	add	r7, sp, #0
 800ab8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab96:	b2db      	uxtb	r3, r3
 800ab98:	2b01      	cmp	r3, #1
 800ab9a:	d001      	beq.n	800aba0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	e072      	b.n	800ac86 <HAL_TIM_Base_Start_IT+0xfe>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	2202      	movs	r2, #2
 800aba4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	68da      	ldr	r2, [r3, #12]
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	f042 0201 	orr.w	r2, r2, #1
 800abb6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a35      	ldr	r2, [pc, #212]	; (800ac94 <HAL_TIM_Base_Start_IT+0x10c>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d040      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a34      	ldr	r2, [pc, #208]	; (800ac98 <HAL_TIM_Base_Start_IT+0x110>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d03b      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abd4:	d036      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800abde:	d031      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a2d      	ldr	r2, [pc, #180]	; (800ac9c <HAL_TIM_Base_Start_IT+0x114>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d02c      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	4a2c      	ldr	r2, [pc, #176]	; (800aca0 <HAL_TIM_Base_Start_IT+0x118>)
 800abf0:	4293      	cmp	r3, r2
 800abf2:	d027      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	4a2a      	ldr	r2, [pc, #168]	; (800aca4 <HAL_TIM_Base_Start_IT+0x11c>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d022      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	4a29      	ldr	r2, [pc, #164]	; (800aca8 <HAL_TIM_Base_Start_IT+0x120>)
 800ac04:	4293      	cmp	r3, r2
 800ac06:	d01d      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac08:	687b      	ldr	r3, [r7, #4]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	4a27      	ldr	r2, [pc, #156]	; (800acac <HAL_TIM_Base_Start_IT+0x124>)
 800ac0e:	4293      	cmp	r3, r2
 800ac10:	d018      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	4a26      	ldr	r2, [pc, #152]	; (800acb0 <HAL_TIM_Base_Start_IT+0x128>)
 800ac18:	4293      	cmp	r3, r2
 800ac1a:	d013      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a24      	ldr	r2, [pc, #144]	; (800acb4 <HAL_TIM_Base_Start_IT+0x12c>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d00e      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a23      	ldr	r2, [pc, #140]	; (800acb8 <HAL_TIM_Base_Start_IT+0x130>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d009      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a21      	ldr	r2, [pc, #132]	; (800acbc <HAL_TIM_Base_Start_IT+0x134>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d004      	beq.n	800ac44 <HAL_TIM_Base_Start_IT+0xbc>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a20      	ldr	r2, [pc, #128]	; (800acc0 <HAL_TIM_Base_Start_IT+0x138>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d115      	bne.n	800ac70 <HAL_TIM_Base_Start_IT+0xe8>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	689a      	ldr	r2, [r3, #8]
 800ac4a:	4b1e      	ldr	r3, [pc, #120]	; (800acc4 <HAL_TIM_Base_Start_IT+0x13c>)
 800ac4c:	4013      	ands	r3, r2
 800ac4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	2b06      	cmp	r3, #6
 800ac54:	d015      	beq.n	800ac82 <HAL_TIM_Base_Start_IT+0xfa>
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ac5c:	d011      	beq.n	800ac82 <HAL_TIM_Base_Start_IT+0xfa>
    {
      __HAL_TIM_ENABLE(htim);
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681a      	ldr	r2, [r3, #0]
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	681b      	ldr	r3, [r3, #0]
 800ac68:	f042 0201 	orr.w	r2, r2, #1
 800ac6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac6e:	e008      	b.n	800ac82 <HAL_TIM_Base_Start_IT+0xfa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	681a      	ldr	r2, [r3, #0]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	f042 0201 	orr.w	r2, r2, #1
 800ac7e:	601a      	str	r2, [r3, #0]
 800ac80:	e000      	b.n	800ac84 <HAL_TIM_Base_Start_IT+0xfc>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ac82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ac84:	2300      	movs	r3, #0
}
 800ac86:	4618      	mov	r0, r3
 800ac88:	3714      	adds	r7, #20
 800ac8a:	46bd      	mov	sp, r7
 800ac8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac90:	4770      	bx	lr
 800ac92:	bf00      	nop
 800ac94:	40012c00 	.word	0x40012c00
 800ac98:	50012c00 	.word	0x50012c00
 800ac9c:	40000400 	.word	0x40000400
 800aca0:	50000400 	.word	0x50000400
 800aca4:	40000800 	.word	0x40000800
 800aca8:	50000800 	.word	0x50000800
 800acac:	40000c00 	.word	0x40000c00
 800acb0:	50000c00 	.word	0x50000c00
 800acb4:	40013400 	.word	0x40013400
 800acb8:	50013400 	.word	0x50013400
 800acbc:	40014000 	.word	0x40014000
 800acc0:	50014000 	.word	0x50014000
 800acc4:	00010007 	.word	0x00010007

0800acc8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b082      	sub	sp, #8
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	691b      	ldr	r3, [r3, #16]
 800acd6:	f003 0302 	and.w	r3, r3, #2
 800acda:	2b02      	cmp	r3, #2
 800acdc:	d122      	bne.n	800ad24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	68db      	ldr	r3, [r3, #12]
 800ace4:	f003 0302 	and.w	r3, r3, #2
 800ace8:	2b02      	cmp	r3, #2
 800acea:	d11b      	bne.n	800ad24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f06f 0202 	mvn.w	r2, #2
 800acf4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	2201      	movs	r2, #1
 800acfa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	699b      	ldr	r3, [r3, #24]
 800ad02:	f003 0303 	and.w	r3, r3, #3
 800ad06:	2b00      	cmp	r3, #0
 800ad08:	d003      	beq.n	800ad12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fa68 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800ad10:	e005      	b.n	800ad1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad12:	6878      	ldr	r0, [r7, #4]
 800ad14:	f000 fa5a 	bl	800b1cc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f000 fa6b 	bl	800b1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad1e:	687b      	ldr	r3, [r7, #4]
 800ad20:	2200      	movs	r2, #0
 800ad22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	691b      	ldr	r3, [r3, #16]
 800ad2a:	f003 0304 	and.w	r3, r3, #4
 800ad2e:	2b04      	cmp	r3, #4
 800ad30:	d122      	bne.n	800ad78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	681b      	ldr	r3, [r3, #0]
 800ad36:	68db      	ldr	r3, [r3, #12]
 800ad38:	f003 0304 	and.w	r3, r3, #4
 800ad3c:	2b04      	cmp	r3, #4
 800ad3e:	d11b      	bne.n	800ad78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f06f 0204 	mvn.w	r2, #4
 800ad48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ad4a:	687b      	ldr	r3, [r7, #4]
 800ad4c:	2202      	movs	r2, #2
 800ad4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	699b      	ldr	r3, [r3, #24]
 800ad56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d003      	beq.n	800ad66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ad5e:	6878      	ldr	r0, [r7, #4]
 800ad60:	f000 fa3e 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800ad64:	e005      	b.n	800ad72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ad66:	6878      	ldr	r0, [r7, #4]
 800ad68:	f000 fa30 	bl	800b1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ad6c:	6878      	ldr	r0, [r7, #4]
 800ad6e:	f000 fa41 	bl	800b1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	2200      	movs	r2, #0
 800ad76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	691b      	ldr	r3, [r3, #16]
 800ad7e:	f003 0308 	and.w	r3, r3, #8
 800ad82:	2b08      	cmp	r3, #8
 800ad84:	d122      	bne.n	800adcc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	68db      	ldr	r3, [r3, #12]
 800ad8c:	f003 0308 	and.w	r3, r3, #8
 800ad90:	2b08      	cmp	r3, #8
 800ad92:	d11b      	bne.n	800adcc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	681b      	ldr	r3, [r3, #0]
 800ad98:	f06f 0208 	mvn.w	r2, #8
 800ad9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	2204      	movs	r2, #4
 800ada2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	69db      	ldr	r3, [r3, #28]
 800adaa:	f003 0303 	and.w	r3, r3, #3
 800adae:	2b00      	cmp	r3, #0
 800adb0:	d003      	beq.n	800adba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800adb2:	6878      	ldr	r0, [r7, #4]
 800adb4:	f000 fa14 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800adb8:	e005      	b.n	800adc6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	f000 fa06 	bl	800b1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800adc0:	6878      	ldr	r0, [r7, #4]
 800adc2:	f000 fa17 	bl	800b1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800adc6:	687b      	ldr	r3, [r7, #4]
 800adc8:	2200      	movs	r2, #0
 800adca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	691b      	ldr	r3, [r3, #16]
 800add2:	f003 0310 	and.w	r3, r3, #16
 800add6:	2b10      	cmp	r3, #16
 800add8:	d122      	bne.n	800ae20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	f003 0310 	and.w	r3, r3, #16
 800ade4:	2b10      	cmp	r3, #16
 800ade6:	d11b      	bne.n	800ae20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	f06f 0210 	mvn.w	r2, #16
 800adf0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2208      	movs	r2, #8
 800adf6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	69db      	ldr	r3, [r3, #28]
 800adfe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ae02:	2b00      	cmp	r3, #0
 800ae04:	d003      	beq.n	800ae0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ae06:	6878      	ldr	r0, [r7, #4]
 800ae08:	f000 f9ea 	bl	800b1e0 <HAL_TIM_IC_CaptureCallback>
 800ae0c:	e005      	b.n	800ae1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ae0e:	6878      	ldr	r0, [r7, #4]
 800ae10:	f000 f9dc 	bl	800b1cc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f000 f9ed 	bl	800b1f4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	2200      	movs	r2, #0
 800ae1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	691b      	ldr	r3, [r3, #16]
 800ae26:	f003 0301 	and.w	r3, r3, #1
 800ae2a:	2b01      	cmp	r3, #1
 800ae2c:	d10e      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	68db      	ldr	r3, [r3, #12]
 800ae34:	f003 0301 	and.w	r3, r3, #1
 800ae38:	2b01      	cmp	r3, #1
 800ae3a:	d107      	bne.n	800ae4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	681b      	ldr	r3, [r3, #0]
 800ae40:	f06f 0201 	mvn.w	r2, #1
 800ae44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ae46:	6878      	ldr	r0, [r7, #4]
 800ae48:	f7f8 fb72 	bl	8003530 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ae4c:	687b      	ldr	r3, [r7, #4]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	691b      	ldr	r3, [r3, #16]
 800ae52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae56:	2b80      	cmp	r3, #128	; 0x80
 800ae58:	d10e      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	681b      	ldr	r3, [r3, #0]
 800ae5e:	68db      	ldr	r3, [r3, #12]
 800ae60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae64:	2b80      	cmp	r3, #128	; 0x80
 800ae66:	d107      	bne.n	800ae78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ae70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ae72:	6878      	ldr	r0, [r7, #4]
 800ae74:	f000 fc34 	bl	800b6e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	681b      	ldr	r3, [r3, #0]
 800ae7c:	691b      	ldr	r3, [r3, #16]
 800ae7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae86:	d10e      	bne.n	800aea6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	68db      	ldr	r3, [r3, #12]
 800ae8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae92:	2b80      	cmp	r3, #128	; 0x80
 800ae94:	d107      	bne.n	800aea6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ae9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800aea0:	6878      	ldr	r0, [r7, #4]
 800aea2:	f000 fc27 	bl	800b6f4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	691b      	ldr	r3, [r3, #16]
 800aeac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aeb0:	2b40      	cmp	r3, #64	; 0x40
 800aeb2:	d10e      	bne.n	800aed2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800aeb4:	687b      	ldr	r3, [r7, #4]
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	68db      	ldr	r3, [r3, #12]
 800aeba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aebe:	2b40      	cmp	r3, #64	; 0x40
 800aec0:	d107      	bne.n	800aed2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800aeca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800aecc:	6878      	ldr	r0, [r7, #4]
 800aece:	f000 f99b 	bl	800b208 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	681b      	ldr	r3, [r3, #0]
 800aed6:	691b      	ldr	r3, [r3, #16]
 800aed8:	f003 0320 	and.w	r3, r3, #32
 800aedc:	2b20      	cmp	r3, #32
 800aede:	d10e      	bne.n	800aefe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	68db      	ldr	r3, [r3, #12]
 800aee6:	f003 0320 	and.w	r3, r3, #32
 800aeea:	2b20      	cmp	r3, #32
 800aeec:	d107      	bne.n	800aefe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f06f 0220 	mvn.w	r2, #32
 800aef6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800aef8:	6878      	ldr	r0, [r7, #4]
 800aefa:	f000 fbe7 	bl	800b6cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	691b      	ldr	r3, [r3, #16]
 800af04:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af0c:	d10f      	bne.n	800af2e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	68db      	ldr	r3, [r3, #12]
 800af14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800af18:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af1c:	d107      	bne.n	800af2e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800af26:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800af28:	6878      	ldr	r0, [r7, #4]
 800af2a:	f000 fbed 	bl	800b708 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	681b      	ldr	r3, [r3, #0]
 800af32:	691b      	ldr	r3, [r3, #16]
 800af34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af38:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af3c:	d10f      	bne.n	800af5e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	68db      	ldr	r3, [r3, #12]
 800af44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800af48:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af4c:	d107      	bne.n	800af5e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	681b      	ldr	r3, [r3, #0]
 800af52:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800af56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 800af58:	6878      	ldr	r0, [r7, #4]
 800af5a:	f000 fbdf 	bl	800b71c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	681b      	ldr	r3, [r3, #0]
 800af62:	691b      	ldr	r3, [r3, #16]
 800af64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af6c:	d10f      	bne.n	800af8e <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	68db      	ldr	r3, [r3, #12]
 800af74:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800af78:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af7c:	d107      	bne.n	800af8e <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 800af7e:	687b      	ldr	r3, [r7, #4]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 800af86:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 800af88:	6878      	ldr	r0, [r7, #4]
 800af8a:	f000 fbd1 	bl	800b730 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	691b      	ldr	r3, [r3, #16]
 800af94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800af98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af9c:	d10f      	bne.n	800afbe <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	68db      	ldr	r3, [r3, #12]
 800afa4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800afa8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800afac:	d107      	bne.n	800afbe <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800afb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800afb8:	6878      	ldr	r0, [r7, #4]
 800afba:	f000 fbc3 	bl	800b744 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800afbe:	bf00      	nop
 800afc0:	3708      	adds	r7, #8
 800afc2:	46bd      	mov	sp, r7
 800afc4:	bd80      	pop	{r7, pc}
	...

0800afc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800afc8:	b580      	push	{r7, lr}
 800afca:	b084      	sub	sp, #16
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
 800afd0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800afd2:	2300      	movs	r3, #0
 800afd4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800afdc:	2b01      	cmp	r3, #1
 800afde:	d101      	bne.n	800afe4 <HAL_TIM_ConfigClockSource+0x1c>
 800afe0:	2302      	movs	r3, #2
 800afe2:	e0e6      	b.n	800b1b2 <HAL_TIM_ConfigClockSource+0x1ea>
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	2201      	movs	r2, #1
 800afe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	2202      	movs	r2, #2
 800aff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	689b      	ldr	r3, [r3, #8]
 800affa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800affc:	68bb      	ldr	r3, [r7, #8]
 800affe:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800b002:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800b006:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b00e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800b010:	687b      	ldr	r3, [r7, #4]
 800b012:	681b      	ldr	r3, [r3, #0]
 800b014:	68ba      	ldr	r2, [r7, #8]
 800b016:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800b018:	683b      	ldr	r3, [r7, #0]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	4a67      	ldr	r2, [pc, #412]	; (800b1bc <HAL_TIM_ConfigClockSource+0x1f4>)
 800b01e:	4293      	cmp	r3, r2
 800b020:	f000 80b1 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b024:	4a65      	ldr	r2, [pc, #404]	; (800b1bc <HAL_TIM_ConfigClockSource+0x1f4>)
 800b026:	4293      	cmp	r3, r2
 800b028:	f200 80b6 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b02c:	4a64      	ldr	r2, [pc, #400]	; (800b1c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b02e:	4293      	cmp	r3, r2
 800b030:	f000 80a9 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b034:	4a62      	ldr	r2, [pc, #392]	; (800b1c0 <HAL_TIM_ConfigClockSource+0x1f8>)
 800b036:	4293      	cmp	r3, r2
 800b038:	f200 80ae 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b03c:	4a61      	ldr	r2, [pc, #388]	; (800b1c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b03e:	4293      	cmp	r3, r2
 800b040:	f000 80a1 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b044:	4a5f      	ldr	r2, [pc, #380]	; (800b1c4 <HAL_TIM_ConfigClockSource+0x1fc>)
 800b046:	4293      	cmp	r3, r2
 800b048:	f200 80a6 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b04c:	4a5e      	ldr	r2, [pc, #376]	; (800b1c8 <HAL_TIM_ConfigClockSource+0x200>)
 800b04e:	4293      	cmp	r3, r2
 800b050:	f000 8099 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b054:	4a5c      	ldr	r2, [pc, #368]	; (800b1c8 <HAL_TIM_ConfigClockSource+0x200>)
 800b056:	4293      	cmp	r3, r2
 800b058:	f200 809e 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b05c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b060:	f000 8091 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b064:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800b068:	f200 8096 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b06c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b070:	f000 8089 	beq.w	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b074:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b078:	f200 808e 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b07c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b080:	d03e      	beq.n	800b100 <HAL_TIM_ConfigClockSource+0x138>
 800b082:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b086:	f200 8087 	bhi.w	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b08a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b08e:	f000 8086 	beq.w	800b19e <HAL_TIM_ConfigClockSource+0x1d6>
 800b092:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b096:	d87f      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b098:	2b70      	cmp	r3, #112	; 0x70
 800b09a:	d01a      	beq.n	800b0d2 <HAL_TIM_ConfigClockSource+0x10a>
 800b09c:	2b70      	cmp	r3, #112	; 0x70
 800b09e:	d87b      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0a0:	2b60      	cmp	r3, #96	; 0x60
 800b0a2:	d050      	beq.n	800b146 <HAL_TIM_ConfigClockSource+0x17e>
 800b0a4:	2b60      	cmp	r3, #96	; 0x60
 800b0a6:	d877      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0a8:	2b50      	cmp	r3, #80	; 0x50
 800b0aa:	d03c      	beq.n	800b126 <HAL_TIM_ConfigClockSource+0x15e>
 800b0ac:	2b50      	cmp	r3, #80	; 0x50
 800b0ae:	d873      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0b0:	2b40      	cmp	r3, #64	; 0x40
 800b0b2:	d058      	beq.n	800b166 <HAL_TIM_ConfigClockSource+0x19e>
 800b0b4:	2b40      	cmp	r3, #64	; 0x40
 800b0b6:	d86f      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0b8:	2b30      	cmp	r3, #48	; 0x30
 800b0ba:	d064      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b0bc:	2b30      	cmp	r3, #48	; 0x30
 800b0be:	d86b      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0c0:	2b20      	cmp	r3, #32
 800b0c2:	d060      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b0c4:	2b20      	cmp	r3, #32
 800b0c6:	d867      	bhi.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	d05c      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b0cc:	2b10      	cmp	r3, #16
 800b0ce:	d05a      	beq.n	800b186 <HAL_TIM_ConfigClockSource+0x1be>
 800b0d0:	e062      	b.n	800b198 <HAL_TIM_ConfigClockSource+0x1d0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	6818      	ldr	r0, [r3, #0]
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	6899      	ldr	r1, [r3, #8]
 800b0da:	683b      	ldr	r3, [r7, #0]
 800b0dc:	685a      	ldr	r2, [r3, #4]
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	68db      	ldr	r3, [r3, #12]
 800b0e2:	f000 fa11 	bl	800b508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	689b      	ldr	r3, [r3, #8]
 800b0ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800b0ee:	68bb      	ldr	r3, [r7, #8]
 800b0f0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800b0f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	68ba      	ldr	r2, [r7, #8]
 800b0fc:	609a      	str	r2, [r3, #8]
      break;
 800b0fe:	e04f      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6818      	ldr	r0, [r3, #0]
 800b104:	683b      	ldr	r3, [r7, #0]
 800b106:	6899      	ldr	r1, [r3, #8]
 800b108:	683b      	ldr	r3, [r7, #0]
 800b10a:	685a      	ldr	r2, [r3, #4]
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	68db      	ldr	r3, [r3, #12]
 800b110:	f000 f9fa 	bl	800b508 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800b114:	687b      	ldr	r3, [r7, #4]
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	689a      	ldr	r2, [r3, #8]
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	681b      	ldr	r3, [r3, #0]
 800b11e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800b122:	609a      	str	r2, [r3, #8]
      break;
 800b124:	e03c      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	6818      	ldr	r0, [r3, #0]
 800b12a:	683b      	ldr	r3, [r7, #0]
 800b12c:	6859      	ldr	r1, [r3, #4]
 800b12e:	683b      	ldr	r3, [r7, #0]
 800b130:	68db      	ldr	r3, [r3, #12]
 800b132:	461a      	mov	r2, r3
 800b134:	f000 f96c 	bl	800b410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2150      	movs	r1, #80	; 0x50
 800b13e:	4618      	mov	r0, r3
 800b140:	f000 f9c5 	bl	800b4ce <TIM_ITRx_SetConfig>
      break;
 800b144:	e02c      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6818      	ldr	r0, [r3, #0]
 800b14a:	683b      	ldr	r3, [r7, #0]
 800b14c:	6859      	ldr	r1, [r3, #4]
 800b14e:	683b      	ldr	r3, [r7, #0]
 800b150:	68db      	ldr	r3, [r3, #12]
 800b152:	461a      	mov	r2, r3
 800b154:	f000 f98b 	bl	800b46e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	681b      	ldr	r3, [r3, #0]
 800b15c:	2160      	movs	r1, #96	; 0x60
 800b15e:	4618      	mov	r0, r3
 800b160:	f000 f9b5 	bl	800b4ce <TIM_ITRx_SetConfig>
      break;
 800b164:	e01c      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6818      	ldr	r0, [r3, #0]
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	6859      	ldr	r1, [r3, #4]
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	68db      	ldr	r3, [r3, #12]
 800b172:	461a      	mov	r2, r3
 800b174:	f000 f94c 	bl	800b410 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	681b      	ldr	r3, [r3, #0]
 800b17c:	2140      	movs	r1, #64	; 0x40
 800b17e:	4618      	mov	r0, r3
 800b180:	f000 f9a5 	bl	800b4ce <TIM_ITRx_SetConfig>
      break;
 800b184:	e00c      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	683b      	ldr	r3, [r7, #0]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	4619      	mov	r1, r3
 800b190:	4610      	mov	r0, r2
 800b192:	f000 f99c 	bl	800b4ce <TIM_ITRx_SetConfig>
      break;
 800b196:	e003      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>
    }

    default:
      status = HAL_ERROR;
 800b198:	2301      	movs	r3, #1
 800b19a:	73fb      	strb	r3, [r7, #15]
      break;
 800b19c:	e000      	b.n	800b1a0 <HAL_TIM_ConfigClockSource+0x1d8>
      break;
 800b19e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	2201      	movs	r2, #1
 800b1a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	2200      	movs	r2, #0
 800b1ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800b1b0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	3710      	adds	r7, #16
 800b1b6:	46bd      	mov	sp, r7
 800b1b8:	bd80      	pop	{r7, pc}
 800b1ba:	bf00      	nop
 800b1bc:	00100070 	.word	0x00100070
 800b1c0:	00100040 	.word	0x00100040
 800b1c4:	00100030 	.word	0x00100030
 800b1c8:	00100020 	.word	0x00100020

0800b1cc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800b1cc:	b480      	push	{r7}
 800b1ce:	b083      	sub	sp, #12
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800b1d4:	bf00      	nop
 800b1d6:	370c      	adds	r7, #12
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1de:	4770      	bx	lr

0800b1e0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800b1e0:	b480      	push	{r7}
 800b1e2:	b083      	sub	sp, #12
 800b1e4:	af00      	add	r7, sp, #0
 800b1e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800b1e8:	bf00      	nop
 800b1ea:	370c      	adds	r7, #12
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f2:	4770      	bx	lr

0800b1f4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800b1f4:	b480      	push	{r7}
 800b1f6:	b083      	sub	sp, #12
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800b1fc:	bf00      	nop
 800b1fe:	370c      	adds	r7, #12
 800b200:	46bd      	mov	sp, r7
 800b202:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b206:	4770      	bx	lr

0800b208 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800b208:	b480      	push	{r7}
 800b20a:	b083      	sub	sp, #12
 800b20c:	af00      	add	r7, sp, #0
 800b20e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800b210:	bf00      	nop
 800b212:	370c      	adds	r7, #12
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr

0800b21c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800b21c:	b480      	push	{r7}
 800b21e:	b085      	sub	sp, #20
 800b220:	af00      	add	r7, sp, #0
 800b222:	6078      	str	r0, [r7, #4]
 800b224:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	4a68      	ldr	r2, [pc, #416]	; (800b3d0 <TIM_Base_SetConfig+0x1b4>)
 800b230:	4293      	cmp	r3, r2
 800b232:	d02b      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	4a67      	ldr	r2, [pc, #412]	; (800b3d4 <TIM_Base_SetConfig+0x1b8>)
 800b238:	4293      	cmp	r3, r2
 800b23a:	d027      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b242:	d023      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b24a:	d01f      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b24c:	687b      	ldr	r3, [r7, #4]
 800b24e:	4a62      	ldr	r2, [pc, #392]	; (800b3d8 <TIM_Base_SetConfig+0x1bc>)
 800b250:	4293      	cmp	r3, r2
 800b252:	d01b      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	4a61      	ldr	r2, [pc, #388]	; (800b3dc <TIM_Base_SetConfig+0x1c0>)
 800b258:	4293      	cmp	r3, r2
 800b25a:	d017      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b25c:	687b      	ldr	r3, [r7, #4]
 800b25e:	4a60      	ldr	r2, [pc, #384]	; (800b3e0 <TIM_Base_SetConfig+0x1c4>)
 800b260:	4293      	cmp	r3, r2
 800b262:	d013      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	4a5f      	ldr	r2, [pc, #380]	; (800b3e4 <TIM_Base_SetConfig+0x1c8>)
 800b268:	4293      	cmp	r3, r2
 800b26a:	d00f      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	4a5e      	ldr	r2, [pc, #376]	; (800b3e8 <TIM_Base_SetConfig+0x1cc>)
 800b270:	4293      	cmp	r3, r2
 800b272:	d00b      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	4a5d      	ldr	r2, [pc, #372]	; (800b3ec <TIM_Base_SetConfig+0x1d0>)
 800b278:	4293      	cmp	r3, r2
 800b27a:	d007      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	4a5c      	ldr	r2, [pc, #368]	; (800b3f0 <TIM_Base_SetConfig+0x1d4>)
 800b280:	4293      	cmp	r3, r2
 800b282:	d003      	beq.n	800b28c <TIM_Base_SetConfig+0x70>
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	4a5b      	ldr	r2, [pc, #364]	; (800b3f4 <TIM_Base_SetConfig+0x1d8>)
 800b288:	4293      	cmp	r3, r2
 800b28a:	d108      	bne.n	800b29e <TIM_Base_SetConfig+0x82>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800b294:	683b      	ldr	r3, [r7, #0]
 800b296:	685b      	ldr	r3, [r3, #4]
 800b298:	68fa      	ldr	r2, [r7, #12]
 800b29a:	4313      	orrs	r3, r2
 800b29c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	4a4b      	ldr	r2, [pc, #300]	; (800b3d0 <TIM_Base_SetConfig+0x1b4>)
 800b2a2:	4293      	cmp	r3, r2
 800b2a4:	d043      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	4a4a      	ldr	r2, [pc, #296]	; (800b3d4 <TIM_Base_SetConfig+0x1b8>)
 800b2aa:	4293      	cmp	r3, r2
 800b2ac:	d03f      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b2b4:	d03b      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b2bc:	d037      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	4a45      	ldr	r2, [pc, #276]	; (800b3d8 <TIM_Base_SetConfig+0x1bc>)
 800b2c2:	4293      	cmp	r3, r2
 800b2c4:	d033      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2c6:	687b      	ldr	r3, [r7, #4]
 800b2c8:	4a44      	ldr	r2, [pc, #272]	; (800b3dc <TIM_Base_SetConfig+0x1c0>)
 800b2ca:	4293      	cmp	r3, r2
 800b2cc:	d02f      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	4a43      	ldr	r2, [pc, #268]	; (800b3e0 <TIM_Base_SetConfig+0x1c4>)
 800b2d2:	4293      	cmp	r3, r2
 800b2d4:	d02b      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2d6:	687b      	ldr	r3, [r7, #4]
 800b2d8:	4a42      	ldr	r2, [pc, #264]	; (800b3e4 <TIM_Base_SetConfig+0x1c8>)
 800b2da:	4293      	cmp	r3, r2
 800b2dc:	d027      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	4a41      	ldr	r2, [pc, #260]	; (800b3e8 <TIM_Base_SetConfig+0x1cc>)
 800b2e2:	4293      	cmp	r3, r2
 800b2e4:	d023      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	4a40      	ldr	r2, [pc, #256]	; (800b3ec <TIM_Base_SetConfig+0x1d0>)
 800b2ea:	4293      	cmp	r3, r2
 800b2ec:	d01f      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	4a3f      	ldr	r2, [pc, #252]	; (800b3f0 <TIM_Base_SetConfig+0x1d4>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d01b      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	4a3e      	ldr	r2, [pc, #248]	; (800b3f4 <TIM_Base_SetConfig+0x1d8>)
 800b2fa:	4293      	cmp	r3, r2
 800b2fc:	d017      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	4a3d      	ldr	r2, [pc, #244]	; (800b3f8 <TIM_Base_SetConfig+0x1dc>)
 800b302:	4293      	cmp	r3, r2
 800b304:	d013      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	4a3c      	ldr	r2, [pc, #240]	; (800b3fc <TIM_Base_SetConfig+0x1e0>)
 800b30a:	4293      	cmp	r3, r2
 800b30c:	d00f      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	4a3b      	ldr	r2, [pc, #236]	; (800b400 <TIM_Base_SetConfig+0x1e4>)
 800b312:	4293      	cmp	r3, r2
 800b314:	d00b      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	4a3a      	ldr	r2, [pc, #232]	; (800b404 <TIM_Base_SetConfig+0x1e8>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d007      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	4a39      	ldr	r2, [pc, #228]	; (800b408 <TIM_Base_SetConfig+0x1ec>)
 800b322:	4293      	cmp	r3, r2
 800b324:	d003      	beq.n	800b32e <TIM_Base_SetConfig+0x112>
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	4a38      	ldr	r2, [pc, #224]	; (800b40c <TIM_Base_SetConfig+0x1f0>)
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d108      	bne.n	800b340 <TIM_Base_SetConfig+0x124>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b32e:	68fb      	ldr	r3, [r7, #12]
 800b330:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b334:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b336:	683b      	ldr	r3, [r7, #0]
 800b338:	68db      	ldr	r3, [r3, #12]
 800b33a:	68fa      	ldr	r2, [r7, #12]
 800b33c:	4313      	orrs	r3, r2
 800b33e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b340:	68fb      	ldr	r3, [r7, #12]
 800b342:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b346:	683b      	ldr	r3, [r7, #0]
 800b348:	695b      	ldr	r3, [r3, #20]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	68fa      	ldr	r2, [r7, #12]
 800b352:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b35c:	683b      	ldr	r3, [r7, #0]
 800b35e:	681a      	ldr	r2, [r3, #0]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	4a1a      	ldr	r2, [pc, #104]	; (800b3d0 <TIM_Base_SetConfig+0x1b4>)
 800b368:	4293      	cmp	r3, r2
 800b36a:	d023      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	4a19      	ldr	r2, [pc, #100]	; (800b3d4 <TIM_Base_SetConfig+0x1b8>)
 800b370:	4293      	cmp	r3, r2
 800b372:	d01f      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	4a1e      	ldr	r2, [pc, #120]	; (800b3f0 <TIM_Base_SetConfig+0x1d4>)
 800b378:	4293      	cmp	r3, r2
 800b37a:	d01b      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	4a1d      	ldr	r2, [pc, #116]	; (800b3f4 <TIM_Base_SetConfig+0x1d8>)
 800b380:	4293      	cmp	r3, r2
 800b382:	d017      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	4a1c      	ldr	r2, [pc, #112]	; (800b3f8 <TIM_Base_SetConfig+0x1dc>)
 800b388:	4293      	cmp	r3, r2
 800b38a:	d013      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	4a1b      	ldr	r2, [pc, #108]	; (800b3fc <TIM_Base_SetConfig+0x1e0>)
 800b390:	4293      	cmp	r3, r2
 800b392:	d00f      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	4a1a      	ldr	r2, [pc, #104]	; (800b400 <TIM_Base_SetConfig+0x1e4>)
 800b398:	4293      	cmp	r3, r2
 800b39a:	d00b      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	4a19      	ldr	r2, [pc, #100]	; (800b404 <TIM_Base_SetConfig+0x1e8>)
 800b3a0:	4293      	cmp	r3, r2
 800b3a2:	d007      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	4a18      	ldr	r2, [pc, #96]	; (800b408 <TIM_Base_SetConfig+0x1ec>)
 800b3a8:	4293      	cmp	r3, r2
 800b3aa:	d003      	beq.n	800b3b4 <TIM_Base_SetConfig+0x198>
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	4a17      	ldr	r2, [pc, #92]	; (800b40c <TIM_Base_SetConfig+0x1f0>)
 800b3b0:	4293      	cmp	r3, r2
 800b3b2:	d103      	bne.n	800b3bc <TIM_Base_SetConfig+0x1a0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	691a      	ldr	r2, [r3, #16]
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	615a      	str	r2, [r3, #20]
}
 800b3c2:	bf00      	nop
 800b3c4:	3714      	adds	r7, #20
 800b3c6:	46bd      	mov	sp, r7
 800b3c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3cc:	4770      	bx	lr
 800b3ce:	bf00      	nop
 800b3d0:	40012c00 	.word	0x40012c00
 800b3d4:	50012c00 	.word	0x50012c00
 800b3d8:	40000400 	.word	0x40000400
 800b3dc:	50000400 	.word	0x50000400
 800b3e0:	40000800 	.word	0x40000800
 800b3e4:	50000800 	.word	0x50000800
 800b3e8:	40000c00 	.word	0x40000c00
 800b3ec:	50000c00 	.word	0x50000c00
 800b3f0:	40013400 	.word	0x40013400
 800b3f4:	50013400 	.word	0x50013400
 800b3f8:	40014000 	.word	0x40014000
 800b3fc:	50014000 	.word	0x50014000
 800b400:	40014400 	.word	0x40014400
 800b404:	50014400 	.word	0x50014400
 800b408:	40014800 	.word	0x40014800
 800b40c:	50014800 	.word	0x50014800

0800b410 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b410:	b480      	push	{r7}
 800b412:	b087      	sub	sp, #28
 800b414:	af00      	add	r7, sp, #0
 800b416:	60f8      	str	r0, [r7, #12]
 800b418:	60b9      	str	r1, [r7, #8]
 800b41a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b41c:	68fb      	ldr	r3, [r7, #12]
 800b41e:	6a1b      	ldr	r3, [r3, #32]
 800b420:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b422:	68fb      	ldr	r3, [r7, #12]
 800b424:	6a1b      	ldr	r3, [r3, #32]
 800b426:	f023 0201 	bic.w	r2, r3, #1
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	699b      	ldr	r3, [r3, #24]
 800b432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b434:	693b      	ldr	r3, [r7, #16]
 800b436:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b43a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	011b      	lsls	r3, r3, #4
 800b440:	693a      	ldr	r2, [r7, #16]
 800b442:	4313      	orrs	r3, r2
 800b444:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b446:	697b      	ldr	r3, [r7, #20]
 800b448:	f023 030a 	bic.w	r3, r3, #10
 800b44c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b44e:	697a      	ldr	r2, [r7, #20]
 800b450:	68bb      	ldr	r3, [r7, #8]
 800b452:	4313      	orrs	r3, r2
 800b454:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b456:	68fb      	ldr	r3, [r7, #12]
 800b458:	693a      	ldr	r2, [r7, #16]
 800b45a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	697a      	ldr	r2, [r7, #20]
 800b460:	621a      	str	r2, [r3, #32]
}
 800b462:	bf00      	nop
 800b464:	371c      	adds	r7, #28
 800b466:	46bd      	mov	sp, r7
 800b468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b46c:	4770      	bx	lr

0800b46e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b46e:	b480      	push	{r7}
 800b470:	b087      	sub	sp, #28
 800b472:	af00      	add	r7, sp, #0
 800b474:	60f8      	str	r0, [r7, #12]
 800b476:	60b9      	str	r1, [r7, #8]
 800b478:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	6a1b      	ldr	r3, [r3, #32]
 800b47e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	6a1b      	ldr	r3, [r3, #32]
 800b484:	f023 0210 	bic.w	r2, r3, #16
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b48c:	68fb      	ldr	r3, [r7, #12]
 800b48e:	699b      	ldr	r3, [r3, #24]
 800b490:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b492:	693b      	ldr	r3, [r7, #16]
 800b494:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b498:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	031b      	lsls	r3, r3, #12
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	4313      	orrs	r3, r2
 800b4a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b4aa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	011b      	lsls	r3, r3, #4
 800b4b0:	697a      	ldr	r2, [r7, #20]
 800b4b2:	4313      	orrs	r3, r2
 800b4b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b4b6:	68fb      	ldr	r3, [r7, #12]
 800b4b8:	693a      	ldr	r2, [r7, #16]
 800b4ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	697a      	ldr	r2, [r7, #20]
 800b4c0:	621a      	str	r2, [r3, #32]
}
 800b4c2:	bf00      	nop
 800b4c4:	371c      	adds	r7, #28
 800b4c6:	46bd      	mov	sp, r7
 800b4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4cc:	4770      	bx	lr

0800b4ce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4ce:	b480      	push	{r7}
 800b4d0:	b085      	sub	sp, #20
 800b4d2:	af00      	add	r7, sp, #0
 800b4d4:	6078      	str	r0, [r7, #4]
 800b4d6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	689b      	ldr	r3, [r3, #8]
 800b4dc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800b4e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4ea:	683a      	ldr	r2, [r7, #0]
 800b4ec:	68fb      	ldr	r3, [r7, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	f043 0307 	orr.w	r3, r3, #7
 800b4f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	68fa      	ldr	r2, [r7, #12]
 800b4fa:	609a      	str	r2, [r3, #8]
}
 800b4fc:	bf00      	nop
 800b4fe:	3714      	adds	r7, #20
 800b500:	46bd      	mov	sp, r7
 800b502:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b506:	4770      	bx	lr

0800b508 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b508:	b480      	push	{r7}
 800b50a:	b087      	sub	sp, #28
 800b50c:	af00      	add	r7, sp, #0
 800b50e:	60f8      	str	r0, [r7, #12]
 800b510:	60b9      	str	r1, [r7, #8]
 800b512:	607a      	str	r2, [r7, #4]
 800b514:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b516:	68fb      	ldr	r3, [r7, #12]
 800b518:	689b      	ldr	r3, [r3, #8]
 800b51a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b522:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	021a      	lsls	r2, r3, #8
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	431a      	orrs	r2, r3
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	4313      	orrs	r3, r2
 800b530:	697a      	ldr	r2, [r7, #20]
 800b532:	4313      	orrs	r3, r2
 800b534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	697a      	ldr	r2, [r7, #20]
 800b53a:	609a      	str	r2, [r3, #8]
}
 800b53c:	bf00      	nop
 800b53e:	371c      	adds	r7, #28
 800b540:	46bd      	mov	sp, r7
 800b542:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b546:	4770      	bx	lr

0800b548 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b548:	b480      	push	{r7}
 800b54a:	b085      	sub	sp, #20
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]
 800b550:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b552:	687b      	ldr	r3, [r7, #4]
 800b554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b558:	2b01      	cmp	r3, #1
 800b55a:	d101      	bne.n	800b560 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b55c:	2302      	movs	r3, #2
 800b55e:	e097      	b.n	800b690 <HAL_TIMEx_MasterConfigSynchronization+0x148>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	2201      	movs	r2, #1
 800b564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	2202      	movs	r2, #2
 800b56c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	685b      	ldr	r3, [r3, #4]
 800b576:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	689b      	ldr	r3, [r3, #8]
 800b57e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4a45      	ldr	r2, [pc, #276]	; (800b69c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b586:	4293      	cmp	r3, r2
 800b588:	d00e      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	4a44      	ldr	r2, [pc, #272]	; (800b6a0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d009      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	4a42      	ldr	r2, [pc, #264]	; (800b6a4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b59a:	4293      	cmp	r3, r2
 800b59c:	d004      	beq.n	800b5a8 <HAL_TIMEx_MasterConfigSynchronization+0x60>
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	681b      	ldr	r3, [r3, #0]
 800b5a2:	4a41      	ldr	r2, [pc, #260]	; (800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d108      	bne.n	800b5ba <HAL_TIMEx_MasterConfigSynchronization+0x72>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b5ae:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b5b0:	683b      	ldr	r3, [r7, #0]
 800b5b2:	685b      	ldr	r3, [r3, #4]
 800b5b4:	68fa      	ldr	r2, [r7, #12]
 800b5b6:	4313      	orrs	r3, r2
 800b5b8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800b5c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b5c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	68fa      	ldr	r2, [r7, #12]
 800b5cc:	4313      	orrs	r3, r2
 800b5ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	68fa      	ldr	r2, [r7, #12]
 800b5d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a2f      	ldr	r2, [pc, #188]	; (800b69c <HAL_TIMEx_MasterConfigSynchronization+0x154>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d040      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a2e      	ldr	r2, [pc, #184]	; (800b6a0 <HAL_TIMEx_MasterConfigSynchronization+0x158>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d03b      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5f4:	d036      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b5f6:	687b      	ldr	r3, [r7, #4]
 800b5f8:	681b      	ldr	r3, [r3, #0]
 800b5fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b5fe:	d031      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	4a29      	ldr	r2, [pc, #164]	; (800b6ac <HAL_TIMEx_MasterConfigSynchronization+0x164>)
 800b606:	4293      	cmp	r3, r2
 800b608:	d02c      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	4a28      	ldr	r2, [pc, #160]	; (800b6b0 <HAL_TIMEx_MasterConfigSynchronization+0x168>)
 800b610:	4293      	cmp	r3, r2
 800b612:	d027      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	4a26      	ldr	r2, [pc, #152]	; (800b6b4 <HAL_TIMEx_MasterConfigSynchronization+0x16c>)
 800b61a:	4293      	cmp	r3, r2
 800b61c:	d022      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	681b      	ldr	r3, [r3, #0]
 800b622:	4a25      	ldr	r2, [pc, #148]	; (800b6b8 <HAL_TIMEx_MasterConfigSynchronization+0x170>)
 800b624:	4293      	cmp	r3, r2
 800b626:	d01d      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	4a23      	ldr	r2, [pc, #140]	; (800b6bc <HAL_TIMEx_MasterConfigSynchronization+0x174>)
 800b62e:	4293      	cmp	r3, r2
 800b630:	d018      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	681b      	ldr	r3, [r3, #0]
 800b636:	4a22      	ldr	r2, [pc, #136]	; (800b6c0 <HAL_TIMEx_MasterConfigSynchronization+0x178>)
 800b638:	4293      	cmp	r3, r2
 800b63a:	d013      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	4a18      	ldr	r2, [pc, #96]	; (800b6a4 <HAL_TIMEx_MasterConfigSynchronization+0x15c>)
 800b642:	4293      	cmp	r3, r2
 800b644:	d00e      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	681b      	ldr	r3, [r3, #0]
 800b64a:	4a17      	ldr	r2, [pc, #92]	; (800b6a8 <HAL_TIMEx_MasterConfigSynchronization+0x160>)
 800b64c:	4293      	cmp	r3, r2
 800b64e:	d009      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	4a1b      	ldr	r2, [pc, #108]	; (800b6c4 <HAL_TIMEx_MasterConfigSynchronization+0x17c>)
 800b656:	4293      	cmp	r3, r2
 800b658:	d004      	beq.n	800b664 <HAL_TIMEx_MasterConfigSynchronization+0x11c>
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	4a1a      	ldr	r2, [pc, #104]	; (800b6c8 <HAL_TIMEx_MasterConfigSynchronization+0x180>)
 800b660:	4293      	cmp	r3, r2
 800b662:	d10c      	bne.n	800b67e <HAL_TIMEx_MasterConfigSynchronization+0x136>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b66a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b66c:	683b      	ldr	r3, [r7, #0]
 800b66e:	689b      	ldr	r3, [r3, #8]
 800b670:	68ba      	ldr	r2, [r7, #8]
 800b672:	4313      	orrs	r3, r2
 800b674:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	68ba      	ldr	r2, [r7, #8]
 800b67c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2201      	movs	r2, #1
 800b682:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	2200      	movs	r2, #0
 800b68a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b68e:	2300      	movs	r3, #0
}
 800b690:	4618      	mov	r0, r3
 800b692:	3714      	adds	r7, #20
 800b694:	46bd      	mov	sp, r7
 800b696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b69a:	4770      	bx	lr
 800b69c:	40012c00 	.word	0x40012c00
 800b6a0:	50012c00 	.word	0x50012c00
 800b6a4:	40013400 	.word	0x40013400
 800b6a8:	50013400 	.word	0x50013400
 800b6ac:	40000400 	.word	0x40000400
 800b6b0:	50000400 	.word	0x50000400
 800b6b4:	40000800 	.word	0x40000800
 800b6b8:	50000800 	.word	0x50000800
 800b6bc:	40000c00 	.word	0x40000c00
 800b6c0:	50000c00 	.word	0x50000c00
 800b6c4:	40014000 	.word	0x40014000
 800b6c8:	50014000 	.word	0x50014000

0800b6cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b6cc:	b480      	push	{r7}
 800b6ce:	b083      	sub	sp, #12
 800b6d0:	af00      	add	r7, sp, #0
 800b6d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b6d4:	bf00      	nop
 800b6d6:	370c      	adds	r7, #12
 800b6d8:	46bd      	mov	sp, r7
 800b6da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6de:	4770      	bx	lr

0800b6e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b6e0:	b480      	push	{r7}
 800b6e2:	b083      	sub	sp, #12
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b6e8:	bf00      	nop
 800b6ea:	370c      	adds	r7, #12
 800b6ec:	46bd      	mov	sp, r7
 800b6ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f2:	4770      	bx	lr

0800b6f4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b6f4:	b480      	push	{r7}
 800b6f6:	b083      	sub	sp, #12
 800b6f8:	af00      	add	r7, sp, #0
 800b6fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b6fc:	bf00      	nop
 800b6fe:	370c      	adds	r7, #12
 800b700:	46bd      	mov	sp, r7
 800b702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b706:	4770      	bx	lr

0800b708 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800b708:	b480      	push	{r7}
 800b70a:	b083      	sub	sp, #12
 800b70c:	af00      	add	r7, sp, #0
 800b70e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800b710:	bf00      	nop
 800b712:	370c      	adds	r7, #12
 800b714:	46bd      	mov	sp, r7
 800b716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b71a:	4770      	bx	lr

0800b71c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800b71c:	b480      	push	{r7}
 800b71e:	b083      	sub	sp, #12
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 800b724:	bf00      	nop
 800b726:	370c      	adds	r7, #12
 800b728:	46bd      	mov	sp, r7
 800b72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b72e:	4770      	bx	lr

0800b730 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800b730:	b480      	push	{r7}
 800b732:	b083      	sub	sp, #12
 800b734:	af00      	add	r7, sp, #0
 800b736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800b738:	bf00      	nop
 800b73a:	370c      	adds	r7, #12
 800b73c:	46bd      	mov	sp, r7
 800b73e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b742:	4770      	bx	lr

0800b744 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 800b744:	b480      	push	{r7}
 800b746:	b083      	sub	sp, #12
 800b748:	af00      	add	r7, sp, #0
 800b74a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800b74c:	bf00      	nop
 800b74e:	370c      	adds	r7, #12
 800b750:	46bd      	mov	sp, r7
 800b752:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b756:	4770      	bx	lr

0800b758 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b758:	b580      	push	{r7, lr}
 800b75a:	b082      	sub	sp, #8
 800b75c:	af00      	add	r7, sp, #0
 800b75e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2b00      	cmp	r3, #0
 800b764:	d101      	bne.n	800b76a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b766:	2301      	movs	r3, #1
 800b768:	e042      	b.n	800b7f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b770:	2b00      	cmp	r3, #0
 800b772:	d106      	bne.n	800b782 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	2200      	movs	r2, #0
 800b778:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f7f8 f8d9 	bl	8003934 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	2224      	movs	r2, #36	; 0x24
 800b786:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	681a      	ldr	r2, [r3, #0]
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	681b      	ldr	r3, [r3, #0]
 800b794:	f022 0201 	bic.w	r2, r2, #1
 800b798:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f000 f9a2 	bl	800bae4 <UART_SetConfig>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b01      	cmp	r3, #1
 800b7a4:	d101      	bne.n	800b7aa <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800b7a6:	2301      	movs	r3, #1
 800b7a8:	e022      	b.n	800b7f0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d002      	beq.n	800b7b8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800b7b2:	6878      	ldr	r0, [r7, #4]
 800b7b4:	f000 fb38 	bl	800be28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	681b      	ldr	r3, [r3, #0]
 800b7bc:	685a      	ldr	r2, [r3, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	681b      	ldr	r3, [r3, #0]
 800b7c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7c8:	687b      	ldr	r3, [r7, #4]
 800b7ca:	681b      	ldr	r3, [r3, #0]
 800b7cc:	689a      	ldr	r2, [r3, #8]
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	681a      	ldr	r2, [r3, #0]
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	681b      	ldr	r3, [r3, #0]
 800b7e2:	f042 0201 	orr.w	r2, r2, #1
 800b7e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b7e8:	6878      	ldr	r0, [r7, #4]
 800b7ea:	f000 fbbf 	bl	800bf6c <UART_CheckIdleState>
 800b7ee:	4603      	mov	r3, r0
}
 800b7f0:	4618      	mov	r0, r3
 800b7f2:	3708      	adds	r7, #8
 800b7f4:	46bd      	mov	sp, r7
 800b7f6:	bd80      	pop	{r7, pc}

0800b7f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b08a      	sub	sp, #40	; 0x28
 800b7fc:	af02      	add	r7, sp, #8
 800b7fe:	60f8      	str	r0, [r7, #12]
 800b800:	60b9      	str	r1, [r7, #8]
 800b802:	603b      	str	r3, [r7, #0]
 800b804:	4613      	mov	r3, r2
 800b806:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b80e:	2b20      	cmp	r3, #32
 800b810:	f040 808b 	bne.w	800b92a <HAL_UART_Transmit+0x132>
  {
    if ((pData == NULL) || (Size == 0U))
 800b814:	68bb      	ldr	r3, [r7, #8]
 800b816:	2b00      	cmp	r3, #0
 800b818:	d002      	beq.n	800b820 <HAL_UART_Transmit+0x28>
 800b81a:	88fb      	ldrh	r3, [r7, #6]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d101      	bne.n	800b824 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800b820:	2301      	movs	r3, #1
 800b822:	e083      	b.n	800b92c <HAL_UART_Transmit+0x134>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Tx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	681b      	ldr	r3, [r3, #0]
 800b828:	689b      	ldr	r3, [r3, #8]
 800b82a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b82e:	2b80      	cmp	r3, #128	; 0x80
 800b830:	d107      	bne.n	800b842 <HAL_UART_Transmit+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	681b      	ldr	r3, [r3, #0]
 800b836:	689a      	ldr	r2, [r3, #8]
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	681b      	ldr	r3, [r3, #0]
 800b83c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b840:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b842:	68fb      	ldr	r3, [r7, #12]
 800b844:	2200      	movs	r2, #0
 800b846:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	2221      	movs	r2, #33	; 0x21
 800b84e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b852:	f7f8 fb33 	bl	8003ebc <HAL_GetTick>
 800b856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	88fa      	ldrh	r2, [r7, #6]
 800b85c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	88fa      	ldrh	r2, [r7, #6]
 800b864:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b868:	68fb      	ldr	r3, [r7, #12]
 800b86a:	689b      	ldr	r3, [r3, #8]
 800b86c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b870:	d108      	bne.n	800b884 <HAL_UART_Transmit+0x8c>
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	2b00      	cmp	r3, #0
 800b878:	d104      	bne.n	800b884 <HAL_UART_Transmit+0x8c>
    {
      pdata8bits  = NULL;
 800b87a:	2300      	movs	r3, #0
 800b87c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b87e:	68bb      	ldr	r3, [r7, #8]
 800b880:	61bb      	str	r3, [r7, #24]
 800b882:	e003      	b.n	800b88c <HAL_UART_Transmit+0x94>
    }
    else
    {
      pdata8bits  = pData;
 800b884:	68bb      	ldr	r3, [r7, #8]
 800b886:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b888:	2300      	movs	r3, #0
 800b88a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800b88c:	e030      	b.n	800b8f0 <HAL_UART_Transmit+0xf8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	9300      	str	r3, [sp, #0]
 800b892:	697b      	ldr	r3, [r7, #20]
 800b894:	2200      	movs	r2, #0
 800b896:	2180      	movs	r1, #128	; 0x80
 800b898:	68f8      	ldr	r0, [r7, #12]
 800b89a:	f000 fc11 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800b89e:	4603      	mov	r3, r0
 800b8a0:	2b00      	cmp	r3, #0
 800b8a2:	d005      	beq.n	800b8b0 <HAL_UART_Transmit+0xb8>
      {

        huart->gState = HAL_UART_STATE_READY;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	2220      	movs	r2, #32
 800b8a8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e03d      	b.n	800b92c <HAL_UART_Transmit+0x134>
      }
      if (pdata8bits == NULL)
 800b8b0:	69fb      	ldr	r3, [r7, #28]
 800b8b2:	2b00      	cmp	r3, #0
 800b8b4:	d10b      	bne.n	800b8ce <HAL_UART_Transmit+0xd6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b8b6:	69bb      	ldr	r3, [r7, #24]
 800b8b8:	881b      	ldrh	r3, [r3, #0]
 800b8ba:	461a      	mov	r2, r3
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b8c4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b8c6:	69bb      	ldr	r3, [r7, #24]
 800b8c8:	3302      	adds	r3, #2
 800b8ca:	61bb      	str	r3, [r7, #24]
 800b8cc:	e007      	b.n	800b8de <HAL_UART_Transmit+0xe6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b8ce:	69fb      	ldr	r3, [r7, #28]
 800b8d0:	781a      	ldrb	r2, [r3, #0]
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	681b      	ldr	r3, [r3, #0]
 800b8d6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b8d8:	69fb      	ldr	r3, [r7, #28]
 800b8da:	3301      	adds	r3, #1
 800b8dc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8e4:	b29b      	uxth	r3, r3
 800b8e6:	3b01      	subs	r3, #1
 800b8e8:	b29a      	uxth	r2, r3
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800b8f0:	68fb      	ldr	r3, [r7, #12]
 800b8f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800b8f6:	b29b      	uxth	r3, r3
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d1c8      	bne.n	800b88e <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b8fc:	683b      	ldr	r3, [r7, #0]
 800b8fe:	9300      	str	r3, [sp, #0]
 800b900:	697b      	ldr	r3, [r7, #20]
 800b902:	2200      	movs	r2, #0
 800b904:	2140      	movs	r1, #64	; 0x40
 800b906:	68f8      	ldr	r0, [r7, #12]
 800b908:	f000 fbda 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800b90c:	4603      	mov	r3, r0
 800b90e:	2b00      	cmp	r3, #0
 800b910:	d005      	beq.n	800b91e <HAL_UART_Transmit+0x126>
    {
      huart->gState = HAL_UART_STATE_READY;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	2220      	movs	r2, #32
 800b916:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800b91a:	2303      	movs	r3, #3
 800b91c:	e006      	b.n	800b92c <HAL_UART_Transmit+0x134>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b91e:	68fb      	ldr	r3, [r7, #12]
 800b920:	2220      	movs	r2, #32
 800b922:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800b926:	2300      	movs	r3, #0
 800b928:	e000      	b.n	800b92c <HAL_UART_Transmit+0x134>
  }
  else
  {
    return HAL_BUSY;
 800b92a:	2302      	movs	r3, #2
  }
}
 800b92c:	4618      	mov	r0, r3
 800b92e:	3720      	adds	r7, #32
 800b930:	46bd      	mov	sp, r7
 800b932:	bd80      	pop	{r7, pc}

0800b934 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08a      	sub	sp, #40	; 0x28
 800b938:	af02      	add	r7, sp, #8
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	603b      	str	r3, [r7, #0]
 800b940:	4613      	mov	r3, r2
 800b942:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800b94a:	2b20      	cmp	r3, #32
 800b94c:	f040 80c4 	bne.w	800bad8 <HAL_UART_Receive+0x1a4>
  {
    if ((pData == NULL) || (Size == 0U))
 800b950:	68bb      	ldr	r3, [r7, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d002      	beq.n	800b95c <HAL_UART_Receive+0x28>
 800b956:	88fb      	ldrh	r3, [r7, #6]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d101      	bne.n	800b960 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800b95c:	2301      	movs	r3, #1
 800b95e:	e0bc      	b.n	800bada <HAL_UART_Receive+0x1a6>
    }

#if defined(USART_DMAREQUESTS_SW_WA)
    /* Disable the UART DMA Rx request if enabled */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	681b      	ldr	r3, [r3, #0]
 800b964:	689b      	ldr	r3, [r3, #8]
 800b966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96a:	2b40      	cmp	r3, #64	; 0x40
 800b96c:	d107      	bne.n	800b97e <HAL_UART_Receive+0x4a>
    {
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	681b      	ldr	r3, [r3, #0]
 800b972:	689a      	ldr	r2, [r3, #8]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b97c:	609a      	str	r2, [r3, #8]
    }

#endif /* USART_DMAREQUESTS_SW_WA */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	2200      	movs	r2, #0
 800b982:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	2222      	movs	r2, #34	; 0x22
 800b98a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	2200      	movs	r2, #0
 800b992:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b994:	f7f8 fa92 	bl	8003ebc <HAL_GetTick>
 800b998:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800b99a:	68fb      	ldr	r3, [r7, #12]
 800b99c:	88fa      	ldrh	r2, [r7, #6]
 800b99e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	88fa      	ldrh	r2, [r7, #6]
 800b9a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	689b      	ldr	r3, [r3, #8]
 800b9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b2:	d10e      	bne.n	800b9d2 <HAL_UART_Receive+0x9e>
 800b9b4:	68fb      	ldr	r3, [r7, #12]
 800b9b6:	691b      	ldr	r3, [r3, #16]
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d105      	bne.n	800b9c8 <HAL_UART_Receive+0x94>
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b9c2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b9c6:	e02d      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	22ff      	movs	r2, #255	; 0xff
 800b9cc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b9d0:	e028      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800b9d2:	68fb      	ldr	r3, [r7, #12]
 800b9d4:	689b      	ldr	r3, [r3, #8]
 800b9d6:	2b00      	cmp	r3, #0
 800b9d8:	d10d      	bne.n	800b9f6 <HAL_UART_Receive+0xc2>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	691b      	ldr	r3, [r3, #16]
 800b9de:	2b00      	cmp	r3, #0
 800b9e0:	d104      	bne.n	800b9ec <HAL_UART_Receive+0xb8>
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	22ff      	movs	r2, #255	; 0xff
 800b9e6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b9ea:	e01b      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	227f      	movs	r2, #127	; 0x7f
 800b9f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800b9f4:	e016      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	689b      	ldr	r3, [r3, #8]
 800b9fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b9fe:	d10d      	bne.n	800ba1c <HAL_UART_Receive+0xe8>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	691b      	ldr	r3, [r3, #16]
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d104      	bne.n	800ba12 <HAL_UART_Receive+0xde>
 800ba08:	68fb      	ldr	r3, [r7, #12]
 800ba0a:	227f      	movs	r2, #127	; 0x7f
 800ba0c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba10:	e008      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	223f      	movs	r2, #63	; 0x3f
 800ba16:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 800ba1a:	e003      	b.n	800ba24 <HAL_UART_Receive+0xf0>
 800ba1c:	68fb      	ldr	r3, [r7, #12]
 800ba1e:	2200      	movs	r2, #0
 800ba20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800ba2a:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	689b      	ldr	r3, [r3, #8]
 800ba30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ba34:	d108      	bne.n	800ba48 <HAL_UART_Receive+0x114>
 800ba36:	68fb      	ldr	r3, [r7, #12]
 800ba38:	691b      	ldr	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d104      	bne.n	800ba48 <HAL_UART_Receive+0x114>
    {
      pdata8bits  = NULL;
 800ba3e:	2300      	movs	r3, #0
 800ba40:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	61bb      	str	r3, [r7, #24]
 800ba46:	e003      	b.n	800ba50 <HAL_UART_Receive+0x11c>
    }
    else
    {
      pdata8bits  = pData;
 800ba48:	68bb      	ldr	r3, [r7, #8]
 800ba4a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800ba50:	e036      	b.n	800bac0 <HAL_UART_Receive+0x18c>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800ba52:	683b      	ldr	r3, [r7, #0]
 800ba54:	9300      	str	r3, [sp, #0]
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	2200      	movs	r2, #0
 800ba5a:	2120      	movs	r1, #32
 800ba5c:	68f8      	ldr	r0, [r7, #12]
 800ba5e:	f000 fb2f 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800ba62:	4603      	mov	r3, r0
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d005      	beq.n	800ba74 <HAL_UART_Receive+0x140>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2220      	movs	r2, #32
 800ba6c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 800ba70:	2303      	movs	r3, #3
 800ba72:	e032      	b.n	800bada <HAL_UART_Receive+0x1a6>
      }
      if (pdata8bits == NULL)
 800ba74:	69fb      	ldr	r3, [r7, #28]
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d10c      	bne.n	800ba94 <HAL_UART_Receive+0x160>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba80:	b29a      	uxth	r2, r3
 800ba82:	8a7b      	ldrh	r3, [r7, #18]
 800ba84:	4013      	ands	r3, r2
 800ba86:	b29a      	uxth	r2, r3
 800ba88:	69bb      	ldr	r3, [r7, #24]
 800ba8a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800ba8c:	69bb      	ldr	r3, [r7, #24]
 800ba8e:	3302      	adds	r3, #2
 800ba90:	61bb      	str	r3, [r7, #24]
 800ba92:	e00c      	b.n	800baae <HAL_UART_Receive+0x17a>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800ba94:	68fb      	ldr	r3, [r7, #12]
 800ba96:	681b      	ldr	r3, [r3, #0]
 800ba98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ba9a:	b2da      	uxtb	r2, r3
 800ba9c:	8a7b      	ldrh	r3, [r7, #18]
 800ba9e:	b2db      	uxtb	r3, r3
 800baa0:	4013      	ands	r3, r2
 800baa2:	b2da      	uxtb	r2, r3
 800baa4:	69fb      	ldr	r3, [r7, #28]
 800baa6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800baa8:	69fb      	ldr	r3, [r7, #28]
 800baaa:	3301      	adds	r3, #1
 800baac:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800baae:	68fb      	ldr	r3, [r7, #12]
 800bab0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bab4:	b29b      	uxth	r3, r3
 800bab6:	3b01      	subs	r3, #1
 800bab8:	b29a      	uxth	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800bac6:	b29b      	uxth	r3, r3
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d1c2      	bne.n	800ba52 <HAL_UART_Receive+0x11e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2220      	movs	r2, #32
 800bad0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	e000      	b.n	800bada <HAL_UART_Receive+0x1a6>
  }
  else
  {
    return HAL_BUSY;
 800bad8:	2302      	movs	r3, #2
  }
}
 800bada:	4618      	mov	r0, r3
 800badc:	3720      	adds	r7, #32
 800bade:	46bd      	mov	sp, r7
 800bae0:	bd80      	pop	{r7, pc}
	...

0800bae4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bae4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bae8:	b094      	sub	sp, #80	; 0x50
 800baea:	af00      	add	r7, sp, #0
 800baec:	62f8      	str	r0, [r7, #44]	; 0x2c
  uint32_t tmpreg;
  uint16_t brrtemp;
  uint32_t clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800baee:	2300      	movs	r3, #0
 800baf0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  if (UART_INSTANCE_LOWPOWER(huart))
 800baf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800baf6:	681a      	ldr	r2, [r3, #0]
 800baf8:	4b7e      	ldr	r3, [pc, #504]	; (800bcf4 <UART_SetConfig+0x210>)
 800bafa:	429a      	cmp	r2, r3
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bafc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bafe:	689a      	ldr	r2, [r3, #8]
 800bb00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb02:	691b      	ldr	r3, [r3, #16]
 800bb04:	431a      	orrs	r2, r3
 800bb06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb08:	695b      	ldr	r3, [r3, #20]
 800bb0a:	431a      	orrs	r2, r3
 800bb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb0e:	69db      	ldr	r3, [r3, #28]
 800bb10:	4313      	orrs	r3, r2
 800bb12:	64fb      	str	r3, [r7, #76]	; 0x4c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	681b      	ldr	r3, [r3, #0]
 800bb1a:	4977      	ldr	r1, [pc, #476]	; (800bcf8 <UART_SetConfig+0x214>)
 800bb1c:	4019      	ands	r1, r3
 800bb1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb20:	681a      	ldr	r2, [r3, #0]
 800bb22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb24:	430b      	orrs	r3, r1
 800bb26:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	685b      	ldr	r3, [r3, #4]
 800bb2e:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800bb32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb34:	68d9      	ldr	r1, [r3, #12]
 800bb36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb38:	681a      	ldr	r2, [r3, #0]
 800bb3a:	ea40 0301 	orr.w	r3, r0, r1
 800bb3e:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bb40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb42:	699b      	ldr	r3, [r3, #24]
 800bb44:	64fb      	str	r3, [r7, #76]	; 0x4c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bb46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	4b6a      	ldr	r3, [pc, #424]	; (800bcf4 <UART_SetConfig+0x210>)
 800bb4c:	429a      	cmp	r2, r3
 800bb4e:	d009      	beq.n	800bb64 <UART_SetConfig+0x80>
 800bb50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb52:	681a      	ldr	r2, [r3, #0]
 800bb54:	4b69      	ldr	r3, [pc, #420]	; (800bcfc <UART_SetConfig+0x218>)
 800bb56:	429a      	cmp	r2, r3
 800bb58:	d004      	beq.n	800bb64 <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800bb5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb5c:	6a1a      	ldr	r2, [r3, #32]
 800bb5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb60:	4313      	orrs	r3, r2
 800bb62:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bb64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb66:	681b      	ldr	r3, [r3, #0]
 800bb68:	689b      	ldr	r3, [r3, #8]
 800bb6a:	f023 416e 	bic.w	r1, r3, #3992977408	; 0xee000000
 800bb6e:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
 800bb72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb74:	681a      	ldr	r2, [r3, #0]
 800bb76:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bb78:	430b      	orrs	r3, r1
 800bb7a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bb7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bb82:	f023 000f 	bic.w	r0, r3, #15
 800bb86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb88:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800bb8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	ea40 0301 	orr.w	r3, r0, r1
 800bb92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bb94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	4b59      	ldr	r3, [pc, #356]	; (800bd00 <UART_SetConfig+0x21c>)
 800bb9a:	429a      	cmp	r2, r3
 800bb9c:	d102      	bne.n	800bba4 <UART_SetConfig+0xc0>
 800bb9e:	2301      	movs	r3, #1
 800bba0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bba2:	e029      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bba6:	681a      	ldr	r2, [r3, #0]
 800bba8:	4b56      	ldr	r3, [pc, #344]	; (800bd04 <UART_SetConfig+0x220>)
 800bbaa:	429a      	cmp	r2, r3
 800bbac:	d102      	bne.n	800bbb4 <UART_SetConfig+0xd0>
 800bbae:	2302      	movs	r3, #2
 800bbb0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbb2:	e021      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bbb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbb6:	681a      	ldr	r2, [r3, #0]
 800bbb8:	4b53      	ldr	r3, [pc, #332]	; (800bd08 <UART_SetConfig+0x224>)
 800bbba:	429a      	cmp	r2, r3
 800bbbc:	d102      	bne.n	800bbc4 <UART_SetConfig+0xe0>
 800bbbe:	2304      	movs	r3, #4
 800bbc0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbc2:	e019      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bbc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbc6:	681a      	ldr	r2, [r3, #0]
 800bbc8:	4b50      	ldr	r3, [pc, #320]	; (800bd0c <UART_SetConfig+0x228>)
 800bbca:	429a      	cmp	r2, r3
 800bbcc:	d102      	bne.n	800bbd4 <UART_SetConfig+0xf0>
 800bbce:	2308      	movs	r3, #8
 800bbd0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbd2:	e011      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bbd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbd6:	681a      	ldr	r2, [r3, #0]
 800bbd8:	4b4d      	ldr	r3, [pc, #308]	; (800bd10 <UART_SetConfig+0x22c>)
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d102      	bne.n	800bbe4 <UART_SetConfig+0x100>
 800bbde:	2310      	movs	r3, #16
 800bbe0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbe2:	e009      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bbe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbe6:	681a      	ldr	r2, [r3, #0]
 800bbe8:	4b42      	ldr	r3, [pc, #264]	; (800bcf4 <UART_SetConfig+0x210>)
 800bbea:	429a      	cmp	r2, r3
 800bbec:	d102      	bne.n	800bbf4 <UART_SetConfig+0x110>
 800bbee:	2320      	movs	r3, #32
 800bbf0:	64bb      	str	r3, [r7, #72]	; 0x48
 800bbf2:	e001      	b.n	800bbf8 <UART_SetConfig+0x114>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800bbf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	4b3d      	ldr	r3, [pc, #244]	; (800bcf4 <UART_SetConfig+0x210>)
 800bbfe:	429a      	cmp	r2, r3
 800bc00:	d005      	beq.n	800bc0e <UART_SetConfig+0x12a>
 800bc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc04:	681a      	ldr	r2, [r3, #0]
 800bc06:	4b3d      	ldr	r3, [pc, #244]	; (800bcfc <UART_SetConfig+0x218>)
 800bc08:	429a      	cmp	r2, r3
 800bc0a:	f040 8085 	bne.w	800bd18 <UART_SetConfig+0x234>
  {
    /* Retrieve frequency clock */
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bc0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bc10:	2200      	movs	r2, #0
 800bc12:	623b      	str	r3, [r7, #32]
 800bc14:	627a      	str	r2, [r7, #36]	; 0x24
 800bc16:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800bc1a:	f7fd f9ed 	bl	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bc1e:	6438      	str	r0, [r7, #64]	; 0x40

    /* If proper clock source reported */
    if (pclk != 0U)
 800bc20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	f000 80e8 	beq.w	800bdf8 <UART_SetConfig+0x314>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bc28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc2c:	4a39      	ldr	r2, [pc, #228]	; (800bd14 <UART_SetConfig+0x230>)
 800bc2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc32:	461a      	mov	r2, r3
 800bc34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc36:	fbb3 f3f2 	udiv	r3, r3, r2
 800bc3a:	637b      	str	r3, [r7, #52]	; 0x34

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc3e:	685a      	ldr	r2, [r3, #4]
 800bc40:	4613      	mov	r3, r2
 800bc42:	005b      	lsls	r3, r3, #1
 800bc44:	4413      	add	r3, r2
 800bc46:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc48:	429a      	cmp	r2, r3
 800bc4a:	d305      	bcc.n	800bc58 <UART_SetConfig+0x174>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800bc4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc4e:	685b      	ldr	r3, [r3, #4]
 800bc50:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bc52:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bc54:	429a      	cmp	r2, r3
 800bc56:	d903      	bls.n	800bc60 <UART_SetConfig+0x17c>
      {
        ret = HAL_ERROR;
 800bc58:	2301      	movs	r3, #1
 800bc5a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bc5e:	e048      	b.n	800bcf2 <UART_SetConfig+0x20e>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bc60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bc62:	2200      	movs	r2, #0
 800bc64:	61bb      	str	r3, [r7, #24]
 800bc66:	61fa      	str	r2, [r7, #28]
 800bc68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc6c:	4a29      	ldr	r2, [pc, #164]	; (800bd14 <UART_SetConfig+0x230>)
 800bc6e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bc72:	b29b      	uxth	r3, r3
 800bc74:	2200      	movs	r2, #0
 800bc76:	613b      	str	r3, [r7, #16]
 800bc78:	617a      	str	r2, [r7, #20]
 800bc7a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bc7e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800bc82:	f7f5 f8cf 	bl	8000e24 <__aeabi_uldivmod>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4610      	mov	r0, r2
 800bc8c:	4619      	mov	r1, r3
 800bc8e:	f04f 0200 	mov.w	r2, #0
 800bc92:	f04f 0300 	mov.w	r3, #0
 800bc96:	020b      	lsls	r3, r1, #8
 800bc98:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800bc9c:	0202      	lsls	r2, r0, #8
 800bc9e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800bca0:	6849      	ldr	r1, [r1, #4]
 800bca2:	0849      	lsrs	r1, r1, #1
 800bca4:	2000      	movs	r0, #0
 800bca6:	460c      	mov	r4, r1
 800bca8:	4605      	mov	r5, r0
 800bcaa:	eb12 0804 	adds.w	r8, r2, r4
 800bcae:	eb43 0905 	adc.w	r9, r3, r5
 800bcb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bcb4:	685b      	ldr	r3, [r3, #4]
 800bcb6:	2200      	movs	r2, #0
 800bcb8:	60bb      	str	r3, [r7, #8]
 800bcba:	60fa      	str	r2, [r7, #12]
 800bcbc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800bcc0:	4640      	mov	r0, r8
 800bcc2:	4649      	mov	r1, r9
 800bcc4:	f7f5 f8ae 	bl	8000e24 <__aeabi_uldivmod>
 800bcc8:	4602      	mov	r2, r0
 800bcca:	460b      	mov	r3, r1
 800bccc:	4613      	mov	r3, r2
 800bcce:	63fb      	str	r3, [r7, #60]	; 0x3c
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bcd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcd2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bcd6:	d308      	bcc.n	800bcea <UART_SetConfig+0x206>
 800bcd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bcda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bcde:	d204      	bcs.n	800bcea <UART_SetConfig+0x206>
        {
          huart->Instance->BRR = usartdiv;
 800bce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800bce6:	60da      	str	r2, [r3, #12]
 800bce8:	e003      	b.n	800bcf2 <UART_SetConfig+0x20e>
        }
        else
        {
          ret = HAL_ERROR;
 800bcea:	2301      	movs	r3, #1
 800bcec:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    if (pclk != 0U)
 800bcf0:	e082      	b.n	800bdf8 <UART_SetConfig+0x314>
 800bcf2:	e081      	b.n	800bdf8 <UART_SetConfig+0x314>
 800bcf4:	46002400 	.word	0x46002400
 800bcf8:	cfff69f3 	.word	0xcfff69f3
 800bcfc:	56002400 	.word	0x56002400
 800bd00:	40013800 	.word	0x40013800
 800bd04:	40004400 	.word	0x40004400
 800bd08:	40004800 	.word	0x40004800
 800bd0c:	40004c00 	.word	0x40004c00
 800bd10:	40005000 	.word	0x40005000
 800bd14:	08010d28 	.word	0x08010d28
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd1a:	69db      	ldr	r3, [r3, #28]
 800bd1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd20:	d13c      	bne.n	800bd9c <UART_SetConfig+0x2b8>
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd24:	2200      	movs	r2, #0
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	607a      	str	r2, [r7, #4]
 800bd2a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800bd2e:	f7fd f963 	bl	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bd32:	6438      	str	r0, [r7, #64]	; 0x40

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800bd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d05e      	beq.n	800bdf8 <UART_SetConfig+0x314>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bd3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bd3e:	4a39      	ldr	r2, [pc, #228]	; (800be24 <UART_SetConfig+0x340>)
 800bd40:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bd44:	461a      	mov	r2, r3
 800bd46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bd48:	fbb3 f3f2 	udiv	r3, r3, r2
 800bd4c:	005a      	lsls	r2, r3, #1
 800bd4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd50:	685b      	ldr	r3, [r3, #4]
 800bd52:	085b      	lsrs	r3, r3, #1
 800bd54:	441a      	add	r2, r3
 800bd56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd58:	685b      	ldr	r3, [r3, #4]
 800bd5a:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd5e:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bd60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd62:	2b0f      	cmp	r3, #15
 800bd64:	d916      	bls.n	800bd94 <UART_SetConfig+0x2b0>
 800bd66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd6c:	d212      	bcs.n	800bd94 <UART_SetConfig+0x2b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bd6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd70:	b29b      	uxth	r3, r3
 800bd72:	f023 030f 	bic.w	r3, r3, #15
 800bd76:	877b      	strh	r3, [r7, #58]	; 0x3a
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800bd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bd7a:	085b      	lsrs	r3, r3, #1
 800bd7c:	b29b      	uxth	r3, r3
 800bd7e:	f003 0307 	and.w	r3, r3, #7
 800bd82:	b29a      	uxth	r2, r3
 800bd84:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800bd86:	4313      	orrs	r3, r2
 800bd88:	877b      	strh	r3, [r7, #58]	; 0x3a
        huart->Instance->BRR = brrtemp;
 800bd8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 800bd90:	60da      	str	r2, [r3, #12]
 800bd92:	e031      	b.n	800bdf8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
 800bd9a:	e02d      	b.n	800bdf8 <UART_SetConfig+0x314>
      }
    }
  }
  else
  {
    pclk = HAL_RCCEx_GetPeriphCLKFreq(clocksource);
 800bd9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bd9e:	2200      	movs	r2, #0
 800bda0:	469a      	mov	sl, r3
 800bda2:	4693      	mov	fp, r2
 800bda4:	4650      	mov	r0, sl
 800bda6:	4659      	mov	r1, fp
 800bda8:	f7fd f926 	bl	8008ff8 <HAL_RCCEx_GetPeriphCLKFreq>
 800bdac:	6438      	str	r0, [r7, #64]	; 0x40

    if (pclk != 0U)
 800bdae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d021      	beq.n	800bdf8 <UART_SetConfig+0x314>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bdb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bdb8:	4a1a      	ldr	r2, [pc, #104]	; (800be24 <UART_SetConfig+0x340>)
 800bdba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800bdbe:	461a      	mov	r2, r3
 800bdc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bdc2:	fbb3 f2f2 	udiv	r2, r3, r2
 800bdc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdc8:	685b      	ldr	r3, [r3, #4]
 800bdca:	085b      	lsrs	r3, r3, #1
 800bdcc:	441a      	add	r2, r3
 800bdce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdd6:	63fb      	str	r3, [r7, #60]	; 0x3c
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bdda:	2b0f      	cmp	r3, #15
 800bddc:	d909      	bls.n	800bdf2 <UART_SetConfig+0x30e>
 800bdde:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bde4:	d205      	bcs.n	800bdf2 <UART_SetConfig+0x30e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bde6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bde8:	b29a      	uxth	r2, r3
 800bdea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	60da      	str	r2, [r3, #12]
 800bdf0:	e002      	b.n	800bdf8 <UART_SetConfig+0x314>
      }
      else
      {
        ret = HAL_ERROR;
 800bdf2:	2301      	movs	r3, #1
 800bdf4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800bdf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfa:	2201      	movs	r2, #1
 800bdfc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800be00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be02:	2201      	movs	r2, #1
 800be04:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800be08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be0a:	2200      	movs	r2, #0
 800be0c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800be0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be10:	2200      	movs	r2, #0
 800be12:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800be14:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
}
 800be18:	4618      	mov	r0, r3
 800be1a:	3750      	adds	r7, #80	; 0x50
 800be1c:	46bd      	mov	sp, r7
 800be1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800be22:	bf00      	nop
 800be24:	08010d28 	.word	0x08010d28

0800be28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800be28:	b480      	push	{r7}
 800be2a:	b083      	sub	sp, #12
 800be2c:	af00      	add	r7, sp, #0
 800be2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be34:	f003 0301 	and.w	r3, r3, #1
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d00a      	beq.n	800be52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	685b      	ldr	r3, [r3, #4]
 800be42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	681b      	ldr	r3, [r3, #0]
 800be4e:	430a      	orrs	r2, r1
 800be50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be56:	f003 0302 	and.w	r3, r3, #2
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d00a      	beq.n	800be74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	685b      	ldr	r3, [r3, #4]
 800be64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	681b      	ldr	r3, [r3, #0]
 800be70:	430a      	orrs	r2, r1
 800be72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800be74:	687b      	ldr	r3, [r7, #4]
 800be76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be78:	f003 0304 	and.w	r3, r3, #4
 800be7c:	2b00      	cmp	r3, #0
 800be7e:	d00a      	beq.n	800be96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800be80:	687b      	ldr	r3, [r7, #4]
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	685b      	ldr	r3, [r3, #4]
 800be86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800be8a:	687b      	ldr	r3, [r7, #4]
 800be8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800be8e:	687b      	ldr	r3, [r7, #4]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	430a      	orrs	r2, r1
 800be94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800be96:	687b      	ldr	r3, [r7, #4]
 800be98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800be9a:	f003 0308 	and.w	r3, r3, #8
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d00a      	beq.n	800beb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bea2:	687b      	ldr	r3, [r7, #4]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	685b      	ldr	r3, [r3, #4]
 800bea8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800beb0:	687b      	ldr	r3, [r7, #4]
 800beb2:	681b      	ldr	r3, [r3, #0]
 800beb4:	430a      	orrs	r2, r1
 800beb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bebc:	f003 0310 	and.w	r3, r3, #16
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d00a      	beq.n	800beda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	681b      	ldr	r3, [r3, #0]
 800bec8:	689b      	ldr	r3, [r3, #8]
 800beca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bed2:	687b      	ldr	r3, [r7, #4]
 800bed4:	681b      	ldr	r3, [r3, #0]
 800bed6:	430a      	orrs	r2, r1
 800bed8:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bede:	f003 0320 	and.w	r3, r3, #32
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d00a      	beq.n	800befc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	681b      	ldr	r3, [r3, #0]
 800beea:	689b      	ldr	r3, [r3, #8]
 800beec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	430a      	orrs	r2, r1
 800befa:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d01a      	beq.n	800bf3e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	681b      	ldr	r3, [r3, #0]
 800bf0c:	685b      	ldr	r3, [r3, #4]
 800bf0e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	430a      	orrs	r2, r1
 800bf1c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bf22:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf26:	d10a      	bne.n	800bf3e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	685b      	ldr	r3, [r3, #4]
 800bf2e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800bf36:	687b      	ldr	r3, [r7, #4]
 800bf38:	681b      	ldr	r3, [r3, #0]
 800bf3a:	430a      	orrs	r2, r1
 800bf3c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bf46:	2b00      	cmp	r3, #0
 800bf48:	d00a      	beq.n	800bf60 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	681b      	ldr	r3, [r3, #0]
 800bf4e:	685b      	ldr	r3, [r3, #4]
 800bf50:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	681b      	ldr	r3, [r3, #0]
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	605a      	str	r2, [r3, #4]
  }
}
 800bf60:	bf00      	nop
 800bf62:	370c      	adds	r7, #12
 800bf64:	46bd      	mov	sp, r7
 800bf66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6a:	4770      	bx	lr

0800bf6c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800bf6c:	b580      	push	{r7, lr}
 800bf6e:	b098      	sub	sp, #96	; 0x60
 800bf70:	af02      	add	r7, sp, #8
 800bf72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bf74:	687b      	ldr	r3, [r7, #4]
 800bf76:	2200      	movs	r2, #0
 800bf78:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bf7c:	f7f7 ff9e 	bl	8003ebc <HAL_GetTick>
 800bf80:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	681b      	ldr	r3, [r3, #0]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	f003 0308 	and.w	r3, r3, #8
 800bf8c:	2b08      	cmp	r3, #8
 800bf8e:	d12f      	bne.n	800bff0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bf90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800bf94:	9300      	str	r3, [sp, #0]
 800bf96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800bf98:	2200      	movs	r2, #0
 800bf9a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800bf9e:	6878      	ldr	r0, [r7, #4]
 800bfa0:	f000 f88e 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800bfa4:	4603      	mov	r3, r0
 800bfa6:	2b00      	cmp	r3, #0
 800bfa8:	d022      	beq.n	800bff0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	681b      	ldr	r3, [r3, #0]
 800bfae:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfb2:	e853 3f00 	ldrex	r3, [r3]
 800bfb6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800bfb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800bfbe:	653b      	str	r3, [r7, #80]	; 0x50
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	461a      	mov	r2, r3
 800bfc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfc8:	647b      	str	r3, [r7, #68]	; 0x44
 800bfca:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfcc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800bfce:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800bfd0:	e841 2300 	strex	r3, r2, [r1]
 800bfd4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800bfd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800bfd8:	2b00      	cmp	r3, #0
 800bfda:	d1e6      	bne.n	800bfaa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	2220      	movs	r2, #32
 800bfe0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800bfe4:	687b      	ldr	r3, [r7, #4]
 800bfe6:	2200      	movs	r2, #0
 800bfe8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800bfec:	2303      	movs	r3, #3
 800bfee:	e063      	b.n	800c0b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	681b      	ldr	r3, [r3, #0]
 800bff6:	f003 0304 	and.w	r3, r3, #4
 800bffa:	2b04      	cmp	r3, #4
 800bffc:	d149      	bne.n	800c092 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800bffe:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c006:	2200      	movs	r2, #0
 800c008:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800c00c:	6878      	ldr	r0, [r7, #4]
 800c00e:	f000 f857 	bl	800c0c0 <UART_WaitOnFlagUntilTimeout>
 800c012:	4603      	mov	r3, r0
 800c014:	2b00      	cmp	r3, #0
 800c016:	d03c      	beq.n	800c092 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	681b      	ldr	r3, [r3, #0]
 800c01c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c01e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c020:	e853 3f00 	ldrex	r3, [r3]
 800c024:	623b      	str	r3, [r7, #32]
   return(result);
 800c026:	6a3b      	ldr	r3, [r7, #32]
 800c028:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c02c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	461a      	mov	r2, r3
 800c034:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c036:	633b      	str	r3, [r7, #48]	; 0x30
 800c038:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c03a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c03c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c03e:	e841 2300 	strex	r3, r2, [r1]
 800c042:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c044:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c046:	2b00      	cmp	r3, #0
 800c048:	d1e6      	bne.n	800c018 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	681b      	ldr	r3, [r3, #0]
 800c04e:	3308      	adds	r3, #8
 800c050:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c052:	693b      	ldr	r3, [r7, #16]
 800c054:	e853 3f00 	ldrex	r3, [r3]
 800c058:	60fb      	str	r3, [r7, #12]
   return(result);
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	f023 0301 	bic.w	r3, r3, #1
 800c060:	64bb      	str	r3, [r7, #72]	; 0x48
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	3308      	adds	r3, #8
 800c068:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c06a:	61fa      	str	r2, [r7, #28]
 800c06c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c06e:	69b9      	ldr	r1, [r7, #24]
 800c070:	69fa      	ldr	r2, [r7, #28]
 800c072:	e841 2300 	strex	r3, r2, [r1]
 800c076:	617b      	str	r3, [r7, #20]
   return(result);
 800c078:	697b      	ldr	r3, [r7, #20]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d1e5      	bne.n	800c04a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	2220      	movs	r2, #32
 800c082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	2200      	movs	r2, #0
 800c08a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c08e:	2303      	movs	r3, #3
 800c090:	e012      	b.n	800c0b8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2220      	movs	r2, #32
 800c096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	2220      	movs	r2, #32
 800c09e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c0a2:	687b      	ldr	r3, [r7, #4]
 800c0a4:	2200      	movs	r2, #0
 800c0a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	2200      	movs	r2, #0
 800c0ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c0b6:	2300      	movs	r3, #0
}
 800c0b8:	4618      	mov	r0, r3
 800c0ba:	3758      	adds	r7, #88	; 0x58
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	bd80      	pop	{r7, pc}

0800c0c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0c0:	b580      	push	{r7, lr}
 800c0c2:	b084      	sub	sp, #16
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	60f8      	str	r0, [r7, #12]
 800c0c8:	60b9      	str	r1, [r7, #8]
 800c0ca:	603b      	str	r3, [r7, #0]
 800c0cc:	4613      	mov	r3, r2
 800c0ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0d0:	e049      	b.n	800c166 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0d2:	69bb      	ldr	r3, [r7, #24]
 800c0d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0d8:	d045      	beq.n	800c166 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0da:	f7f7 feef 	bl	8003ebc <HAL_GetTick>
 800c0de:	4602      	mov	r2, r0
 800c0e0:	683b      	ldr	r3, [r7, #0]
 800c0e2:	1ad3      	subs	r3, r2, r3
 800c0e4:	69ba      	ldr	r2, [r7, #24]
 800c0e6:	429a      	cmp	r2, r3
 800c0e8:	d302      	bcc.n	800c0f0 <UART_WaitOnFlagUntilTimeout+0x30>
 800c0ea:	69bb      	ldr	r3, [r7, #24]
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d101      	bne.n	800c0f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800c0f0:	2303      	movs	r3, #3
 800c0f2:	e048      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	681b      	ldr	r3, [r3, #0]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	f003 0304 	and.w	r3, r3, #4
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d031      	beq.n	800c166 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	69db      	ldr	r3, [r3, #28]
 800c108:	f003 0308 	and.w	r3, r3, #8
 800c10c:	2b08      	cmp	r3, #8
 800c10e:	d110      	bne.n	800c132 <UART_WaitOnFlagUntilTimeout+0x72>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c110:	68fb      	ldr	r3, [r7, #12]
 800c112:	681b      	ldr	r3, [r3, #0]
 800c114:	2208      	movs	r2, #8
 800c116:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c118:	68f8      	ldr	r0, [r7, #12]
 800c11a:	f000 f838 	bl	800c18e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2208      	movs	r2, #8
 800c122:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c126:	68fb      	ldr	r3, [r7, #12]
 800c128:	2200      	movs	r2, #0
 800c12a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800c12e:	2301      	movs	r3, #1
 800c130:	e029      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	69db      	ldr	r3, [r3, #28]
 800c138:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c13c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c140:	d111      	bne.n	800c166 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c142:	68fb      	ldr	r3, [r7, #12]
 800c144:	681b      	ldr	r3, [r3, #0]
 800c146:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c14a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800c14c:	68f8      	ldr	r0, [r7, #12]
 800c14e:	f000 f81e 	bl	800c18e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	2220      	movs	r2, #32
 800c156:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	2200      	movs	r2, #0
 800c15e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800c162:	2303      	movs	r3, #3
 800c164:	e00f      	b.n	800c186 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c166:	68fb      	ldr	r3, [r7, #12]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	69da      	ldr	r2, [r3, #28]
 800c16c:	68bb      	ldr	r3, [r7, #8]
 800c16e:	4013      	ands	r3, r2
 800c170:	68ba      	ldr	r2, [r7, #8]
 800c172:	429a      	cmp	r2, r3
 800c174:	bf0c      	ite	eq
 800c176:	2301      	moveq	r3, #1
 800c178:	2300      	movne	r3, #0
 800c17a:	b2db      	uxtb	r3, r3
 800c17c:	461a      	mov	r2, r3
 800c17e:	79fb      	ldrb	r3, [r7, #7]
 800c180:	429a      	cmp	r2, r3
 800c182:	d0a6      	beq.n	800c0d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c184:	2300      	movs	r3, #0
}
 800c186:	4618      	mov	r0, r3
 800c188:	3710      	adds	r7, #16
 800c18a:	46bd      	mov	sp, r7
 800c18c:	bd80      	pop	{r7, pc}

0800c18e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c18e:	b480      	push	{r7}
 800c190:	b095      	sub	sp, #84	; 0x54
 800c192:	af00      	add	r7, sp, #0
 800c194:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c196:	687b      	ldr	r3, [r7, #4]
 800c198:	681b      	ldr	r3, [r3, #0]
 800c19a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c19c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c19e:	e853 3f00 	ldrex	r3, [r3]
 800c1a2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800c1a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c1aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	461a      	mov	r2, r3
 800c1b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c1b4:	643b      	str	r3, [r7, #64]	; 0x40
 800c1b6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1b8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800c1ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800c1bc:	e841 2300 	strex	r3, r2, [r1]
 800c1c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800c1c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d1e6      	bne.n	800c196 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	681b      	ldr	r3, [r3, #0]
 800c1cc:	3308      	adds	r3, #8
 800c1ce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c1d0:	6a3b      	ldr	r3, [r7, #32]
 800c1d2:	e853 3f00 	ldrex	r3, [r3]
 800c1d6:	61fb      	str	r3, [r7, #28]
   return(result);
 800c1d8:	69fb      	ldr	r3, [r7, #28]
 800c1da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c1de:	f023 0301 	bic.w	r3, r3, #1
 800c1e2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	3308      	adds	r3, #8
 800c1ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c1ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c1f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c1f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1f4:	e841 2300 	strex	r3, r2, [r1]
 800c1f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d1e3      	bne.n	800c1c8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c200:	687b      	ldr	r3, [r7, #4]
 800c202:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c204:	2b01      	cmp	r3, #1
 800c206:	d118      	bne.n	800c23a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	e853 3f00 	ldrex	r3, [r3]
 800c214:	60bb      	str	r3, [r7, #8]
   return(result);
 800c216:	68bb      	ldr	r3, [r7, #8]
 800c218:	f023 0310 	bic.w	r3, r3, #16
 800c21c:	647b      	str	r3, [r7, #68]	; 0x44
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	681b      	ldr	r3, [r3, #0]
 800c222:	461a      	mov	r2, r3
 800c224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c226:	61bb      	str	r3, [r7, #24]
 800c228:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c22a:	6979      	ldr	r1, [r7, #20]
 800c22c:	69ba      	ldr	r2, [r7, #24]
 800c22e:	e841 2300 	strex	r3, r2, [r1]
 800c232:	613b      	str	r3, [r7, #16]
   return(result);
 800c234:	693b      	ldr	r3, [r7, #16]
 800c236:	2b00      	cmp	r3, #0
 800c238:	d1e6      	bne.n	800c208 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2220      	movs	r2, #32
 800c23e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	2200      	movs	r2, #0
 800c246:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	2200      	movs	r2, #0
 800c24c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800c24e:	bf00      	nop
 800c250:	3754      	adds	r7, #84	; 0x54
 800c252:	46bd      	mov	sp, r7
 800c254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c258:	4770      	bx	lr

0800c25a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800c25a:	b480      	push	{r7}
 800c25c:	b085      	sub	sp, #20
 800c25e:	af00      	add	r7, sp, #0
 800c260:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d101      	bne.n	800c270 <HAL_UARTEx_DisableFifoMode+0x16>
 800c26c:	2302      	movs	r3, #2
 800c26e:	e027      	b.n	800c2c0 <HAL_UARTEx_DisableFifoMode+0x66>
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	2201      	movs	r2, #1
 800c274:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2224      	movs	r2, #36	; 0x24
 800c27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	681a      	ldr	r2, [r3, #0]
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	681b      	ldr	r3, [r3, #0]
 800c292:	f022 0201 	bic.w	r2, r2, #1
 800c296:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800c29e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2200      	movs	r2, #0
 800c2a4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	68fa      	ldr	r2, [r7, #12]
 800c2ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	2220      	movs	r2, #32
 800c2b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2200      	movs	r2, #0
 800c2ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c2be:	2300      	movs	r3, #0
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3714      	adds	r7, #20
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ca:	4770      	bx	lr

0800c2cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b084      	sub	sp, #16
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
 800c2d4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c2d6:	687b      	ldr	r3, [r7, #4]
 800c2d8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c2dc:	2b01      	cmp	r3, #1
 800c2de:	d101      	bne.n	800c2e4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800c2e0:	2302      	movs	r3, #2
 800c2e2:	e02d      	b.n	800c340 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	2201      	movs	r2, #1
 800c2e8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	2224      	movs	r2, #36	; 0x24
 800c2f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	681b      	ldr	r3, [r3, #0]
 800c300:	681a      	ldr	r2, [r3, #0]
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f022 0201 	bic.w	r2, r2, #1
 800c30a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	681b      	ldr	r3, [r3, #0]
 800c310:	689b      	ldr	r3, [r3, #8]
 800c312:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	681b      	ldr	r3, [r3, #0]
 800c31a:	683a      	ldr	r2, [r7, #0]
 800c31c:	430a      	orrs	r2, r1
 800c31e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c320:	6878      	ldr	r0, [r7, #4]
 800c322:	f000 f84f 	bl	800c3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	68fa      	ldr	r2, [r7, #12]
 800c32c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c32e:	687b      	ldr	r3, [r7, #4]
 800c330:	2220      	movs	r2, #32
 800c332:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2200      	movs	r2, #0
 800c33a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c33e:	2300      	movs	r3, #0
}
 800c340:	4618      	mov	r0, r3
 800c342:	3710      	adds	r7, #16
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}

0800c348 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b084      	sub	sp, #16
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	6078      	str	r0, [r7, #4]
 800c350:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800c352:	687b      	ldr	r3, [r7, #4]
 800c354:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800c358:	2b01      	cmp	r3, #1
 800c35a:	d101      	bne.n	800c360 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800c35c:	2302      	movs	r3, #2
 800c35e:	e02d      	b.n	800c3bc <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2224      	movs	r2, #36	; 0x24
 800c36c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	681b      	ldr	r3, [r3, #0]
 800c374:	681b      	ldr	r3, [r3, #0]
 800c376:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	681b      	ldr	r3, [r3, #0]
 800c37c:	681a      	ldr	r2, [r3, #0]
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	681b      	ldr	r3, [r3, #0]
 800c382:	f022 0201 	bic.w	r2, r2, #1
 800c386:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	681b      	ldr	r3, [r3, #0]
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	430a      	orrs	r2, r1
 800c39a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800c39c:	6878      	ldr	r0, [r7, #4]
 800c39e:	f000 f811 	bl	800c3c4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68fa      	ldr	r2, [r7, #12]
 800c3a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800c3aa:	687b      	ldr	r3, [r7, #4]
 800c3ac:	2220      	movs	r2, #32
 800c3ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2200      	movs	r2, #0
 800c3b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c3ba:	2300      	movs	r3, #0
}
 800c3bc:	4618      	mov	r0, r3
 800c3be:	3710      	adds	r7, #16
 800c3c0:	46bd      	mov	sp, r7
 800c3c2:	bd80      	pop	{r7, pc}

0800c3c4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800c3c4:	b480      	push	{r7}
 800c3c6:	b085      	sub	sp, #20
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d108      	bne.n	800c3e6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	2201      	movs	r2, #1
 800c3d8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	2201      	movs	r2, #1
 800c3e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c3e4:	e031      	b.n	800c44a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800c3e6:	2308      	movs	r3, #8
 800c3e8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800c3ea:	2308      	movs	r3, #8
 800c3ec:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	681b      	ldr	r3, [r3, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
 800c3f4:	0e5b      	lsrs	r3, r3, #25
 800c3f6:	b2db      	uxtb	r3, r3
 800c3f8:	f003 0307 	and.w	r3, r3, #7
 800c3fc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	681b      	ldr	r3, [r3, #0]
 800c402:	689b      	ldr	r3, [r3, #8]
 800c404:	0f5b      	lsrs	r3, r3, #29
 800c406:	b2db      	uxtb	r3, r3
 800c408:	f003 0307 	and.w	r3, r3, #7
 800c40c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c40e:	7bbb      	ldrb	r3, [r7, #14]
 800c410:	7b3a      	ldrb	r2, [r7, #12]
 800c412:	4911      	ldr	r1, [pc, #68]	; (800c458 <UARTEx_SetNbDataToProcess+0x94>)
 800c414:	5c8a      	ldrb	r2, [r1, r2]
 800c416:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800c41a:	7b3a      	ldrb	r2, [r7, #12]
 800c41c:	490f      	ldr	r1, [pc, #60]	; (800c45c <UARTEx_SetNbDataToProcess+0x98>)
 800c41e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c420:	fb93 f3f2 	sdiv	r3, r3, r2
 800c424:	b29a      	uxth	r2, r3
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c42c:	7bfb      	ldrb	r3, [r7, #15]
 800c42e:	7b7a      	ldrb	r2, [r7, #13]
 800c430:	4909      	ldr	r1, [pc, #36]	; (800c458 <UARTEx_SetNbDataToProcess+0x94>)
 800c432:	5c8a      	ldrb	r2, [r1, r2]
 800c434:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800c438:	7b7a      	ldrb	r2, [r7, #13]
 800c43a:	4908      	ldr	r1, [pc, #32]	; (800c45c <UARTEx_SetNbDataToProcess+0x98>)
 800c43c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c43e:	fb93 f3f2 	sdiv	r3, r3, r2
 800c442:	b29a      	uxth	r2, r3
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800c44a:	bf00      	nop
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	08010d40 	.word	0x08010d40
 800c45c:	08010d48 	.word	0x08010d48

0800c460 <_tx_byte_allocate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr, ULONG memory_size,  ULONG wait_option)
{
 800c460:	b580      	push	{r7, lr}
 800c462:	b096      	sub	sp, #88	; 0x58
 800c464:	af00      	add	r7, sp, #0
 800c466:	60f8      	str	r0, [r7, #12]
 800c468:	60b9      	str	r1, [r7, #8]
 800c46a:	607a      	str	r2, [r7, #4]
 800c46c:	603b      	str	r3, [r7, #0]
#endif


    /* Round the memory size up to the next size that is evenly divisible by
       an ALIGN_TYPE (this is typically a 32-bit ULONG).  This guarantees proper alignment.  */
    memory_size = (((memory_size + (sizeof(ALIGN_TYPE)))-((ALIGN_TYPE) 1))/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	3303      	adds	r3, #3
 800c472:	f023 0303 	bic.w	r3, r3, #3
 800c476:	607b      	str	r3, [r7, #4]
{
UINT posture;
#ifdef TX_PORT_USE_BASEPRI
    __asm__ volatile ("MRS  %0, BASEPRI ": "=r" (posture));
#else
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c478:	f3ef 8310 	mrs	r3, PRIMASK
 800c47c:	637b      	str	r3, [r7, #52]	; 0x34
#endif
    return(posture);
 800c47e:	6b7b      	ldr	r3, [r7, #52]	; 0x34

__attribute__( ( always_inline ) ) static inline UINT __disable_interrupts(void)
{
UINT int_posture;

    int_posture = __get_interrupt_posture();
 800c480:	633b      	str	r3, [r7, #48]	; 0x30

#ifdef TX_PORT_USE_BASEPRI
    __set_basepri_value(TX_PORT_BASEPRI);
#else
    __asm__ volatile ("CPSID i" : : : "memory");
 800c482:	b672      	cpsid	i
#endif
    return(int_posture);
 800c484:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    /* Disable interrupts.  */
    TX_DISABLE
 800c486:	657b      	str	r3, [r7, #84]	; 0x54

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800c488:	4b55      	ldr	r3, [pc, #340]	; (800c5e0 <_tx_byte_allocate+0x180>)
 800c48a:	681b      	ldr	r3, [r3, #0]
 800c48c:	64bb      	str	r3, [r7, #72]	; 0x48
    lower_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_LOWER_OFFSET));
    upper_tbu =  *((ULONG *) (log_entry_ptr + TX_EL_EVENT_TIME_UPPER_OFFSET));
#endif

    /* Set the search finished flag to false.  */
    finished =  TX_FALSE;
 800c48e:	2300      	movs	r3, #0
 800c490:	64fb      	str	r3, [r7, #76]	; 0x4c
    /* Loop to handle cases where the owner of the pool changed.  */
    do
    {

        /* Indicate that this thread is the current owner.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c492:	68fb      	ldr	r3, [r7, #12]
 800c494:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c496:	621a      	str	r2, [r3, #32]
 800c498:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c49a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c49c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c49e:	f383 8810 	msr	PRIMASK, r3
}
 800c4a2:	bf00      	nop
        /* Restore interrupts.  */
        TX_RESTORE

        /* At this point, the executing thread owns the pool and can perform a search
           for free memory.  */
        work_ptr =  _tx_byte_pool_search(pool_ptr, memory_size);
 800c4a4:	6879      	ldr	r1, [r7, #4]
 800c4a6:	68f8      	ldr	r0, [r7, #12]
 800c4a8:	f000 f9b2 	bl	800c810 <_tx_byte_pool_search>
 800c4ac:	6478      	str	r0, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c4ae:	f3ef 8310 	mrs	r3, PRIMASK
 800c4b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800c4b6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800c4b8:	b672      	cpsid	i
    return(int_posture);
 800c4ba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Optional processing extension.  */
        TX_BYTE_ALLOCATE_EXTENSION

        /* Lockout interrupts.  */
        TX_DISABLE
 800c4bc:	657b      	str	r3, [r7, #84]	; 0x54

        /* Determine if we are finished.  */
        if (work_ptr != TX_NULL)
 800c4be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d002      	beq.n	800c4ca <_tx_byte_allocate+0x6a>
        {

            /* Yes, we have found a block the search is finished.  */
            finished =  TX_TRUE;
 800c4c4:	2301      	movs	r3, #1
 800c4c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c4c8:	e006      	b.n	800c4d8 <_tx_byte_allocate+0x78>
        }
        else
        {

            /* No block was found, does this thread still own the pool?  */
            if (pool_ptr -> tx_byte_pool_owner == thread_ptr)
 800c4ca:	68fb      	ldr	r3, [r7, #12]
 800c4cc:	6a1b      	ldr	r3, [r3, #32]
 800c4ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c4d0:	429a      	cmp	r2, r3
 800c4d2:	d101      	bne.n	800c4d8 <_tx_byte_allocate+0x78>
            {

                /* Yes, then we have looked through the entire pool and haven't found the memory.  */
                finished =  TX_TRUE;
 800c4d4:	2301      	movs	r3, #1
 800c4d6:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }

    } while (finished == TX_FALSE);
 800c4d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d0d9      	beq.n	800c492 <_tx_byte_allocate+0x32>

    /* Copy the pointer into the return destination.  */
    *memory_ptr =  (VOID *) work_ptr;
 800c4de:	68bb      	ldr	r3, [r7, #8]
 800c4e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c4e2:	601a      	str	r2, [r3, #0]

    /* Determine if memory was found.  */
    if (work_ptr != TX_NULL)
 800c4e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c4e6:	2b00      	cmp	r3, #0
 800c4e8:	d008      	beq.n	800c4fc <_tx_byte_allocate+0x9c>
 800c4ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c4ec:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c4ee:	6a3b      	ldr	r3, [r7, #32]
 800c4f0:	f383 8810 	msr	PRIMASK, r3
}
 800c4f4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Set the status to success.  */
        status =  TX_SUCCESS;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	653b      	str	r3, [r7, #80]	; 0x50
 800c4fa:	e06c      	b.n	800c5d6 <_tx_byte_allocate+0x176>
    {

        /* No memory of sufficient size was found...  */

        /* Determine if the request specifies suspension.  */
        if (wait_option != TX_NO_WAIT)
 800c4fc:	683b      	ldr	r3, [r7, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d061      	beq.n	800c5c6 <_tx_byte_allocate+0x166>
        {

            /* Determine if the preempt disable flag is non-zero.  */
            if (_tx_thread_preempt_disable != ((UINT) 0))
 800c502:	4b38      	ldr	r3, [pc, #224]	; (800c5e4 <_tx_byte_allocate+0x184>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d007      	beq.n	800c51a <_tx_byte_allocate+0xba>
            {

                /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
                status =  TX_NO_MEMORY;
 800c50a:	2310      	movs	r3, #16
 800c50c:	653b      	str	r3, [r7, #80]	; 0x50
 800c50e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c510:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c512:	69fb      	ldr	r3, [r7, #28]
 800c514:	f383 8810 	msr	PRIMASK, r3
}
 800c518:	e05d      	b.n	800c5d6 <_tx_byte_allocate+0x176>
                /* Increment the number of suspensions on this pool.  */
                pool_ptr -> tx_byte_pool_performance_suspension_count++;
#endif

                /* Setup cleanup routine pointer.  */
                thread_ptr -> tx_thread_suspend_cleanup =  &(_tx_byte_pool_cleanup);
 800c51a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c51c:	4a32      	ldr	r2, [pc, #200]	; (800c5e8 <_tx_byte_allocate+0x188>)
 800c51e:	669a      	str	r2, [r3, #104]	; 0x68

                /* Setup cleanup information, i.e. this pool control
                   block.  */
                thread_ptr -> tx_thread_suspend_control_block =  (VOID *) pool_ptr;
 800c520:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c522:	68fa      	ldr	r2, [r7, #12]
 800c524:	66da      	str	r2, [r3, #108]	; 0x6c

                /* Save the return memory pointer address as well.  */
                thread_ptr -> tx_thread_additional_suspend_info =  (VOID *) memory_ptr;
 800c526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c528:	68ba      	ldr	r2, [r7, #8]
 800c52a:	67da      	str	r2, [r3, #124]	; 0x7c

                /* Save the byte size requested.  */
                thread_ptr -> tx_thread_suspend_info =  memory_size;
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	687a      	ldr	r2, [r7, #4]
 800c530:	679a      	str	r2, [r3, #120]	; 0x78

#ifndef TX_NOT_INTERRUPTABLE

                /* Increment the suspension sequence number, which is used to identify
                   this suspension event.  */
                thread_ptr -> tx_thread_suspension_sequence++;
 800c532:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c534:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c538:	1c5a      	adds	r2, r3, #1
 800c53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53c:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
#endif

                /* Pickup the number of suspended threads.  */
                suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c544:	643b      	str	r3, [r7, #64]	; 0x40

                /* Increment the suspension count.  */
                (pool_ptr -> tx_byte_pool_suspended_count)++;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c54a:	1c5a      	adds	r2, r3, #1
 800c54c:	68fb      	ldr	r3, [r7, #12]
 800c54e:	629a      	str	r2, [r3, #40]	; 0x28

                /* Setup suspension list.  */
                if (suspended_count == TX_NO_SUSPENSIONS)
 800c550:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c552:	2b00      	cmp	r3, #0
 800c554:	d109      	bne.n	800c56a <_tx_byte_allocate+0x10a>
                {

                    /* No other threads are suspended.  Setup the head pointer and
                       just setup this threads pointers to itself.  */
                    pool_ptr -> tx_byte_pool_suspension_list =      thread_ptr;
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c55a:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_suspended_next =        thread_ptr;
 800c55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c55e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c560:	671a      	str	r2, [r3, #112]	; 0x70
                    thread_ptr -> tx_thread_suspended_previous =    thread_ptr;
 800c562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c564:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c566:	675a      	str	r2, [r3, #116]	; 0x74
 800c568:	e011      	b.n	800c58e <_tx_byte_allocate+0x12e>
                }
                else
                {

                    /* This list is not NULL, add current thread to the end. */
                    next_thread =                                   pool_ptr -> tx_byte_pool_suspension_list;
 800c56a:	68fb      	ldr	r3, [r7, #12]
 800c56c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56e:	63fb      	str	r3, [r7, #60]	; 0x3c
                    thread_ptr -> tx_thread_suspended_next =        next_thread;
 800c570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c572:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c574:	671a      	str	r2, [r3, #112]	; 0x70
                    previous_thread =                               next_thread -> tx_thread_suspended_previous;
 800c576:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c578:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c57a:	63bb      	str	r3, [r7, #56]	; 0x38
                    thread_ptr -> tx_thread_suspended_previous =    previous_thread;
 800c57c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c57e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800c580:	675a      	str	r2, [r3, #116]	; 0x74
                    previous_thread -> tx_thread_suspended_next =   thread_ptr;
 800c582:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c584:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c586:	671a      	str	r2, [r3, #112]	; 0x70
                    next_thread -> tx_thread_suspended_previous =   thread_ptr;
 800c588:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c58a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c58c:	675a      	str	r2, [r3, #116]	; 0x74
                }

                /* Set the state to suspended.  */
                thread_ptr -> tx_thread_state =       TX_BYTE_MEMORY;
 800c58e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c590:	2209      	movs	r2, #9
 800c592:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag.  */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800c594:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c596:	2201      	movs	r2, #1
 800c598:	639a      	str	r2, [r3, #56]	; 0x38

                /* Setup the timeout period.  */
                thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  wait_option;
 800c59a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c59c:	683a      	ldr	r2, [r7, #0]
 800c59e:	64da      	str	r2, [r3, #76]	; 0x4c

                /* Temporarily disable preemption.  */
                _tx_thread_preempt_disable++;
 800c5a0:	4b10      	ldr	r3, [pc, #64]	; (800c5e4 <_tx_byte_allocate+0x184>)
 800c5a2:	681b      	ldr	r3, [r3, #0]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	4a0f      	ldr	r2, [pc, #60]	; (800c5e4 <_tx_byte_allocate+0x184>)
 800c5a8:	6013      	str	r3, [r2, #0]
 800c5aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5ac:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5ae:	69bb      	ldr	r3, [r7, #24]
 800c5b0:	f383 8810 	msr	PRIMASK, r3
}
 800c5b4:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800c5b6:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 800c5b8:	f000 fdde 	bl	800d178 <_tx_thread_system_suspend>
                    *((ULONG *) (log_entry_ptr + TX_EL_EVENT_INFO_4_OFFSET)) =  (ULONG) *memory_ptr;
                }
#endif

                /* Return the completion status.  */
                status =  thread_ptr -> tx_thread_suspend_status;
 800c5bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c5c2:	653b      	str	r3, [r7, #80]	; 0x50
 800c5c4:	e007      	b.n	800c5d6 <_tx_byte_allocate+0x176>
 800c5c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c5c8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c5ca:	697b      	ldr	r3, [r7, #20]
 800c5cc:	f383 8810 	msr	PRIMASK, r3
}
 800c5d0:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Immediate return, return error completion.  */
            status =  TX_NO_MEMORY;
 800c5d2:	2310      	movs	r3, #16
 800c5d4:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return completion status.  */
    return(status);
 800c5d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800c5d8:	4618      	mov	r0, r3
 800c5da:	3758      	adds	r7, #88	; 0x58
 800c5dc:	46bd      	mov	sp, r7
 800c5de:	bd80      	pop	{r7, pc}
 800c5e0:	20005e04 	.word	0x20005e04
 800c5e4:	20005e9c 	.word	0x20005e9c
 800c5e8:	0800c5ed 	.word	0x0800c5ed

0800c5ec <_tx_byte_pool_cleanup>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_byte_pool_cleanup(TX_THREAD *thread_ptr, ULONG suspension_sequence)
{
 800c5ec:	b580      	push	{r7, lr}
 800c5ee:	b08e      	sub	sp, #56	; 0x38
 800c5f0:	af00      	add	r7, sp, #0
 800c5f2:	6078      	str	r0, [r7, #4]
 800c5f4:	6039      	str	r1, [r7, #0]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c5f6:	f3ef 8310 	mrs	r3, PRIMASK
 800c5fa:	623b      	str	r3, [r7, #32]
    return(posture);
 800c5fc:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800c5fe:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c600:	b672      	cpsid	i
    return(int_posture);
 800c602:	69fb      	ldr	r3, [r7, #28]


#ifndef TX_NOT_INTERRUPTABLE

    /* Disable interrupts to remove the suspended thread from the byte pool.  */
    TX_DISABLE
 800c604:	637b      	str	r3, [r7, #52]	; 0x34

    /* Determine if the cleanup is still required.  */
    if (thread_ptr -> tx_thread_suspend_cleanup == &(_tx_byte_pool_cleanup))
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c60a:	4a33      	ldr	r2, [pc, #204]	; (800c6d8 <_tx_byte_pool_cleanup+0xec>)
 800c60c:	4293      	cmp	r3, r2
 800c60e:	d158      	bne.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
    {

        /* Check for valid suspension sequence.  */
        if (suspension_sequence == thread_ptr -> tx_thread_suspension_sequence)
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800c616:	683a      	ldr	r2, [r7, #0]
 800c618:	429a      	cmp	r2, r3
 800c61a:	d152      	bne.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
        {

            /* Setup pointer to byte pool control block.  */
            pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c620:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for a NULL byte pool pointer.  */
            if (pool_ptr != TX_NULL)
 800c622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c624:	2b00      	cmp	r3, #0
 800c626:	d04c      	beq.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
            {

                /* Check for valid pool ID.  */
                if (pool_ptr -> tx_byte_pool_id == TX_BYTE_POOL_ID)
 800c628:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	4a2b      	ldr	r2, [pc, #172]	; (800c6dc <_tx_byte_pool_cleanup+0xf0>)
 800c62e:	4293      	cmp	r3, r2
 800c630:	d147      	bne.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
                {

                    /* Determine if there are any thread suspensions.  */
                    if (pool_ptr -> tx_byte_pool_suspended_count != TX_NO_SUSPENSIONS)
 800c632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c636:	2b00      	cmp	r3, #0
 800c638:	d043      	beq.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
                        /* Setup pointer to byte pool control block.  */
                        pool_ptr =  TX_VOID_TO_BYTE_POOL_POINTER_CONVERT(thread_ptr -> tx_thread_suspend_control_block);
#endif

                        /* Thread suspended for memory... Clear the suspension cleanup flag.  */
                        thread_ptr -> tx_thread_suspend_cleanup =  TX_NULL;
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2200      	movs	r2, #0
 800c63e:	669a      	str	r2, [r3, #104]	; 0x68

                        /* Decrement the suspension count.  */
                        pool_ptr -> tx_byte_pool_suspended_count--;
 800c640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c644:	1e5a      	subs	r2, r3, #1
 800c646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c648:	629a      	str	r2, [r3, #40]	; 0x28

                        /* Pickup the suspended count.  */
                        suspended_count =  pool_ptr -> tx_byte_pool_suspended_count;
 800c64a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c64e:	62fb      	str	r3, [r7, #44]	; 0x2c

                        /* Remove the suspended thread from the list.  */

                        /* See if this is the only suspended thread on the list.  */
                        if (suspended_count == TX_NO_SUSPENSIONS)
 800c650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c652:	2b00      	cmp	r3, #0
 800c654:	d103      	bne.n	800c65e <_tx_byte_pool_cleanup+0x72>
                        {

                            /* Yes, the only suspended thread.  */

                            /* Update the head pointer.  */
                            pool_ptr -> tx_byte_pool_suspension_list =  TX_NULL;
 800c656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c658:	2200      	movs	r2, #0
 800c65a:	625a      	str	r2, [r3, #36]	; 0x24
 800c65c:	e013      	b.n	800c686 <_tx_byte_pool_cleanup+0x9a>
                        {

                            /* At least one more thread is on the same suspension list.  */

                            /* Update the links of the adjacent threads.  */
                            next_thread =                                   thread_ptr -> tx_thread_suspended_next;
 800c65e:	687b      	ldr	r3, [r7, #4]
 800c660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c662:	62bb      	str	r3, [r7, #40]	; 0x28
                            previous_thread =                               thread_ptr -> tx_thread_suspended_previous;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c668:	627b      	str	r3, [r7, #36]	; 0x24
                            next_thread -> tx_thread_suspended_previous =   previous_thread;
 800c66a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c66c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c66e:	675a      	str	r2, [r3, #116]	; 0x74
                            previous_thread -> tx_thread_suspended_next =   next_thread;
 800c670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c672:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c674:	671a      	str	r2, [r3, #112]	; 0x70

                            /* Determine if we need to update the head pointer.  */
                            if (pool_ptr -> tx_byte_pool_suspension_list == thread_ptr)
 800c676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67a:	687a      	ldr	r2, [r7, #4]
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d102      	bne.n	800c686 <_tx_byte_pool_cleanup+0x9a>
                            {

                                /* Update the list head pointer.  */
                                pool_ptr -> tx_byte_pool_suspension_list =      next_thread;
 800c680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c682:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c684:	625a      	str	r2, [r3, #36]	; 0x24
                            }
                        }

                        /* Now we need to determine if this cleanup is from a terminate, timeout,
                           or from a wait abort.  */
                        if (thread_ptr -> tx_thread_state == TX_BYTE_MEMORY)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c68a:	2b09      	cmp	r3, #9
 800c68c:	d119      	bne.n	800c6c2 <_tx_byte_pool_cleanup+0xd6>
                            /* Increment the number of timeouts on this byte pool.  */
                            pool_ptr -> tx_byte_pool_performance_timeout_count++;
#endif

                            /* Setup return status.  */
                            thread_ptr -> tx_thread_suspend_status =  TX_NO_MEMORY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2210      	movs	r2, #16
 800c692:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
                            /* Resume the thread!  */
                            _tx_thread_system_ni_resume(thread_ptr);
#else

                            /* Temporarily disable preemption.  */
                            _tx_thread_preempt_disable++;
 800c696:	4b12      	ldr	r3, [pc, #72]	; (800c6e0 <_tx_byte_pool_cleanup+0xf4>)
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	3301      	adds	r3, #1
 800c69c:	4a10      	ldr	r2, [pc, #64]	; (800c6e0 <_tx_byte_pool_cleanup+0xf4>)
 800c69e:	6013      	str	r3, [r2, #0]
 800c6a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6a2:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6a4:	693b      	ldr	r3, [r7, #16]
 800c6a6:	f383 8810 	msr	PRIMASK, r3
}
 800c6aa:	bf00      	nop

                            /* Restore interrupts.  */
                            TX_RESTORE

                            /* Resume the thread!  */
                            _tx_thread_system_resume(thread_ptr);
 800c6ac:	6878      	ldr	r0, [r7, #4]
 800c6ae:	f000 fc63 	bl	800cf78 <_tx_thread_system_resume>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c6b2:	f3ef 8310 	mrs	r3, PRIMASK
 800c6b6:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c6b8:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c6ba:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c6bc:	b672      	cpsid	i
    return(int_posture);
 800c6be:	697b      	ldr	r3, [r7, #20]

                            /* Disable interrupts.  */
                            TX_DISABLE
 800c6c0:	637b      	str	r3, [r7, #52]	; 0x34
 800c6c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c4:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	f383 8810 	msr	PRIMASK, r3
}
 800c6cc:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800c6ce:	bf00      	nop
 800c6d0:	3738      	adds	r7, #56	; 0x38
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	bd80      	pop	{r7, pc}
 800c6d6:	bf00      	nop
 800c6d8:	0800c5ed 	.word	0x0800c5ed
 800c6dc:	42595445 	.word	0x42595445
 800c6e0:	20005e9c 	.word	0x20005e9c

0800c6e4 <_tx_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size)
{
 800c6e4:	b580      	push	{r7, lr}
 800c6e6:	b08e      	sub	sp, #56	; 0x38
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
 800c6f0:	603b      	str	r3, [r7, #0]
TX_BYTE_POOL        *previous_pool;
ALIGN_TYPE          *free_ptr;


    /* Initialize the byte pool control block to all zeros.  */
    TX_MEMSET(pool_ptr, 0, (sizeof(TX_BYTE_POOL)));
 800c6f2:	2234      	movs	r2, #52	; 0x34
 800c6f4:	2100      	movs	r1, #0
 800c6f6:	68f8      	ldr	r0, [r7, #12]
 800c6f8:	f001 fe4b 	bl	800e392 <memset>

    /* Round the pool size down to something that is evenly divisible by
       an ULONG.  */
    pool_size =   (pool_size/(sizeof(ALIGN_TYPE))) * (sizeof(ALIGN_TYPE));
 800c6fc:	683b      	ldr	r3, [r7, #0]
 800c6fe:	f023 0303 	bic.w	r3, r3, #3
 800c702:	603b      	str	r3, [r7, #0]

    /* Setup the basic byte pool fields.  */
    pool_ptr -> tx_byte_pool_name =              name_ptr;
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	68ba      	ldr	r2, [r7, #8]
 800c708:	605a      	str	r2, [r3, #4]

    /* Save the start and size of the pool.  */
    pool_ptr -> tx_byte_pool_start =   TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	687a      	ldr	r2, [r7, #4]
 800c70e:	619a      	str	r2, [r3, #24]
    pool_ptr -> tx_byte_pool_size =    pool_size;
 800c710:	68fb      	ldr	r3, [r7, #12]
 800c712:	683a      	ldr	r2, [r7, #0]
 800c714:	61da      	str	r2, [r3, #28]

    /* Setup memory list to the beginning as well as the search pointer.  */
    pool_ptr -> tx_byte_pool_list =    TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	687a      	ldr	r2, [r7, #4]
 800c71a:	611a      	str	r2, [r3, #16]
    pool_ptr -> tx_byte_pool_search =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	687a      	ldr	r2, [r7, #4]
 800c720:	615a      	str	r2, [r3, #20]

    /* Initially, the pool will have two blocks.  One large block at the
       beginning that is available and a small allocated block at the end
       of the pool that is there just for the algorithm.  Be sure to count
       the available block's header in the available bytes count.  */
    pool_ptr -> tx_byte_pool_available =   pool_size - ((sizeof(VOID *)) + (sizeof(ALIGN_TYPE)));
 800c722:	683b      	ldr	r3, [r7, #0]
 800c724:	f1a3 0208 	sub.w	r2, r3, #8
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	609a      	str	r2, [r3, #8]
    pool_ptr -> tx_byte_pool_fragments =   ((UINT) 2);
 800c72c:	68fb      	ldr	r3, [r7, #12]
 800c72e:	2202      	movs	r2, #2
 800c730:	60da      	str	r2, [r3, #12]
    /* Each block contains a "next" pointer that points to the next block in the pool followed by a ALIGN_TYPE
       field that contains either the constant TX_BYTE_BLOCK_FREE (if the block is free) or a pointer to the
       owning pool (if the block is allocated).  */

    /* Calculate the end of the pool's memory area.  */
    block_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =  TX_UCHAR_POINTER_ADD(block_ptr, pool_size);
 800c736:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	4413      	add	r3, r2
 800c73c:	637b      	str	r3, [r7, #52]	; 0x34

    /* Backup the end of the pool pointer and build the pre-allocated block.  */
    block_ptr =  TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(ALIGN_TYPE)));
 800c73e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c740:	3b04      	subs	r3, #4
 800c742:	637b      	str	r3, [r7, #52]	; 0x34

    /* Cast the pool pointer into a ULONG.  */
    temp_ptr =             TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c748:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c74a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  temp_ptr;
 800c74c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c74e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c750:	601a      	str	r2, [r3, #0]

    block_ptr =            TX_UCHAR_POINTER_SUB(block_ptr, (sizeof(UCHAR *)));
 800c752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c754:	3b04      	subs	r3, #4
 800c756:	637b      	str	r3, [r7, #52]	; 0x34
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(block_ptr);
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c75c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	601a      	str	r2, [r3, #0]

    /* Now setup the large available block in the pool.  */
    temp_ptr =             TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	633b      	str	r3, [r7, #48]	; 0x30
    block_indirect_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(temp_ptr);
 800c766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c768:	62fb      	str	r3, [r7, #44]	; 0x2c
    *block_indirect_ptr =  block_ptr;
 800c76a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c76c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c76e:	601a      	str	r2, [r3, #0]
    block_ptr =            TX_VOID_TO_UCHAR_POINTER_CONVERT(pool_start);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	637b      	str	r3, [r7, #52]	; 0x34
    block_ptr =            TX_UCHAR_POINTER_ADD(block_ptr, (sizeof(UCHAR *)));
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	3304      	adds	r3, #4
 800c778:	637b      	str	r3, [r7, #52]	; 0x34
    free_ptr =             TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(block_ptr);
 800c77a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c77c:	62bb      	str	r3, [r7, #40]	; 0x28
    *free_ptr =            TX_BYTE_BLOCK_FREE;
 800c77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c780:	4a1f      	ldr	r2, [pc, #124]	; (800c800 <_tx_byte_pool_create+0x11c>)
 800c782:	601a      	str	r2, [r3, #0]

    /* Clear the owner id.  */
    pool_ptr -> tx_byte_pool_owner =  TX_NULL;
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	2200      	movs	r2, #0
 800c788:	621a      	str	r2, [r3, #32]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c78a:	f3ef 8310 	mrs	r3, PRIMASK
 800c78e:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c790:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c792:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c794:	b672      	cpsid	i
    return(int_posture);
 800c796:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to place the byte pool on the created list.  */
    TX_DISABLE
 800c798:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the byte pool ID to make it valid.  */
    pool_ptr -> tx_byte_pool_id =  TX_BYTE_POOL_ID;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	4a19      	ldr	r2, [pc, #100]	; (800c804 <_tx_byte_pool_create+0x120>)
 800c79e:	601a      	str	r2, [r3, #0]

    /* Place the byte pool on the list of created byte pools.  First,
       check for an empty list.  */
    if (_tx_byte_pool_created_count == TX_EMPTY)
 800c7a0:	4b19      	ldr	r3, [pc, #100]	; (800c808 <_tx_byte_pool_create+0x124>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d109      	bne.n	800c7bc <_tx_byte_pool_create+0xd8>
    {

        /* The created byte pool list is empty.  Add byte pool to empty list.  */
        _tx_byte_pool_created_ptr =                  pool_ptr;
 800c7a8:	4a18      	ldr	r2, [pc, #96]	; (800c80c <_tx_byte_pool_create+0x128>)
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	6013      	str	r3, [r2, #0]
        pool_ptr -> tx_byte_pool_created_next =      pool_ptr;
 800c7ae:	68fb      	ldr	r3, [r7, #12]
 800c7b0:	68fa      	ldr	r2, [r7, #12]
 800c7b2:	62da      	str	r2, [r3, #44]	; 0x2c
        pool_ptr -> tx_byte_pool_created_previous =  pool_ptr;
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	68fa      	ldr	r2, [r7, #12]
 800c7b8:	631a      	str	r2, [r3, #48]	; 0x30
 800c7ba:	e011      	b.n	800c7e0 <_tx_byte_pool_create+0xfc>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_pool =      _tx_byte_pool_created_ptr;
 800c7bc:	4b13      	ldr	r3, [pc, #76]	; (800c80c <_tx_byte_pool_create+0x128>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	623b      	str	r3, [r7, #32]
        previous_pool =  next_pool -> tx_byte_pool_created_previous;
 800c7c2:	6a3b      	ldr	r3, [r7, #32]
 800c7c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c7c6:	61fb      	str	r3, [r7, #28]

        /* Place the new byte pool in the list.  */
        next_pool -> tx_byte_pool_created_previous =  pool_ptr;
 800c7c8:	6a3b      	ldr	r3, [r7, #32]
 800c7ca:	68fa      	ldr	r2, [r7, #12]
 800c7cc:	631a      	str	r2, [r3, #48]	; 0x30
        previous_pool -> tx_byte_pool_created_next =  pool_ptr;
 800c7ce:	69fb      	ldr	r3, [r7, #28]
 800c7d0:	68fa      	ldr	r2, [r7, #12]
 800c7d2:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Setup this byte pool's created links.  */
        pool_ptr -> tx_byte_pool_created_previous =  previous_pool;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	69fa      	ldr	r2, [r7, #28]
 800c7d8:	631a      	str	r2, [r3, #48]	; 0x30
        pool_ptr -> tx_byte_pool_created_next =      next_pool;
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	6a3a      	ldr	r2, [r7, #32]
 800c7de:	62da      	str	r2, [r3, #44]	; 0x2c
    }

    /* Increment the number of created byte pools.  */
    _tx_byte_pool_created_count++;
 800c7e0:	4b09      	ldr	r3, [pc, #36]	; (800c808 <_tx_byte_pool_create+0x124>)
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	3301      	adds	r3, #1
 800c7e6:	4a08      	ldr	r2, [pc, #32]	; (800c808 <_tx_byte_pool_create+0x124>)
 800c7e8:	6013      	str	r3, [r2, #0]
 800c7ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ec:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c7ee:	693b      	ldr	r3, [r7, #16]
 800c7f0:	f383 8810 	msr	PRIMASK, r3
}
 800c7f4:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800c7f6:	2300      	movs	r3, #0
}
 800c7f8:	4618      	mov	r0, r3
 800c7fa:	3738      	adds	r7, #56	; 0x38
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	ffffeeee 	.word	0xffffeeee
 800c804:	42595445 	.word	0x42595445
 800c808:	20005df8 	.word	0x20005df8
 800c80c:	20005df4 	.word	0x20005df4

0800c810 <_tx_byte_pool_search>:
/*                                            calculation,                */
/*                                            resulting in version 6.1.7  */
/*                                                                        */
/**************************************************************************/
UCHAR  *_tx_byte_pool_search(TX_BYTE_POOL *pool_ptr, ULONG memory_size)
{
 800c810:	b480      	push	{r7}
 800c812:	b097      	sub	sp, #92	; 0x5c
 800c814:	af00      	add	r7, sp, #0
 800c816:	6078      	str	r0, [r7, #4]
 800c818:	6039      	str	r1, [r7, #0]
UCHAR           *next_ptr;
UCHAR           **this_block_link_ptr;
UCHAR           **next_block_link_ptr;
ULONG           available_bytes;
UINT            examine_blocks;
UINT            first_free_block_found =  TX_FALSE;
 800c81a:	2300      	movs	r3, #0
 800c81c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c81e:	f3ef 8310 	mrs	r3, PRIMASK
 800c822:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800c824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    int_posture = __get_interrupt_posture();
 800c826:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c828:	b672      	cpsid	i
    return(int_posture);
 800c82a:	6a3b      	ldr	r3, [r7, #32]
UCHAR           *work_ptr;
ULONG           total_theoretical_available;


    /* Disable interrupts.  */
    TX_DISABLE
 800c82c:	657b      	str	r3, [r7, #84]	; 0x54

    /* First, determine if there are enough bytes in the pool.  */
    /* Theoretical bytes available = free bytes + ((fragments-2) * overhead of each block) */
    total_theoretical_available = pool_ptr -> tx_byte_pool_available + ((pool_ptr -> tx_byte_pool_fragments - 2) * ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE))));
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	689a      	ldr	r2, [r3, #8]
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	68db      	ldr	r3, [r3, #12]
 800c836:	3b02      	subs	r3, #2
 800c838:	00db      	lsls	r3, r3, #3
 800c83a:	4413      	add	r3, r2
 800c83c:	643b      	str	r3, [r7, #64]	; 0x40
    if (memory_size >= total_theoretical_available)
 800c83e:	683a      	ldr	r2, [r7, #0]
 800c840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c842:	429a      	cmp	r2, r3
 800c844:	d308      	bcc.n	800c858 <_tx_byte_pool_search+0x48>
 800c846:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c848:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	f383 8810 	msr	PRIMASK, r3
}
 800c850:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Not enough memory, return a NULL pointer.  */
        current_ptr =  TX_NULL;
 800c852:	2300      	movs	r3, #0
 800c854:	653b      	str	r3, [r7, #80]	; 0x50
 800c856:	e0dd      	b.n	800ca14 <_tx_byte_pool_search+0x204>
    }
    else
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800c858:	4b72      	ldr	r3, [pc, #456]	; (800ca24 <_tx_byte_pool_search+0x214>)
 800c85a:	681b      	ldr	r3, [r3, #0]
 800c85c:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Setup ownership of the byte pool.  */
        pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c862:	621a      	str	r2, [r3, #32]

        /* Walk through the memory pool in search for a large enough block.  */
        current_ptr =      pool_ptr -> tx_byte_pool_search;
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	695b      	ldr	r3, [r3, #20]
 800c868:	653b      	str	r3, [r7, #80]	; 0x50
        examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	68db      	ldr	r3, [r3, #12]
 800c86e:	3301      	adds	r3, #1
 800c870:	64bb      	str	r3, [r7, #72]	; 0x48
        available_bytes =  ((ULONG) 0);
 800c872:	2300      	movs	r3, #0
 800c874:	64fb      	str	r3, [r7, #76]	; 0x4c
            /* Increment the number of fragments searched on this pool.  */
            pool_ptr -> tx_byte_pool_performance_search_count++;
#endif

            /* Check to see if this block is free.  */
            work_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800c876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c878:	3304      	adds	r3, #4
 800c87a:	63bb      	str	r3, [r7, #56]	; 0x38
            free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c87c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c87e:	637b      	str	r3, [r7, #52]	; 0x34
            if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800c880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c882:	681b      	ldr	r3, [r3, #0]
 800c884:	4a68      	ldr	r2, [pc, #416]	; (800ca28 <_tx_byte_pool_search+0x218>)
 800c886:	4293      	cmp	r3, r2
 800c888:	d143      	bne.n	800c912 <_tx_byte_pool_search+0x102>
            {

                /* Determine if this is the first free block.  */
                if (first_free_block_found == TX_FALSE)
 800c88a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	d104      	bne.n	800c89a <_tx_byte_pool_search+0x8a>
                {
                    /* This is the first free block.  */
                    pool_ptr->tx_byte_pool_search =  current_ptr;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c894:	615a      	str	r2, [r3, #20]

                    /* Set the flag to indicate we have found the first free
                       block.  */
                    first_free_block_found =  TX_TRUE;
 800c896:	2301      	movs	r3, #1
 800c898:	647b      	str	r3, [r7, #68]	; 0x44
                }

                /* Block is free, see if it is large enough.  */

                /* Pickup the next block's pointer.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c89a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c89c:	633b      	str	r3, [r7, #48]	; 0x30
                next_ptr =             *this_block_link_ptr;
 800c89e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8a0:	681b      	ldr	r3, [r3, #0]
 800c8a2:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Calculate the number of bytes available in this block.  */
                available_bytes =   TX_UCHAR_POINTER_DIF(next_ptr, current_ptr);
 800c8a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c8a8:	1ad3      	subs	r3, r2, r3
 800c8aa:	64fb      	str	r3, [r7, #76]	; 0x4c
                available_bytes =   available_bytes - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800c8ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c8ae:	3b08      	subs	r3, #8
 800c8b0:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* If this is large enough, we are done because our first-fit algorithm
                   has been satisfied!  */
                if (available_bytes >= memory_size)
 800c8b2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c8b4:	683b      	ldr	r3, [r7, #0]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d257      	bcs.n	800c96a <_tx_byte_pool_search+0x15a>
                }
                else
                {

                    /* Clear the available bytes variable.  */
                    available_bytes =  ((ULONG) 0);
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	64fb      	str	r3, [r7, #76]	; 0x4c

                    /* Not enough memory, check to see if the neighbor is
                       free and can be merged.  */
                    work_ptr =  TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800c8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	63bb      	str	r3, [r7, #56]	; 0x38
                    free_ptr =  TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c8c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8c6:	637b      	str	r3, [r7, #52]	; 0x34
                    if ((*free_ptr) == TX_BYTE_BLOCK_FREE)
 800c8c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8ca:	681b      	ldr	r3, [r3, #0]
 800c8cc:	4a56      	ldr	r2, [pc, #344]	; (800ca28 <_tx_byte_pool_search+0x218>)
 800c8ce:	4293      	cmp	r3, r2
 800c8d0:	d113      	bne.n	800c8fa <_tx_byte_pool_search+0xea>
                    {

                        /* Yes, neighbor block can be merged!  This is quickly accomplished
                           by updating the current block with the next blocks pointer.  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c8d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8d4:	62bb      	str	r3, [r7, #40]	; 0x28
                        *this_block_link_ptr =  *next_block_link_ptr;
 800c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d8:	681a      	ldr	r2, [r3, #0]
 800c8da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8dc:	601a      	str	r2, [r3, #0]

                        /* Reduce the fragment total.  We don't need to increase the bytes
                           available because all free headers are also included in the available
                           count.  */
                        pool_ptr -> tx_byte_pool_fragments--;
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	68db      	ldr	r3, [r3, #12]
 800c8e2:	1e5a      	subs	r2, r3, #1
 800c8e4:	687b      	ldr	r3, [r7, #4]
 800c8e6:	60da      	str	r2, [r3, #12]
                        /* Increment the number of blocks merged on this pool.  */
                        pool_ptr -> tx_byte_pool_performance_merge_count++;
#endif

                        /* See if the search pointer is affected.  */
                        if (pool_ptr -> tx_byte_pool_search ==  next_ptr)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	695b      	ldr	r3, [r3, #20]
 800c8ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c8ee:	429a      	cmp	r2, r3
 800c8f0:	d114      	bne.n	800c91c <_tx_byte_pool_search+0x10c>
                        {
                            /* Yes, update the search pointer.   */
                            pool_ptr -> tx_byte_pool_search =  current_ptr;
 800c8f2:	687b      	ldr	r3, [r7, #4]
 800c8f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c8f6:	615a      	str	r2, [r3, #20]
 800c8f8:	e010      	b.n	800c91c <_tx_byte_pool_search+0x10c>
                        }
                    }
                    else
                    {
                        /* Neighbor is not free so we can skip over it!  */
                        next_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c8fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8fc:	62bb      	str	r3, [r7, #40]	; 0x28
                        current_ptr =  *next_block_link_ptr;
 800c8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	653b      	str	r3, [r7, #80]	; 0x50

                        /* Decrement the examined block count to account for this one.  */
                        if (examine_blocks != ((UINT) 0))
 800c904:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c906:	2b00      	cmp	r3, #0
 800c908:	d008      	beq.n	800c91c <_tx_byte_pool_search+0x10c>
                        {
                            examine_blocks--;
 800c90a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c90c:	3b01      	subs	r3, #1
 800c90e:	64bb      	str	r3, [r7, #72]	; 0x48
 800c910:	e004      	b.n	800c91c <_tx_byte_pool_search+0x10c>
            }
            else
            {

                /* Block is not free, move to next block.  */
                this_block_link_ptr =  TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c912:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c914:	633b      	str	r3, [r7, #48]	; 0x30
                current_ptr =  *this_block_link_ptr;
 800c916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	653b      	str	r3, [r7, #80]	; 0x50
            }

            /* Another block has been searched... decrement counter.  */
            if (examine_blocks != ((UINT) 0))
 800c91c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <_tx_byte_pool_search+0x118>
            {

                examine_blocks--;
 800c922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c924:	3b01      	subs	r3, #1
 800c926:	64bb      	str	r3, [r7, #72]	; 0x48
 800c928:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c92a:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c92c:	693b      	ldr	r3, [r7, #16]
 800c92e:	f383 8810 	msr	PRIMASK, r3
}
 800c932:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800c934:	f3ef 8310 	mrs	r3, PRIMASK
 800c938:	61bb      	str	r3, [r7, #24]
    return(posture);
 800c93a:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800c93c:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800c93e:	b672      	cpsid	i
    return(int_posture);
 800c940:	697b      	ldr	r3, [r7, #20]

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts.  */
            TX_DISABLE
 800c942:	657b      	str	r3, [r7, #84]	; 0x54

            /* Determine if anything has changed in terms of pool ownership.  */
            if (pool_ptr -> tx_byte_pool_owner != thread_ptr)
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	6a1b      	ldr	r3, [r3, #32]
 800c948:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d009      	beq.n	800c962 <_tx_byte_pool_search+0x152>
            {

                /* Pool changed ownership in the brief period interrupts were
                   enabled.  Reset the search.  */
                current_ptr =      pool_ptr -> tx_byte_pool_search;
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	695b      	ldr	r3, [r3, #20]
 800c952:	653b      	str	r3, [r7, #80]	; 0x50
                examine_blocks =   pool_ptr -> tx_byte_pool_fragments + ((UINT) 1);
 800c954:	687b      	ldr	r3, [r7, #4]
 800c956:	68db      	ldr	r3, [r3, #12]
 800c958:	3301      	adds	r3, #1
 800c95a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Setup our ownership again.  */
                pool_ptr -> tx_byte_pool_owner =  thread_ptr;
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800c960:	621a      	str	r2, [r3, #32]
            }
        } while(examine_blocks != ((UINT) 0));
 800c962:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c964:	2b00      	cmp	r3, #0
 800c966:	d186      	bne.n	800c876 <_tx_byte_pool_search+0x66>
 800c968:	e000      	b.n	800c96c <_tx_byte_pool_search+0x15c>
                    break;
 800c96a:	bf00      	nop

        /* Determine if a block was found.  If so, determine if it needs to be
           split.  */
        if (available_bytes != ((ULONG) 0))
 800c96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d048      	beq.n	800ca04 <_tx_byte_pool_search+0x1f4>
        {

            /* Determine if we need to split this block.  */
            if ((available_bytes - memory_size) >= ((ULONG) TX_BYTE_BLOCK_MIN))
 800c972:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c974:	683b      	ldr	r3, [r7, #0]
 800c976:	1ad3      	subs	r3, r2, r3
 800c978:	2b13      	cmp	r3, #19
 800c97a:	d91e      	bls.n	800c9ba <_tx_byte_pool_search+0x1aa>
            {

                /* Split the block.  */
                next_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (memory_size + ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	3308      	adds	r3, #8
 800c980:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c982:	4413      	add	r3, r2
 800c984:	62fb      	str	r3, [r7, #44]	; 0x2c

                /* Setup the new free block.  */
                next_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(next_ptr);
 800c986:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c988:	62bb      	str	r3, [r7, #40]	; 0x28
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c98a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c98c:	633b      	str	r3, [r7, #48]	; 0x30
                *next_block_link_ptr =  *this_block_link_ptr;
 800c98e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c990:	681a      	ldr	r2, [r3, #0]
 800c992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c994:	601a      	str	r2, [r3, #0]
                work_ptr =              TX_UCHAR_POINTER_ADD(next_ptr, (sizeof(UCHAR *)));
 800c996:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c998:	3304      	adds	r3, #4
 800c99a:	63bb      	str	r3, [r7, #56]	; 0x38
                free_ptr =              TX_UCHAR_TO_ALIGN_TYPE_POINTER_CONVERT(work_ptr);
 800c99c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c99e:	637b      	str	r3, [r7, #52]	; 0x34
                *free_ptr =             TX_BYTE_BLOCK_FREE;
 800c9a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9a2:	4a21      	ldr	r2, [pc, #132]	; (800ca28 <_tx_byte_pool_search+0x218>)
 800c9a4:	601a      	str	r2, [r3, #0]

                /* Increase the total fragment counter.  */
                pool_ptr -> tx_byte_pool_fragments++;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	1c5a      	adds	r2, r3, #1
 800c9ac:	687b      	ldr	r3, [r7, #4]
 800c9ae:	60da      	str	r2, [r3, #12]

                /* Update the current pointer to point at the newly created block.  */
                *this_block_link_ptr =  next_ptr;
 800c9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c9b4:	601a      	str	r2, [r3, #0]

                /* Set available equal to memory size for subsequent calculation.  */
                available_bytes =  memory_size;
 800c9b6:	683b      	ldr	r3, [r7, #0]
 800c9b8:	64fb      	str	r3, [r7, #76]	; 0x4c
                pool_ptr -> tx_byte_pool_performance_split_count++;
#endif
            }

            /* In any case, mark the current block as allocated.  */
            work_ptr =              TX_UCHAR_POINTER_ADD(current_ptr, (sizeof(UCHAR *)));
 800c9ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9bc:	3304      	adds	r3, #4
 800c9be:	63bb      	str	r3, [r7, #56]	; 0x38
            this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(work_ptr);
 800c9c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9c2:	633b      	str	r3, [r7, #48]	; 0x30
            *this_block_link_ptr =  TX_BYTE_POOL_TO_UCHAR_POINTER_CONVERT(pool_ptr);
 800c9c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9c6:	687a      	ldr	r2, [r7, #4]
 800c9c8:	601a      	str	r2, [r3, #0]

            /* Reduce the number of available bytes in the pool.  */
            pool_ptr -> tx_byte_pool_available =  (pool_ptr -> tx_byte_pool_available - available_bytes) - ((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)));
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	689a      	ldr	r2, [r3, #8]
 800c9ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c9d0:	1ad3      	subs	r3, r2, r3
 800c9d2:	f1a3 0208 	sub.w	r2, r3, #8
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	609a      	str	r2, [r3, #8]

            /* Determine if the search pointer needs to be updated. This is only done
               if the search pointer matches the block to be returned.  */
            if (current_ptr == pool_ptr -> tx_byte_pool_search)
 800c9da:	687b      	ldr	r3, [r7, #4]
 800c9dc:	695b      	ldr	r3, [r3, #20]
 800c9de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800c9e0:	429a      	cmp	r2, r3
 800c9e2:	d105      	bne.n	800c9f0 <_tx_byte_pool_search+0x1e0>
            {

                /* Yes, update the search pointer to the next block.  */
                this_block_link_ptr =   TX_UCHAR_TO_INDIRECT_UCHAR_POINTER_CONVERT(current_ptr);
 800c9e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9e6:	633b      	str	r3, [r7, #48]	; 0x30
                pool_ptr -> tx_byte_pool_search =  *this_block_link_ptr;
 800c9e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9ea:	681a      	ldr	r2, [r3, #0]
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	615a      	str	r2, [r3, #20]
 800c9f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c9f2:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800c9f4:	68fb      	ldr	r3, [r7, #12]
 800c9f6:	f383 8810 	msr	PRIMASK, r3
}
 800c9fa:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Adjust the pointer for the application.  */
            current_ptr =  TX_UCHAR_POINTER_ADD(current_ptr, (((sizeof(UCHAR *)) + (sizeof(ALIGN_TYPE)))));
 800c9fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c9fe:	3308      	adds	r3, #8
 800ca00:	653b      	str	r3, [r7, #80]	; 0x50
 800ca02:	e007      	b.n	800ca14 <_tx_byte_pool_search+0x204>
 800ca04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ca06:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ca08:	68bb      	ldr	r3, [r7, #8]
 800ca0a:	f383 8810 	msr	PRIMASK, r3
}
 800ca0e:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Set current pointer to NULL to indicate nothing was found.  */
            current_ptr =  TX_NULL;
 800ca10:	2300      	movs	r3, #0
 800ca12:	653b      	str	r3, [r7, #80]	; 0x50
        }
    }

    /* Return the search pointer.  */
    return(current_ptr);
 800ca14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	375c      	adds	r7, #92	; 0x5c
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca20:	4770      	bx	lr
 800ca22:	bf00      	nop
 800ca24:	20005e04 	.word	0x20005e04
 800ca28:	ffffeeee 	.word	0xffffeeee

0800ca2c <_tx_initialize_high_level>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID    _tx_initialize_high_level(VOID)
{
 800ca2c:	b580      	push	{r7, lr}
 800ca2e:	af00      	add	r7, sp, #0

    /* Initialize the event log, if enabled.  */
    TX_EL_INITIALIZE

    /* Call the thread control initialization function.  */
    _tx_thread_initialize();
 800ca30:	f000 f960 	bl	800ccf4 <_tx_thread_initialize>

#ifndef TX_NO_TIMER

    /* Call the timer control initialization function.  */
    _tx_timer_initialize();
 800ca34:	f000 fe14 	bl	800d660 <_tx_timer_initialize>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Call the semaphore initialization function.  */
    _tx_semaphore_initialize();
 800ca38:	4b12      	ldr	r3, [pc, #72]	; (800ca84 <_tx_initialize_high_level+0x58>)
 800ca3a:	2200      	movs	r2, #0
 800ca3c:	601a      	str	r2, [r3, #0]
 800ca3e:	4b12      	ldr	r3, [pc, #72]	; (800ca88 <_tx_initialize_high_level+0x5c>)
 800ca40:	2200      	movs	r2, #0
 800ca42:	601a      	str	r2, [r3, #0]

    /* Call the queue initialization function.  */
    _tx_queue_initialize();
 800ca44:	4b11      	ldr	r3, [pc, #68]	; (800ca8c <_tx_initialize_high_level+0x60>)
 800ca46:	2200      	movs	r2, #0
 800ca48:	601a      	str	r2, [r3, #0]
 800ca4a:	4b11      	ldr	r3, [pc, #68]	; (800ca90 <_tx_initialize_high_level+0x64>)
 800ca4c:	2200      	movs	r2, #0
 800ca4e:	601a      	str	r2, [r3, #0]

    /* Call the event flag initialization function.  */
    _tx_event_flags_initialize();
 800ca50:	4b10      	ldr	r3, [pc, #64]	; (800ca94 <_tx_initialize_high_level+0x68>)
 800ca52:	2200      	movs	r2, #0
 800ca54:	601a      	str	r2, [r3, #0]
 800ca56:	4b10      	ldr	r3, [pc, #64]	; (800ca98 <_tx_initialize_high_level+0x6c>)
 800ca58:	2200      	movs	r2, #0
 800ca5a:	601a      	str	r2, [r3, #0]

    /* Call the block pool initialization function.  */
    _tx_block_pool_initialize();
 800ca5c:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <_tx_initialize_high_level+0x70>)
 800ca5e:	2200      	movs	r2, #0
 800ca60:	601a      	str	r2, [r3, #0]
 800ca62:	4b0f      	ldr	r3, [pc, #60]	; (800caa0 <_tx_initialize_high_level+0x74>)
 800ca64:	2200      	movs	r2, #0
 800ca66:	601a      	str	r2, [r3, #0]

    /* Call the byte pool initialization function.  */
    _tx_byte_pool_initialize();
 800ca68:	4b0e      	ldr	r3, [pc, #56]	; (800caa4 <_tx_initialize_high_level+0x78>)
 800ca6a:	2200      	movs	r2, #0
 800ca6c:	601a      	str	r2, [r3, #0]
 800ca6e:	4b0e      	ldr	r3, [pc, #56]	; (800caa8 <_tx_initialize_high_level+0x7c>)
 800ca70:	2200      	movs	r2, #0
 800ca72:	601a      	str	r2, [r3, #0]

    /* Call the mutex initialization function.  */
    _tx_mutex_initialize();
 800ca74:	4b0d      	ldr	r3, [pc, #52]	; (800caac <_tx_initialize_high_level+0x80>)
 800ca76:	2200      	movs	r2, #0
 800ca78:	601a      	str	r2, [r3, #0]
 800ca7a:	4b0d      	ldr	r3, [pc, #52]	; (800cab0 <_tx_initialize_high_level+0x84>)
 800ca7c:	2200      	movs	r2, #0
 800ca7e:	601a      	str	r2, [r3, #0]
#endif
}
 800ca80:	bf00      	nop
 800ca82:	bd80      	pop	{r7, pc}
 800ca84:	20005dcc 	.word	0x20005dcc
 800ca88:	20005dd0 	.word	0x20005dd0
 800ca8c:	20005dd4 	.word	0x20005dd4
 800ca90:	20005dd8 	.word	0x20005dd8
 800ca94:	20005ddc 	.word	0x20005ddc
 800ca98:	20005de0 	.word	0x20005de0
 800ca9c:	20005dec 	.word	0x20005dec
 800caa0:	20005df0 	.word	0x20005df0
 800caa4:	20005df4 	.word	0x20005df4
 800caa8:	20005df8 	.word	0x20005df8
 800caac:	20005de4 	.word	0x20005de4
 800cab0:	20005de8 	.word	0x20005de8

0800cab4 <_tx_initialize_kernel_enter>:
/*                                            added EPK initialization,   */
/*                                            resulting in version 6.1.11 */
/*                                                                        */
/**************************************************************************/
VOID  _tx_initialize_kernel_enter(VOID)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	af00      	add	r7, sp, #0

    /* Determine if the compiler has pre-initialized ThreadX.  */
    if (_tx_thread_system_state != TX_INITIALIZE_ALMOST_DONE)
 800cab8:	4b10      	ldr	r3, [pc, #64]	; (800cafc <_tx_initialize_kernel_enter+0x48>)
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	f113 3f0f 	cmn.w	r3, #252645135	; 0xf0f0f0f
 800cac0:	d00c      	beq.n	800cadc <_tx_initialize_kernel_enter+0x28>
        /* No, the initialization still needs to take place.  */

        /* Ensure that the system state variable is set to indicate
           initialization is in progress.  Note that this variable is
           later used to represent interrupt nesting.  */
        _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800cac2:	4b0e      	ldr	r3, [pc, #56]	; (800cafc <_tx_initialize_kernel_enter+0x48>)
 800cac4:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800cac8:	601a      	str	r2, [r3, #0]
        /* Call any port specific preprocessing.  */
        TX_PORT_SPECIFIC_PRE_INITIALIZATION

        /* Invoke the low-level initialization to handle all processor specific
           initialization issues.  */
        _tx_initialize_low_level();
 800caca:	f7f3 fbd5 	bl	8000278 <_tx_initialize_low_level>

        /* Invoke the high-level initialization to exercise all of the
           ThreadX components and the application's initialization
           function.  */
        _tx_initialize_high_level();
 800cace:	f7ff ffad 	bl	800ca2c <_tx_initialize_high_level>

        /* Call any port specific post-processing.  */
        TX_PORT_SPECIFIC_POST_INITIALIZATION
 800cad2:	4b0b      	ldr	r3, [pc, #44]	; (800cb00 <_tx_initialize_kernel_enter+0x4c>)
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	3301      	adds	r3, #1
 800cad8:	4a09      	ldr	r2, [pc, #36]	; (800cb00 <_tx_initialize_kernel_enter+0x4c>)
 800cada:	6013      	str	r3, [r2, #0]
    TX_INITIALIZE_KERNEL_ENTER_EXTENSION

    /* Ensure that the system state variable is set to indicate
       initialization is in progress.  Note that this variable is
       later used to represent interrupt nesting.  */
    _tx_thread_system_state =  TX_INITIALIZE_IN_PROGRESS;
 800cadc:	4b07      	ldr	r3, [pc, #28]	; (800cafc <_tx_initialize_kernel_enter+0x48>)
 800cade:	f04f 32f0 	mov.w	r2, #4042322160	; 0xf0f0f0f0
 800cae2:	601a      	str	r2, [r3, #0]

    /* Call the application provided initialization function.  Pass the
       first available memory address to it.  */
    tx_application_define(_tx_initialize_unused_memory);
 800cae4:	4b07      	ldr	r3, [pc, #28]	; (800cb04 <_tx_initialize_kernel_enter+0x50>)
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	4618      	mov	r0, r3
 800caea:	f7f4 fb2b 	bl	8001144 <tx_application_define>

    /* Set the system state in preparation for entering the thread
       scheduler.  */
    _tx_thread_system_state =  TX_INITIALIZE_IS_FINISHED;
 800caee:	4b03      	ldr	r3, [pc, #12]	; (800cafc <_tx_initialize_kernel_enter+0x48>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]
    /* Initialize Execution Profile Kit.  */
    _tx_execution_initialize();
#endif

    /* Enter the scheduling loop to start executing threads!  */
    _tx_thread_schedule();
 800caf4:	f7f3 fbfc 	bl	80002f0 <_tx_thread_schedule>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800caf8:	bf00      	nop
 800cafa:	bd80      	pop	{r7, pc}
 800cafc:	2000000c 	.word	0x2000000c
 800cb00:	20005e9c 	.word	0x20005e9c
 800cb04:	20005dfc 	.word	0x20005dfc

0800cb08 <_tx_thread_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr, VOID (*entry_function)(ULONG id), ULONG entry_input,
                            VOID *stack_start, ULONG stack_size, UINT priority, UINT preempt_threshold,
                            ULONG time_slice, UINT auto_start)
{
 800cb08:	b580      	push	{r7, lr}
 800cb0a:	b092      	sub	sp, #72	; 0x48
 800cb0c:	af00      	add	r7, sp, #0
 800cb0e:	60f8      	str	r0, [r7, #12]
 800cb10:	60b9      	str	r1, [r7, #8]
 800cb12:	607a      	str	r2, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
TX_INTERRUPT_SAVE_AREA

TX_THREAD               *next_thread;
TX_THREAD               *previous_thread;
TX_THREAD               *saved_thread_ptr;
UINT                    saved_threshold =  ((UINT) 0);
 800cb16:	2300      	movs	r3, #0
 800cb18:	643b      	str	r3, [r7, #64]	; 0x40
#ifndef TX_DISABLE_STACK_FILLING

    /* Set the thread stack to a pattern prior to creating the initial
       stack frame.  This pattern is used by the stack checking routines
       to see how much has been used.  */
    TX_MEMSET(stack_start, ((UCHAR) TX_STACK_FILL), stack_size);
 800cb1a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb1c:	21ef      	movs	r1, #239	; 0xef
 800cb1e:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800cb20:	f001 fc37 	bl	800e392 <memset>

    /* Prepare the thread control block prior to placing it on the created
       list.  */

    /* Initialize thread control block to all zeros.  */
    TX_MEMSET(thread_ptr, 0, (sizeof(TX_THREAD)));
 800cb24:	22b0      	movs	r2, #176	; 0xb0
 800cb26:	2100      	movs	r1, #0
 800cb28:	68f8      	ldr	r0, [r7, #12]
 800cb2a:	f001 fc32 	bl	800e392 <memset>

    /* Place the supplied parameters into the thread's control block.  */
    thread_ptr -> tx_thread_name =              name_ptr;
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	68ba      	ldr	r2, [r7, #8]
 800cb32:	629a      	str	r2, [r3, #40]	; 0x28
    thread_ptr -> tx_thread_entry =             entry_function;
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	687a      	ldr	r2, [r7, #4]
 800cb38:	645a      	str	r2, [r3, #68]	; 0x44
    thread_ptr -> tx_thread_entry_parameter =   entry_input;
 800cb3a:	68fb      	ldr	r3, [r7, #12]
 800cb3c:	683a      	ldr	r2, [r7, #0]
 800cb3e:	649a      	str	r2, [r3, #72]	; 0x48
    thread_ptr -> tx_thread_stack_start =       stack_start;
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800cb44:	60da      	str	r2, [r3, #12]
    thread_ptr -> tx_thread_stack_size =        stack_size;
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800cb4a:	615a      	str	r2, [r3, #20]
    thread_ptr -> tx_thread_priority =          priority;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb50:	62da      	str	r2, [r3, #44]	; 0x2c
    thread_ptr -> tx_thread_user_priority =     priority;
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb56:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    thread_ptr -> tx_thread_time_slice =        time_slice;
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb5e:	619a      	str	r2, [r3, #24]
    thread_ptr -> tx_thread_new_time_slice =    time_slice;
 800cb60:	68fb      	ldr	r3, [r7, #12]
 800cb62:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800cb64:	61da      	str	r2, [r3, #28]
    thread_ptr -> tx_thread_inherit_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	2220      	movs	r2, #32
 800cb6a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Calculate the end of the thread's stack area.  */
    temp_ptr =  TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800cb6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cb70:	63fb      	str	r3, [r7, #60]	; 0x3c
    temp_ptr =  (TX_UCHAR_POINTER_ADD(temp_ptr, (stack_size - ((ULONG) 1))));
 800cb72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cb74:	3b01      	subs	r3, #1
 800cb76:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb78:	4413      	add	r3, r2
 800cb7a:	63fb      	str	r3, [r7, #60]	; 0x3c
    thread_ptr -> tx_thread_stack_end =         TX_UCHAR_TO_VOID_POINTER_CONVERT(temp_ptr);
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800cb80:	611a      	str	r2, [r3, #16]
    thread_ptr -> tx_thread_preempt_threshold =       preempt_threshold;
    thread_ptr -> tx_thread_user_preempt_threshold =  preempt_threshold;
#else

    /* Preemption-threshold is disabled, determine if preemption-threshold was required.  */
    if (priority != preempt_threshold)
 800cb82:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb84:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cb86:	429a      	cmp	r2, r3
 800cb88:	d007      	beq.n	800cb9a <_tx_thread_create+0x92>
    {

        /* Preemption-threshold specified. Since specific preemption-threshold is not supported,
           disable all preemption.  */
        thread_ptr -> tx_thread_preempt_threshold =       ((UINT) 0);
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	2200      	movs	r2, #0
 800cb8e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  ((UINT) 0);
 800cb90:	68fb      	ldr	r3, [r7, #12]
 800cb92:	2200      	movs	r2, #0
 800cb94:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 800cb98:	e006      	b.n	800cba8 <_tx_thread_create+0xa0>
    }
    else
    {

        /* Preemption-threshold is not specified, just setup with the priority.  */
        thread_ptr -> tx_thread_preempt_threshold =       priority;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cb9e:	63da      	str	r2, [r3, #60]	; 0x3c
        thread_ptr -> tx_thread_user_preempt_threshold =  priority;
 800cba0:	68fb      	ldr	r3, [r7, #12]
 800cba2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cba4:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
    }
#endif

    /* Now fill in the values that are required for thread initialization.  */
    thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800cba8:	68fb      	ldr	r3, [r7, #12]
 800cbaa:	2203      	movs	r2, #3
 800cbac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Setup the necessary fields in the thread timer block.  */
    TX_THREAD_CREATE_TIMEOUT_SETUP(thread_ptr)
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	4a48      	ldr	r2, [pc, #288]	; (800ccd4 <_tx_thread_create+0x1cc>)
 800cbb2:	655a      	str	r2, [r3, #84]	; 0x54
 800cbb4:	68fa      	ldr	r2, [r7, #12]
 800cbb6:	68fb      	ldr	r3, [r7, #12]
 800cbb8:	659a      	str	r2, [r3, #88]	; 0x58
    TX_THREAD_CREATE_INTERNAL_EXTENSION(thread_ptr)

    /* Call the target specific stack frame building routine to build the
       thread's initial stack and to setup the actual stack pointer in the
       control block.  */
    _tx_thread_stack_build(thread_ptr, _tx_thread_shell_entry);
 800cbba:	4947      	ldr	r1, [pc, #284]	; (800ccd8 <_tx_thread_create+0x1d0>)
 800cbbc:	68f8      	ldr	r0, [r7, #12]
 800cbbe:	f7f3 fc05 	bl	80003cc <_tx_thread_stack_build>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cbc2:	f3ef 8310 	mrs	r3, PRIMASK
 800cbc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800cbc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800cbca:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800cbcc:	b672      	cpsid	i
    return(int_posture);
 800cbce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /* Setup the highest usage stack pointer.  */
    thread_ptr -> tx_thread_stack_highest_ptr =  thread_ptr -> tx_thread_stack_ptr;
#endif

    /* Prepare to make this thread a member of the created thread list.  */
    TX_DISABLE
 800cbd0:	63bb      	str	r3, [r7, #56]	; 0x38

    /* Load the thread ID field in the thread control block.  */
    thread_ptr -> tx_thread_id =  TX_THREAD_ID;
 800cbd2:	68fb      	ldr	r3, [r7, #12]
 800cbd4:	4a41      	ldr	r2, [pc, #260]	; (800ccdc <_tx_thread_create+0x1d4>)
 800cbd6:	601a      	str	r2, [r3, #0]

    /* Place the thread on the list of created threads.  First,
       check for an empty list.  */
    if (_tx_thread_created_count == TX_EMPTY)
 800cbd8:	4b41      	ldr	r3, [pc, #260]	; (800cce0 <_tx_thread_create+0x1d8>)
 800cbda:	681b      	ldr	r3, [r3, #0]
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d10b      	bne.n	800cbf8 <_tx_thread_create+0xf0>
    {

        /* The created thread list is empty.  Add thread to empty list.  */
        _tx_thread_created_ptr =                    thread_ptr;
 800cbe0:	4a40      	ldr	r2, [pc, #256]	; (800cce4 <_tx_thread_create+0x1dc>)
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	6013      	str	r3, [r2, #0]
        thread_ptr -> tx_thread_created_next =      thread_ptr;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	68fa      	ldr	r2, [r7, #12]
 800cbea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        thread_ptr -> tx_thread_created_previous =  thread_ptr;
 800cbee:	68fb      	ldr	r3, [r7, #12]
 800cbf0:	68fa      	ldr	r2, [r7, #12]
 800cbf2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
 800cbf6:	e016      	b.n	800cc26 <_tx_thread_create+0x11e>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_thread =  _tx_thread_created_ptr;
 800cbf8:	4b3a      	ldr	r3, [pc, #232]	; (800cce4 <_tx_thread_create+0x1dc>)
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	637b      	str	r3, [r7, #52]	; 0x34
        previous_thread =  next_thread -> tx_thread_created_previous;
 800cbfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800cc04:	633b      	str	r3, [r7, #48]	; 0x30

        /* Place the new thread in the list.  */
        next_thread -> tx_thread_created_previous =  thread_ptr;
 800cc06:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc08:	68fa      	ldr	r2, [r7, #12]
 800cc0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        previous_thread -> tx_thread_created_next =  thread_ptr;
 800cc0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc10:	68fa      	ldr	r2, [r7, #12]
 800cc12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Setup this thread's created links.  */
        thread_ptr -> tx_thread_created_previous =  previous_thread;
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        thread_ptr -> tx_thread_created_next =      next_thread;
 800cc1e:	68fb      	ldr	r3, [r7, #12]
 800cc20:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800cc22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    }

    /* Increment the thread created count.  */
    _tx_thread_created_count++;
 800cc26:	4b2e      	ldr	r3, [pc, #184]	; (800cce0 <_tx_thread_create+0x1d8>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	3301      	adds	r3, #1
 800cc2c:	4a2c      	ldr	r2, [pc, #176]	; (800cce0 <_tx_thread_create+0x1d8>)
 800cc2e:	6013      	str	r3, [r2, #0]
    TX_EL_THREAD_CREATE_INSERT

#ifndef TX_NOT_INTERRUPTABLE

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cc30:	4b2d      	ldr	r3, [pc, #180]	; (800cce8 <_tx_thread_create+0x1e0>)
 800cc32:	681b      	ldr	r3, [r3, #0]
 800cc34:	3301      	adds	r3, #1
 800cc36:	4a2c      	ldr	r2, [pc, #176]	; (800cce8 <_tx_thread_create+0x1e0>)
 800cc38:	6013      	str	r3, [r2, #0]
#endif

    /* Determine if an automatic start was requested.  If so, call the resume
       thread function and then check for a preemption condition.  */
    if (auto_start == TX_AUTO_START)
 800cc3a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cc3c:	2b01      	cmp	r3, #1
 800cc3e:	d129      	bne.n	800cc94 <_tx_thread_create+0x18c>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cc40:	f3ef 8305 	mrs	r3, IPSR
 800cc44:	627b      	str	r3, [r7, #36]	; 0x24
    return(ipsr_value);
 800cc46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
    {

        /* Determine if the create call is being called from initialization.  */
        if (TX_THREAD_GET_SYSTEM_STATE() >= TX_INITIALIZE_IN_PROGRESS)
 800cc48:	4b28      	ldr	r3, [pc, #160]	; (800ccec <_tx_thread_create+0x1e4>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	4313      	orrs	r3, r2
 800cc4e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800cc52:	d30d      	bcc.n	800cc70 <_tx_thread_create+0x168>

            /* Pickup the current thread execute pointer, which corresponds to the
               highest priority thread ready to execute.  Interrupt lockout is
               not required, since interrupts are assumed to be disabled during
               initialization.  */
            saved_thread_ptr =  _tx_thread_execute_ptr;
 800cc54:	4b26      	ldr	r3, [pc, #152]	; (800ccf0 <_tx_thread_create+0x1e8>)
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	647b      	str	r3, [r7, #68]	; 0x44

            /* Determine if there is thread ready for execution.  */
            if (saved_thread_ptr != TX_NULL)
 800cc5a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d009      	beq.n	800cc74 <_tx_thread_create+0x16c>
            {

                /* Yes, a thread is ready for execution when initialization completes.  */

                /* Save the current preemption-threshold.  */
                saved_threshold =  saved_thread_ptr -> tx_thread_preempt_threshold;
 800cc60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc64:	643b      	str	r3, [r7, #64]	; 0x40

                /* For initialization, temporarily set the preemption-threshold to the
                   priority level to make sure the highest-priority thread runs once
                   initialization is complete.  */
                saved_thread_ptr -> tx_thread_preempt_threshold =  saved_thread_ptr -> tx_thread_priority;
 800cc66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc6a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc6c:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc6e:	e001      	b.n	800cc74 <_tx_thread_create+0x16c>
        }
        else
        {

            /* Simply set the saved thread pointer to NULL.  */
            saved_thread_ptr =  TX_NULL;
 800cc70:	2300      	movs	r3, #0
 800cc72:	647b      	str	r3, [r7, #68]	; 0x44
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc78:	6a3b      	ldr	r3, [r7, #32]
 800cc7a:	f383 8810 	msr	PRIMASK, r3
}
 800cc7e:	bf00      	nop

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Call the resume thread function to make this thread ready.  */
        _tx_thread_system_resume(thread_ptr);
 800cc80:	68f8      	ldr	r0, [r7, #12]
 800cc82:	f000 f979 	bl	800cf78 <_tx_thread_system_resume>
#endif

        /* Determine if the thread's preemption-threshold needs to be restored.  */
        if (saved_thread_ptr != TX_NULL)
 800cc86:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	d01e      	beq.n	800ccca <_tx_thread_create+0x1c2>
        {

            /* Yes, restore the previous highest-priority thread's preemption-threshold. This
               can only happen if this routine is called from initialization.  */
            saved_thread_ptr -> tx_thread_preempt_threshold =  saved_threshold;
 800cc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cc8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800cc90:	63da      	str	r2, [r3, #60]	; 0x3c
 800cc92:	e01a      	b.n	800ccca <_tx_thread_create+0x1c2>
 800cc94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc96:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cc98:	693b      	ldr	r3, [r7, #16]
 800cc9a:	f383 8810 	msr	PRIMASK, r3
}
 800cc9e:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cca0:	f3ef 8310 	mrs	r3, PRIMASK
 800cca4:	61bb      	str	r3, [r7, #24]
    return(posture);
 800cca6:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800cca8:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800ccaa:	b672      	cpsid	i
    return(int_posture);
 800ccac:	697b      	ldr	r3, [r7, #20]

        /* Perform any additional activities for tool or user purpose.  */
        TX_THREAD_CREATE_EXTENSION(thread_ptr)

        /* Disable interrupts.  */
        TX_DISABLE
 800ccae:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Re-enable preemption.  */
        _tx_thread_preempt_disable--;
 800ccb0:	4b0d      	ldr	r3, [pc, #52]	; (800cce8 <_tx_thread_create+0x1e0>)
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	3b01      	subs	r3, #1
 800ccb6:	4a0c      	ldr	r2, [pc, #48]	; (800cce8 <_tx_thread_create+0x1e0>)
 800ccb8:	6013      	str	r3, [r2, #0]
 800ccba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccbc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ccbe:	69fb      	ldr	r3, [r7, #28]
 800ccc0:	f383 8810 	msr	PRIMASK, r3
}
 800ccc4:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ccc6:	f000 f91d 	bl	800cf04 <_tx_thread_system_preempt_check>
#endif
    }

    /* Always return a success.  */
    return(TX_SUCCESS);
 800ccca:	2300      	movs	r3, #0
}
 800cccc:	4618      	mov	r0, r3
 800ccce:	3748      	adds	r7, #72	; 0x48
 800ccd0:	46bd      	mov	sp, r7
 800ccd2:	bd80      	pop	{r7, pc}
 800ccd4:	0800d44d 	.word	0x0800d44d
 800ccd8:	0800cd6d 	.word	0x0800cd6d
 800ccdc:	54485244 	.word	0x54485244
 800cce0:	20005e10 	.word	0x20005e10
 800cce4:	20005e0c 	.word	0x20005e0c
 800cce8:	20005e9c 	.word	0x20005e9c
 800ccec:	2000000c 	.word	0x2000000c
 800ccf0:	20005e08 	.word	0x20005e08

0800ccf4 <_tx_thread_initialize>:
/*                                            stack check error handling, */
/*                                            resulting in version 6.1.9  */   
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_initialize(VOID)
{
 800ccf4:	b580      	push	{r7, lr}
 800ccf6:	af00      	add	r7, sp, #0
       respectively.  */

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Set current thread pointer to NULL.  */
    TX_THREAD_SET_CURRENT(TX_NULL)
 800ccf8:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <_tx_thread_initialize+0x50>)
 800ccfa:	2200      	movs	r2, #0
 800ccfc:	601a      	str	r2, [r3, #0]

    /* Initialize the execute thread pointer to NULL.  */
    _tx_thread_execute_ptr =  TX_NULL;
 800ccfe:	4b12      	ldr	r3, [pc, #72]	; (800cd48 <_tx_thread_initialize+0x54>)
 800cd00:	2200      	movs	r2, #0
 800cd02:	601a      	str	r2, [r3, #0]
 800cd04:	4b11      	ldr	r3, [pc, #68]	; (800cd4c <_tx_thread_initialize+0x58>)
 800cd06:	2200      	movs	r2, #0
 800cd08:	601a      	str	r2, [r3, #0]
#endif
#endif

    /* Setup the highest priority variable to the max, indicating no thread is currently
       ready.  */
    _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800cd0a:	4b11      	ldr	r3, [pc, #68]	; (800cd50 <_tx_thread_initialize+0x5c>)
 800cd0c:	2220      	movs	r2, #32
 800cd0e:	601a      	str	r2, [r3, #0]


#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the array of priority head pointers.  */
    TX_MEMSET(&_tx_thread_priority_list[0], 0, (sizeof(_tx_thread_priority_list)));
 800cd10:	2280      	movs	r2, #128	; 0x80
 800cd12:	2100      	movs	r1, #0
 800cd14:	480f      	ldr	r0, [pc, #60]	; (800cd54 <_tx_thread_initialize+0x60>)
 800cd16:	f001 fb3c 	bl	800e392 <memset>

    /* Initialize the head pointer of the created threads list and the
       number of threads created.  */
    _tx_thread_created_ptr =        TX_NULL;
 800cd1a:	4b0f      	ldr	r3, [pc, #60]	; (800cd58 <_tx_thread_initialize+0x64>)
 800cd1c:	2200      	movs	r2, #0
 800cd1e:	601a      	str	r2, [r3, #0]
    _tx_thread_created_count =      TX_EMPTY;
 800cd20:	4b0e      	ldr	r3, [pc, #56]	; (800cd5c <_tx_thread_initialize+0x68>)
 800cd22:	2200      	movs	r2, #0
 800cd24:	601a      	str	r2, [r3, #0]

    /* Clear the global preempt disable variable.  */
    _tx_thread_preempt_disable =    ((UINT) 0);
 800cd26:	4b0e      	ldr	r3, [pc, #56]	; (800cd60 <_tx_thread_initialize+0x6c>)
 800cd28:	2200      	movs	r2, #0
 800cd2a:	601a      	str	r2, [r3, #0]

    /* Initialize the thread mutex release function pointer.  */
    _tx_thread_mutex_release =      TX_NULL;
 800cd2c:	4b0d      	ldr	r3, [pc, #52]	; (800cd64 <_tx_thread_initialize+0x70>)
 800cd2e:	2200      	movs	r2, #0
 800cd30:	601a      	str	r2, [r3, #0]
#endif
#ifdef TX_DISABLE_REDUNDANT_CLEARING
                            | (((ULONG) 1) << 18)
#endif
#ifdef TX_DISABLE_NOTIFY_CALLBACKS
                            | (((ULONG) 1) << 17)
 800cd32:	4b0d      	ldr	r3, [pc, #52]	; (800cd68 <_tx_thread_initialize+0x74>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	f043 7385 	orr.w	r3, r3, #17432576	; 0x10a0000
    _tx_build_options =  _tx_build_options 
 800cd3a:	4a0b      	ldr	r2, [pc, #44]	; (800cd68 <_tx_thread_initialize+0x74>)
 800cd3c:	6013      	str	r3, [r2, #0]
#endif
#if TX_PORT_SPECIFIC_BUILD_OPTIONS != 0
                            | TX_PORT_SPECIFIC_BUILD_OPTIONS
#endif
                            ;
}
 800cd3e:	bf00      	nop
 800cd40:	bd80      	pop	{r7, pc}
 800cd42:	bf00      	nop
 800cd44:	20005e04 	.word	0x20005e04
 800cd48:	20005e08 	.word	0x20005e08
 800cd4c:	20005e14 	.word	0x20005e14
 800cd50:	20005e18 	.word	0x20005e18
 800cd54:	20005e1c 	.word	0x20005e1c
 800cd58:	20005e0c 	.word	0x20005e0c
 800cd5c:	20005e10 	.word	0x20005e10
 800cd60:	20005e9c 	.word	0x20005e9c
 800cd64:	20005ea0 	.word	0x20005ea0
 800cd68:	20005ea4 	.word	0x20005ea4

0800cd6c <_tx_thread_shell_entry>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_shell_entry(VOID)
{
 800cd6c:	b580      	push	{r7, lr}
 800cd6e:	b088      	sub	sp, #32
 800cd70:	af00      	add	r7, sp, #0
VOID            (*entry_exit_notify)(TX_THREAD *notify_thread_ptr, UINT type);
#endif


    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800cd72:	4b21      	ldr	r3, [pc, #132]	; (800cdf8 <_tx_thread_shell_entry+0x8c>)
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	61fb      	str	r3, [r7, #28]
        (entry_exit_notify)(thread_ptr, TX_THREAD_ENTRY);
    }
#endif

    /* Call current thread's entry function.  */
    (thread_ptr -> tx_thread_entry) (thread_ptr -> tx_thread_entry_parameter);
 800cd78:	69fb      	ldr	r3, [r7, #28]
 800cd7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cd7c:	69fa      	ldr	r2, [r7, #28]
 800cd7e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800cd80:	4610      	mov	r0, r2
 800cd82:	4798      	blx	r3

    /* Suspend thread with a "completed" state.  */

    /* Determine if the application is using mutexes.  */
    if (_tx_thread_mutex_release != TX_NULL)
 800cd84:	4b1d      	ldr	r3, [pc, #116]	; (800cdfc <_tx_thread_shell_entry+0x90>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d003      	beq.n	800cd94 <_tx_thread_shell_entry+0x28>
    {

        /* Yes, call the mutex release function via a function pointer that
           is setup during mutex initialization.  */
        (_tx_thread_mutex_release)(thread_ptr);
 800cd8c:	4b1b      	ldr	r3, [pc, #108]	; (800cdfc <_tx_thread_shell_entry+0x90>)
 800cd8e:	681b      	ldr	r3, [r3, #0]
 800cd90:	69f8      	ldr	r0, [r7, #28]
 800cd92:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cd94:	f3ef 8310 	mrs	r3, PRIMASK
 800cd98:	607b      	str	r3, [r7, #4]
    return(posture);
 800cd9a:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800cd9c:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800cd9e:	b672      	cpsid	i
    return(int_posture);
 800cda0:	683b      	ldr	r3, [r7, #0]
    }

    /* Lockout interrupts while the thread state is setup.  */
    TX_DISABLE
 800cda2:	61bb      	str	r3, [r7, #24]
    entry_exit_notify =  thread_ptr -> tx_thread_entry_exit_notify;
#endif

    /* Set the status to suspending, in order to indicate the suspension
       is in progress.  */
    thread_ptr -> tx_thread_state =  TX_COMPLETED;
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	2201      	movs	r2, #1
 800cda8:	631a      	str	r2, [r3, #48]	; 0x30
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Set the suspending flag. */
    thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800cdaa:	69fb      	ldr	r3, [r7, #28]
 800cdac:	2201      	movs	r2, #1
 800cdae:	639a      	str	r2, [r3, #56]	; 0x38

    /* Setup for no timeout period.  */
    thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cdb0:	69fb      	ldr	r3, [r7, #28]
 800cdb2:	2200      	movs	r2, #0
 800cdb4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Temporarily disable preemption.  */
    _tx_thread_preempt_disable++;
 800cdb6:	4b12      	ldr	r3, [pc, #72]	; (800ce00 <_tx_thread_shell_entry+0x94>)
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	3301      	adds	r3, #1
 800cdbc:	4a10      	ldr	r2, [pc, #64]	; (800ce00 <_tx_thread_shell_entry+0x94>)
 800cdbe:	6013      	str	r3, [r2, #0]
 800cdc0:	69bb      	ldr	r3, [r7, #24]
 800cdc2:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cdc4:	68bb      	ldr	r3, [r7, #8]
 800cdc6:	f383 8810 	msr	PRIMASK, r3
}
 800cdca:	bf00      	nop
    __asm__ volatile (" MRS  %0,CONTROL ": "=r" (control_value) );
 800cdcc:	f3ef 8314 	mrs	r3, CONTROL
 800cdd0:	60fb      	str	r3, [r7, #12]
    return(control_value);
 800cdd2:	68fb      	ldr	r3, [r7, #12]

    /* Restore interrupts.  */
    TX_RESTORE

    /* Perform any additional activities for tool or user purpose.  */
    TX_THREAD_COMPLETED_EXTENSION(thread_ptr)
 800cdd4:	617b      	str	r3, [r7, #20]
 800cdd6:	697b      	ldr	r3, [r7, #20]
 800cdd8:	f023 0304 	bic.w	r3, r3, #4
 800cddc:	617b      	str	r3, [r7, #20]
 800cdde:	697b      	ldr	r3, [r7, #20]
 800cde0:	613b      	str	r3, [r7, #16]
    __asm__ volatile (" MSR  CONTROL,%0": : "r" (control_value): "memory" );
 800cde2:	693b      	ldr	r3, [r7, #16]
 800cde4:	f383 8814 	msr	CONTROL, r3
}
 800cde8:	bf00      	nop
        (entry_exit_notify)(thread_ptr, TX_THREAD_EXIT);
    }
#endif

    /* Call actual thread suspension routine.  */
    _tx_thread_system_suspend(thread_ptr);
 800cdea:	69f8      	ldr	r0, [r7, #28]
 800cdec:	f000 f9c4 	bl	800d178 <_tx_thread_system_suspend>
#ifdef TX_SAFETY_CRITICAL

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif
}
 800cdf0:	bf00      	nop
 800cdf2:	3720      	adds	r7, #32
 800cdf4:	46bd      	mov	sp, r7
 800cdf6:	bd80      	pop	{r7, pc}
 800cdf8:	20005e04 	.word	0x20005e04
 800cdfc:	20005ea0 	.word	0x20005ea0
 800ce00:	20005e9c 	.word	0x20005e9c

0800ce04 <_tx_thread_sleep>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_thread_sleep(ULONG timer_ticks)
{
 800ce04:	b580      	push	{r7, lr}
 800ce06:	b08e      	sub	sp, #56	; 0x38
 800ce08:	af00      	add	r7, sp, #0
 800ce0a:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800ce0c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce10:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800ce12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800ce14:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800ce16:	b672      	cpsid	i
    return(int_posture);
 800ce18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
UINT            status;
TX_THREAD       *thread_ptr;


    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800ce1a:	633b      	str	r3, [r7, #48]	; 0x30

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800ce1c:	4b35      	ldr	r3, [pc, #212]	; (800cef4 <_tx_thread_sleep+0xf0>)
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Determine if this is a legal request.  */

    /* Is there a current thread?  */
    if (thread_ptr == TX_NULL)
 800ce22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce24:	2b00      	cmp	r3, #0
 800ce26:	d108      	bne.n	800ce3a <_tx_thread_sleep+0x36>
 800ce28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce2a:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce2c:	6a3b      	ldr	r3, [r7, #32]
 800ce2e:	f383 8810 	msr	PRIMASK, r3
}
 800ce32:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ce34:	2313      	movs	r3, #19
 800ce36:	637b      	str	r3, [r7, #52]	; 0x34
 800ce38:	e056      	b.n	800cee8 <_tx_thread_sleep+0xe4>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800ce3a:	f3ef 8305 	mrs	r3, IPSR
 800ce3e:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800ce40:	69fa      	ldr	r2, [r7, #28]
    }

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800ce42:	4b2d      	ldr	r3, [pc, #180]	; (800cef8 <_tx_thread_sleep+0xf4>)
 800ce44:	681b      	ldr	r3, [r3, #0]
 800ce46:	4313      	orrs	r3, r2
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d008      	beq.n	800ce5e <_tx_thread_sleep+0x5a>
 800ce4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4e:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce50:	69bb      	ldr	r3, [r7, #24]
 800ce52:	f383 8810 	msr	PRIMASK, r3
}
 800ce56:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ce58:	2313      	movs	r3, #19
 800ce5a:	637b      	str	r3, [r7, #52]	; 0x34
 800ce5c:	e044      	b.n	800cee8 <_tx_thread_sleep+0xe4>
    }

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Is the caller the system timer thread?  */
    else if (thread_ptr == &_tx_timer_thread)
 800ce5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce60:	4a26      	ldr	r2, [pc, #152]	; (800cefc <_tx_thread_sleep+0xf8>)
 800ce62:	4293      	cmp	r3, r2
 800ce64:	d108      	bne.n	800ce78 <_tx_thread_sleep+0x74>
 800ce66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce68:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce6a:	697b      	ldr	r3, [r7, #20]
 800ce6c:	f383 8810 	msr	PRIMASK, r3
}
 800ce70:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Illegal caller of this service.  */
        status =  TX_CALLER_ERROR;
 800ce72:	2313      	movs	r3, #19
 800ce74:	637b      	str	r3, [r7, #52]	; 0x34
 800ce76:	e037      	b.n	800cee8 <_tx_thread_sleep+0xe4>
    }
#endif

    /* Determine if the requested number of ticks is zero.  */
    else if (timer_ticks == ((ULONG) 0))
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	2b00      	cmp	r3, #0
 800ce7c:	d108      	bne.n	800ce90 <_tx_thread_sleep+0x8c>
 800ce7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce80:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce82:	693b      	ldr	r3, [r7, #16]
 800ce84:	f383 8810 	msr	PRIMASK, r3
}
 800ce88:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Just return with a successful status.  */
        status =  TX_SUCCESS;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	637b      	str	r3, [r7, #52]	; 0x34
 800ce8e:	e02b      	b.n	800cee8 <_tx_thread_sleep+0xe4>
    }
    else
    {

        /* Determine if the preempt disable flag is non-zero.  */
        if (_tx_thread_preempt_disable != ((UINT) 0))
 800ce90:	4b1b      	ldr	r3, [pc, #108]	; (800cf00 <_tx_thread_sleep+0xfc>)
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d008      	beq.n	800ceaa <_tx_thread_sleep+0xa6>
 800ce98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce9a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	f383 8810 	msr	PRIMASK, r3
}
 800cea2:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Suspension is not allowed if the preempt disable flag is non-zero at this point - return error completion.  */
            status =  TX_CALLER_ERROR;
 800cea4:	2313      	movs	r3, #19
 800cea6:	637b      	str	r3, [r7, #52]	; 0x34
 800cea8:	e01e      	b.n	800cee8 <_tx_thread_sleep+0xe4>
            TX_EL_THREAD_SLEEP_INSERT

            /* Suspend the current thread.  */

            /* Set the state to suspended.  */
            thread_ptr -> tx_thread_state =    TX_SLEEP;
 800ceaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceac:	2204      	movs	r2, #4
 800ceae:	631a      	str	r2, [r3, #48]	; 0x30
            /* Restore interrupts.  */
            TX_RESTORE
#else

            /* Set the suspending flag. */
            thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800ceb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb2:	2201      	movs	r2, #1
 800ceb4:	639a      	str	r2, [r3, #56]	; 0x38

            /* Initialize the status to successful.  */
            thread_ptr -> tx_thread_suspend_status =  TX_SUCCESS;
 800ceb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ceb8:	2200      	movs	r2, #0
 800ceba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

            /* Setup the timeout period.  */
            thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  timer_ticks;
 800cebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cec0:	687a      	ldr	r2, [r7, #4]
 800cec2:	64da      	str	r2, [r3, #76]	; 0x4c

            /* Temporarily disable preemption.  */
            _tx_thread_preempt_disable++;
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <_tx_thread_sleep+0xfc>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	3301      	adds	r3, #1
 800ceca:	4a0d      	ldr	r2, [pc, #52]	; (800cf00 <_tx_thread_sleep+0xfc>)
 800cecc:	6013      	str	r3, [r2, #0]
 800cece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ced0:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800ced2:	68bb      	ldr	r3, [r7, #8]
 800ced4:	f383 8810 	msr	PRIMASK, r3
}
 800ced8:	bf00      	nop

            /* Restore interrupts.  */
            TX_RESTORE

            /* Call actual thread suspension routine.  */
            _tx_thread_system_suspend(thread_ptr);
 800ceda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cedc:	f000 f94c 	bl	800d178 <_tx_thread_system_suspend>
#endif

            /* Return status to the caller.  */
            status =  thread_ptr -> tx_thread_suspend_status;
 800cee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cee2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cee6:	637b      	str	r3, [r7, #52]	; 0x34
        }
    }

    /* Return completion status.  */
    return(status);
 800cee8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3738      	adds	r7, #56	; 0x38
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	20005e04 	.word	0x20005e04
 800cef8:	2000000c 	.word	0x2000000c
 800cefc:	20005f4c 	.word	0x20005f4c
 800cf00:	20005e9c 	.word	0x20005e9c

0800cf04 <_tx_thread_system_preempt_check>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_preempt_check(VOID)
{
 800cf04:	b480      	push	{r7}
 800cf06:	b089      	sub	sp, #36	; 0x24
 800cf08:	af00      	add	r7, sp, #0
TX_THREAD       *current_thread;
TX_THREAD       *thread_ptr;


    /* Combine the system state and preempt disable flags into one for comparison.  */
    TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800cf0a:	4b17      	ldr	r3, [pc, #92]	; (800cf68 <_tx_thread_system_preempt_check+0x64>)
 800cf0c:	681b      	ldr	r3, [r3, #0]
 800cf0e:	61fb      	str	r3, [r7, #28]

    /* Determine if we are in a system state (ISR or Initialization) or internal preemption is disabled.  */
    if (combined_flags == ((ULONG) 0))
 800cf10:	69fb      	ldr	r3, [r7, #28]
 800cf12:	2b00      	cmp	r3, #0
 800cf14:	d121      	bne.n	800cf5a <_tx_thread_system_preempt_check+0x56>
    {

        /* No, at thread execution level so continue checking for preemption.  */

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(current_thread)
 800cf16:	4b15      	ldr	r3, [pc, #84]	; (800cf6c <_tx_thread_system_preempt_check+0x68>)
 800cf18:	681b      	ldr	r3, [r3, #0]
 800cf1a:	61bb      	str	r3, [r7, #24]

        /* Pickup the next execute pointer.  */
        thread_ptr =  _tx_thread_execute_ptr;
 800cf1c:	4b14      	ldr	r3, [pc, #80]	; (800cf70 <_tx_thread_system_preempt_check+0x6c>)
 800cf1e:	681b      	ldr	r3, [r3, #0]
 800cf20:	617b      	str	r3, [r7, #20]

        /* Determine if preemption should take place.  */
        if (current_thread != thread_ptr)
 800cf22:	69ba      	ldr	r2, [r7, #24]
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d017      	beq.n	800cf5a <_tx_thread_system_preempt_check+0x56>
__attribute__( ( always_inline ) ) static inline void _tx_thread_system_return_inline(void)
{
UINT interrupt_save;

    /* Set PendSV to invoke ThreadX scheduler.  */
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800cf2a:	4b12      	ldr	r3, [pc, #72]	; (800cf74 <_tx_thread_system_preempt_check+0x70>)
 800cf2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf30:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800cf32:	f3ef 8305 	mrs	r3, IPSR
 800cf36:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800cf38:	693b      	ldr	r3, [r7, #16]
    if (_tx_ipsr_get() == 0)
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d10c      	bne.n	800cf58 <_tx_thread_system_preempt_check+0x54>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf3e:	f3ef 8310 	mrs	r3, PRIMASK
 800cf42:	60fb      	str	r3, [r7, #12]
    return(posture);
 800cf44:	68fb      	ldr	r3, [r7, #12]
    {
        interrupt_save = __get_interrupt_posture();
 800cf46:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800cf48:	b662      	cpsie	i
}
 800cf4a:	bf00      	nop
 800cf4c:	68bb      	ldr	r3, [r7, #8]
 800cf4e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800cf50:	687b      	ldr	r3, [r7, #4]
 800cf52:	f383 8810 	msr	PRIMASK, r3
}
 800cf56:	bf00      	nop
#else
        __enable_interrupts();
#endif
        __restore_interrupt(interrupt_save);
    }
}
 800cf58:	bf00      	nop

            /* Return to the system so the higher priority thread can be scheduled.  */
            _tx_thread_system_return();
        }
    }
}
 800cf5a:	bf00      	nop
 800cf5c:	3724      	adds	r7, #36	; 0x24
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf64:	4770      	bx	lr
 800cf66:	bf00      	nop
 800cf68:	20005e9c 	.word	0x20005e9c
 800cf6c:	20005e04 	.word	0x20005e04
 800cf70:	20005e08 	.word	0x20005e08
 800cf74:	e000ed04 	.word	0xe000ed04

0800cf78 <_tx_thread_system_resume>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_resume(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b096      	sub	sp, #88	; 0x58
 800cf7c:	af00      	add	r7, sp, #0
 800cf7e:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800cf80:	f3ef 8310 	mrs	r3, PRIMASK
 800cf84:	637b      	str	r3, [r7, #52]	; 0x34
    return(posture);
 800cf86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    int_posture = __get_interrupt_posture();
 800cf88:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("CPSID i" : : : "memory");
 800cf8a:	b672      	cpsid	i
    return(int_posture);
 800cf8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being resumed.  */
    TX_DISABLE
 800cf8e:	657b      	str	r3, [r7, #84]	; 0x54

#ifndef TX_NO_TIMER

    /* Deactivate the timeout timer if necessary.  */
    if (thread_ptr -> tx_thread_timer.tx_timer_internal_list_head != TX_NULL)
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d005      	beq.n	800cfa4 <_tx_thread_system_resume+0x2c>
    {

        /* Deactivate the thread's timeout timer.  */
        _tx_timer_system_deactivate(&(thread_ptr -> tx_thread_timer));
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	334c      	adds	r3, #76	; 0x4c
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	f000 fc3d 	bl	800d81c <_tx_timer_system_deactivate>
 800cfa2:	e002      	b.n	800cfaa <_tx_thread_system_resume+0x32>
    }
    else
    {

        /* Clear the remaining time to ensure timer doesn't get activated.  */
        thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks =  ((ULONG) 0);
 800cfa4:	687b      	ldr	r3, [r7, #4]
 800cfa6:	2200      	movs	r2, #0
 800cfa8:	64da      	str	r2, [r3, #76]	; 0x4c
        time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800cfaa:	4b6c      	ldr	r3, [pc, #432]	; (800d15c <_tx_thread_system_resume+0x1e4>)
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	3b01      	subs	r3, #1
 800cfb0:	4a6a      	ldr	r2, [pc, #424]	; (800d15c <_tx_thread_system_resume+0x1e4>)
 800cfb2:	6013      	str	r3, [r2, #0]

    /* Determine if the thread is in the process of suspending.  If so, the thread
       control block is already on the linked list so nothing needs to be done.  */
    if (thread_ptr -> tx_thread_suspending == TX_FALSE)
 800cfb4:	687b      	ldr	r3, [r7, #4]
 800cfb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	f040 8083 	bne.w	800d0c4 <_tx_thread_system_resume+0x14c>
    {

        /* Thread is not in the process of suspending. Now check to make sure the thread
           has not already been resumed.  */
        if (thread_ptr -> tx_thread_state != TX_READY)
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	f000 8097 	beq.w	800d0f6 <_tx_thread_system_resume+0x17e>
        {

            /* No, now check to see if the delayed suspension flag is set.  */
            if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800cfcc:	2b00      	cmp	r3, #0
 800cfce:	d172      	bne.n	800d0b6 <_tx_thread_system_resume+0x13e>
                /* Resume the thread!  */

                /* Make this thread ready.  */

                /* Change the state to ready.  */
                thread_ptr -> tx_thread_state =  TX_READY;
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2200      	movs	r2, #0
 800cfd4:	631a      	str	r2, [r3, #48]	; 0x30

                /* Pickup priority of thread.  */
                priority =  thread_ptr -> tx_thread_priority;
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfda:	653b      	str	r3, [r7, #80]	; 0x50
                thread_ptr -> tx_thread_performance_resume_count++;
#endif

                /* Determine if there are other threads at this priority that are
                   ready.  */
                head_ptr =  _tx_thread_priority_list[priority];
 800cfdc:	4a60      	ldr	r2, [pc, #384]	; (800d160 <_tx_thread_system_resume+0x1e8>)
 800cfde:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cfe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cfe4:	64fb      	str	r3, [r7, #76]	; 0x4c
                if (head_ptr == TX_NULL)
 800cfe6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d154      	bne.n	800d096 <_tx_thread_system_resume+0x11e>
                {

                    /* First thread at this priority ready.  Add to the front of the list.  */
                    _tx_thread_priority_list[priority] =       thread_ptr;
 800cfec:	495c      	ldr	r1, [pc, #368]	; (800d160 <_tx_thread_system_resume+0x1e8>)
 800cfee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cff0:	687a      	ldr	r2, [r7, #4]
 800cff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    thread_ptr -> tx_thread_ready_next =       thread_ptr;
 800cff6:	687b      	ldr	r3, [r7, #4]
 800cff8:	687a      	ldr	r2, [r7, #4]
 800cffa:	621a      	str	r2, [r3, #32]
                    thread_ptr -> tx_thread_ready_previous =   thread_ptr;
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	687a      	ldr	r2, [r7, #4]
 800d000:	625a      	str	r2, [r3, #36]	; 0x24
                    TX_DIV32_BIT_SET(priority, priority_bit)
                    _tx_thread_priority_map_active =  _tx_thread_priority_map_active | priority_bit;
#endif

                    /* Or in the thread's priority bit.  */
                    TX_MOD32_BIT_SET(priority, priority_bit)
 800d002:	2201      	movs	r2, #1
 800d004:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d006:	fa02 f303 	lsl.w	r3, r2, r3
 800d00a:	647b      	str	r3, [r7, #68]	; 0x44
                    _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] | priority_bit;
 800d00c:	4b55      	ldr	r3, [pc, #340]	; (800d164 <_tx_thread_system_resume+0x1ec>)
 800d00e:	681a      	ldr	r2, [r3, #0]
 800d010:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d012:	4313      	orrs	r3, r2
 800d014:	4a53      	ldr	r2, [pc, #332]	; (800d164 <_tx_thread_system_resume+0x1ec>)
 800d016:	6013      	str	r3, [r2, #0]

                    /* Determine if this newly ready thread is the highest priority.  */
                    if (priority < _tx_thread_highest_priority)
 800d018:	4b53      	ldr	r3, [pc, #332]	; (800d168 <_tx_thread_system_resume+0x1f0>)
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d01e:	429a      	cmp	r2, r3
 800d020:	d269      	bcs.n	800d0f6 <_tx_thread_system_resume+0x17e>
                    {

                        /* A new highest priority thread is present. */

                        /* Update the highest priority variable.  */
                        _tx_thread_highest_priority =  priority;
 800d022:	4a51      	ldr	r2, [pc, #324]	; (800d168 <_tx_thread_system_resume+0x1f0>)
 800d024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d026:	6013      	str	r3, [r2, #0]

                        /* Pickup the execute pointer. Since it is going to be referenced multiple
                           times, it is placed in a local variable.  */
                        execute_ptr =  _tx_thread_execute_ptr;
 800d028:	4b50      	ldr	r3, [pc, #320]	; (800d16c <_tx_thread_system_resume+0x1f4>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	643b      	str	r3, [r7, #64]	; 0x40

                        /* Determine if no thread is currently executing.  */
                        if (execute_ptr == TX_NULL)
 800d02e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d030:	2b00      	cmp	r3, #0
 800d032:	d103      	bne.n	800d03c <_tx_thread_system_resume+0xc4>
                        {

                            /* Simply setup the execute pointer.  */
                            _tx_thread_execute_ptr =  thread_ptr;
 800d034:	4a4d      	ldr	r2, [pc, #308]	; (800d16c <_tx_thread_system_resume+0x1f4>)
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	6013      	str	r3, [r2, #0]
 800d03a:	e05c      	b.n	800d0f6 <_tx_thread_system_resume+0x17e>
                        {

                            /* Another thread has been scheduled for execution.  */

                            /* Check to see if this is a higher priority thread and determine if preemption is allowed.  */
                            if (priority < execute_ptr -> tx_thread_preempt_threshold)
 800d03c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d03e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d040:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d042:	429a      	cmp	r2, r3
 800d044:	d257      	bcs.n	800d0f6 <_tx_thread_system_resume+0x17e>
                                execute_ptr -> tx_thread_performance_last_preempting_thread =  thread_ptr;

#endif

                                /* Yes, modify the execute thread pointer.  */
                                _tx_thread_execute_ptr =  thread_ptr;
 800d046:	4a49      	ldr	r2, [pc, #292]	; (800d16c <_tx_thread_system_resume+0x1f4>)
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	6013      	str	r3, [r2, #0]
 800d04c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d04e:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d052:	f383 8810 	msr	PRIMASK, r3
}
 800d056:	bf00      	nop
                                TX_THREAD_STACK_CHECK(thread_ptr)
#endif

                                /* Now determine if preemption should take place. This is only possible if the current thread pointer is
                                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d058:	4b40      	ldr	r3, [pc, #256]	; (800d15c <_tx_thread_system_resume+0x1e4>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	63fb      	str	r3, [r7, #60]	; 0x3c
                                if (combined_flags == ((ULONG) 0))
 800d05e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d060:	2b00      	cmp	r3, #0
 800d062:	d174      	bne.n	800d14e <_tx_thread_system_resume+0x1d6>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d064:	4b42      	ldr	r3, [pc, #264]	; (800d170 <_tx_thread_system_resume+0x1f8>)
 800d066:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d06a:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d06c:	f3ef 8305 	mrs	r3, IPSR
 800d070:	62bb      	str	r3, [r7, #40]	; 0x28
    return(ipsr_value);
 800d072:	6abb      	ldr	r3, [r7, #40]	; 0x28
    if (_tx_ipsr_get() == 0)
 800d074:	2b00      	cmp	r3, #0
 800d076:	d10c      	bne.n	800d092 <_tx_thread_system_resume+0x11a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d078:	f3ef 8310 	mrs	r3, PRIMASK
 800d07c:	627b      	str	r3, [r7, #36]	; 0x24
    return(posture);
 800d07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        interrupt_save = __get_interrupt_posture();
 800d080:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d082:	b662      	cpsie	i
}
 800d084:	bf00      	nop
 800d086:	6a3b      	ldr	r3, [r7, #32]
 800d088:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d08a:	69fb      	ldr	r3, [r7, #28]
 800d08c:	f383 8810 	msr	PRIMASK, r3
}
 800d090:	bf00      	nop
}
 800d092:	bf00      	nop
                                    /* Preemption is needed - return to the system!  */
                                    _tx_thread_system_return();
                                }

                                /* Return in-line when MISRA is not enabled.  */
                                return;
 800d094:	e05b      	b.n	800d14e <_tx_thread_system_resume+0x1d6>
                {

                    /* No, there are other threads at this priority already ready.  */

                    /* Just add this thread to the priority list.  */
                    tail_ptr =                                 head_ptr -> tx_thread_ready_previous;
 800d096:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d09a:	64bb      	str	r3, [r7, #72]	; 0x48
                    tail_ptr -> tx_thread_ready_next =         thread_ptr;
 800d09c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d09e:	687a      	ldr	r2, [r7, #4]
 800d0a0:	621a      	str	r2, [r3, #32]
                    head_ptr -> tx_thread_ready_previous =     thread_ptr;
 800d0a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d0a4:	687a      	ldr	r2, [r7, #4]
 800d0a6:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_previous =   tail_ptr;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d0ac:	625a      	str	r2, [r3, #36]	; 0x24
                    thread_ptr -> tx_thread_ready_next =       head_ptr;
 800d0ae:	687b      	ldr	r3, [r7, #4]
 800d0b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d0b2:	621a      	str	r2, [r3, #32]
 800d0b4:	e01f      	b.n	800d0f6 <_tx_thread_system_resume+0x17e>
            /* Else, delayed suspend flag was set.  */
            else
            {

                /* Clear the delayed suspend flag and change the state.  */
                thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	2200      	movs	r2, #0
 800d0ba:	635a      	str	r2, [r3, #52]	; 0x34
                thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2203      	movs	r2, #3
 800d0c0:	631a      	str	r2, [r3, #48]	; 0x30
 800d0c2:	e018      	b.n	800d0f6 <_tx_thread_system_resume+0x17e>
        /* A resumption occurred in the middle of a previous thread suspension.  */

        /* Make sure the type of suspension under way is not a terminate or
           thread completion.  In either of these cases, do not void the
           interrupted suspension processing.  */
        if (thread_ptr -> tx_thread_state != TX_COMPLETED)
 800d0c4:	687b      	ldr	r3, [r7, #4]
 800d0c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0c8:	2b01      	cmp	r3, #1
 800d0ca:	d014      	beq.n	800d0f6 <_tx_thread_system_resume+0x17e>
        {

            /* Make sure the thread isn't terminated.  */
            if (thread_ptr -> tx_thread_state != TX_TERMINATED)
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d0d0:	2b02      	cmp	r3, #2
 800d0d2:	d010      	beq.n	800d0f6 <_tx_thread_system_resume+0x17e>
            {

                /* No, now check to see if the delayed suspension flag is set.  */
                if (thread_ptr -> tx_thread_delayed_suspend == TX_FALSE)
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d0d8:	2b00      	cmp	r3, #0
 800d0da:	d106      	bne.n	800d0ea <_tx_thread_system_resume+0x172>
                {

                    /* Clear the suspending flag.  */
                    thread_ptr -> tx_thread_suspending =   TX_FALSE;
 800d0dc:	687b      	ldr	r3, [r7, #4]
 800d0de:	2200      	movs	r2, #0
 800d0e0:	639a      	str	r2, [r3, #56]	; 0x38

                    /* Restore the state to ready.  */
                    thread_ptr -> tx_thread_state =        TX_READY;
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	2200      	movs	r2, #0
 800d0e6:	631a      	str	r2, [r3, #48]	; 0x30
 800d0e8:	e005      	b.n	800d0f6 <_tx_thread_system_resume+0x17e>
                }
                else
                {

                    /* Clear the delayed suspend flag and change the state.  */
                    thread_ptr -> tx_thread_delayed_suspend =  TX_FALSE;
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	2200      	movs	r2, #0
 800d0ee:	635a      	str	r2, [r3, #52]	; 0x34
                    thread_ptr -> tx_thread_state =            TX_SUSPENDED;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	2203      	movs	r2, #3
 800d0f4:	631a      	str	r2, [r3, #48]	; 0x30
        }
    }
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d0f6:	4b1f      	ldr	r3, [pc, #124]	; (800d174 <_tx_thread_system_resume+0x1fc>)
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	63bb      	str	r3, [r7, #56]	; 0x38
 800d0fc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d0fe:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d100:	69bb      	ldr	r3, [r7, #24]
 800d102:	f383 8810 	msr	PRIMASK, r3
}
 800d106:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d108:	4b18      	ldr	r3, [pc, #96]	; (800d16c <_tx_thread_system_resume+0x1f4>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d10e:	429a      	cmp	r2, r3
 800d110:	d020      	beq.n	800d154 <_tx_thread_system_resume+0x1dc>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Now determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d112:	4b12      	ldr	r3, [pc, #72]	; (800d15c <_tx_thread_system_resume+0x1e4>)
 800d114:	681b      	ldr	r3, [r3, #0]
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        if (combined_flags == ((ULONG) 0))
 800d118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d11a      	bne.n	800d154 <_tx_thread_system_resume+0x1dc>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d11e:	4b14      	ldr	r3, [pc, #80]	; (800d170 <_tx_thread_system_resume+0x1f8>)
 800d120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d124:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d126:	f3ef 8305 	mrs	r3, IPSR
 800d12a:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800d12c:	697b      	ldr	r3, [r7, #20]
    if (_tx_ipsr_get() == 0)
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d10f      	bne.n	800d152 <_tx_thread_system_resume+0x1da>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d132:	f3ef 8310 	mrs	r3, PRIMASK
 800d136:	613b      	str	r3, [r7, #16]
    return(posture);
 800d138:	693b      	ldr	r3, [r7, #16]
        interrupt_save = __get_interrupt_posture();
 800d13a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d13c:	b662      	cpsie	i
}
 800d13e:	bf00      	nop
 800d140:	68fb      	ldr	r3, [r7, #12]
 800d142:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d144:	68bb      	ldr	r3, [r7, #8]
 800d146:	f383 8810 	msr	PRIMASK, r3
}
 800d14a:	bf00      	nop
}
 800d14c:	e001      	b.n	800d152 <_tx_thread_system_resume+0x1da>
                                return;
 800d14e:	bf00      	nop
 800d150:	e000      	b.n	800d154 <_tx_thread_system_resume+0x1dc>
 800d152:	bf00      	nop

            /* Preemption is needed - return to the system!  */
            _tx_thread_system_return();
        }
    }
}
 800d154:	3758      	adds	r7, #88	; 0x58
 800d156:	46bd      	mov	sp, r7
 800d158:	bd80      	pop	{r7, pc}
 800d15a:	bf00      	nop
 800d15c:	20005e9c 	.word	0x20005e9c
 800d160:	20005e1c 	.word	0x20005e1c
 800d164:	20005e14 	.word	0x20005e14
 800d168:	20005e18 	.word	0x20005e18
 800d16c:	20005e08 	.word	0x20005e08
 800d170:	e000ed04 	.word	0xe000ed04
 800d174:	20005e04 	.word	0x20005e04

0800d178 <_tx_thread_system_suspend>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_system_suspend(TX_THREAD *thread_ptr)
#ifndef TX_NOT_INTERRUPTABLE
{
 800d178:	b580      	push	{r7, lr}
 800d17a:	b09e      	sub	sp, #120	; 0x78
 800d17c:	af00      	add	r7, sp, #0
 800d17e:	6078      	str	r0, [r7, #4]
TX_TRACE_BUFFER_ENTRY       *entry_ptr;
ULONG                       time_stamp =  ((ULONG) 0);
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(current_thread)
 800d180:	4b81      	ldr	r3, [pc, #516]	; (800d388 <_tx_thread_system_suspend+0x210>)
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	677b      	str	r3, [r7, #116]	; 0x74
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d186:	f3ef 8310 	mrs	r3, PRIMASK
 800d18a:	64fb      	str	r3, [r7, #76]	; 0x4c
    return(posture);
 800d18c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int_posture = __get_interrupt_posture();
 800d18e:	64bb      	str	r3, [r7, #72]	; 0x48
    __asm__ volatile ("CPSID i" : : : "memory");
 800d190:	b672      	cpsid	i
    return(int_posture);
 800d192:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    /* Check this thread's stack.  */
    TX_THREAD_STACK_CHECK(thread_ptr)
#endif

    /* Lockout interrupts while the thread is being suspended.  */
    TX_DISABLE
 800d194:	673b      	str	r3, [r7, #112]	; 0x70

#ifndef TX_NO_TIMER

    /* Is the current thread suspending?  */
    if (thread_ptr == current_thread)
 800d196:	687a      	ldr	r2, [r7, #4]
 800d198:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800d19a:	429a      	cmp	r2, r3
 800d19c:	d112      	bne.n	800d1c4 <_tx_thread_system_suspend+0x4c>
    {

        /* Pickup the wait option.  */
        timeout =  thread_ptr -> tx_thread_timer.tx_timer_internal_remaining_ticks;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d1a2:	66fb      	str	r3, [r7, #108]	; 0x6c

        /* Determine if an activation is needed.  */
        if (timeout != TX_NO_WAIT)
 800d1a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1a6:	2b00      	cmp	r3, #0
 800d1a8:	d008      	beq.n	800d1bc <_tx_thread_system_suspend+0x44>
        {

            /* Make sure the suspension is not a wait-forever.  */
            if (timeout != TX_WAIT_FOREVER)
 800d1aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d1ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d1b0:	d004      	beq.n	800d1bc <_tx_thread_system_suspend+0x44>
            {

                /* Activate the thread timer with the timeout value setup in the caller.  */
                _tx_timer_system_activate(&(thread_ptr -> tx_thread_timer));
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	334c      	adds	r3, #76	; 0x4c
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	f000 face 	bl	800d758 <_tx_timer_system_activate>
            }
        }

        /* Yes, reset time slice for current thread.  */
        _tx_timer_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	69db      	ldr	r3, [r3, #28]
 800d1c0:	4a72      	ldr	r2, [pc, #456]	; (800d38c <_tx_thread_system_suspend+0x214>)
 800d1c2:	6013      	str	r3, [r2, #0]
    }
#endif

    /* Decrease the preempt disabled count.  */
    _tx_thread_preempt_disable--;
 800d1c4:	4b72      	ldr	r3, [pc, #456]	; (800d390 <_tx_thread_system_suspend+0x218>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	4a71      	ldr	r2, [pc, #452]	; (800d390 <_tx_thread_system_suspend+0x218>)
 800d1cc:	6013      	str	r3, [r2, #0]
    _tx_thread_performance_suspend_count++;
#endif

    /* Check to make sure the thread suspending flag is still set.  If not, it
       has already been resumed.  */
    if (thread_ptr -> tx_thread_suspending == TX_TRUE)
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1d2:	2b01      	cmp	r3, #1
 800d1d4:	f040 80a6 	bne.w	800d324 <_tx_thread_system_suspend+0x1ac>
            time_stamp =  entry_ptr -> tx_trace_buffer_entry_time_stamp;
        }
#endif

        /* Actually suspend this thread.  But first, clear the suspending flag.  */
        thread_ptr -> tx_thread_suspending =  TX_FALSE;
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	639a      	str	r2, [r3, #56]	; 0x38

        /* Pickup priority of thread.  */
        priority =  thread_ptr -> tx_thread_priority;
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1e2:	66bb      	str	r3, [r7, #104]	; 0x68

        /* Pickup the next ready thread pointer.  */
        ready_next =      thread_ptr -> tx_thread_ready_next;
 800d1e4:	687b      	ldr	r3, [r7, #4]
 800d1e6:	6a1b      	ldr	r3, [r3, #32]
 800d1e8:	667b      	str	r3, [r7, #100]	; 0x64

        /* Determine if there are other threads at this priority that are
           ready.  */
        if (ready_next != thread_ptr)
 800d1ea:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	429a      	cmp	r2, r3
 800d1f0:	d015      	beq.n	800d21e <_tx_thread_system_suspend+0xa6>
        {

            /* Yes, there are other threads at this priority ready.  */

            /* Pickup the previous ready thread pointer.  */
            ready_previous =  thread_ptr -> tx_thread_ready_previous;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1f6:	653b      	str	r3, [r7, #80]	; 0x50

            /* Just remove this thread from the priority list.  */
            ready_next -> tx_thread_ready_previous =    ready_previous;
 800d1f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800d1fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1fc:	625a      	str	r2, [r3, #36]	; 0x24
            ready_previous -> tx_thread_ready_next =    ready_next;
 800d1fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d200:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d202:	621a      	str	r2, [r3, #32]

            /* Determine if this is the head of the priority list.  */
            if (_tx_thread_priority_list[priority] == thread_ptr)
 800d204:	4a63      	ldr	r2, [pc, #396]	; (800d394 <_tx_thread_system_suspend+0x21c>)
 800d206:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d20c:	687a      	ldr	r2, [r7, #4]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d157      	bne.n	800d2c2 <_tx_thread_system_suspend+0x14a>
            {

                /* Update the head pointer of this priority list.  */
                _tx_thread_priority_list[priority] =  ready_next;
 800d212:	4960      	ldr	r1, [pc, #384]	; (800d394 <_tx_thread_system_suspend+0x21c>)
 800d214:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d216:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d218:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800d21c:	e051      	b.n	800d2c2 <_tx_thread_system_suspend+0x14a>
        else
        {

            /* This is the only thread at this priority ready to run.  Set the head
               pointer to NULL.  */
            _tx_thread_priority_list[priority] =    TX_NULL;
 800d21e:	4a5d      	ldr	r2, [pc, #372]	; (800d394 <_tx_thread_system_suspend+0x21c>)
 800d220:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d222:	2100      	movs	r1, #0
 800d224:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
            /* Calculate the index into the bit map array.  */
            map_index =  priority/((UINT) 32);
#endif

            /* Clear this priority bit in the ready priority bit map.  */
            TX_MOD32_BIT_SET(priority, priority_bit)
 800d228:	2201      	movs	r2, #1
 800d22a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d22c:	fa02 f303 	lsl.w	r3, r2, r3
 800d230:	663b      	str	r3, [r7, #96]	; 0x60
            _tx_thread_priority_maps[MAP_INDEX] =  _tx_thread_priority_maps[MAP_INDEX] & (~(priority_bit));
 800d232:	4b59      	ldr	r3, [pc, #356]	; (800d398 <_tx_thread_system_suspend+0x220>)
 800d234:	681a      	ldr	r2, [r3, #0]
 800d236:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d238:	43db      	mvns	r3, r3
 800d23a:	4013      	ands	r3, r2
 800d23c:	4a56      	ldr	r2, [pc, #344]	; (800d398 <_tx_thread_system_suspend+0x220>)
 800d23e:	6013      	str	r3, [r2, #0]
            /* Calculate the base priority as well.  */
            base_priority =  map_index * ((UINT) 32);
#else

            /* Setup the base priority to zero.  */
            base_priority =   ((UINT) 0);
 800d240:	2300      	movs	r3, #0
 800d242:	65fb      	str	r3, [r7, #92]	; 0x5c
#endif

            /* Setup working variable for the priority map.  */
            priority_map =    _tx_thread_priority_maps[MAP_INDEX];
 800d244:	4b54      	ldr	r3, [pc, #336]	; (800d398 <_tx_thread_system_suspend+0x220>)
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	65bb      	str	r3, [r7, #88]	; 0x58

            /* Make a quick check for no other threads ready for execution.  */
            if (priority_map == ((ULONG) 0))
 800d24a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d12b      	bne.n	800d2a8 <_tx_thread_system_suspend+0x130>
            {

                /* Nothing else is ready.  Set highest priority and execute thread
                   accordingly.  */
                _tx_thread_highest_priority =  ((UINT) TX_MAX_PRIORITIES);
 800d250:	4b52      	ldr	r3, [pc, #328]	; (800d39c <_tx_thread_system_suspend+0x224>)
 800d252:	2220      	movs	r2, #32
 800d254:	601a      	str	r2, [r3, #0]
                _tx_thread_execute_ptr =       TX_NULL;
 800d256:	4b52      	ldr	r3, [pc, #328]	; (800d3a0 <_tx_thread_system_suspend+0x228>)
 800d258:	2200      	movs	r2, #0
 800d25a:	601a      	str	r2, [r3, #0]
 800d25c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d25e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d260:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d262:	f383 8810 	msr	PRIMASK, r3
}
 800d266:	bf00      	nop
                /* Restore interrupts.  */
                TX_RESTORE

                /* Determine if preemption should take place. This is only possible if the current thread pointer is
                   not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
                TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d268:	4b49      	ldr	r3, [pc, #292]	; (800d390 <_tx_thread_system_suspend+0x218>)
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	657b      	str	r3, [r7, #84]	; 0x54
                if (combined_flags == ((ULONG) 0))
 800d26e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d270:	2b00      	cmp	r3, #0
 800d272:	f040 8081 	bne.w	800d378 <_tx_thread_system_suspend+0x200>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d276:	4b4b      	ldr	r3, [pc, #300]	; (800d3a4 <_tx_thread_system_suspend+0x22c>)
 800d278:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d27c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d27e:	f3ef 8305 	mrs	r3, IPSR
 800d282:	643b      	str	r3, [r7, #64]	; 0x40
    return(ipsr_value);
 800d284:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    if (_tx_ipsr_get() == 0)
 800d286:	2b00      	cmp	r3, #0
 800d288:	d10c      	bne.n	800d2a4 <_tx_thread_system_suspend+0x12c>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d28a:	f3ef 8310 	mrs	r3, PRIMASK
 800d28e:	63fb      	str	r3, [r7, #60]	; 0x3c
    return(posture);
 800d290:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        interrupt_save = __get_interrupt_posture();
 800d292:	63bb      	str	r3, [r7, #56]	; 0x38
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d294:	b662      	cpsie	i
}
 800d296:	bf00      	nop
 800d298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29a:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d29c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d29e:	f383 8810 	msr	PRIMASK, r3
}
 800d2a2:	bf00      	nop
}
 800d2a4:	bf00      	nop
                    /* Preemption is needed - return to the system!  */
                    _tx_thread_system_return();
                }

                /* Return to caller.  */
                return;
 800d2a6:	e067      	b.n	800d378 <_tx_thread_system_suspend+0x200>
            {

                /* Other threads at different priority levels are ready to run.  */

                /* Calculate the lowest bit set in the priority map. */
                TX_LOWEST_SET_BIT_CALCULATE(priority_map, priority_bit)
 800d2a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2aa:	fa93 f3a3 	rbit	r3, r3
 800d2ae:	65bb      	str	r3, [r7, #88]	; 0x58
 800d2b0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d2b2:	fab3 f383 	clz	r3, r3
 800d2b6:	663b      	str	r3, [r7, #96]	; 0x60

                /* Setup the next highest priority variable.  */
                _tx_thread_highest_priority =  base_priority + ((UINT) priority_bit);
 800d2b8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800d2ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d2bc:	4413      	add	r3, r2
 800d2be:	4a37      	ldr	r2, [pc, #220]	; (800d39c <_tx_thread_system_suspend+0x224>)
 800d2c0:	6013      	str	r3, [r2, #0]
            }
        }

        /* Determine if the suspending thread is the thread designated to execute.  */
        if (thread_ptr == _tx_thread_execute_ptr)
 800d2c2:	4b37      	ldr	r3, [pc, #220]	; (800d3a0 <_tx_thread_system_suspend+0x228>)
 800d2c4:	681b      	ldr	r3, [r3, #0]
 800d2c6:	687a      	ldr	r2, [r7, #4]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d12b      	bne.n	800d324 <_tx_thread_system_suspend+0x1ac>
        {

            /* Pickup the highest priority thread to execute.  */
            _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d2cc:	4b33      	ldr	r3, [pc, #204]	; (800d39c <_tx_thread_system_suspend+0x224>)
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	4a30      	ldr	r2, [pc, #192]	; (800d394 <_tx_thread_system_suspend+0x21c>)
 800d2d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d2d6:	4a32      	ldr	r2, [pc, #200]	; (800d3a0 <_tx_thread_system_suspend+0x228>)
 800d2d8:	6013      	str	r3, [r2, #0]
 800d2da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d2dc:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d2de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2e0:	f383 8810 	msr	PRIMASK, r3
}
 800d2e4:	bf00      	nop
            /* Restore interrupts.  */
            TX_RESTORE

            /* Determine if preemption should take place. This is only possible if the current thread pointer is
               not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
            TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d2e6:	4b2a      	ldr	r3, [pc, #168]	; (800d390 <_tx_thread_system_suspend+0x218>)
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	657b      	str	r3, [r7, #84]	; 0x54
            if (combined_flags == ((ULONG) 0))
 800d2ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d144      	bne.n	800d37c <_tx_thread_system_suspend+0x204>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d2f2:	4b2c      	ldr	r3, [pc, #176]	; (800d3a4 <_tx_thread_system_suspend+0x22c>)
 800d2f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2f8:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d2fa:	f3ef 8305 	mrs	r3, IPSR
 800d2fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(ipsr_value);
 800d300:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    if (_tx_ipsr_get() == 0)
 800d302:	2b00      	cmp	r3, #0
 800d304:	d10c      	bne.n	800d320 <_tx_thread_system_suspend+0x1a8>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d306:	f3ef 8310 	mrs	r3, PRIMASK
 800d30a:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d30c:	6abb      	ldr	r3, [r7, #40]	; 0x28
        interrupt_save = __get_interrupt_posture();
 800d30e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d310:	b662      	cpsie	i
}
 800d312:	bf00      	nop
 800d314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d316:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d318:	6a3b      	ldr	r3, [r7, #32]
 800d31a:	f383 8810 	msr	PRIMASK, r3
}
 800d31e:	bf00      	nop
}
 800d320:	bf00      	nop
                /* Preemption is needed - return to the system!  */
                _tx_thread_system_return();
            }

            /* Return to caller.  */
            return;
 800d322:	e02b      	b.n	800d37c <_tx_thread_system_suspend+0x204>
 800d324:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800d326:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d328:	69fb      	ldr	r3, [r7, #28]
 800d32a:	f383 8810 	msr	PRIMASK, r3
}
 800d32e:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if a preemption condition is present.  */
    if (current_thread != _tx_thread_execute_ptr)
 800d330:	4b1b      	ldr	r3, [pc, #108]	; (800d3a0 <_tx_thread_system_suspend+0x228>)
 800d332:	681b      	ldr	r3, [r3, #0]
 800d334:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800d336:	429a      	cmp	r2, r3
 800d338:	d022      	beq.n	800d380 <_tx_thread_system_suspend+0x208>
        TX_THREAD_STACK_CHECK(thread_ptr)
#endif

        /* Determine if preemption should take place. This is only possible if the current thread pointer is
           not the same as the execute thread pointer AND the system state and preempt disable flags are clear.  */
        TX_THREAD_SYSTEM_RETURN_CHECK(combined_flags)
 800d33a:	4b15      	ldr	r3, [pc, #84]	; (800d390 <_tx_thread_system_suspend+0x218>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	657b      	str	r3, [r7, #84]	; 0x54
        if (combined_flags == ((ULONG) 0))
 800d340:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d342:	2b00      	cmp	r3, #0
 800d344:	d11c      	bne.n	800d380 <_tx_thread_system_suspend+0x208>
    *((volatile ULONG *) 0xE000ED04) = ((ULONG) 0x10000000);
 800d346:	4b17      	ldr	r3, [pc, #92]	; (800d3a4 <_tx_thread_system_suspend+0x22c>)
 800d348:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d34c:	601a      	str	r2, [r3, #0]
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800d34e:	f3ef 8305 	mrs	r3, IPSR
 800d352:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800d354:	69bb      	ldr	r3, [r7, #24]
    if (_tx_ipsr_get() == 0)
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10c      	bne.n	800d374 <_tx_thread_system_suspend+0x1fc>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d35a:	f3ef 8310 	mrs	r3, PRIMASK
 800d35e:	617b      	str	r3, [r7, #20]
    return(posture);
 800d360:	697b      	ldr	r3, [r7, #20]
        interrupt_save = __get_interrupt_posture();
 800d362:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSIE  i": : : "memory");
 800d364:	b662      	cpsie	i
}
 800d366:	bf00      	nop
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	f383 8810 	msr	PRIMASK, r3
}
 800d372:	bf00      	nop
}
 800d374:	bf00      	nop
            _tx_thread_system_return();
        }
    }

    /* Return to caller.  */
    return;
 800d376:	e003      	b.n	800d380 <_tx_thread_system_suspend+0x208>
                return;
 800d378:	bf00      	nop
 800d37a:	e002      	b.n	800d382 <_tx_thread_system_suspend+0x20a>
            return;
 800d37c:	bf00      	nop
 800d37e:	e000      	b.n	800d382 <_tx_thread_system_suspend+0x20a>
    return;
 800d380:	bf00      	nop
}
 800d382:	3778      	adds	r7, #120	; 0x78
 800d384:	46bd      	mov	sp, r7
 800d386:	bd80      	pop	{r7, pc}
 800d388:	20005e04 	.word	0x20005e04
 800d38c:	20006408 	.word	0x20006408
 800d390:	20005e9c 	.word	0x20005e9c
 800d394:	20005e1c 	.word	0x20005e1c
 800d398:	20005e14 	.word	0x20005e14
 800d39c:	20005e18 	.word	0x20005e18
 800d3a0:	20005e08 	.word	0x20005e08
 800d3a4:	e000ed04 	.word	0xe000ed04

0800d3a8 <_tx_thread_time_slice>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_time_slice(VOID)
{
 800d3a8:	b480      	push	{r7}
 800d3aa:	b087      	sub	sp, #28
 800d3ac:	af00      	add	r7, sp, #0
ULONG           system_state;
UINT            preempt_disable;
#endif

    /* Pickup thread pointer.  */
    TX_THREAD_GET_CURRENT(thread_ptr)
 800d3ae:	4b21      	ldr	r3, [pc, #132]	; (800d434 <_tx_thread_time_slice+0x8c>)
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d3b4:	f3ef 8310 	mrs	r3, PRIMASK
 800d3b8:	60fb      	str	r3, [r7, #12]
    return(posture);
 800d3ba:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800d3bc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d3be:	b672      	cpsid	i
    return(int_posture);
 800d3c0:	68bb      	ldr	r3, [r7, #8]
    /* Set the next thread pointer to NULL.  */
    next_thread_ptr =  TX_NULL;
#endif

    /* Lockout interrupts while the time-slice is evaluated.  */
    TX_DISABLE
 800d3c2:	613b      	str	r3, [r7, #16]

    /* Clear the expired time-slice flag.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d3c4:	4b1c      	ldr	r3, [pc, #112]	; (800d438 <_tx_thread_time_slice+0x90>)
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	601a      	str	r2, [r3, #0]

    /* Make sure the thread pointer is valid.  */
    if (thread_ptr != TX_NULL)
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d024      	beq.n	800d41a <_tx_thread_time_slice+0x72>
    {

        /* Make sure the thread is still active, i.e. not suspended.  */
        if (thread_ptr -> tx_thread_state == TX_READY)
 800d3d0:	697b      	ldr	r3, [r7, #20]
 800d3d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d120      	bne.n	800d41a <_tx_thread_time_slice+0x72>
        {

            /* Setup a fresh time-slice for the thread.  */
            thread_ptr -> tx_thread_time_slice =  thread_ptr -> tx_thread_new_time_slice;
 800d3d8:	697b      	ldr	r3, [r7, #20]
 800d3da:	69da      	ldr	r2, [r3, #28]
 800d3dc:	697b      	ldr	r3, [r7, #20]
 800d3de:	619a      	str	r2, [r3, #24]

            /* Reset the actual time-slice variable.  */
            _tx_timer_time_slice =  thread_ptr -> tx_thread_time_slice;
 800d3e0:	697b      	ldr	r3, [r7, #20]
 800d3e2:	699b      	ldr	r3, [r3, #24]
 800d3e4:	4a15      	ldr	r2, [pc, #84]	; (800d43c <_tx_thread_time_slice+0x94>)
 800d3e6:	6013      	str	r3, [r2, #0]

            /* Determine if there is another thread at the same priority and preemption-threshold
               is not set.  Preemption-threshold overrides time-slicing.  */
            if (thread_ptr -> tx_thread_ready_next != thread_ptr)
 800d3e8:	697b      	ldr	r3, [r7, #20]
 800d3ea:	6a1b      	ldr	r3, [r3, #32]
 800d3ec:	697a      	ldr	r2, [r7, #20]
 800d3ee:	429a      	cmp	r2, r3
 800d3f0:	d013      	beq.n	800d41a <_tx_thread_time_slice+0x72>
            {

                /* Check to see if preemption-threshold is not being used.  */
                if (thread_ptr -> tx_thread_priority == thread_ptr -> tx_thread_preempt_threshold)
 800d3f2:	697b      	ldr	r3, [r7, #20]
 800d3f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3f6:	697b      	ldr	r3, [r7, #20]
 800d3f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3fa:	429a      	cmp	r2, r3
 800d3fc:	d10d      	bne.n	800d41a <_tx_thread_time_slice+0x72>

                    /* Preemption-threshold is not being used by this thread.  */

                    /* There is another thread at this priority, make it the highest at
                       this priority level.  */
                    _tx_thread_priority_list[thread_ptr -> tx_thread_priority] =  thread_ptr -> tx_thread_ready_next;
 800d3fe:	697b      	ldr	r3, [r7, #20]
 800d400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d402:	697a      	ldr	r2, [r7, #20]
 800d404:	6a12      	ldr	r2, [r2, #32]
 800d406:	490e      	ldr	r1, [pc, #56]	; (800d440 <_tx_thread_time_slice+0x98>)
 800d408:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

                    /* Designate the highest priority thread as the one to execute.  Don't use this
                       thread's priority as an index just in case a higher priority thread is now
                       ready!  */
                    _tx_thread_execute_ptr =  _tx_thread_priority_list[_tx_thread_highest_priority];
 800d40c:	4b0d      	ldr	r3, [pc, #52]	; (800d444 <_tx_thread_time_slice+0x9c>)
 800d40e:	681b      	ldr	r3, [r3, #0]
 800d410:	4a0b      	ldr	r2, [pc, #44]	; (800d440 <_tx_thread_time_slice+0x98>)
 800d412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d416:	4a0c      	ldr	r2, [pc, #48]	; (800d448 <_tx_thread_time_slice+0xa0>)
 800d418:	6013      	str	r3, [r2, #0]
 800d41a:	693b      	ldr	r3, [r7, #16]
 800d41c:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	f383 8810 	msr	PRIMASK, r3
}
 800d424:	bf00      	nop

        /* Yes, check this thread's stack.  */
        TX_THREAD_STACK_CHECK(next_thread_ptr)
    }
#endif
}
 800d426:	bf00      	nop
 800d428:	371c      	adds	r7, #28
 800d42a:	46bd      	mov	sp, r7
 800d42c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d430:	4770      	bx	lr
 800d432:	bf00      	nop
 800d434:	20005e04 	.word	0x20005e04
 800d438:	20005eac 	.word	0x20005eac
 800d43c:	20006408 	.word	0x20006408
 800d440:	20005e1c 	.word	0x20005e1c
 800d444:	20005e18 	.word	0x20005e18
 800d448:	20005e08 	.word	0x20005e08

0800d44c <_tx_thread_timeout>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_thread_timeout(ULONG timeout_input)
{
 800d44c:	b580      	push	{r7, lr}
 800d44e:	b08a      	sub	sp, #40	; 0x28
 800d450:	af00      	add	r7, sp, #0
 800d452:	6078      	str	r0, [r7, #4]
VOID            (*suspend_cleanup)(struct TX_THREAD_STRUCT *suspend_thread_ptr, ULONG suspension_sequence);
ULONG           suspension_sequence;


    /* Pickup the thread pointer.  */
    TX_THREAD_TIMEOUT_POINTER_SETUP(thread_ptr)
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d458:	f3ef 8310 	mrs	r3, PRIMASK
 800d45c:	617b      	str	r3, [r7, #20]
    return(posture);
 800d45e:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800d460:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d462:	b672      	cpsid	i
    return(int_posture);
 800d464:	693b      	ldr	r3, [r7, #16]

    /* Disable interrupts.  */
    TX_DISABLE
 800d466:	623b      	str	r3, [r7, #32]

    /* Determine how the thread is currently suspended.  */
    if (thread_ptr -> tx_thread_state == TX_SLEEP)
 800d468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d46a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d46c:	2b04      	cmp	r3, #4
 800d46e:	d10e      	bne.n	800d48e <_tx_thread_timeout+0x42>
        /* Restore interrupts.  */
        TX_RESTORE
#else

        /* Increment the disable preemption flag.  */
        _tx_thread_preempt_disable++;
 800d470:	4b13      	ldr	r3, [pc, #76]	; (800d4c0 <_tx_thread_timeout+0x74>)
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	3301      	adds	r3, #1
 800d476:	4a12      	ldr	r2, [pc, #72]	; (800d4c0 <_tx_thread_timeout+0x74>)
 800d478:	6013      	str	r3, [r2, #0]
 800d47a:	6a3b      	ldr	r3, [r7, #32]
 800d47c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d47e:	68fb      	ldr	r3, [r7, #12]
 800d480:	f383 8810 	msr	PRIMASK, r3
}
 800d484:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Lift the suspension on the sleeping thread.  */
        _tx_thread_system_resume(thread_ptr);
 800d486:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d488:	f7ff fd76 	bl	800cf78 <_tx_thread_system_resume>

        /* Restore interrupts.  */
        TX_RESTORE
#endif
    }
}
 800d48c:	e013      	b.n	800d4b6 <_tx_thread_timeout+0x6a>
        suspend_cleanup =  thread_ptr -> tx_thread_suspend_cleanup;
 800d48e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d490:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d492:	61fb      	str	r3, [r7, #28]
        suspension_sequence =  thread_ptr -> tx_thread_suspension_sequence;
 800d494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d496:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d49a:	61bb      	str	r3, [r7, #24]
 800d49c:	6a3b      	ldr	r3, [r7, #32]
 800d49e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	f383 8810 	msr	PRIMASK, r3
}
 800d4a6:	bf00      	nop
        if (suspend_cleanup != TX_NULL)
 800d4a8:	69fb      	ldr	r3, [r7, #28]
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d003      	beq.n	800d4b6 <_tx_thread_timeout+0x6a>
            (suspend_cleanup)(thread_ptr, suspension_sequence);
 800d4ae:	69fb      	ldr	r3, [r7, #28]
 800d4b0:	69b9      	ldr	r1, [r7, #24]
 800d4b2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d4b4:	4798      	blx	r3
}
 800d4b6:	bf00      	nop
 800d4b8:	3728      	adds	r7, #40	; 0x28
 800d4ba:	46bd      	mov	sp, r7
 800d4bc:	bd80      	pop	{r7, pc}
 800d4be:	bf00      	nop
 800d4c0:	20005e9c 	.word	0x20005e9c

0800d4c4 <_tx_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b08a      	sub	sp, #40	; 0x28
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	60f8      	str	r0, [r7, #12]
 800d4cc:	60b9      	str	r1, [r7, #8]
 800d4ce:	607a      	str	r2, [r7, #4]
 800d4d0:	603b      	str	r3, [r7, #0]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Initialize timer control block to all zeros.  */
    TX_MEMSET(timer_ptr, 0, (sizeof(TX_TIMER)));
 800d4d2:	222c      	movs	r2, #44	; 0x2c
 800d4d4:	2100      	movs	r1, #0
 800d4d6:	68f8      	ldr	r0, [r7, #12]
 800d4d8:	f000 ff5b 	bl	800e392 <memset>

    /* Setup the basic timer fields.  */
    timer_ptr -> tx_timer_name =                                            name_ptr;
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	68ba      	ldr	r2, [r7, #8]
 800d4e0:	605a      	str	r2, [r3, #4]
    timer_ptr -> tx_timer_internal.tx_timer_internal_remaining_ticks =      initial_ticks;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d4e6:	609a      	str	r2, [r3, #8]
    timer_ptr -> tx_timer_internal.tx_timer_internal_re_initialize_ticks =  reschedule_ticks;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d4ec:	60da      	str	r2, [r3, #12]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_function =     expiration_function;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	687a      	ldr	r2, [r7, #4]
 800d4f2:	611a      	str	r2, [r3, #16]
    timer_ptr -> tx_timer_internal.tx_timer_internal_timeout_param =        expiration_input;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	683a      	ldr	r2, [r7, #0]
 800d4f8:	615a      	str	r2, [r3, #20]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d4fa:	f3ef 8310 	mrs	r3, PRIMASK
 800d4fe:	61bb      	str	r3, [r7, #24]
    return(posture);
 800d500:	69bb      	ldr	r3, [r7, #24]
    int_posture = __get_interrupt_posture();
 800d502:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d504:	b672      	cpsid	i
    return(int_posture);
 800d506:	697b      	ldr	r3, [r7, #20]

    /* Disable interrupts to put the timer on the created list.  */
    TX_DISABLE
 800d508:	627b      	str	r3, [r7, #36]	; 0x24

    /* Setup the timer ID to make it valid.  */
    timer_ptr -> tx_timer_id =  TX_TIMER_ID;
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	4a1c      	ldr	r2, [pc, #112]	; (800d580 <_tx_timer_create+0xbc>)
 800d50e:	601a      	str	r2, [r3, #0]

    /* Place the timer on the list of created application timers.  First,
       check for an empty list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d510:	4b1c      	ldr	r3, [pc, #112]	; (800d584 <_tx_timer_create+0xc0>)
 800d512:	681b      	ldr	r3, [r3, #0]
 800d514:	2b00      	cmp	r3, #0
 800d516:	d109      	bne.n	800d52c <_tx_timer_create+0x68>
    {

        /* The created timer list is empty.  Add timer to empty list.  */
        _tx_timer_created_ptr =                   timer_ptr;
 800d518:	4a1b      	ldr	r2, [pc, #108]	; (800d588 <_tx_timer_create+0xc4>)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	6013      	str	r3, [r2, #0]
        timer_ptr -> tx_timer_created_next =      timer_ptr;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	68fa      	ldr	r2, [r7, #12]
 800d522:	625a      	str	r2, [r3, #36]	; 0x24
        timer_ptr -> tx_timer_created_previous =  timer_ptr;
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	68fa      	ldr	r2, [r7, #12]
 800d528:	629a      	str	r2, [r3, #40]	; 0x28
 800d52a:	e011      	b.n	800d550 <_tx_timer_create+0x8c>
    }
    else
    {

        /* This list is not NULL, add to the end of the list.  */
        next_timer =  _tx_timer_created_ptr;
 800d52c:	4b16      	ldr	r3, [pc, #88]	; (800d588 <_tx_timer_create+0xc4>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	623b      	str	r3, [r7, #32]
        previous_timer =  next_timer -> tx_timer_created_previous;
 800d532:	6a3b      	ldr	r3, [r7, #32]
 800d534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d536:	61fb      	str	r3, [r7, #28]

        /* Place the new timer in the list.  */
        next_timer -> tx_timer_created_previous =  timer_ptr;
 800d538:	6a3b      	ldr	r3, [r7, #32]
 800d53a:	68fa      	ldr	r2, [r7, #12]
 800d53c:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =    timer_ptr;
 800d53e:	69fb      	ldr	r3, [r7, #28]
 800d540:	68fa      	ldr	r2, [r7, #12]
 800d542:	625a      	str	r2, [r3, #36]	; 0x24

        /* Setup this timer's created links.  */
        timer_ptr -> tx_timer_created_previous =  previous_timer;
 800d544:	68fb      	ldr	r3, [r7, #12]
 800d546:	69fa      	ldr	r2, [r7, #28]
 800d548:	629a      	str	r2, [r3, #40]	; 0x28
        timer_ptr -> tx_timer_created_next =      next_timer;
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	6a3a      	ldr	r2, [r7, #32]
 800d54e:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Increment the number of created timers.  */
    _tx_timer_created_count++;
 800d550:	4b0c      	ldr	r3, [pc, #48]	; (800d584 <_tx_timer_create+0xc0>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	3301      	adds	r3, #1
 800d556:	4a0b      	ldr	r2, [pc, #44]	; (800d584 <_tx_timer_create+0xc0>)
 800d558:	6013      	str	r3, [r2, #0]

    /* Log this kernel call.  */
    TX_EL_TIMER_CREATE_INSERT

    /* Determine if this timer needs to be activated.  */
    if (auto_activate == TX_AUTO_ACTIVATE)
 800d55a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d55c:	2b01      	cmp	r3, #1
 800d55e:	d104      	bne.n	800d56a <_tx_timer_create+0xa6>
        /* Increment the number of activations on this timer.  */
        timer_ptr -> tx_timer_performance_activate_count++;
#endif

        /* Call actual activation function.  */
        _tx_timer_system_activate(&(timer_ptr -> tx_timer_internal));
 800d560:	68fb      	ldr	r3, [r7, #12]
 800d562:	3308      	adds	r3, #8
 800d564:	4618      	mov	r0, r3
 800d566:	f000 f8f7 	bl	800d758 <_tx_timer_system_activate>
 800d56a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d56c:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d56e:	693b      	ldr	r3, [r7, #16]
 800d570:	f383 8810 	msr	PRIMASK, r3
}
 800d574:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d576:	2300      	movs	r3, #0
}
 800d578:	4618      	mov	r0, r3
 800d57a:	3728      	adds	r7, #40	; 0x28
 800d57c:	46bd      	mov	sp, r7
 800d57e:	bd80      	pop	{r7, pc}
 800d580:	4154494d 	.word	0x4154494d
 800d584:	20005f44 	.word	0x20005f44
 800d588:	20005f40 	.word	0x20005f40

0800d58c <_tx_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _tx_timer_delete(TX_TIMER *timer_ptr)
{
 800d58c:	b580      	push	{r7, lr}
 800d58e:	b088      	sub	sp, #32
 800d590:	af00      	add	r7, sp, #0
 800d592:	6078      	str	r0, [r7, #4]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d594:	f3ef 8310 	mrs	r3, PRIMASK
 800d598:	613b      	str	r3, [r7, #16]
    return(posture);
 800d59a:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800d59c:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d59e:	b672      	cpsid	i
    return(int_posture);
 800d5a0:	68fb      	ldr	r3, [r7, #12]
TX_TIMER        *next_timer;
TX_TIMER        *previous_timer;


    /* Disable interrupts to remove the timer from the created list.  */
    TX_DISABLE
 800d5a2:	61fb      	str	r3, [r7, #28]

    /* Determine if the timer needs to be deactivated.  */
    if (timer_ptr -> tx_timer_internal.tx_timer_internal_list_head != TX_NULL)
 800d5a4:	687b      	ldr	r3, [r7, #4]
 800d5a6:	6a1b      	ldr	r3, [r3, #32]
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d004      	beq.n	800d5b6 <_tx_timer_delete+0x2a>
    {

        /* Yes, deactivate the timer before it is deleted.  */
        _tx_timer_system_deactivate(&(timer_ptr -> tx_timer_internal));
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	3308      	adds	r3, #8
 800d5b0:	4618      	mov	r0, r3
 800d5b2:	f000 f933 	bl	800d81c <_tx_timer_system_deactivate>

    /* Log this kernel call.  */
    TX_EL_TIMER_DELETE_INSERT

    /* Clear the timer ID to make it invalid.  */
    timer_ptr -> tx_timer_id =  TX_CLEAR_ID;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	2200      	movs	r2, #0
 800d5ba:	601a      	str	r2, [r3, #0]

    /* Decrement the number of created timers.  */
    _tx_timer_created_count--;
 800d5bc:	4b15      	ldr	r3, [pc, #84]	; (800d614 <_tx_timer_delete+0x88>)
 800d5be:	681b      	ldr	r3, [r3, #0]
 800d5c0:	3b01      	subs	r3, #1
 800d5c2:	4a14      	ldr	r2, [pc, #80]	; (800d614 <_tx_timer_delete+0x88>)
 800d5c4:	6013      	str	r3, [r2, #0]

    /* See if the timer is the only one on the list.  */
    if (_tx_timer_created_count == TX_EMPTY)
 800d5c6:	4b13      	ldr	r3, [pc, #76]	; (800d614 <_tx_timer_delete+0x88>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d103      	bne.n	800d5d6 <_tx_timer_delete+0x4a>
    {

        /* Only created timer, just set the created list to NULL.  */
        _tx_timer_created_ptr =  TX_NULL;
 800d5ce:	4b12      	ldr	r3, [pc, #72]	; (800d618 <_tx_timer_delete+0x8c>)
 800d5d0:	2200      	movs	r2, #0
 800d5d2:	601a      	str	r2, [r3, #0]
 800d5d4:	e013      	b.n	800d5fe <_tx_timer_delete+0x72>
    }
    else
    {

        /* Link-up the neighbors.  */
        next_timer =                               timer_ptr -> tx_timer_created_next;
 800d5d6:	687b      	ldr	r3, [r7, #4]
 800d5d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5da:	61bb      	str	r3, [r7, #24]
        previous_timer =                           timer_ptr -> tx_timer_created_previous;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5e0:	617b      	str	r3, [r7, #20]
        next_timer -> tx_timer_created_previous =  previous_timer;
 800d5e2:	69bb      	ldr	r3, [r7, #24]
 800d5e4:	697a      	ldr	r2, [r7, #20]
 800d5e6:	629a      	str	r2, [r3, #40]	; 0x28
        previous_timer -> tx_timer_created_next =  next_timer;
 800d5e8:	697b      	ldr	r3, [r7, #20]
 800d5ea:	69ba      	ldr	r2, [r7, #24]
 800d5ec:	625a      	str	r2, [r3, #36]	; 0x24

        /* See if we have to update the created list head pointer.  */
        if (_tx_timer_created_ptr == timer_ptr)
 800d5ee:	4b0a      	ldr	r3, [pc, #40]	; (800d618 <_tx_timer_delete+0x8c>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	687a      	ldr	r2, [r7, #4]
 800d5f4:	429a      	cmp	r2, r3
 800d5f6:	d102      	bne.n	800d5fe <_tx_timer_delete+0x72>
        {

            /* Yes, move the head pointer to the next link. */
            _tx_timer_created_ptr =  next_timer;
 800d5f8:	4a07      	ldr	r2, [pc, #28]	; (800d618 <_tx_timer_delete+0x8c>)
 800d5fa:	69bb      	ldr	r3, [r7, #24]
 800d5fc:	6013      	str	r3, [r2, #0]
 800d5fe:	69fb      	ldr	r3, [r7, #28]
 800d600:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d602:	68bb      	ldr	r3, [r7, #8]
 800d604:	f383 8810 	msr	PRIMASK, r3
}
 800d608:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Return TX_SUCCESS.  */
    return(TX_SUCCESS);
 800d60a:	2300      	movs	r3, #0
}
 800d60c:	4618      	mov	r0, r3
 800d60e:	3720      	adds	r7, #32
 800d610:	46bd      	mov	sp, r7
 800d612:	bd80      	pop	{r7, pc}
 800d614:	20005f44 	.word	0x20005f44
 800d618:	20005f40 	.word	0x20005f40

0800d61c <_tx_timer_expiration_process>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_expiration_process(VOID)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d622:	f3ef 8310 	mrs	r3, PRIMASK
 800d626:	607b      	str	r3, [r7, #4]
    return(posture);
 800d628:	687b      	ldr	r3, [r7, #4]
    int_posture = __get_interrupt_posture();
 800d62a:	603b      	str	r3, [r7, #0]
    __asm__ volatile ("CPSID i" : : : "memory");
 800d62c:	b672      	cpsid	i
    return(int_posture);
 800d62e:	683b      	ldr	r3, [r7, #0]

    /* Don't process in the ISR, wakeup the system timer thread to process the
       timer expiration.  */

    /* Disable interrupts.  */
    TX_DISABLE
 800d630:	60fb      	str	r3, [r7, #12]
    /* Restore interrupts.  */
    TX_RESTORE
#else

    /* Increment the preempt disable flag.  */
    _tx_thread_preempt_disable++;
 800d632:	4b09      	ldr	r3, [pc, #36]	; (800d658 <_tx_timer_expiration_process+0x3c>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3301      	adds	r3, #1
 800d638:	4a07      	ldr	r2, [pc, #28]	; (800d658 <_tx_timer_expiration_process+0x3c>)
 800d63a:	6013      	str	r3, [r2, #0]
 800d63c:	68fb      	ldr	r3, [r7, #12]
 800d63e:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d640:	68bb      	ldr	r3, [r7, #8]
 800d642:	f383 8810 	msr	PRIMASK, r3
}
 800d646:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Call the system resume function to activate the timer thread.  */
    _tx_thread_system_resume(&_tx_timer_thread);
 800d648:	4804      	ldr	r0, [pc, #16]	; (800d65c <_tx_timer_expiration_process+0x40>)
 800d64a:	f7ff fc95 	bl	800cf78 <_tx_thread_system_resume>
    }

    /* Restore interrupts.  */
    TX_RESTORE
#endif
}
 800d64e:	bf00      	nop
 800d650:	3710      	adds	r7, #16
 800d652:	46bd      	mov	sp, r7
 800d654:	bd80      	pop	{r7, pc}
 800d656:	bf00      	nop
 800d658:	20005e9c 	.word	0x20005e9c
 800d65c:	20005f4c 	.word	0x20005f4c

0800d660 <_tx_timer_initialize>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_initialize(VOID)
{
 800d660:	b590      	push	{r4, r7, lr}
 800d662:	b089      	sub	sp, #36	; 0x24
 800d664:	af06      	add	r7, sp, #24
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the system clock to 0.  */
    _tx_timer_system_clock =  ((ULONG) 0);
 800d666:	4b28      	ldr	r3, [pc, #160]	; (800d708 <_tx_timer_initialize+0xa8>)
 800d668:	2200      	movs	r2, #0
 800d66a:	601a      	str	r2, [r3, #0]

    /* Initialize the time-slice value to 0 to make sure it is disabled.  */
    _tx_timer_time_slice =  ((ULONG) 0);
 800d66c:	4b27      	ldr	r3, [pc, #156]	; (800d70c <_tx_timer_initialize+0xac>)
 800d66e:	2200      	movs	r2, #0
 800d670:	601a      	str	r2, [r3, #0]

    /* Clear the expired flags.  */
    _tx_timer_expired_time_slice =  TX_FALSE;
 800d672:	4b27      	ldr	r3, [pc, #156]	; (800d710 <_tx_timer_initialize+0xb0>)
 800d674:	2200      	movs	r2, #0
 800d676:	601a      	str	r2, [r3, #0]
    _tx_timer_expired =             TX_FALSE;
 800d678:	4b26      	ldr	r3, [pc, #152]	; (800d714 <_tx_timer_initialize+0xb4>)
 800d67a:	2200      	movs	r2, #0
 800d67c:	601a      	str	r2, [r3, #0]

    /* Set the currently expired timer being processed pointer to NULL.  */
    _tx_timer_expired_timer_ptr =  TX_NULL;
 800d67e:	4b26      	ldr	r3, [pc, #152]	; (800d718 <_tx_timer_initialize+0xb8>)
 800d680:	2200      	movs	r2, #0
 800d682:	601a      	str	r2, [r3, #0]

    /* Initialize the thread and application timer management control structures.  */

    /* First, initialize the timer list.  */
    TX_MEMSET(&_tx_timer_list[0], 0, (sizeof(_tx_timer_list)));
 800d684:	2280      	movs	r2, #128	; 0x80
 800d686:	2100      	movs	r1, #0
 800d688:	4824      	ldr	r0, [pc, #144]	; (800d71c <_tx_timer_initialize+0xbc>)
 800d68a:	f000 fe82 	bl	800e392 <memset>
#endif

    /* Initialize all of the list pointers.  */
    _tx_timer_list_start =   &_tx_timer_list[0];
 800d68e:	4b24      	ldr	r3, [pc, #144]	; (800d720 <_tx_timer_initialize+0xc0>)
 800d690:	4a22      	ldr	r2, [pc, #136]	; (800d71c <_tx_timer_initialize+0xbc>)
 800d692:	601a      	str	r2, [r3, #0]
    _tx_timer_current_ptr =  &_tx_timer_list[0];
 800d694:	4b23      	ldr	r3, [pc, #140]	; (800d724 <_tx_timer_initialize+0xc4>)
 800d696:	4a21      	ldr	r2, [pc, #132]	; (800d71c <_tx_timer_initialize+0xbc>)
 800d698:	601a      	str	r2, [r3, #0]

    /* Set the timer list end pointer to one past the actual timer list.  This is done
       to make the timer interrupt handling in assembly language a little easier.  */
    _tx_timer_list_end =     &_tx_timer_list[TX_TIMER_ENTRIES-((ULONG) 1)];
 800d69a:	4b23      	ldr	r3, [pc, #140]	; (800d728 <_tx_timer_initialize+0xc8>)
 800d69c:	4a23      	ldr	r2, [pc, #140]	; (800d72c <_tx_timer_initialize+0xcc>)
 800d69e:	601a      	str	r2, [r3, #0]
    _tx_timer_list_end =     TX_TIMER_POINTER_ADD(_tx_timer_list_end, ((ULONG) 1));
 800d6a0:	4b21      	ldr	r3, [pc, #132]	; (800d728 <_tx_timer_initialize+0xc8>)
 800d6a2:	681b      	ldr	r3, [r3, #0]
 800d6a4:	3304      	adds	r3, #4
 800d6a6:	4a20      	ldr	r2, [pc, #128]	; (800d728 <_tx_timer_initialize+0xc8>)
 800d6a8:	6013      	str	r3, [r2, #0]

#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Setup the variables associated with the system timer thread's stack and
       priority.  */
    _tx_timer_stack_start =  (VOID *) &_tx_timer_thread_stack_area[0];
 800d6aa:	4b21      	ldr	r3, [pc, #132]	; (800d730 <_tx_timer_initialize+0xd0>)
 800d6ac:	4a21      	ldr	r2, [pc, #132]	; (800d734 <_tx_timer_initialize+0xd4>)
 800d6ae:	601a      	str	r2, [r3, #0]
    _tx_timer_stack_size =   ((ULONG) TX_TIMER_THREAD_STACK_SIZE);
 800d6b0:	4b21      	ldr	r3, [pc, #132]	; (800d738 <_tx_timer_initialize+0xd8>)
 800d6b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800d6b6:	601a      	str	r2, [r3, #0]
    _tx_timer_priority =     ((UINT) TX_TIMER_THREAD_PRIORITY);
 800d6b8:	4b20      	ldr	r3, [pc, #128]	; (800d73c <_tx_timer_initialize+0xdc>)
 800d6ba:	2200      	movs	r2, #0
 800d6bc:	601a      	str	r2, [r3, #0]
       low-level initialization component.  */
    do
    {

        /* Create the system timer thread.  */
        status =  _tx_thread_create(&_tx_timer_thread,
 800d6be:	4b1c      	ldr	r3, [pc, #112]	; (800d730 <_tx_timer_initialize+0xd0>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4a1d      	ldr	r2, [pc, #116]	; (800d738 <_tx_timer_initialize+0xd8>)
 800d6c4:	6812      	ldr	r2, [r2, #0]
 800d6c6:	491d      	ldr	r1, [pc, #116]	; (800d73c <_tx_timer_initialize+0xdc>)
 800d6c8:	6809      	ldr	r1, [r1, #0]
 800d6ca:	481c      	ldr	r0, [pc, #112]	; (800d73c <_tx_timer_initialize+0xdc>)
 800d6cc:	6800      	ldr	r0, [r0, #0]
 800d6ce:	2400      	movs	r4, #0
 800d6d0:	9405      	str	r4, [sp, #20]
 800d6d2:	2400      	movs	r4, #0
 800d6d4:	9404      	str	r4, [sp, #16]
 800d6d6:	9003      	str	r0, [sp, #12]
 800d6d8:	9102      	str	r1, [sp, #8]
 800d6da:	9201      	str	r2, [sp, #4]
 800d6dc:	9300      	str	r3, [sp, #0]
 800d6de:	4b18      	ldr	r3, [pc, #96]	; (800d740 <_tx_timer_initialize+0xe0>)
 800d6e0:	4a18      	ldr	r2, [pc, #96]	; (800d744 <_tx_timer_initialize+0xe4>)
 800d6e2:	4919      	ldr	r1, [pc, #100]	; (800d748 <_tx_timer_initialize+0xe8>)
 800d6e4:	4819      	ldr	r0, [pc, #100]	; (800d74c <_tx_timer_initialize+0xec>)
 800d6e6:	f7ff fa0f 	bl	800cb08 <_tx_thread_create>
 800d6ea:	6078      	str	r0, [r7, #4]
#endif

        /* Define timer initialize extension.  */
        TX_TIMER_INITIALIZE_EXTENSION(status)

    } while (status != TX_SUCCESS);
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	2b00      	cmp	r3, #0
 800d6f0:	d1e5      	bne.n	800d6be <_tx_timer_initialize+0x5e>
#endif

#ifndef TX_DISABLE_REDUNDANT_CLEARING

    /* Initialize the head pointer of the created application timer list.  */
    _tx_timer_created_ptr =  TX_NULL;
 800d6f2:	4b17      	ldr	r3, [pc, #92]	; (800d750 <_tx_timer_initialize+0xf0>)
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	601a      	str	r2, [r3, #0]

    /* Set the created count to zero.  */
    _tx_timer_created_count =  TX_EMPTY;
 800d6f8:	4b16      	ldr	r3, [pc, #88]	; (800d754 <_tx_timer_initialize+0xf4>)
 800d6fa:	2200      	movs	r2, #0
 800d6fc:	601a      	str	r2, [r3, #0]
    _tx_timer_performance_expiration_count =         ((ULONG) 0);
    _tx_timer_performance__expiration_adjust_count =  ((ULONG) 0);
#endif
#endif
#endif
}
 800d6fe:	bf00      	nop
 800d700:	370c      	adds	r7, #12
 800d702:	46bd      	mov	sp, r7
 800d704:	bd90      	pop	{r4, r7, pc}
 800d706:	bf00      	nop
 800d708:	20005ea8 	.word	0x20005ea8
 800d70c:	20006408 	.word	0x20006408
 800d710:	20005eac 	.word	0x20005eac
 800d714:	20005f3c 	.word	0x20005f3c
 800d718:	20005f48 	.word	0x20005f48
 800d71c:	20005eb0 	.word	0x20005eb0
 800d720:	20005f30 	.word	0x20005f30
 800d724:	20005f38 	.word	0x20005f38
 800d728:	20005f34 	.word	0x20005f34
 800d72c:	20005f2c 	.word	0x20005f2c
 800d730:	20005ffc 	.word	0x20005ffc
 800d734:	20006008 	.word	0x20006008
 800d738:	20006000 	.word	0x20006000
 800d73c:	20006004 	.word	0x20006004
 800d740:	4154494d 	.word	0x4154494d
 800d744:	0800d88d 	.word	0x0800d88d
 800d748:	08010c3c 	.word	0x08010c3c
 800d74c:	20005f4c 	.word	0x20005f4c
 800d750:	20005f40 	.word	0x20005f40
 800d754:	20005f44 	.word	0x20005f44

0800d758 <_tx_timer_system_activate>:
/*                                            TX_NO_TIMER is defined,     */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_activate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d758:	b480      	push	{r7}
 800d75a:	b089      	sub	sp, #36	; 0x24
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
ULONG                       remaining_ticks;
ULONG                       expiration_time;


    /* Pickup the remaining ticks.  */
    remaining_ticks =  timer_ptr -> tx_timer_internal_remaining_ticks;
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	617b      	str	r3, [r7, #20]

    /* Determine if there is a timer to activate.  */
    if (remaining_ticks != ((ULONG) 0))
 800d766:	697b      	ldr	r3, [r7, #20]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	d04a      	beq.n	800d802 <_tx_timer_system_activate+0xaa>
    {

        /* Determine if the timer is set to wait forever.  */
        if (remaining_ticks != TX_WAIT_FOREVER)
 800d76c:	697b      	ldr	r3, [r7, #20]
 800d76e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d772:	d046      	beq.n	800d802 <_tx_timer_system_activate+0xaa>
        {

            /* Valid timer activate request.  */

            /* Determine if the timer still needs activation.  */
            if (timer_ptr -> tx_timer_internal_list_head == TX_NULL)
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	699b      	ldr	r3, [r3, #24]
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d142      	bne.n	800d802 <_tx_timer_system_activate+0xaa>
            {

                /* Activate the timer.  */

                /* Calculate the amount of time remaining for the timer.  */
                if (remaining_ticks > TX_TIMER_ENTRIES)
 800d77c:	697b      	ldr	r3, [r7, #20]
 800d77e:	2b20      	cmp	r3, #32
 800d780:	d902      	bls.n	800d788 <_tx_timer_system_activate+0x30>
                {

                    /* Set expiration time to the maximum number of entries.  */
                    expiration_time =  TX_TIMER_ENTRIES - ((ULONG) 1);
 800d782:	231f      	movs	r3, #31
 800d784:	61bb      	str	r3, [r7, #24]
 800d786:	e002      	b.n	800d78e <_tx_timer_system_activate+0x36>
                {

                    /* Timer value fits in the timer entries.  */

                    /* Set the expiration time.  */
                    expiration_time =  (remaining_ticks - ((ULONG) 1));
 800d788:	697b      	ldr	r3, [r7, #20]
 800d78a:	3b01      	subs	r3, #1
 800d78c:	61bb      	str	r3, [r7, #24]

                /* At this point, we are ready to put the timer on one of
                   the timer lists.  */

                /* Calculate the proper place for the timer.  */
                timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, expiration_time);
 800d78e:	4b20      	ldr	r3, [pc, #128]	; (800d810 <_tx_timer_system_activate+0xb8>)
 800d790:	681a      	ldr	r2, [r3, #0]
 800d792:	69bb      	ldr	r3, [r7, #24]
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	4413      	add	r3, r2
 800d798:	61fb      	str	r3, [r7, #28]
                if (TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(timer_list) >= TX_TIMER_INDIRECT_TO_VOID_POINTER_CONVERT(_tx_timer_list_end))
 800d79a:	4b1e      	ldr	r3, [pc, #120]	; (800d814 <_tx_timer_system_activate+0xbc>)
 800d79c:	681b      	ldr	r3, [r3, #0]
 800d79e:	69fa      	ldr	r2, [r7, #28]
 800d7a0:	429a      	cmp	r2, r3
 800d7a2:	d30b      	bcc.n	800d7bc <_tx_timer_system_activate+0x64>
                {

                    /* Wrap from the beginning of the list.  */
                    delta =  TX_TIMER_POINTER_DIF(timer_list, _tx_timer_list_end);
 800d7a4:	4b1b      	ldr	r3, [pc, #108]	; (800d814 <_tx_timer_system_activate+0xbc>)
 800d7a6:	681b      	ldr	r3, [r3, #0]
 800d7a8:	69fa      	ldr	r2, [r7, #28]
 800d7aa:	1ad3      	subs	r3, r2, r3
 800d7ac:	109b      	asrs	r3, r3, #2
 800d7ae:	613b      	str	r3, [r7, #16]
                    timer_list =  TX_TIMER_POINTER_ADD(_tx_timer_list_start, delta);
 800d7b0:	4b19      	ldr	r3, [pc, #100]	; (800d818 <_tx_timer_system_activate+0xc0>)
 800d7b2:	681a      	ldr	r2, [r3, #0]
 800d7b4:	693b      	ldr	r3, [r7, #16]
 800d7b6:	009b      	lsls	r3, r3, #2
 800d7b8:	4413      	add	r3, r2
 800d7ba:	61fb      	str	r3, [r7, #28]
                }

                /* Now put the timer on this list.  */
                if ((*timer_list) == TX_NULL)
 800d7bc:	69fb      	ldr	r3, [r7, #28]
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d109      	bne.n	800d7d8 <_tx_timer_system_activate+0x80>
                {

                    /* This list is NULL, just put the new timer on it.  */

                    /* Setup the links in this timer.  */
                    timer_ptr -> tx_timer_internal_active_next =      timer_ptr;
 800d7c4:	687b      	ldr	r3, [r7, #4]
 800d7c6:	687a      	ldr	r2, [r7, #4]
 800d7c8:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =  timer_ptr;
 800d7ca:	687b      	ldr	r3, [r7, #4]
 800d7cc:	687a      	ldr	r2, [r7, #4]
 800d7ce:	615a      	str	r2, [r3, #20]

                    /* Setup the list head pointer.  */
                    *timer_list =  timer_ptr;
 800d7d0:	69fb      	ldr	r3, [r7, #28]
 800d7d2:	687a      	ldr	r2, [r7, #4]
 800d7d4:	601a      	str	r2, [r3, #0]
 800d7d6:	e011      	b.n	800d7fc <_tx_timer_system_activate+0xa4>
                }
                else
                {

                    /* This list is not NULL, add current timer to the end. */
                    next_timer =                                        *timer_list;
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	681b      	ldr	r3, [r3, #0]
 800d7dc:	60fb      	str	r3, [r7, #12]
                    previous_timer =                                    next_timer -> tx_timer_internal_active_previous;
 800d7de:	68fb      	ldr	r3, [r7, #12]
 800d7e0:	695b      	ldr	r3, [r3, #20]
 800d7e2:	60bb      	str	r3, [r7, #8]
                    previous_timer -> tx_timer_internal_active_next =   timer_ptr;
 800d7e4:	68bb      	ldr	r3, [r7, #8]
 800d7e6:	687a      	ldr	r2, [r7, #4]
 800d7e8:	611a      	str	r2, [r3, #16]
                    next_timer -> tx_timer_internal_active_previous =   timer_ptr;
 800d7ea:	68fb      	ldr	r3, [r7, #12]
 800d7ec:	687a      	ldr	r2, [r7, #4]
 800d7ee:	615a      	str	r2, [r3, #20]
                    timer_ptr -> tx_timer_internal_active_next =        next_timer;
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	68fa      	ldr	r2, [r7, #12]
 800d7f4:	611a      	str	r2, [r3, #16]
                    timer_ptr -> tx_timer_internal_active_previous =    previous_timer;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	68ba      	ldr	r2, [r7, #8]
 800d7fa:	615a      	str	r2, [r3, #20]
                }

                /* Setup list head pointer.  */
                timer_ptr -> tx_timer_internal_list_head =  timer_list;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	69fa      	ldr	r2, [r7, #28]
 800d800:	619a      	str	r2, [r3, #24]
            }
        }
    }
}
 800d802:	bf00      	nop
 800d804:	3724      	adds	r7, #36	; 0x24
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr
 800d80e:	bf00      	nop
 800d810:	20005f38 	.word	0x20005f38
 800d814:	20005f34 	.word	0x20005f34
 800d818:	20005f30 	.word	0x20005f30

0800d81c <_tx_timer_system_deactivate>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
VOID  _tx_timer_system_deactivate(TX_TIMER_INTERNAL *timer_ptr)
{
 800d81c:	b480      	push	{r7}
 800d81e:	b087      	sub	sp, #28
 800d820:	af00      	add	r7, sp, #0
 800d822:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL   *next_timer;
TX_TIMER_INTERNAL   *previous_timer;


    /* Pickup the list head pointer.  */
    list_head =  timer_ptr -> tx_timer_internal_list_head;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	699b      	ldr	r3, [r3, #24]
 800d828:	617b      	str	r3, [r7, #20]

    /* Determine if the timer still needs deactivation.  */
    if (list_head != TX_NULL)
 800d82a:	697b      	ldr	r3, [r7, #20]
 800d82c:	2b00      	cmp	r3, #0
 800d82e:	d026      	beq.n	800d87e <_tx_timer_system_deactivate+0x62>
    {

        /* Deactivate the timer.  */

        /* Pickup the next active timer.  */
        next_timer =  timer_ptr -> tx_timer_internal_active_next;
 800d830:	687b      	ldr	r3, [r7, #4]
 800d832:	691b      	ldr	r3, [r3, #16]
 800d834:	613b      	str	r3, [r7, #16]

        /* See if this is the only timer in the list.  */
        if (timer_ptr == next_timer)
 800d836:	687a      	ldr	r2, [r7, #4]
 800d838:	693b      	ldr	r3, [r7, #16]
 800d83a:	429a      	cmp	r2, r3
 800d83c:	d108      	bne.n	800d850 <_tx_timer_system_deactivate+0x34>
        {

            /* Yes, the only timer on the list.  */

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d83e:	697b      	ldr	r3, [r7, #20]
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	687a      	ldr	r2, [r7, #4]
 800d844:	429a      	cmp	r2, r3
 800d846:	d117      	bne.n	800d878 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the head pointer.  */
                *(list_head) =  TX_NULL;
 800d848:	697b      	ldr	r3, [r7, #20]
 800d84a:	2200      	movs	r2, #0
 800d84c:	601a      	str	r2, [r3, #0]
 800d84e:	e013      	b.n	800d878 <_tx_timer_system_deactivate+0x5c>
        {

            /* At least one more timer is on the same expiration list.  */

            /* Update the links of the adjacent timers.  */
            previous_timer =                                   timer_ptr -> tx_timer_internal_active_previous;
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	695b      	ldr	r3, [r3, #20]
 800d854:	60fb      	str	r3, [r7, #12]
            next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d856:	693b      	ldr	r3, [r7, #16]
 800d858:	68fa      	ldr	r2, [r7, #12]
 800d85a:	615a      	str	r2, [r3, #20]
            previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d85c:	68fb      	ldr	r3, [r7, #12]
 800d85e:	693a      	ldr	r2, [r7, #16]
 800d860:	611a      	str	r2, [r3, #16]

            /* Determine if the head pointer needs to be updated.  */
            if (*(list_head) == timer_ptr)
 800d862:	697b      	ldr	r3, [r7, #20]
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d105      	bne.n	800d878 <_tx_timer_system_deactivate+0x5c>
            {

                /* Update the next timer in the list with the list head pointer.  */
                next_timer -> tx_timer_internal_list_head =  list_head;
 800d86c:	693b      	ldr	r3, [r7, #16]
 800d86e:	697a      	ldr	r2, [r7, #20]
 800d870:	619a      	str	r2, [r3, #24]

                /* Update the head pointer.  */
                *(list_head) =  next_timer;
 800d872:	697b      	ldr	r3, [r7, #20]
 800d874:	693a      	ldr	r2, [r7, #16]
 800d876:	601a      	str	r2, [r3, #0]
            }
        }

        /* Clear the timer's list head pointer.  */
        timer_ptr -> tx_timer_internal_list_head =  TX_NULL;
 800d878:	687b      	ldr	r3, [r7, #4]
 800d87a:	2200      	movs	r2, #0
 800d87c:	619a      	str	r2, [r3, #24]
    }
}
 800d87e:	bf00      	nop
 800d880:	371c      	adds	r7, #28
 800d882:	46bd      	mov	sp, r7
 800d884:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d888:	4770      	bx	lr
	...

0800d88c <_tx_timer_thread_entry>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
#ifndef TX_TIMER_PROCESS_IN_ISR
VOID  _tx_timer_thread_entry(ULONG timer_thread_input)
{
 800d88c:	b580      	push	{r7, lr}
 800d88e:	b098      	sub	sp, #96	; 0x60
 800d890:	af00      	add	r7, sp, #0
 800d892:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *reactivate_timer;
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *previous_timer;
TX_TIMER_INTERNAL           *current_timer;
VOID                        (*timeout_function)(ULONG id);
ULONG                       timeout_param =  ((ULONG) 0);
 800d894:	2300      	movs	r3, #0
 800d896:	657b      	str	r3, [r7, #84]	; 0x54
#endif


    /* Make sure the timer input is correct.  This also gets rid of the
       silly compiler warnings.  */
    if (timer_thread_input == TX_TIMER_ID)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	4a73      	ldr	r2, [pc, #460]	; (800da68 <_tx_timer_thread_entry+0x1dc>)
 800d89c:	4293      	cmp	r3, r2
 800d89e:	f040 80de 	bne.w	800da5e <_tx_timer_thread_entry+0x1d2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d8a2:	f3ef 8310 	mrs	r3, PRIMASK
 800d8a6:	643b      	str	r3, [r7, #64]	; 0x40
    return(posture);
 800d8a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    int_posture = __get_interrupt_posture();
 800d8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
    __asm__ volatile ("CPSID i" : : : "memory");
 800d8ac:	b672      	cpsid	i
    return(int_posture);
 800d8ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
        {

            /* First, move the current list pointer and clear the timer
               expired value.  This allows the interrupt handling portion
               to continue looking for timer expirations.  */
            TX_DISABLE
 800d8b0:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Save the current timer expiration list pointer.  */
            expired_timers =  *_tx_timer_current_ptr;
 800d8b2:	4b6e      	ldr	r3, [pc, #440]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	681b      	ldr	r3, [r3, #0]
 800d8b8:	60fb      	str	r3, [r7, #12]

            /* Modify the head pointer in the first timer in the list, if there
               is one!  */
            if (expired_timers != TX_NULL)
 800d8ba:	68fb      	ldr	r3, [r7, #12]
 800d8bc:	2b00      	cmp	r3, #0
 800d8be:	d003      	beq.n	800d8c8 <_tx_timer_thread_entry+0x3c>
            {

                expired_timers -> tx_timer_internal_list_head =  &expired_timers;
 800d8c0:	68fb      	ldr	r3, [r7, #12]
 800d8c2:	f107 020c 	add.w	r2, r7, #12
 800d8c6:	619a      	str	r2, [r3, #24]
            }

            /* Set the current list pointer to NULL.  */
            *_tx_timer_current_ptr =  TX_NULL;
 800d8c8:	4b68      	ldr	r3, [pc, #416]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8ca:	681b      	ldr	r3, [r3, #0]
 800d8cc:	2200      	movs	r2, #0
 800d8ce:	601a      	str	r2, [r3, #0]

            /* Move the current pointer up one timer entry wrap if we get to
               the end of the list.  */
            _tx_timer_current_ptr =  TX_TIMER_POINTER_ADD(_tx_timer_current_ptr, 1);
 800d8d0:	4b66      	ldr	r3, [pc, #408]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8d2:	681b      	ldr	r3, [r3, #0]
 800d8d4:	3304      	adds	r3, #4
 800d8d6:	4a65      	ldr	r2, [pc, #404]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8d8:	6013      	str	r3, [r2, #0]
            if (_tx_timer_current_ptr == _tx_timer_list_end)
 800d8da:	4b64      	ldr	r3, [pc, #400]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8dc:	681a      	ldr	r2, [r3, #0]
 800d8de:	4b64      	ldr	r3, [pc, #400]	; (800da70 <_tx_timer_thread_entry+0x1e4>)
 800d8e0:	681b      	ldr	r3, [r3, #0]
 800d8e2:	429a      	cmp	r2, r3
 800d8e4:	d103      	bne.n	800d8ee <_tx_timer_thread_entry+0x62>
            {

                _tx_timer_current_ptr =  _tx_timer_list_start;
 800d8e6:	4b63      	ldr	r3, [pc, #396]	; (800da74 <_tx_timer_thread_entry+0x1e8>)
 800d8e8:	681b      	ldr	r3, [r3, #0]
 800d8ea:	4a60      	ldr	r2, [pc, #384]	; (800da6c <_tx_timer_thread_entry+0x1e0>)
 800d8ec:	6013      	str	r3, [r2, #0]
            }

            /* Clear the expired flag.  */
            _tx_timer_expired =  TX_FALSE;
 800d8ee:	4b62      	ldr	r3, [pc, #392]	; (800da78 <_tx_timer_thread_entry+0x1ec>)
 800d8f0:	2200      	movs	r2, #0
 800d8f2:	601a      	str	r2, [r3, #0]
 800d8f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d8f6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d8f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d8fa:	f383 8810 	msr	PRIMASK, r3
}
 800d8fe:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d900:	f3ef 8310 	mrs	r3, PRIMASK
 800d904:	63bb      	str	r3, [r7, #56]	; 0x38
    return(posture);
 800d906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    int_posture = __get_interrupt_posture();
 800d908:	637b      	str	r3, [r7, #52]	; 0x34
    __asm__ volatile ("CPSID i" : : : "memory");
 800d90a:	b672      	cpsid	i
    return(int_posture);
 800d90c:	6b7b      	ldr	r3, [r7, #52]	; 0x34

            /* Restore interrupts temporarily.  */
            TX_RESTORE

            /* Disable interrupts again.  */
            TX_DISABLE
 800d90e:	65fb      	str	r3, [r7, #92]	; 0x5c

            /* Next, process the expiration of the associated timers at this
               time slot.  */
            while (expired_timers != TX_NULL)
 800d910:	e07f      	b.n	800da12 <_tx_timer_thread_entry+0x186>
            {

                /* Something is on the list.  Remove it and process the expiration.  */
                current_timer =  expired_timers;
 800d912:	68fb      	ldr	r3, [r7, #12]
 800d914:	64fb      	str	r3, [r7, #76]	; 0x4c

                /* Pickup the next timer.  */
                next_timer =  expired_timers -> tx_timer_internal_active_next;
 800d916:	68fb      	ldr	r3, [r7, #12]
 800d918:	691b      	ldr	r3, [r3, #16]
 800d91a:	64bb      	str	r3, [r7, #72]	; 0x48

                /* Set the reactivate_timer to NULL.  */
                reactivate_timer =  TX_NULL;
 800d91c:	2300      	movs	r3, #0
 800d91e:	60bb      	str	r3, [r7, #8]

                /* Determine if this is the only timer.  */
                if (current_timer == next_timer)
 800d920:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d922:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d924:	429a      	cmp	r2, r3
 800d926:	d102      	bne.n	800d92e <_tx_timer_thread_entry+0xa2>
                {

                    /* Yes, this is the only timer in the list.  */

                    /* Set the head pointer to NULL.  */
                    expired_timers =  TX_NULL;
 800d928:	2300      	movs	r3, #0
 800d92a:	60fb      	str	r3, [r7, #12]
 800d92c:	e00e      	b.n	800d94c <_tx_timer_thread_entry+0xc0>
                {

                    /* No, not the only expired timer.  */

                    /* Remove this timer from the expired list.  */
                    previous_timer =                                   current_timer -> tx_timer_internal_active_previous;
 800d92e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d930:	695b      	ldr	r3, [r3, #20]
 800d932:	647b      	str	r3, [r7, #68]	; 0x44
                    next_timer -> tx_timer_internal_active_previous =  previous_timer;
 800d934:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d936:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d938:	615a      	str	r2, [r3, #20]
                    previous_timer -> tx_timer_internal_active_next =  next_timer;
 800d93a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d93c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d93e:	611a      	str	r2, [r3, #16]

                    /* Modify the next timer's list head to point at the current list head.  */
                    next_timer -> tx_timer_internal_list_head =  &expired_timers;
 800d940:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d942:	f107 020c 	add.w	r2, r7, #12
 800d946:	619a      	str	r2, [r3, #24]

                    /* Set the list head pointer.  */
                    expired_timers =  next_timer;
 800d948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d94a:	60fb      	str	r3, [r7, #12]

                /* In any case, the timer is now off of the expired list.  */

                /* Determine if the timer has expired or if it is just a really
                   big timer that needs to be placed in the list again.  */
                if (current_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800d94c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	2b20      	cmp	r3, #32
 800d952:	d911      	bls.n	800d978 <_tx_timer_thread_entry+0xec>
                    }
#endif

                    /* Decrement the remaining ticks of the timer.  */
                    current_timer -> tx_timer_internal_remaining_ticks =
                            current_timer -> tx_timer_internal_remaining_ticks - TX_TIMER_ENTRIES;
 800d954:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	f1a3 0220 	sub.w	r2, r3, #32
                    current_timer -> tx_timer_internal_remaining_ticks =
 800d95c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d95e:	601a      	str	r2, [r3, #0]

                    /* Set the timeout function to NULL in order to bypass the
                       expiration.  */
                    timeout_function =  TX_NULL;
 800d960:	2300      	movs	r3, #0
 800d962:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Make the timer appear that it is still active while interrupts
                       are enabled.  This will permit proper processing of a timer
                       deactivate from an ISR.  */
                    current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d964:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d966:	f107 0208 	add.w	r2, r7, #8
 800d96a:	619a      	str	r2, [r3, #24]
                    current_timer -> tx_timer_internal_active_next =  current_timer;
 800d96c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d96e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d970:	611a      	str	r2, [r3, #16]

                    /* Setup the temporary timer list head pointer.  */
                    reactivate_timer =  current_timer;
 800d972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d974:	60bb      	str	r3, [r7, #8]
 800d976:	e01a      	b.n	800d9ae <_tx_timer_thread_entry+0x122>
                    }
#endif

                    /* Copy the calling function and ID into local variables before interrupts
                       are re-enabled.  */
                    timeout_function =  current_timer -> tx_timer_internal_timeout_function;
 800d978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d97a:	689b      	ldr	r3, [r3, #8]
 800d97c:	65bb      	str	r3, [r7, #88]	; 0x58
                    timeout_param =     current_timer -> tx_timer_internal_timeout_param;
 800d97e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	657b      	str	r3, [r7, #84]	; 0x54

                    /* Copy the reinitialize ticks into the remaining ticks.  */
                    current_timer -> tx_timer_internal_remaining_ticks =  current_timer -> tx_timer_internal_re_initialize_ticks;
 800d984:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d986:	685a      	ldr	r2, [r3, #4]
 800d988:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98a:	601a      	str	r2, [r3, #0]

                    /* Determine if the timer should be reactivated.  */
                    if (current_timer -> tx_timer_internal_remaining_ticks != ((ULONG) 0))
 800d98c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d98e:	681b      	ldr	r3, [r3, #0]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d009      	beq.n	800d9a8 <_tx_timer_thread_entry+0x11c>

                        /* Make the timer appear that it is still active while processing
                           the expiration routine and with interrupts enabled.  This will
                           permit proper processing of a timer deactivate from both the
                           expiration routine and an ISR.  */
                        current_timer -> tx_timer_internal_list_head =    &reactivate_timer;
 800d994:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d996:	f107 0208 	add.w	r2, r7, #8
 800d99a:	619a      	str	r2, [r3, #24]
                        current_timer -> tx_timer_internal_active_next =  current_timer;
 800d99c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d99e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9a0:	611a      	str	r2, [r3, #16]

                        /* Setup the temporary timer list head pointer.  */
                        reactivate_timer =  current_timer;
 800d9a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9a4:	60bb      	str	r3, [r7, #8]
 800d9a6:	e002      	b.n	800d9ae <_tx_timer_thread_entry+0x122>
                    else
                    {

                        /* Set the list pointer of this timer to NULL.  This is used to indicate
                           the timer is no longer active.  */
                        current_timer -> tx_timer_internal_list_head =  TX_NULL;
 800d9a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9aa:	2200      	movs	r2, #0
 800d9ac:	619a      	str	r2, [r3, #24]
                    }
                }

                /* Set pointer to indicate the expired timer that is currently being processed.  */
                _tx_timer_expired_timer_ptr =  current_timer;
 800d9ae:	4a33      	ldr	r2, [pc, #204]	; (800da7c <_tx_timer_thread_entry+0x1f0>)
 800d9b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9b2:	6013      	str	r3, [r2, #0]
 800d9b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ba:	f383 8810 	msr	PRIMASK, r3
}
 800d9be:	bf00      	nop

                /* Restore interrupts for timer expiration call.  */
                TX_RESTORE

                /* Call the timer-expiration function, if non-NULL.  */
                if (timeout_function != TX_NULL)
 800d9c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d002      	beq.n	800d9cc <_tx_timer_thread_entry+0x140>
                {

                    (timeout_function) (timeout_param);
 800d9c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800d9c8:	6d78      	ldr	r0, [r7, #84]	; 0x54
 800d9ca:	4798      	blx	r3
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800d9cc:	f3ef 8310 	mrs	r3, PRIMASK
 800d9d0:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800d9d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800d9d4:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800d9d6:	b672      	cpsid	i
    return(int_posture);
 800d9d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                }

                /* Lockout interrupts again.  */
                TX_DISABLE
 800d9da:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* Clear expired timer pointer.  */
                _tx_timer_expired_timer_ptr =  TX_NULL;
 800d9dc:	4b27      	ldr	r3, [pc, #156]	; (800da7c <_tx_timer_thread_entry+0x1f0>)
 800d9de:	2200      	movs	r2, #0
 800d9e0:	601a      	str	r2, [r3, #0]

                /* Determine if the timer needs to be reactivated.  */
                if (reactivate_timer == current_timer)
 800d9e2:	68bb      	ldr	r3, [r7, #8]
 800d9e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d105      	bne.n	800d9f6 <_tx_timer_thread_entry+0x16a>
#else

                    /* Reactivate through the timer activate function.  */

                    /* Clear the list head for the timer activate call.  */
                    current_timer -> tx_timer_internal_list_head = TX_NULL;
 800d9ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d9ec:	2200      	movs	r2, #0
 800d9ee:	619a      	str	r2, [r3, #24]

                    /* Activate the current timer.  */
                    _tx_timer_system_activate(current_timer);
 800d9f0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800d9f2:	f7ff feb1 	bl	800d758 <_tx_timer_system_activate>
 800d9f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f8:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800d9fa:	69bb      	ldr	r3, [r7, #24]
 800d9fc:	f383 8810 	msr	PRIMASK, r3
}
 800da00:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800da02:	f3ef 8310 	mrs	r3, PRIMASK
 800da06:	623b      	str	r3, [r7, #32]
    return(posture);
 800da08:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800da0a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800da0c:	b672      	cpsid	i
    return(int_posture);
 800da0e:	69fb      	ldr	r3, [r7, #28]

                /* Restore interrupts.  */
                TX_RESTORE

                /* Lockout interrupts again.  */
                TX_DISABLE
 800da10:	65fb      	str	r3, [r7, #92]	; 0x5c
            while (expired_timers != TX_NULL)
 800da12:	68fb      	ldr	r3, [r7, #12]
 800da14:	2b00      	cmp	r3, #0
 800da16:	f47f af7c 	bne.w	800d912 <_tx_timer_thread_entry+0x86>

            /* Finally, suspend this thread and wait for the next expiration.  */

            /* Determine if another expiration took place while we were in this
               thread.  If so, process another expiration.  */
            if (_tx_timer_expired == TX_FALSE)
 800da1a:	4b17      	ldr	r3, [pc, #92]	; (800da78 <_tx_timer_thread_entry+0x1ec>)
 800da1c:	681b      	ldr	r3, [r3, #0]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d116      	bne.n	800da50 <_tx_timer_thread_entry+0x1c4>
            {

                /* Otherwise, no timer expiration, so suspend the thread.  */

                /* Build pointer to the timer thread.  */
                thread_ptr =  &_tx_timer_thread;
 800da22:	4b17      	ldr	r3, [pc, #92]	; (800da80 <_tx_timer_thread_entry+0x1f4>)
 800da24:	653b      	str	r3, [r7, #80]	; 0x50

                /* Set the status to suspending, in order to indicate the
                   suspension is in progress.  */
                thread_ptr -> tx_thread_state =  TX_SUSPENDED;
 800da26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da28:	2203      	movs	r2, #3
 800da2a:	631a      	str	r2, [r3, #48]	; 0x30
                /* Restore interrupts.  */
                TX_RESTORE
#else

                /* Set the suspending flag. */
                thread_ptr -> tx_thread_suspending =  TX_TRUE;
 800da2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800da2e:	2201      	movs	r2, #1
 800da30:	639a      	str	r2, [r3, #56]	; 0x38

                /* Increment the preempt disable count prior to suspending.  */
                _tx_thread_preempt_disable++;
 800da32:	4b14      	ldr	r3, [pc, #80]	; (800da84 <_tx_timer_thread_entry+0x1f8>)
 800da34:	681b      	ldr	r3, [r3, #0]
 800da36:	3301      	adds	r3, #1
 800da38:	4a12      	ldr	r2, [pc, #72]	; (800da84 <_tx_timer_thread_entry+0x1f8>)
 800da3a:	6013      	str	r3, [r2, #0]
 800da3c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da3e:	617b      	str	r3, [r7, #20]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da40:	697b      	ldr	r3, [r7, #20]
 800da42:	f383 8810 	msr	PRIMASK, r3
}
 800da46:	bf00      	nop

                /* Restore interrupts.  */
                TX_RESTORE

                /* Call actual thread suspension routine.  */
                _tx_thread_system_suspend(thread_ptr);
 800da48:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800da4a:	f7ff fb95 	bl	800d178 <_tx_thread_system_suspend>
 800da4e:	e728      	b.n	800d8a2 <_tx_timer_thread_entry+0x16>
 800da50:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800da52:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800da54:	693b      	ldr	r3, [r7, #16]
 800da56:	f383 8810 	msr	PRIMASK, r3
}
 800da5a:	bf00      	nop
            TX_DISABLE
 800da5c:	e721      	b.n	800d8a2 <_tx_timer_thread_entry+0x16>

    /* If we ever get here, raise safety critical exception.  */
    TX_SAFETY_CRITICAL_EXCEPTION(__FILE__, __LINE__, 0);
#endif

}
 800da5e:	bf00      	nop
 800da60:	3760      	adds	r7, #96	; 0x60
 800da62:	46bd      	mov	sp, r7
 800da64:	bd80      	pop	{r7, pc}
 800da66:	bf00      	nop
 800da68:	4154494d 	.word	0x4154494d
 800da6c:	20005f38 	.word	0x20005f38
 800da70:	20005f34 	.word	0x20005f34
 800da74:	20005f30 	.word	0x20005f30
 800da78:	20005f3c 	.word	0x20005f3c
 800da7c:	20005f48 	.word	0x20005f48
 800da80:	20005f4c 	.word	0x20005f4c
 800da84:	20005e9c 	.word	0x20005e9c

0800da88 <_txe_byte_allocate>:
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_allocate(TX_BYTE_POOL *pool_ptr, VOID **memory_ptr,
                                    ULONG memory_size,  ULONG wait_option)
{
 800da88:	b580      	push	{r7, lr}
 800da8a:	b08a      	sub	sp, #40	; 0x28
 800da8c:	af00      	add	r7, sp, #0
 800da8e:	60f8      	str	r0, [r7, #12]
 800da90:	60b9      	str	r1, [r7, #8]
 800da92:	607a      	str	r2, [r7, #4]
 800da94:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800da96:	2300      	movs	r3, #0
 800da98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	2b00      	cmp	r3, #0
 800da9e:	d102      	bne.n	800daa6 <_txe_byte_allocate+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800daa0:	2302      	movs	r3, #2
 800daa2:	627b      	str	r3, [r7, #36]	; 0x24
 800daa4:	e029      	b.n	800dafa <_txe_byte_allocate+0x72>
    }

    /* Now check for invalid pool ID.  */
    else if  (pool_ptr -> tx_byte_pool_id != TX_BYTE_POOL_ID)
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	4a2d      	ldr	r2, [pc, #180]	; (800db60 <_txe_byte_allocate+0xd8>)
 800daac:	4293      	cmp	r3, r2
 800daae:	d002      	beq.n	800dab6 <_txe_byte_allocate+0x2e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800dab0:	2302      	movs	r3, #2
 800dab2:	627b      	str	r3, [r7, #36]	; 0x24
 800dab4:	e021      	b.n	800dafa <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid destination for return pointer.  */
    else if (memory_ptr == TX_NULL)
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d102      	bne.n	800dac2 <_txe_byte_allocate+0x3a>
    {

        /* Null destination pointer, return appropriate error.  */
        status =  TX_PTR_ERROR;
 800dabc:	2303      	movs	r3, #3
 800dabe:	627b      	str	r3, [r7, #36]	; 0x24
 800dac0:	e01b      	b.n	800dafa <_txe_byte_allocate+0x72>
    }

    /* Check for an invalid memory size.  */
    else if (memory_size == ((ULONG) 0))
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d102      	bne.n	800dace <_txe_byte_allocate+0x46>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800dac8:	2305      	movs	r3, #5
 800daca:	627b      	str	r3, [r7, #36]	; 0x24
 800dacc:	e015      	b.n	800dafa <_txe_byte_allocate+0x72>
    }

    /* Determine if the size is greater than the pool size.  */
    else if (memory_size > pool_ptr -> tx_byte_pool_size)
 800dace:	68fb      	ldr	r3, [r7, #12]
 800dad0:	69db      	ldr	r3, [r3, #28]
 800dad2:	687a      	ldr	r2, [r7, #4]
 800dad4:	429a      	cmp	r2, r3
 800dad6:	d902      	bls.n	800dade <_txe_byte_allocate+0x56>
    {

        /* Error in size, return appropriate error.  */
        status =  TX_SIZE_ERROR;
 800dad8:	2305      	movs	r3, #5
 800dada:	627b      	str	r3, [r7, #36]	; 0x24
 800dadc:	e00d      	b.n	800dafa <_txe_byte_allocate+0x72>
    else
    {

        /* Check for a wait option error.  Only threads are allowed any form of
           suspension.  */
        if (wait_option != TX_NO_WAIT)
 800dade:	683b      	ldr	r3, [r7, #0]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	d00a      	beq.n	800dafa <_txe_byte_allocate+0x72>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dae4:	f3ef 8305 	mrs	r3, IPSR
 800dae8:	61fb      	str	r3, [r7, #28]
    return(ipsr_value);
 800daea:	69fa      	ldr	r2, [r7, #28]
        {

            /* Is call from ISR or Initialization?  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800daec:	4b1d      	ldr	r3, [pc, #116]	; (800db64 <_txe_byte_allocate+0xdc>)
 800daee:	681b      	ldr	r3, [r3, #0]
 800daf0:	4313      	orrs	r3, r2
 800daf2:	2b00      	cmp	r3, #0
 800daf4:	d001      	beq.n	800dafa <_txe_byte_allocate+0x72>
            {

                /* A non-thread is trying to suspend, return appropriate error code.  */
                status =  TX_WAIT_ERROR;
 800daf6:	2304      	movs	r3, #4
 800daf8:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Check for timer execution.  */
    if (status == TX_SUCCESS)
 800dafa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	d108      	bne.n	800db12 <_txe_byte_allocate+0x8a>
    {

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800db00:	4b19      	ldr	r3, [pc, #100]	; (800db68 <_txe_byte_allocate+0xe0>)
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	623b      	str	r3, [r7, #32]

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800db06:	6a3b      	ldr	r3, [r7, #32]
 800db08:	4a18      	ldr	r2, [pc, #96]	; (800db6c <_txe_byte_allocate+0xe4>)
 800db0a:	4293      	cmp	r3, r2
 800db0c:	d101      	bne.n	800db12 <_txe_byte_allocate+0x8a>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800db0e:	2313      	movs	r3, #19
 800db10:	627b      	str	r3, [r7, #36]	; 0x24
        }
    }
#endif

    /* Is everything still okay?  */
    if (status == TX_SUCCESS)
 800db12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db14:	2b00      	cmp	r3, #0
 800db16:	d114      	bne.n	800db42 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db18:	f3ef 8305 	mrs	r3, IPSR
 800db1c:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800db1e:	69ba      	ldr	r2, [r7, #24]
    {

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800db20:	4b10      	ldr	r3, [pc, #64]	; (800db64 <_txe_byte_allocate+0xdc>)
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	4313      	orrs	r3, r2
 800db26:	2b00      	cmp	r3, #0
 800db28:	d00b      	beq.n	800db42 <_txe_byte_allocate+0xba>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800db2a:	f3ef 8305 	mrs	r3, IPSR
 800db2e:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800db30:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800db32:	4b0c      	ldr	r3, [pc, #48]	; (800db64 <_txe_byte_allocate+0xdc>)
 800db34:	681b      	ldr	r3, [r3, #0]
 800db36:	4313      	orrs	r3, r2
 800db38:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800db3c:	d201      	bcs.n	800db42 <_txe_byte_allocate+0xba>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800db3e:	2313      	movs	r3, #19
 800db40:	627b      	str	r3, [r7, #36]	; 0x24
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800db42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db44:	2b00      	cmp	r3, #0
 800db46:	d106      	bne.n	800db56 <_txe_byte_allocate+0xce>
    {

        /* Call actual byte memory allocate function.  */
        status =  _tx_byte_allocate(pool_ptr, memory_ptr, memory_size,  wait_option);
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	687a      	ldr	r2, [r7, #4]
 800db4c:	68b9      	ldr	r1, [r7, #8]
 800db4e:	68f8      	ldr	r0, [r7, #12]
 800db50:	f7fe fc86 	bl	800c460 <_tx_byte_allocate>
 800db54:	6278      	str	r0, [r7, #36]	; 0x24
    }

    /* Return completion status.  */
    return(status);
 800db56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800db58:	4618      	mov	r0, r3
 800db5a:	3728      	adds	r7, #40	; 0x28
 800db5c:	46bd      	mov	sp, r7
 800db5e:	bd80      	pop	{r7, pc}
 800db60:	42595445 	.word	0x42595445
 800db64:	2000000c 	.word	0x2000000c
 800db68:	20005e04 	.word	0x20005e04
 800db6c:	20005f4c 	.word	0x20005f4c

0800db70 <_txe_byte_pool_create>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_byte_pool_create(TX_BYTE_POOL *pool_ptr, CHAR *name_ptr, VOID *pool_start, ULONG pool_size, UINT pool_control_block_size)
{
 800db70:	b580      	push	{r7, lr}
 800db72:	b092      	sub	sp, #72	; 0x48
 800db74:	af00      	add	r7, sp, #0
 800db76:	60f8      	str	r0, [r7, #12]
 800db78:	60b9      	str	r1, [r7, #8]
 800db7a:	607a      	str	r2, [r7, #4]
 800db7c:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800db7e:	2300      	movs	r3, #0
 800db80:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for an invalid byte pool pointer.  */
    if (pool_ptr == TX_NULL)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	2b00      	cmp	r3, #0
 800db86:	d102      	bne.n	800db8e <_txe_byte_pool_create+0x1e>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800db88:	2302      	movs	r3, #2
 800db8a:	647b      	str	r3, [r7, #68]	; 0x44
 800db8c:	e075      	b.n	800dc7a <_txe_byte_pool_create+0x10a>
    }

    /* Now see if the pool control block size is valid.  */
    else if (pool_control_block_size != (sizeof(TX_BYTE_POOL)))
 800db8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800db90:	2b34      	cmp	r3, #52	; 0x34
 800db92:	d002      	beq.n	800db9a <_txe_byte_pool_create+0x2a>
    {

        /* Byte pool pointer is invalid, return appropriate error code.  */
        status =  TX_POOL_ERROR;
 800db94:	2302      	movs	r3, #2
 800db96:	647b      	str	r3, [r7, #68]	; 0x44
 800db98:	e06f      	b.n	800dc7a <_txe_byte_pool_create+0x10a>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800db9a:	f3ef 8310 	mrs	r3, PRIMASK
 800db9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800dba2:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dba4:	b672      	cpsid	i
    return(int_posture);
 800dba6:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800dba8:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dbaa:	4b3b      	ldr	r3, [pc, #236]	; (800dc98 <_txe_byte_pool_create+0x128>)
 800dbac:	681b      	ldr	r3, [r3, #0]
 800dbae:	3301      	adds	r3, #1
 800dbb0:	4a39      	ldr	r2, [pc, #228]	; (800dc98 <_txe_byte_pool_create+0x128>)
 800dbb2:	6013      	str	r3, [r2, #0]
 800dbb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dbb6:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dbb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbba:	f383 8810 	msr	PRIMASK, r3
}
 800dbbe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_pool =   _tx_byte_pool_created_ptr;
 800dbc0:	4b36      	ldr	r3, [pc, #216]	; (800dc9c <_txe_byte_pool_create+0x12c>)
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dbc6:	2300      	movs	r3, #0
 800dbc8:	643b      	str	r3, [r7, #64]	; 0x40
 800dbca:	e009      	b.n	800dbe0 <_txe_byte_pool_create+0x70>
        {

            /* Determine if this byte pool matches the pool in the list.  */
            if (pool_ptr == next_pool)
 800dbcc:	68fa      	ldr	r2, [r7, #12]
 800dbce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd0:	429a      	cmp	r2, r3
 800dbd2:	d00b      	beq.n	800dbec <_txe_byte_pool_create+0x7c>
            }
            else
            {

                /* Move to the next pool.  */
                next_pool =  next_pool -> tx_byte_pool_created_next;
 800dbd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_byte_pool_created_count; i++)
 800dbda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dbdc:	3301      	adds	r3, #1
 800dbde:	643b      	str	r3, [r7, #64]	; 0x40
 800dbe0:	4b2f      	ldr	r3, [pc, #188]	; (800dca0 <_txe_byte_pool_create+0x130>)
 800dbe2:	681b      	ldr	r3, [r3, #0]
 800dbe4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dbe6:	429a      	cmp	r2, r3
 800dbe8:	d3f0      	bcc.n	800dbcc <_txe_byte_pool_create+0x5c>
 800dbea:	e000      	b.n	800dbee <_txe_byte_pool_create+0x7e>
                break;
 800dbec:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dbee:	f3ef 8310 	mrs	r3, PRIMASK
 800dbf2:	623b      	str	r3, [r7, #32]
    return(posture);
 800dbf4:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800dbf6:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dbf8:	b672      	cpsid	i
    return(int_posture);
 800dbfa:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800dbfc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800dbfe:	4b26      	ldr	r3, [pc, #152]	; (800dc98 <_txe_byte_pool_create+0x128>)
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	3b01      	subs	r3, #1
 800dc04:	4a24      	ldr	r2, [pc, #144]	; (800dc98 <_txe_byte_pool_create+0x128>)
 800dc06:	6013      	str	r3, [r2, #0]
 800dc08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc0a:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dc0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc0e:	f383 8810 	msr	PRIMASK, r3
}
 800dc12:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800dc14:	f7ff f976 	bl	800cf04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate pool.  */
        if (pool_ptr == next_pool)
 800dc18:	68fa      	ldr	r2, [r7, #12]
 800dc1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc1c:	429a      	cmp	r2, r3
 800dc1e:	d102      	bne.n	800dc26 <_txe_byte_pool_create+0xb6>
        {

            /* Pool is already created, return appropriate error code.  */
            status =  TX_POOL_ERROR;
 800dc20:	2302      	movs	r3, #2
 800dc22:	647b      	str	r3, [r7, #68]	; 0x44
 800dc24:	e029      	b.n	800dc7a <_txe_byte_pool_create+0x10a>
        }

        /* Check for an invalid starting address.  */
        else if (pool_start == TX_NULL)
 800dc26:	687b      	ldr	r3, [r7, #4]
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d102      	bne.n	800dc32 <_txe_byte_pool_create+0xc2>
        {

            /* Null starting address pointer, return appropriate error.  */
            status =  TX_PTR_ERROR;
 800dc2c:	2303      	movs	r3, #3
 800dc2e:	647b      	str	r3, [r7, #68]	; 0x44
 800dc30:	e023      	b.n	800dc7a <_txe_byte_pool_create+0x10a>
        }

        /* Check for invalid pool size.  */
        else if (pool_size < TX_BYTE_POOL_MIN)
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	2b63      	cmp	r3, #99	; 0x63
 800dc36:	d802      	bhi.n	800dc3e <_txe_byte_pool_create+0xce>
        {

            /* Pool not big enough, return appropriate error.  */
            status =  TX_SIZE_ERROR;
 800dc38:	2305      	movs	r3, #5
 800dc3a:	647b      	str	r3, [r7, #68]	; 0x44
 800dc3c:	e01d      	b.n	800dc7a <_txe_byte_pool_create+0x10a>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(thread_ptr)
 800dc3e:	4b19      	ldr	r3, [pc, #100]	; (800dca4 <_txe_byte_pool_create+0x134>)
 800dc40:	681b      	ldr	r3, [r3, #0]
 800dc42:	637b      	str	r3, [r7, #52]	; 0x34

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (thread_ptr == &_tx_timer_thread)
 800dc44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc46:	4a18      	ldr	r2, [pc, #96]	; (800dca8 <_txe_byte_pool_create+0x138>)
 800dc48:	4293      	cmp	r3, r2
 800dc4a:	d101      	bne.n	800dc50 <_txe_byte_pool_create+0xe0>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dc4c:	2313      	movs	r3, #19
 800dc4e:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc50:	f3ef 8305 	mrs	r3, IPSR
 800dc54:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800dc56:	69ba      	ldr	r2, [r7, #24]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800dc58:	4b14      	ldr	r3, [pc, #80]	; (800dcac <_txe_byte_pool_create+0x13c>)
 800dc5a:	681b      	ldr	r3, [r3, #0]
 800dc5c:	4313      	orrs	r3, r2
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d00b      	beq.n	800dc7a <_txe_byte_pool_create+0x10a>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800dc62:	f3ef 8305 	mrs	r3, IPSR
 800dc66:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800dc68:	697a      	ldr	r2, [r7, #20]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800dc6a:	4b10      	ldr	r3, [pc, #64]	; (800dcac <_txe_byte_pool_create+0x13c>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4313      	orrs	r3, r2
 800dc70:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dc74:	d201      	bcs.n	800dc7a <_txe_byte_pool_create+0x10a>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800dc76:	2313      	movs	r3, #19
 800dc78:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dc7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d106      	bne.n	800dc8e <_txe_byte_pool_create+0x11e>
    {

        /* Call actual byte pool create function.  */
        status =  _tx_byte_pool_create(pool_ptr, name_ptr, pool_start, pool_size);
 800dc80:	683b      	ldr	r3, [r7, #0]
 800dc82:	687a      	ldr	r2, [r7, #4]
 800dc84:	68b9      	ldr	r1, [r7, #8]
 800dc86:	68f8      	ldr	r0, [r7, #12]
 800dc88:	f7fe fd2c 	bl	800c6e4 <_tx_byte_pool_create>
 800dc8c:	6478      	str	r0, [r7, #68]	; 0x44
    }

    /* Return completion status.  */
    return(status);
 800dc8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800dc90:	4618      	mov	r0, r3
 800dc92:	3748      	adds	r7, #72	; 0x48
 800dc94:	46bd      	mov	sp, r7
 800dc96:	bd80      	pop	{r7, pc}
 800dc98:	20005e9c 	.word	0x20005e9c
 800dc9c:	20005df4 	.word	0x20005df4
 800dca0:	20005df8 	.word	0x20005df8
 800dca4:	20005e04 	.word	0x20005e04
 800dca8:	20005f4c 	.word	0x20005f4c
 800dcac:	2000000c 	.word	0x2000000c

0800dcb0 <_txe_thread_create>:
UINT    _txe_thread_create(TX_THREAD *thread_ptr, CHAR *name_ptr,
                VOID (*entry_function)(ULONG id), ULONG entry_input,
                VOID *stack_start, ULONG stack_size,
                UINT priority, UINT preempt_threshold,
                ULONG time_slice, UINT auto_start, UINT thread_control_block_size)
{
 800dcb0:	b580      	push	{r7, lr}
 800dcb2:	b09a      	sub	sp, #104	; 0x68
 800dcb4:	af06      	add	r7, sp, #24
 800dcb6:	60f8      	str	r0, [r7, #12]
 800dcb8:	60b9      	str	r1, [r7, #8]
 800dcba:	607a      	str	r2, [r7, #4]
 800dcbc:	603b      	str	r3, [r7, #0]
TX_THREAD       *current_thread;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dcbe:	2300      	movs	r3, #0
 800dcc0:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Check for an invalid thread pointer.  */
    if (thread_ptr == TX_NULL)
 800dcc2:	68fb      	ldr	r3, [r7, #12]
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d102      	bne.n	800dcce <_txe_thread_create+0x1e>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800dcc8:	230e      	movs	r3, #14
 800dcca:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dccc:	e0bb      	b.n	800de46 <_txe_thread_create+0x196>
    }

    /* Now check for invalid thread control block size.  */
    else if (thread_control_block_size != (sizeof(TX_THREAD)))
 800dcce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800dcd0:	2bb0      	cmp	r3, #176	; 0xb0
 800dcd2:	d002      	beq.n	800dcda <_txe_thread_create+0x2a>
    {

        /* Thread pointer is invalid, return appropriate error code.  */
        status =  TX_THREAD_ERROR;
 800dcd4:	230e      	movs	r3, #14
 800dcd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dcd8:	e0b5      	b.n	800de46 <_txe_thread_create+0x196>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dcda:	f3ef 8310 	mrs	r3, PRIMASK
 800dcde:	62bb      	str	r3, [r7, #40]	; 0x28
    return(posture);
 800dce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
    int_posture = __get_interrupt_posture();
 800dce2:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("CPSID i" : : : "memory");
 800dce4:	b672      	cpsid	i
    return(int_posture);
 800dce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800dce8:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dcea:	4b64      	ldr	r3, [pc, #400]	; (800de7c <_txe_thread_create+0x1cc>)
 800dcec:	681b      	ldr	r3, [r3, #0]
 800dcee:	3301      	adds	r3, #1
 800dcf0:	4a62      	ldr	r2, [pc, #392]	; (800de7c <_txe_thread_create+0x1cc>)
 800dcf2:	6013      	str	r3, [r2, #0]
 800dcf4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dcf6:	62fb      	str	r3, [r7, #44]	; 0x2c
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dcf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcfa:	f383 8810 	msr	PRIMASK, r3
}
 800dcfe:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        break_flag =   TX_FALSE;
 800dd00:	2300      	movs	r3, #0
 800dd02:	64bb      	str	r3, [r7, #72]	; 0x48
        next_thread =  _tx_thread_created_ptr;
 800dd04:	4b5e      	ldr	r3, [pc, #376]	; (800de80 <_txe_thread_create+0x1d0>)
 800dd06:	681b      	ldr	r3, [r3, #0]
 800dd08:	643b      	str	r3, [r7, #64]	; 0x40
        work_ptr =     TX_VOID_TO_UCHAR_POINTER_CONVERT(stack_start);
 800dd0a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dd0c:	63bb      	str	r3, [r7, #56]	; 0x38
        work_ptr =     TX_UCHAR_POINTER_ADD(work_ptr, (stack_size - ((ULONG) 1)));
 800dd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dd10:	3b01      	subs	r3, #1
 800dd12:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dd14:	4413      	add	r3, r2
 800dd16:	63bb      	str	r3, [r7, #56]	; 0x38
        stack_end =    TX_UCHAR_TO_VOID_POINTER_CONVERT(work_ptr);
 800dd18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dd1a:	637b      	str	r3, [r7, #52]	; 0x34
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800dd1c:	2300      	movs	r3, #0
 800dd1e:	647b      	str	r3, [r7, #68]	; 0x44
 800dd20:	e02b      	b.n	800dd7a <_txe_thread_create+0xca>
        {

            /* Determine if this thread matches the thread in the list.  */
            if (thread_ptr == next_thread)
 800dd22:	68fa      	ldr	r2, [r7, #12]
 800dd24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd26:	429a      	cmp	r2, r3
 800dd28:	d101      	bne.n	800dd2e <_txe_thread_create+0x7e>
            {

                /* Set the break flag.  */
                break_flag =  TX_TRUE;
 800dd2a:	2301      	movs	r3, #1
 800dd2c:	64bb      	str	r3, [r7, #72]	; 0x48
            }

            /* Determine if we need to break the loop.  */
            if (break_flag == TX_TRUE)
 800dd2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dd30:	2b01      	cmp	r3, #1
 800dd32:	d028      	beq.n	800dd86 <_txe_thread_create+0xd6>
                /* Yes, break out of the loop.  */
                break;
            }

            /* Check the stack pointer to see if it overlaps with this thread's stack.  */
            if (stack_start >= next_thread -> tx_thread_stack_start)
 800dd34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd36:	68db      	ldr	r3, [r3, #12]
 800dd38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd3a:	429a      	cmp	r2, r3
 800dd3c:	d308      	bcc.n	800dd50 <_txe_thread_create+0xa0>
            {

                if (stack_start < next_thread -> tx_thread_stack_end)
 800dd3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dd44:	429a      	cmp	r2, r3
 800dd46:	d203      	bcs.n	800dd50 <_txe_thread_create+0xa0>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800dd48:	2300      	movs	r3, #0
 800dd4a:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800dd4c:	2301      	movs	r3, #1
 800dd4e:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Check the end of the stack to see if it is inside this thread's stack area as well.  */
            if (stack_end >= next_thread -> tx_thread_stack_start)
 800dd50:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd52:	68db      	ldr	r3, [r3, #12]
 800dd54:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd56:	429a      	cmp	r2, r3
 800dd58:	d308      	bcc.n	800dd6c <_txe_thread_create+0xbc>
            {

                if (stack_end < next_thread -> tx_thread_stack_end)
 800dd5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd5c:	691b      	ldr	r3, [r3, #16]
 800dd5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dd60:	429a      	cmp	r2, r3
 800dd62:	d203      	bcs.n	800dd6c <_txe_thread_create+0xbc>
                {

                    /* This stack overlaps with an existing thread, clear the stack pointer to
                       force a stack error below.  */
                    stack_start =  TX_NULL;
 800dd64:	2300      	movs	r3, #0
 800dd66:	65bb      	str	r3, [r7, #88]	; 0x58

                    /* Set the break flag.  */
                    break_flag =  TX_TRUE;
 800dd68:	2301      	movs	r3, #1
 800dd6a:	64bb      	str	r3, [r7, #72]	; 0x48
                }
            }

            /* Move to the next thread.  */
            next_thread =  next_thread -> tx_thread_created_next;
 800dd6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dd6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800dd72:	643b      	str	r3, [r7, #64]	; 0x40
        for (i = ((ULONG) 0); i < _tx_thread_created_count; i++)
 800dd74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dd76:	3301      	adds	r3, #1
 800dd78:	647b      	str	r3, [r7, #68]	; 0x44
 800dd7a:	4b42      	ldr	r3, [pc, #264]	; (800de84 <_txe_thread_create+0x1d4>)
 800dd7c:	681b      	ldr	r3, [r3, #0]
 800dd7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dd80:	429a      	cmp	r2, r3
 800dd82:	d3ce      	bcc.n	800dd22 <_txe_thread_create+0x72>
 800dd84:	e000      	b.n	800dd88 <_txe_thread_create+0xd8>
                break;
 800dd86:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800dd88:	f3ef 8310 	mrs	r3, PRIMASK
 800dd8c:	61fb      	str	r3, [r7, #28]
    return(posture);
 800dd8e:	69fb      	ldr	r3, [r7, #28]
    int_posture = __get_interrupt_posture();
 800dd90:	61bb      	str	r3, [r7, #24]
    __asm__ volatile ("CPSID i" : : : "memory");
 800dd92:	b672      	cpsid	i
    return(int_posture);
 800dd94:	69bb      	ldr	r3, [r7, #24]
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800dd96:	63fb      	str	r3, [r7, #60]	; 0x3c

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800dd98:	4b38      	ldr	r3, [pc, #224]	; (800de7c <_txe_thread_create+0x1cc>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	3b01      	subs	r3, #1
 800dd9e:	4a37      	ldr	r2, [pc, #220]	; (800de7c <_txe_thread_create+0x1cc>)
 800dda0:	6013      	str	r3, [r2, #0]
 800dda2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dda4:	623b      	str	r3, [r7, #32]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dda6:	6a3b      	ldr	r3, [r7, #32]
 800dda8:	f383 8810 	msr	PRIMASK, r3
}
 800ddac:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800ddae:	f7ff f8a9 	bl	800cf04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate thread.  */
        if (thread_ptr == next_thread)
 800ddb2:	68fa      	ldr	r2, [r7, #12]
 800ddb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ddb6:	429a      	cmp	r2, r3
 800ddb8:	d102      	bne.n	800ddc0 <_txe_thread_create+0x110>
        {

            /* Thread is already created, return appropriate error code.  */
            status =  TX_THREAD_ERROR;
 800ddba:	230e      	movs	r3, #14
 800ddbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddbe:	e042      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check for invalid starting address of stack.  */
        else if (stack_start == TX_NULL)
 800ddc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ddc2:	2b00      	cmp	r3, #0
 800ddc4:	d102      	bne.n	800ddcc <_txe_thread_create+0x11c>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800ddc6:	2303      	movs	r3, #3
 800ddc8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddca:	e03c      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check for invalid thread entry point.  */
        else if (entry_function == TX_NULL)
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	2b00      	cmp	r3, #0
 800ddd0:	d102      	bne.n	800ddd8 <_txe_thread_create+0x128>
        {

            /* Invalid stack or entry point, return appropriate error code.  */
            status =  TX_PTR_ERROR;
 800ddd2:	2303      	movs	r3, #3
 800ddd4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddd6:	e036      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check the stack size.  */
        else if (stack_size < ((ULONG) TX_MINIMUM_STACK))
 800ddd8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ddda:	2bc7      	cmp	r3, #199	; 0xc7
 800dddc:	d802      	bhi.n	800dde4 <_txe_thread_create+0x134>
        {

            /* Stack is not big enough, return appropriate error code.  */
            status =  TX_SIZE_ERROR;
 800ddde:	2305      	movs	r3, #5
 800dde0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800dde2:	e030      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check the priority specified.  */
        else if (priority >= ((UINT) TX_MAX_PRIORITIES))
 800dde4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800dde6:	2b1f      	cmp	r3, #31
 800dde8:	d902      	bls.n	800ddf0 <_txe_thread_create+0x140>
        {

            /* Invalid priority selected, return appropriate error code.  */
            status =  TX_PRIORITY_ERROR;
 800ddea:	230f      	movs	r3, #15
 800ddec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddee:	e02a      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check preemption threshold. */
        else if (preempt_threshold > priority)
 800ddf0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800ddf2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800ddf4:	429a      	cmp	r2, r3
 800ddf6:	d902      	bls.n	800ddfe <_txe_thread_create+0x14e>
        {

            /* Invalid preempt threshold, return appropriate error code.  */
            status =  TX_THRESH_ERROR;
 800ddf8:	2318      	movs	r3, #24
 800ddfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ddfc:	e023      	b.n	800de46 <_txe_thread_create+0x196>
        }

        /* Check the start selection.  */
        else if (auto_start > TX_AUTO_START)
 800ddfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de00:	2b01      	cmp	r3, #1
 800de02:	d902      	bls.n	800de0a <_txe_thread_create+0x15a>
        {

            /* Invalid auto start selection, return appropriate error code.  */
            status =  TX_START_ERROR;
 800de04:	2310      	movs	r3, #16
 800de06:	64fb      	str	r3, [r7, #76]	; 0x4c
 800de08:	e01d      	b.n	800de46 <_txe_thread_create+0x196>
        {

#ifndef TX_TIMER_PROCESS_IN_ISR

            /* Pickup thread pointer.  */
            TX_THREAD_GET_CURRENT(current_thread)
 800de0a:	4b1f      	ldr	r3, [pc, #124]	; (800de88 <_txe_thread_create+0x1d8>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	633b      	str	r3, [r7, #48]	; 0x30

            /* Check for invalid caller of this function.  First check for a calling thread.  */
            if (current_thread == &_tx_timer_thread)
 800de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de12:	4a1e      	ldr	r2, [pc, #120]	; (800de8c <_txe_thread_create+0x1dc>)
 800de14:	4293      	cmp	r3, r2
 800de16:	d101      	bne.n	800de1c <_txe_thread_create+0x16c>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800de18:	2313      	movs	r3, #19
 800de1a:	64fb      	str	r3, [r7, #76]	; 0x4c
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de1c:	f3ef 8305 	mrs	r3, IPSR
 800de20:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800de22:	697a      	ldr	r2, [r7, #20]
            }
#endif

            /* Check for interrupt call.  */
            if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800de24:	4b1a      	ldr	r3, [pc, #104]	; (800de90 <_txe_thread_create+0x1e0>)
 800de26:	681b      	ldr	r3, [r3, #0]
 800de28:	4313      	orrs	r3, r2
 800de2a:	2b00      	cmp	r3, #0
 800de2c:	d00b      	beq.n	800de46 <_txe_thread_create+0x196>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800de2e:	f3ef 8305 	mrs	r3, IPSR
 800de32:	613b      	str	r3, [r7, #16]
    return(ipsr_value);
 800de34:	693a      	ldr	r2, [r7, #16]
            {

                /* Now, make sure the call is from an interrupt and not initialization.  */
                if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800de36:	4b16      	ldr	r3, [pc, #88]	; (800de90 <_txe_thread_create+0x1e0>)
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	4313      	orrs	r3, r2
 800de3c:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800de40:	d201      	bcs.n	800de46 <_txe_thread_create+0x196>
                {

                    /* Invalid caller of this function, return appropriate error code.  */
                    status =  TX_CALLER_ERROR;
 800de42:	2313      	movs	r3, #19
 800de44:	64fb      	str	r3, [r7, #76]	; 0x4c
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800de46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d112      	bne.n	800de72 <_txe_thread_create+0x1c2>
    {

        /* Call actual thread create function.  */
        status =  _tx_thread_create(thread_ptr, name_ptr, entry_function, entry_input,
 800de4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800de4e:	9305      	str	r3, [sp, #20]
 800de50:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800de52:	9304      	str	r3, [sp, #16]
 800de54:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800de56:	9303      	str	r3, [sp, #12]
 800de58:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800de5a:	9302      	str	r3, [sp, #8]
 800de5c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800de5e:	9301      	str	r3, [sp, #4]
 800de60:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800de62:	9300      	str	r3, [sp, #0]
 800de64:	683b      	ldr	r3, [r7, #0]
 800de66:	687a      	ldr	r2, [r7, #4]
 800de68:	68b9      	ldr	r1, [r7, #8]
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f7fe fe4c 	bl	800cb08 <_tx_thread_create>
 800de70:	64f8      	str	r0, [r7, #76]	; 0x4c
                        stack_start, stack_size, priority, preempt_threshold,
                        time_slice, auto_start);
    }

    /* Return completion status.  */
    return(status);
 800de72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 800de74:	4618      	mov	r0, r3
 800de76:	3750      	adds	r7, #80	; 0x50
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}
 800de7c:	20005e9c 	.word	0x20005e9c
 800de80:	20005e0c 	.word	0x20005e0c
 800de84:	20005e10 	.word	0x20005e10
 800de88:	20005e04 	.word	0x20005e04
 800de8c:	20005f4c 	.word	0x20005f4c
 800de90:	2000000c 	.word	0x2000000c

0800de94 <_txe_timer_create>:
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_create(TX_TIMER *timer_ptr, CHAR *name_ptr,
            VOID (*expiration_function)(ULONG id), ULONG expiration_input,
            ULONG initial_ticks, ULONG reschedule_ticks, UINT auto_activate, UINT timer_control_block_size)
{
 800de94:	b580      	push	{r7, lr}
 800de96:	b096      	sub	sp, #88	; 0x58
 800de98:	af04      	add	r7, sp, #16
 800de9a:	60f8      	str	r0, [r7, #12]
 800de9c:	60b9      	str	r1, [r7, #8]
 800de9e:	607a      	str	r2, [r7, #4]
 800dea0:	603b      	str	r3, [r7, #0]
TX_THREAD       *thread_ptr;
#endif


    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dea2:	2300      	movs	r3, #0
 800dea4:	647b      	str	r3, [r7, #68]	; 0x44

    /* Check for a NULL timer pointer.  */
    if (timer_ptr == TX_NULL)
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d102      	bne.n	800deb2 <_txe_timer_create+0x1e>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800deac:	2315      	movs	r3, #21
 800deae:	647b      	str	r3, [r7, #68]	; 0x44
 800deb0:	e059      	b.n	800df66 <_txe_timer_create+0xd2>
    }

    /* Now check for invalid control block size.  */
    else if (timer_control_block_size != (sizeof(TX_TIMER)))
 800deb2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800deb4:	2b2c      	cmp	r3, #44	; 0x2c
 800deb6:	d002      	beq.n	800debe <_txe_timer_create+0x2a>
    {

        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800deb8:	2315      	movs	r3, #21
 800deba:	647b      	str	r3, [r7, #68]	; 0x44
 800debc:	e053      	b.n	800df66 <_txe_timer_create+0xd2>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800debe:	f3ef 8310 	mrs	r3, PRIMASK
 800dec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    return(posture);
 800dec4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    int_posture = __get_interrupt_posture();
 800dec6:	62bb      	str	r3, [r7, #40]	; 0x28
    __asm__ volatile ("CPSID i" : : : "memory");
 800dec8:	b672      	cpsid	i
    return(int_posture);
 800deca:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    else
    {

        /* Disable interrupts.  */
        TX_DISABLE
 800decc:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Increment the preempt disable flag.  */
        _tx_thread_preempt_disable++;
 800dece:	4b41      	ldr	r3, [pc, #260]	; (800dfd4 <_txe_timer_create+0x140>)
 800ded0:	681b      	ldr	r3, [r3, #0]
 800ded2:	3301      	adds	r3, #1
 800ded4:	4a3f      	ldr	r2, [pc, #252]	; (800dfd4 <_txe_timer_create+0x140>)
 800ded6:	6013      	str	r3, [r2, #0]
 800ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deda:	633b      	str	r3, [r7, #48]	; 0x30
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800dedc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dede:	f383 8810 	msr	PRIMASK, r3
}
 800dee2:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Next see if it is already in the created list.  */
        next_timer =  _tx_timer_created_ptr;
 800dee4:	4b3c      	ldr	r3, [pc, #240]	; (800dfd8 <_txe_timer_create+0x144>)
 800dee6:	681b      	ldr	r3, [r3, #0]
 800dee8:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800deea:	2300      	movs	r3, #0
 800deec:	643b      	str	r3, [r7, #64]	; 0x40
 800deee:	e009      	b.n	800df04 <_txe_timer_create+0x70>
        {

            /* Determine if this timer matches the current timer in the list.  */
            if (timer_ptr == next_timer)
 800def0:	68fa      	ldr	r2, [r7, #12]
 800def2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800def4:	429a      	cmp	r2, r3
 800def6:	d00b      	beq.n	800df10 <_txe_timer_create+0x7c>
            }
            else
            {

                /* Move to next timer.  */
                next_timer =  next_timer -> tx_timer_created_next;
 800def8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800defa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800defc:	63fb      	str	r3, [r7, #60]	; 0x3c
        for (i = ((ULONG) 0); i < _tx_timer_created_count; i++)
 800defe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df00:	3301      	adds	r3, #1
 800df02:	643b      	str	r3, [r7, #64]	; 0x40
 800df04:	4b35      	ldr	r3, [pc, #212]	; (800dfdc <_txe_timer_create+0x148>)
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d3f0      	bcc.n	800def0 <_txe_timer_create+0x5c>
 800df0e:	e000      	b.n	800df12 <_txe_timer_create+0x7e>
                break;
 800df10:	bf00      	nop
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800df12:	f3ef 8310 	mrs	r3, PRIMASK
 800df16:	623b      	str	r3, [r7, #32]
    return(posture);
 800df18:	6a3b      	ldr	r3, [r7, #32]
    int_posture = __get_interrupt_posture();
 800df1a:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("CPSID i" : : : "memory");
 800df1c:	b672      	cpsid	i
    return(int_posture);
 800df1e:	69fb      	ldr	r3, [r7, #28]
            }
        }

        /* Disable interrupts.  */
        TX_DISABLE
 800df20:	63bb      	str	r3, [r7, #56]	; 0x38

        /* Decrement the preempt disable flag.  */
        _tx_thread_preempt_disable--;
 800df22:	4b2c      	ldr	r3, [pc, #176]	; (800dfd4 <_txe_timer_create+0x140>)
 800df24:	681b      	ldr	r3, [r3, #0]
 800df26:	3b01      	subs	r3, #1
 800df28:	4a2a      	ldr	r2, [pc, #168]	; (800dfd4 <_txe_timer_create+0x140>)
 800df2a:	6013      	str	r3, [r2, #0]
 800df2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800df2e:	627b      	str	r3, [r7, #36]	; 0x24
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800df30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df32:	f383 8810 	msr	PRIMASK, r3
}
 800df36:	bf00      	nop

        /* Restore interrupts.  */
        TX_RESTORE

        /* Check for preemption.  */
        _tx_thread_system_preempt_check();
 800df38:	f7fe ffe4 	bl	800cf04 <_tx_thread_system_preempt_check>

        /* At this point, check to see if there is a duplicate timer.  */
        if (timer_ptr == next_timer)
 800df3c:	68fa      	ldr	r2, [r7, #12]
 800df3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800df40:	429a      	cmp	r2, r3
 800df42:	d102      	bne.n	800df4a <_txe_timer_create+0xb6>
        {

            /* Timer is already created, return appropriate error code.  */
            status =  TX_TIMER_ERROR;
 800df44:	2315      	movs	r3, #21
 800df46:	647b      	str	r3, [r7, #68]	; 0x44
 800df48:	e00d      	b.n	800df66 <_txe_timer_create+0xd2>
        }

        /* Check for an illegal initial tick value.  */
        else if (initial_ticks == ((ULONG) 0))
 800df4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800df4c:	2b00      	cmp	r3, #0
 800df4e:	d102      	bne.n	800df56 <_txe_timer_create+0xc2>
        {

            /* Invalid initial tick value, return appropriate error code.  */
            status =  TX_TICK_ERROR;
 800df50:	2316      	movs	r3, #22
 800df52:	647b      	str	r3, [r7, #68]	; 0x44
 800df54:	e007      	b.n	800df66 <_txe_timer_create+0xd2>
        }
        else
        {

            /* Check for an illegal activation.  */
            if (auto_activate != TX_AUTO_ACTIVATE)
 800df56:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df58:	2b01      	cmp	r3, #1
 800df5a:	d004      	beq.n	800df66 <_txe_timer_create+0xd2>
            {

                /* And activation is not the other value.  */
                if (auto_activate != TX_NO_ACTIVATE)
 800df5c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800df5e:	2b00      	cmp	r3, #0
 800df60:	d001      	beq.n	800df66 <_txe_timer_create+0xd2>
                {

                    /* Invalid activation selected, return appropriate error code.  */
                    status =  TX_ACTIVATE_ERROR;
 800df62:	2317      	movs	r3, #23
 800df64:	647b      	str	r3, [r7, #68]	; 0x44
            }
        }
    }

    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800df66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d11d      	bne.n	800dfa8 <_txe_timer_create+0x114>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800df6c:	4b1c      	ldr	r3, [pc, #112]	; (800dfe0 <_txe_timer_create+0x14c>)
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	637b      	str	r3, [r7, #52]	; 0x34

        /* Check for invalid caller of this function.  First check for a calling thread.  */
        if (thread_ptr == &_tx_timer_thread)
 800df72:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df74:	4a1b      	ldr	r2, [pc, #108]	; (800dfe4 <_txe_timer_create+0x150>)
 800df76:	4293      	cmp	r3, r2
 800df78:	d101      	bne.n	800df7e <_txe_timer_create+0xea>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800df7a:	2313      	movs	r3, #19
 800df7c:	647b      	str	r3, [r7, #68]	; 0x44
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df7e:	f3ef 8305 	mrs	r3, IPSR
 800df82:	61bb      	str	r3, [r7, #24]
    return(ipsr_value);
 800df84:	69ba      	ldr	r2, [r7, #24]
        }
#endif

        /* Check for interrupt call.  */
        if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800df86:	4b18      	ldr	r3, [pc, #96]	; (800dfe8 <_txe_timer_create+0x154>)
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	4313      	orrs	r3, r2
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	d00b      	beq.n	800dfa8 <_txe_timer_create+0x114>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800df90:	f3ef 8305 	mrs	r3, IPSR
 800df94:	617b      	str	r3, [r7, #20]
    return(ipsr_value);
 800df96:	697a      	ldr	r2, [r7, #20]
        {

            /* Now, make sure the call is from an interrupt and not initialization.  */
            if (TX_THREAD_GET_SYSTEM_STATE() < TX_INITIALIZE_IN_PROGRESS)
 800df98:	4b13      	ldr	r3, [pc, #76]	; (800dfe8 <_txe_timer_create+0x154>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	4313      	orrs	r3, r2
 800df9e:	f1b3 3ff0 	cmp.w	r3, #4042322160	; 0xf0f0f0f0
 800dfa2:	d201      	bcs.n	800dfa8 <_txe_timer_create+0x114>
            {

                /* Invalid caller of this function, return appropriate error code.  */
                status =  TX_CALLER_ERROR;
 800dfa4:	2313      	movs	r3, #19
 800dfa6:	647b      	str	r3, [r7, #68]	; 0x44
        }
    }


    /* Determine if everything is okay.  */
    if (status == TX_SUCCESS)
 800dfa8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d10c      	bne.n	800dfc8 <_txe_timer_create+0x134>
    {

        /* Call actual application timer create function.  */
        status =  _tx_timer_create(timer_ptr, name_ptr, expiration_function, expiration_input,
 800dfae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800dfb0:	9302      	str	r3, [sp, #8]
 800dfb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800dfb4:	9301      	str	r3, [sp, #4]
 800dfb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dfb8:	9300      	str	r3, [sp, #0]
 800dfba:	683b      	ldr	r3, [r7, #0]
 800dfbc:	687a      	ldr	r2, [r7, #4]
 800dfbe:	68b9      	ldr	r1, [r7, #8]
 800dfc0:	68f8      	ldr	r0, [r7, #12]
 800dfc2:	f7ff fa7f 	bl	800d4c4 <_tx_timer_create>
 800dfc6:	6478      	str	r0, [r7, #68]	; 0x44
                                                    initial_ticks, reschedule_ticks, auto_activate);
    }

    /* Return completion status.  */
    return(status);
 800dfc8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 800dfca:	4618      	mov	r0, r3
 800dfcc:	3748      	adds	r7, #72	; 0x48
 800dfce:	46bd      	mov	sp, r7
 800dfd0:	bd80      	pop	{r7, pc}
 800dfd2:	bf00      	nop
 800dfd4:	20005e9c 	.word	0x20005e9c
 800dfd8:	20005f40 	.word	0x20005f40
 800dfdc:	20005f44 	.word	0x20005f44
 800dfe0:	20005e04 	.word	0x20005e04
 800dfe4:	20005f4c 	.word	0x20005f4c
 800dfe8:	2000000c 	.word	0x2000000c

0800dfec <_txe_timer_delete>:
/*  09-30-2020     Yuxin Zhou               Modified comment(s),          */
/*                                            resulting in version 6.1    */
/*                                                                        */
/**************************************************************************/
UINT  _txe_timer_delete(TX_TIMER *timer_ptr)
{
 800dfec:	b580      	push	{r7, lr}
 800dfee:	b086      	sub	sp, #24
 800dff0:	af00      	add	r7, sp, #0
 800dff2:	6078      	str	r0, [r7, #4]


#ifndef TX_TIMER_PROCESS_IN_ISR

    /* Default status to success.  */
    status =  TX_SUCCESS;
 800dff4:	2300      	movs	r3, #0
 800dff6:	617b      	str	r3, [r7, #20]
#endif

    /* Check for an invalid timer pointer.  */
    if (timer_ptr == TX_NULL)
 800dff8:	687b      	ldr	r3, [r7, #4]
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	d102      	bne.n	800e004 <_txe_timer_delete+0x18>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800dffe:	2315      	movs	r3, #21
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	e023      	b.n	800e04c <_txe_timer_delete+0x60>
    }

    /* Now check for invalid timer ID.  */
    else if (timer_ptr -> tx_timer_id != TX_TIMER_ID)
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	4a13      	ldr	r2, [pc, #76]	; (800e058 <_txe_timer_delete+0x6c>)
 800e00a:	4293      	cmp	r3, r2
 800e00c:	d002      	beq.n	800e014 <_txe_timer_delete+0x28>
    {
        /* Timer pointer is invalid, return appropriate error code.  */
        status =  TX_TIMER_ERROR;
 800e00e:	2315      	movs	r3, #21
 800e010:	617b      	str	r3, [r7, #20]
 800e012:	e01b      	b.n	800e04c <_txe_timer_delete+0x60>
    __asm__ volatile (" MRS  %0,IPSR ": "=r" (ipsr_value) );
 800e014:	f3ef 8305 	mrs	r3, IPSR
 800e018:	60fb      	str	r3, [r7, #12]
    return(ipsr_value);
 800e01a:	68fa      	ldr	r2, [r7, #12]
    }

    /* Check for invalid caller of this function.  */

    /* Is the caller an ISR or Initialization?  */
    else if (TX_THREAD_GET_SYSTEM_STATE() != ((ULONG) 0))
 800e01c:	4b0f      	ldr	r3, [pc, #60]	; (800e05c <_txe_timer_delete+0x70>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4313      	orrs	r3, r2
 800e022:	2b00      	cmp	r3, #0
 800e024:	d002      	beq.n	800e02c <_txe_timer_delete+0x40>
    {

        /* Invalid caller of this function, return appropriate error code.  */
        status =  TX_CALLER_ERROR;
 800e026:	2313      	movs	r3, #19
 800e028:	617b      	str	r3, [r7, #20]
 800e02a:	e00f      	b.n	800e04c <_txe_timer_delete+0x60>
    {

#ifndef TX_TIMER_PROCESS_IN_ISR

        /* Pickup thread pointer.  */
        TX_THREAD_GET_CURRENT(thread_ptr)
 800e02c:	4b0c      	ldr	r3, [pc, #48]	; (800e060 <_txe_timer_delete+0x74>)
 800e02e:	681b      	ldr	r3, [r3, #0]
 800e030:	613b      	str	r3, [r7, #16]

        /* Is the caller the system timer thread?  */
        if (thread_ptr == &_tx_timer_thread)
 800e032:	693b      	ldr	r3, [r7, #16]
 800e034:	4a0b      	ldr	r2, [pc, #44]	; (800e064 <_txe_timer_delete+0x78>)
 800e036:	4293      	cmp	r3, r2
 800e038:	d101      	bne.n	800e03e <_txe_timer_delete+0x52>
        {

            /* Invalid caller of this function, return appropriate error code.  */
            status =  TX_CALLER_ERROR;
 800e03a:	2313      	movs	r3, #19
 800e03c:	617b      	str	r3, [r7, #20]
        }

        /* Determine if everything is okay.  */
        if (status == TX_SUCCESS)
 800e03e:	697b      	ldr	r3, [r7, #20]
 800e040:	2b00      	cmp	r3, #0
 800e042:	d103      	bne.n	800e04c <_txe_timer_delete+0x60>
        {
#endif

            /* Call actual application timer delete function.  */
            status =  _tx_timer_delete(timer_ptr);
 800e044:	6878      	ldr	r0, [r7, #4]
 800e046:	f7ff faa1 	bl	800d58c <_tx_timer_delete>
 800e04a:	6178      	str	r0, [r7, #20]
        }
#endif
    }

    /* Return completion status.  */
    return(status);
 800e04c:	697b      	ldr	r3, [r7, #20]
}
 800e04e:	4618      	mov	r0, r3
 800e050:	3718      	adds	r7, #24
 800e052:	46bd      	mov	sp, r7
 800e054:	bd80      	pop	{r7, pc}
 800e056:	bf00      	nop
 800e058:	4154494d 	.word	0x4154494d
 800e05c:	2000000c 	.word	0x2000000c
 800e060:	20005e04 	.word	0x20005e04
 800e064:	20005f4c 	.word	0x20005f4c

0800e068 <tx_low_power_enter>:
/*                                            compiler warning,           */
/*                                            resulting in version 6.1.6  */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_enter(VOID)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b086      	sub	sp, #24
 800e06c:	af00      	add	r7, sp, #0
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e06e:	f3ef 8310 	mrs	r3, PRIMASK
 800e072:	60fb      	str	r3, [r7, #12]
    return(posture);
 800e074:	68fb      	ldr	r3, [r7, #12]
    int_posture = __get_interrupt_posture();
 800e076:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e078:	b672      	cpsid	i
    return(int_posture);
 800e07a:	68bb      	ldr	r3, [r7, #8]
ULONG   tx_low_power_next_expiration;   /* The next timer experation (units of ThreadX timer ticks). */
ULONG   timers_active;
#endif

    /* Disable interrupts while we prepare for low power mode.  */
    TX_DISABLE
 800e07c:	617b      	str	r3, [r7, #20]
    /*  At this point, we want to enter low power mode, since nothing
        meaningful is going on in the system. However, in order to keep
        the ThreadX timer services accurate, we must first determine the
        next ThreadX timer expiration in terms of ticks. This is
        accomplished via the tx_timer_get_next API.  */
    timers_active =  tx_timer_get_next(&tx_low_power_next_expiration);
 800e07e:	463b      	mov	r3, r7
 800e080:	4618      	mov	r0, r3
 800e082:	f000 f835 	bl	800e0f0 <tx_timer_get_next>
 800e086:	6138      	str	r0, [r7, #16]
        tx_low_power_next_expiration = 0xFFFFFFFF;
        timers_active = TX_TRUE;
    }
#endif /* TX_LOW_POWER_TICKLESS */

    if (timers_active == TX_TRUE)
 800e088:	693b      	ldr	r3, [r7, #16]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d103      	bne.n	800e096 <tx_low_power_enter+0x2e>
    {
        /* A ThreadX timer is active or we simply want to keep track of time. */
        TX_LOW_POWER_TIMER_SETUP(tx_low_power_next_expiration);
 800e08e:	683b      	ldr	r3, [r7, #0]
 800e090:	4618      	mov	r0, r3
 800e092:	f7f4 ff3f 	bl	8002f14 <App_ThreadX_LowPower_Timer_Setup>


    /* Set the flag indicating that low power has been entered. This 
       flag is checked in tx_low_power_exit to determine if the logic
       used to adjust the ThreadX time is required.  */
    tx_low_power_entered =  TX_TRUE;
 800e096:	4b07      	ldr	r3, [pc, #28]	; (800e0b4 <tx_low_power_enter+0x4c>)
 800e098:	2201      	movs	r2, #1
 800e09a:	601a      	str	r2, [r3, #0]
 800e09c:	697b      	ldr	r3, [r7, #20]
 800e09e:	607b      	str	r3, [r7, #4]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f383 8810 	msr	PRIMASK, r3
}
 800e0a6:	bf00      	nop

    /* User code to enter low power mode. This allows the application to power down
       peripherals and put the processor in sleep mode.
    */
#ifdef TX_LOW_POWER_USER_ENTER
    TX_LOW_POWER_USER_ENTER;
 800e0a8:	f7f4 ff3e 	bl	8002f28 <App_ThreadX_LowPower_Enter>
#endif

    /* If the low power code returns, this routine returns to the tx_thread_schedule loop.  */
}
 800e0ac:	bf00      	nop
 800e0ae:	3718      	adds	r7, #24
 800e0b0:	46bd      	mov	sp, r7
 800e0b2:	bd80      	pop	{r7, pc}
 800e0b4:	2000640c 	.word	0x2000640c

0800e0b8 <tx_low_power_exit>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_low_power_exit(VOID)
{
 800e0b8:	b580      	push	{r7, lr}
 800e0ba:	b082      	sub	sp, #8
 800e0bc:	af00      	add	r7, sp, #0
/* How many ticks to adjust ThreadX timers after exiting low power mode. */
ULONG   tx_low_power_adjust_ticks;


    /* Determine if the interrupt occurred in low power mode.  */
    if (tx_low_power_entered)
 800e0be:	4b0b      	ldr	r3, [pc, #44]	; (800e0ec <tx_low_power_exit+0x34>)
 800e0c0:	681b      	ldr	r3, [r3, #0]
 800e0c2:	2b00      	cmp	r3, #0
 800e0c4:	d00d      	beq.n	800e0e2 <tx_low_power_exit+0x2a>
    {
        /* Yes, low power mode was interrupted.   */

        /* Clear the low power entered flag.  */
        tx_low_power_entered =  TX_FALSE;
 800e0c6:	4b09      	ldr	r3, [pc, #36]	; (800e0ec <tx_low_power_exit+0x34>)
 800e0c8:	2200      	movs	r2, #0
 800e0ca:	601a      	str	r2, [r3, #0]

        /* User code to exit low power mode and reprogram the
           timer to the desired interrupt frequency.  */
#ifdef TX_LOW_POWER_USER_EXIT
        TX_LOW_POWER_USER_EXIT;
 800e0cc:	f7f4 ff33 	bl	8002f36 <App_ThreadX_LowPower_Exit>
#endif

#ifdef TX_LOW_POWER_USER_TIMER_ADJUST
        /* Call the user's low-power timer code to obtain the amount of time (in ticks)
           the system has been in low power mode. */
        tx_low_power_adjust_ticks = TX_LOW_POWER_USER_TIMER_ADJUST;
 800e0d0:	f7f4 ff38 	bl	8002f44 <App_ThreadX_LowPower_Timer_Adjust>
 800e0d4:	6078      	str	r0, [r7, #4]
#else
        tx_low_power_adjust_ticks = (ULONG) 0;
#endif

        /* Determine if the ThreadX timer(s) needs incrementing.  */
        if (tx_low_power_adjust_ticks)
 800e0d6:	687b      	ldr	r3, [r7, #4]
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d002      	beq.n	800e0e2 <tx_low_power_exit+0x2a>
        {
            /* Yes, the ThreadX timer(s) must be incremented.  */
            tx_time_increment(tx_low_power_adjust_ticks);
 800e0dc:	6878      	ldr	r0, [r7, #4]
 800e0de:	f000 f86f 	bl	800e1c0 <tx_time_increment>
        }
    }
}
 800e0e2:	bf00      	nop
 800e0e4:	3708      	adds	r7, #8
 800e0e6:	46bd      	mov	sp, r7
 800e0e8:	bd80      	pop	{r7, pc}
 800e0ea:	bf00      	nop
 800e0ec:	2000640c 	.word	0x2000640c

0800e0f0 <tx_timer_get_next>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
ULONG  tx_timer_get_next(ULONG *next_timer_tick_ptr)
{
 800e0f0:	b480      	push	{r7}
 800e0f2:	b08d      	sub	sp, #52	; 0x34
 800e0f4:	af00      	add	r7, sp, #0
 800e0f6:	6078      	str	r0, [r7, #4]

TX_TIMER_INTERNAL           **timer_list_head;
TX_TIMER_INTERNAL           *next_timer;
UINT                        i;
ULONG                       calculated_time;
ULONG                       expiration_time = (ULONG) 0xFFFFFFFF;
 800e0f8:	f04f 33ff 	mov.w	r3, #4294967295
 800e0fc:	61fb      	str	r3, [r7, #28]
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e0fe:	f3ef 8310 	mrs	r3, PRIMASK
 800e102:	617b      	str	r3, [r7, #20]
    return(posture);
 800e104:	697b      	ldr	r3, [r7, #20]
    int_posture = __get_interrupt_posture();
 800e106:	613b      	str	r3, [r7, #16]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e108:	b672      	cpsid	i
    return(int_posture);
 800e10a:	693b      	ldr	r3, [r7, #16]


    /* Disable interrupts.  */
    TX_DISABLE
 800e10c:	61bb      	str	r3, [r7, #24]

    /* Look at the next timer entry.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e10e:	4b29      	ldr	r3, [pc, #164]	; (800e1b4 <tx_timer_get_next+0xc4>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Loop through the timer list, looking for the first non-NULL
       value to signal an active timer.  */
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e114:	2300      	movs	r3, #0
 800e116:	627b      	str	r3, [r7, #36]	; 0x24
 800e118:	e02f      	b.n	800e17a <tx_timer_get_next+0x8a>
    {
        /* Now determine if there is an active timer in this slot.  */
        if (*timer_list_head)
 800e11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e11c:	681b      	ldr	r3, [r3, #0]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d01d      	beq.n	800e15e <tx_timer_get_next+0x6e>
        {
            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	62bb      	str	r3, [r7, #40]	; 0x28

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	2b20      	cmp	r3, #32
 800e12e:	d906      	bls.n	800e13e <tx_timer_get_next+0x4e>
                {
                    /* Calculate the expiration time.  */
                    calculated_time =  next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i);
 800e130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e132:	681a      	ldr	r2, [r3, #0]
 800e134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e136:	4413      	add	r3, r2
 800e138:	3b20      	subs	r3, #32
 800e13a:	623b      	str	r3, [r7, #32]
 800e13c:	e001      	b.n	800e142 <tx_timer_get_next+0x52>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    calculated_time =  i;
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	623b      	str	r3, [r7, #32]
                }

                /* Determine if a new minimum expiration time is present.  */
                if (expiration_time > calculated_time)
 800e142:	69fa      	ldr	r2, [r7, #28]
 800e144:	6a3b      	ldr	r3, [r7, #32]
 800e146:	429a      	cmp	r2, r3
 800e148:	d901      	bls.n	800e14e <tx_timer_get_next+0x5e>
                {
                    /* Yes, a new minimum expiration time is present - remember it!  */
                    expiration_time =  calculated_time;
 800e14a:	6a3b      	ldr	r3, [r7, #32]
 800e14c:	61fb      	str	r3, [r7, #28]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e150:	691b      	ldr	r3, [r3, #16]
 800e152:	62bb      	str	r3, [r7, #40]	; 0x28

            } while (next_timer != *timer_list_head);
 800e154:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e15a:	429a      	cmp	r2, r3
 800e15c:	d1e4      	bne.n	800e128 <tx_timer_get_next+0x38>
        }

        /* This timer entry is NULL, so just move to the next one.  */
        timer_list_head++;
 800e15e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e160:	3304      	adds	r3, #4
 800e162:	62fb      	str	r3, [r7, #44]	; 0x2c

        /* Check for timer list wrap condition.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e164:	4b14      	ldr	r3, [pc, #80]	; (800e1b8 <tx_timer_get_next+0xc8>)
 800e166:	681b      	ldr	r3, [r3, #0]
 800e168:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e16a:	429a      	cmp	r2, r3
 800e16c:	d302      	bcc.n	800e174 <tx_timer_get_next+0x84>
        {
            /* Wrap to the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e16e:	4b13      	ldr	r3, [pc, #76]	; (800e1bc <tx_timer_get_next+0xcc>)
 800e170:	681b      	ldr	r3, [r3, #0]
 800e172:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = (UINT)0; i < TX_TIMER_ENTRIES; i++)
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	3301      	adds	r3, #1
 800e178:	627b      	str	r3, [r7, #36]	; 0x24
 800e17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e17c:	2b1f      	cmp	r3, #31
 800e17e:	d9cc      	bls.n	800e11a <tx_timer_get_next+0x2a>
 800e180:	69bb      	ldr	r3, [r7, #24]
 800e182:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f383 8810 	msr	PRIMASK, r3
}
 800e18a:	bf00      	nop

    /* Restore interrupts.  */
    TX_RESTORE

    /* Determine if an active timer was found.  */
    if (expiration_time != (ULONG) 0xFFFFFFFF)
 800e18c:	69fb      	ldr	r3, [r7, #28]
 800e18e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e192:	d004      	beq.n	800e19e <tx_timer_get_next+0xae>
    {
        /* Yes, an active timer was found.  */
        *next_timer_tick_ptr =  expiration_time;
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	69fa      	ldr	r2, [r7, #28]
 800e198:	601a      	str	r2, [r3, #0]
        return(TX_TRUE);
 800e19a:	2301      	movs	r3, #1
 800e19c:	e003      	b.n	800e1a6 <tx_timer_get_next+0xb6>
    }
    else
    {
        /* No active timer was found.  */
        *next_timer_tick_ptr = 0;
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	2200      	movs	r2, #0
 800e1a2:	601a      	str	r2, [r3, #0]
        return(TX_FALSE);
 800e1a4:	2300      	movs	r3, #0
    }
}
 800e1a6:	4618      	mov	r0, r3
 800e1a8:	3734      	adds	r7, #52	; 0x34
 800e1aa:	46bd      	mov	sp, r7
 800e1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1b0:	4770      	bx	lr
 800e1b2:	bf00      	nop
 800e1b4:	20005f38 	.word	0x20005f38
 800e1b8:	20005f34 	.word	0x20005f34
 800e1bc:	20005f30 	.word	0x20005f30

0800e1c0 <tx_time_increment>:
/*                                                                        */
/*  03-02-2021     William E. Lamie         Initial Version 6.1.5         */
/*                                                                        */
/**************************************************************************/
VOID  tx_time_increment(ULONG time_increment)
{
 800e1c0:	b580      	push	{r7, lr}
 800e1c2:	b08a      	sub	sp, #40	; 0x28
 800e1c4:	af00      	add	r7, sp, #0
 800e1c6:	6078      	str	r0, [r7, #4]
TX_TIMER_INTERNAL           *next_timer;
TX_TIMER_INTERNAL           *temp_list_head;


    /* Determine if there is any time increment.  */
    if (time_increment == 0)
 800e1c8:	687b      	ldr	r3, [r7, #4]
 800e1ca:	2b00      	cmp	r3, #0
 800e1cc:	f000 809b 	beq.w	800e306 <tx_time_increment+0x146>
    __asm__ volatile ("MRS  %0, PRIMASK ": "=r" (posture));
 800e1d0:	f3ef 8310 	mrs	r3, PRIMASK
 800e1d4:	613b      	str	r3, [r7, #16]
    return(posture);
 800e1d6:	693b      	ldr	r3, [r7, #16]
    int_posture = __get_interrupt_posture();
 800e1d8:	60fb      	str	r3, [r7, #12]
    __asm__ volatile ("CPSID i" : : : "memory");
 800e1da:	b672      	cpsid	i
    return(int_posture);
 800e1dc:	68fb      	ldr	r3, [r7, #12]
        /* Nothing to do, just return.  */
        return;
    }

    /* Disable interrupts.  */
    TX_DISABLE
 800e1de:	617b      	str	r3, [r7, #20]

    /* Adjust the system clock.  */
    _tx_timer_system_clock =  _tx_timer_system_clock + time_increment;
 800e1e0:	4b4b      	ldr	r3, [pc, #300]	; (800e310 <tx_time_increment+0x150>)
 800e1e2:	681a      	ldr	r2, [r3, #0]
 800e1e4:	687b      	ldr	r3, [r7, #4]
 800e1e6:	4413      	add	r3, r2
 800e1e8:	4a49      	ldr	r2, [pc, #292]	; (800e310 <tx_time_increment+0x150>)
 800e1ea:	6013      	str	r3, [r2, #0]

    /* Adjust the time slice variable.  */
    if (_tx_timer_time_slice)
 800e1ec:	4b49      	ldr	r3, [pc, #292]	; (800e314 <tx_time_increment+0x154>)
 800e1ee:	681b      	ldr	r3, [r3, #0]
 800e1f0:	2b00      	cmp	r3, #0
 800e1f2:	d00e      	beq.n	800e212 <tx_time_increment+0x52>
    {
        /* Decrement the time-slice variable.  */
        if (_tx_timer_time_slice > time_increment)
 800e1f4:	4b47      	ldr	r3, [pc, #284]	; (800e314 <tx_time_increment+0x154>)
 800e1f6:	681b      	ldr	r3, [r3, #0]
 800e1f8:	687a      	ldr	r2, [r7, #4]
 800e1fa:	429a      	cmp	r2, r3
 800e1fc:	d206      	bcs.n	800e20c <tx_time_increment+0x4c>
        {
            _tx_timer_time_slice =  _tx_timer_time_slice - time_increment;
 800e1fe:	4b45      	ldr	r3, [pc, #276]	; (800e314 <tx_time_increment+0x154>)
 800e200:	681a      	ldr	r2, [r3, #0]
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	1ad3      	subs	r3, r2, r3
 800e206:	4a43      	ldr	r2, [pc, #268]	; (800e314 <tx_time_increment+0x154>)
 800e208:	6013      	str	r3, [r2, #0]
 800e20a:	e002      	b.n	800e212 <tx_time_increment+0x52>
        }
        else
        {
            _tx_timer_time_slice =  1;
 800e20c:	4b41      	ldr	r3, [pc, #260]	; (800e314 <tx_time_increment+0x154>)
 800e20e:	2201      	movs	r2, #1
 800e210:	601a      	str	r2, [r3, #0]
        }
    }

    /* Calculate the proper place to position the timer.  */
    timer_list_head =  _tx_timer_current_ptr;
 800e212:	4b41      	ldr	r3, [pc, #260]	; (800e318 <tx_time_increment+0x158>)
 800e214:	681b      	ldr	r3, [r3, #0]
 800e216:	623b      	str	r3, [r7, #32]

    /* Setup the temporary list pointer.  */
    temp_list_head =  TX_NULL;
 800e218:	2300      	movs	r3, #0
 800e21a:	61bb      	str	r3, [r7, #24]

    /* Loop to pull all timers off the timer structure and put on the temporary list head.  */
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e21c:	2300      	movs	r3, #0
 800e21e:	627b      	str	r3, [r7, #36]	; 0x24
 800e220:	e046      	b.n	800e2b0 <tx_time_increment+0xf0>
    {
        /* Determine if there is a timer list in this entry.  */
        if (*timer_list_head)
 800e222:	6a3b      	ldr	r3, [r7, #32]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d034      	beq.n	800e294 <tx_time_increment+0xd4>
        {
            /* Walk the list and update all the relative times to actual times.  */

            /* Setup the pointer to the expiration list.  */
            next_timer =  *timer_list_head;
 800e22a:	6a3b      	ldr	r3, [r7, #32]
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	61fb      	str	r3, [r7, #28]

            /* Loop through the timers active for this relative time slot (determined by i).  */
            do
            {
                /* Determine if the remaining time is larger than the list.  */
                if (next_timer -> tx_timer_internal_remaining_ticks > TX_TIMER_ENTRIES)
 800e230:	69fb      	ldr	r3, [r7, #28]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2b20      	cmp	r3, #32
 800e236:	d908      	bls.n	800e24a <tx_time_increment+0x8a>
                {
                    /* Calculate the actual expiration time.  */
                    next_timer -> tx_timer_internal_remaining_ticks =
                                    next_timer -> tx_timer_internal_remaining_ticks - (TX_TIMER_ENTRIES - i) + 1;
 800e238:	69fb      	ldr	r3, [r7, #28]
 800e23a:	681a      	ldr	r2, [r3, #0]
 800e23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e23e:	4413      	add	r3, r2
 800e240:	f1a3 021f 	sub.w	r2, r3, #31
                    next_timer -> tx_timer_internal_remaining_ticks =
 800e244:	69fb      	ldr	r3, [r7, #28]
 800e246:	601a      	str	r2, [r3, #0]
 800e248:	e003      	b.n	800e252 <tx_time_increment+0x92>
                }
                else
                {
                    /* Calculate the expiration time, which is simply the number of entries in this case.  */
                    next_timer -> tx_timer_internal_remaining_ticks =  i + 1;
 800e24a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e24c:	1c5a      	adds	r2, r3, #1
 800e24e:	69fb      	ldr	r3, [r7, #28]
 800e250:	601a      	str	r2, [r3, #0]
                }

                /* Move to the next entry in the timer list.  */
                next_timer =  next_timer -> tx_timer_internal_active_next;
 800e252:	69fb      	ldr	r3, [r7, #28]
 800e254:	691b      	ldr	r3, [r3, #16]
 800e256:	61fb      	str	r3, [r7, #28]

            } while (next_timer != *timer_list_head);
 800e258:	6a3b      	ldr	r3, [r7, #32]
 800e25a:	681b      	ldr	r3, [r3, #0]
 800e25c:	69fa      	ldr	r2, [r7, #28]
 800e25e:	429a      	cmp	r2, r3
 800e260:	d1e6      	bne.n	800e230 <tx_time_increment+0x70>

            /* NULL terminate the current timer list.  */
            ((*timer_list_head) -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  TX_NULL;
 800e262:	6a3b      	ldr	r3, [r7, #32]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	695b      	ldr	r3, [r3, #20]
 800e268:	2200      	movs	r2, #0
 800e26a:	611a      	str	r2, [r3, #16]

            /* Yes, determine if the temporary list is NULL.  */
            if (temp_list_head == TX_NULL)
 800e26c:	69bb      	ldr	r3, [r7, #24]
 800e26e:	2b00      	cmp	r3, #0
 800e270:	d103      	bne.n	800e27a <tx_time_increment+0xba>
            {
                /* First item on the list.  Move the entire linked list.  */
                temp_list_head =  *timer_list_head;
 800e272:	6a3b      	ldr	r3, [r7, #32]
 800e274:	681b      	ldr	r3, [r3, #0]
 800e276:	61bb      	str	r3, [r7, #24]
 800e278:	e009      	b.n	800e28e <tx_time_increment+0xce>
            }
            else
            {
                /* No, the temp list already has timers on it. Link the next timer list to the end.  */
                (temp_list_head -> tx_timer_internal_active_previous) -> tx_timer_internal_active_next =  *timer_list_head;
 800e27a:	69bb      	ldr	r3, [r7, #24]
 800e27c:	695b      	ldr	r3, [r3, #20]
 800e27e:	6a3a      	ldr	r2, [r7, #32]
 800e280:	6812      	ldr	r2, [r2, #0]
 800e282:	611a      	str	r2, [r3, #16]

                /* Now update the previous to the new list's previous timer pointer.  */
                temp_list_head -> tx_timer_internal_active_previous =  (*timer_list_head) -> tx_timer_internal_active_previous;
 800e284:	6a3b      	ldr	r3, [r7, #32]
 800e286:	681b      	ldr	r3, [r3, #0]
 800e288:	695a      	ldr	r2, [r3, #20]
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	615a      	str	r2, [r3, #20]
            }

            /* Now clear the current timer head pointer.  */
            *timer_list_head =  TX_NULL;
 800e28e:	6a3b      	ldr	r3, [r7, #32]
 800e290:	2200      	movs	r2, #0
 800e292:	601a      	str	r2, [r3, #0]
        }
        
        /* Move to next timer entry.  */
        timer_list_head++;
 800e294:	6a3b      	ldr	r3, [r7, #32]
 800e296:	3304      	adds	r3, #4
 800e298:	623b      	str	r3, [r7, #32]

        /* Determine if a wrap around condition has occurred.  */
        if (timer_list_head >= _tx_timer_list_end)
 800e29a:	4b20      	ldr	r3, [pc, #128]	; (800e31c <tx_time_increment+0x15c>)
 800e29c:	681b      	ldr	r3, [r3, #0]
 800e29e:	6a3a      	ldr	r2, [r7, #32]
 800e2a0:	429a      	cmp	r2, r3
 800e2a2:	d302      	bcc.n	800e2aa <tx_time_increment+0xea>
        {
            /* Wrap from the beginning of the list.  */
            timer_list_head =  _tx_timer_list_start;
 800e2a4:	4b1e      	ldr	r3, [pc, #120]	; (800e320 <tx_time_increment+0x160>)
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	623b      	str	r3, [r7, #32]
    for (i = 0; i < TX_TIMER_ENTRIES; i++)
 800e2aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2ac:	3301      	adds	r3, #1
 800e2ae:	627b      	str	r3, [r7, #36]	; 0x24
 800e2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e2b2:	2b1f      	cmp	r3, #31
 800e2b4:	d9b5      	bls.n	800e222 <tx_time_increment+0x62>
        }
    }

    /* Set the current timer pointer to the beginning of the list.  */
    _tx_timer_current_ptr =  _tx_timer_list_start;
 800e2b6:	4b1a      	ldr	r3, [pc, #104]	; (800e320 <tx_time_increment+0x160>)
 800e2b8:	681b      	ldr	r3, [r3, #0]
 800e2ba:	4a17      	ldr	r2, [pc, #92]	; (800e318 <tx_time_increment+0x158>)
 800e2bc:	6013      	str	r3, [r2, #0]

    /* Loop to update and reinsert all the timers in the list.  */
    while (temp_list_head)
 800e2be:	e019      	b.n	800e2f4 <tx_time_increment+0x134>
    {
        /* Pickup the next timer to update and reinsert.  */
        next_timer =  temp_list_head;
 800e2c0:	69bb      	ldr	r3, [r7, #24]
 800e2c2:	61fb      	str	r3, [r7, #28]

        /* Move the temp list head pointer to the next pointer.  */
        temp_list_head =  next_timer -> tx_timer_internal_active_next;
 800e2c4:	69fb      	ldr	r3, [r7, #28]
 800e2c6:	691b      	ldr	r3, [r3, #16]
 800e2c8:	61bb      	str	r3, [r7, #24]

        /* Determine if the remaining time is greater than the time increment
           value - this is the normal case.  */
        if (next_timer -> tx_timer_internal_remaining_ticks > time_increment)
 800e2ca:	69fb      	ldr	r3, [r7, #28]
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	687a      	ldr	r2, [r7, #4]
 800e2d0:	429a      	cmp	r2, r3
 800e2d2:	d206      	bcs.n	800e2e2 <tx_time_increment+0x122>
        {
            /* Decrement the elapsed time.  */
            next_timer -> tx_timer_internal_remaining_ticks =  next_timer -> tx_timer_internal_remaining_ticks - time_increment;
 800e2d4:	69fb      	ldr	r3, [r7, #28]
 800e2d6:	681a      	ldr	r2, [r3, #0]
 800e2d8:	687b      	ldr	r3, [r7, #4]
 800e2da:	1ad2      	subs	r2, r2, r3
 800e2dc:	69fb      	ldr	r3, [r7, #28]
 800e2de:	601a      	str	r2, [r3, #0]
 800e2e0:	e002      	b.n	800e2e8 <tx_time_increment+0x128>
        }
        else
        {
            /* Simply set the expiration value to expire on the next tick.  */
            next_timer -> tx_timer_internal_remaining_ticks =  1;
 800e2e2:	69fb      	ldr	r3, [r7, #28]
 800e2e4:	2201      	movs	r2, #1
 800e2e6:	601a      	str	r2, [r3, #0]
        }

        /* Now clear the timer list head pointer for the timer activate function to work properly.  */
        next_timer -> tx_timer_internal_list_head =  TX_NULL;
 800e2e8:	69fb      	ldr	r3, [r7, #28]
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	619a      	str	r2, [r3, #24]

        /* Now re-insert the timer into the list.  */
        _tx_timer_system_activate(next_timer);
 800e2ee:	69f8      	ldr	r0, [r7, #28]
 800e2f0:	f7ff fa32 	bl	800d758 <_tx_timer_system_activate>
    while (temp_list_head)
 800e2f4:	69bb      	ldr	r3, [r7, #24]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d1e2      	bne.n	800e2c0 <tx_time_increment+0x100>
 800e2fa:	697b      	ldr	r3, [r7, #20]
 800e2fc:	60bb      	str	r3, [r7, #8]
    __asm__ volatile ("MSR  PRIMASK,%0": : "r" (int_posture): "memory");
 800e2fe:	68bb      	ldr	r3, [r7, #8]
 800e300:	f383 8810 	msr	PRIMASK, r3
}
 800e304:	e000      	b.n	800e308 <tx_time_increment+0x148>
        return;
 800e306:	bf00      	nop
    }

    /* Restore interrupts.  */
    TX_RESTORE
}
 800e308:	3728      	adds	r7, #40	; 0x28
 800e30a:	46bd      	mov	sp, r7
 800e30c:	bd80      	pop	{r7, pc}
 800e30e:	bf00      	nop
 800e310:	20005ea8 	.word	0x20005ea8
 800e314:	20006408 	.word	0x20006408
 800e318:	20005f38 	.word	0x20005f38
 800e31c:	20005f34 	.word	0x20005f34
 800e320:	20005f30 	.word	0x20005f30

0800e324 <__errno>:
 800e324:	4b01      	ldr	r3, [pc, #4]	; (800e32c <__errno+0x8>)
 800e326:	6818      	ldr	r0, [r3, #0]
 800e328:	4770      	bx	lr
 800e32a:	bf00      	nop
 800e32c:	20000010 	.word	0x20000010

0800e330 <__libc_init_array>:
 800e330:	b570      	push	{r4, r5, r6, lr}
 800e332:	4d0d      	ldr	r5, [pc, #52]	; (800e368 <__libc_init_array+0x38>)
 800e334:	2600      	movs	r6, #0
 800e336:	4c0d      	ldr	r4, [pc, #52]	; (800e36c <__libc_init_array+0x3c>)
 800e338:	1b64      	subs	r4, r4, r5
 800e33a:	10a4      	asrs	r4, r4, #2
 800e33c:	42a6      	cmp	r6, r4
 800e33e:	d109      	bne.n	800e354 <__libc_init_array+0x24>
 800e340:	4d0b      	ldr	r5, [pc, #44]	; (800e370 <__libc_init_array+0x40>)
 800e342:	2600      	movs	r6, #0
 800e344:	4c0b      	ldr	r4, [pc, #44]	; (800e374 <__libc_init_array+0x44>)
 800e346:	f002 fb65 	bl	8010a14 <_init>
 800e34a:	1b64      	subs	r4, r4, r5
 800e34c:	10a4      	asrs	r4, r4, #2
 800e34e:	42a6      	cmp	r6, r4
 800e350:	d105      	bne.n	800e35e <__libc_init_array+0x2e>
 800e352:	bd70      	pop	{r4, r5, r6, pc}
 800e354:	f855 3b04 	ldr.w	r3, [r5], #4
 800e358:	3601      	adds	r6, #1
 800e35a:	4798      	blx	r3
 800e35c:	e7ee      	b.n	800e33c <__libc_init_array+0xc>
 800e35e:	f855 3b04 	ldr.w	r3, [r5], #4
 800e362:	3601      	adds	r6, #1
 800e364:	4798      	blx	r3
 800e366:	e7f2      	b.n	800e34e <__libc_init_array+0x1e>
 800e368:	08011180 	.word	0x08011180
 800e36c:	08011180 	.word	0x08011180
 800e370:	08011180 	.word	0x08011180
 800e374:	08011184 	.word	0x08011184

0800e378 <memcpy>:
 800e378:	440a      	add	r2, r1
 800e37a:	1e43      	subs	r3, r0, #1
 800e37c:	4291      	cmp	r1, r2
 800e37e:	d100      	bne.n	800e382 <memcpy+0xa>
 800e380:	4770      	bx	lr
 800e382:	b510      	push	{r4, lr}
 800e384:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e388:	4291      	cmp	r1, r2
 800e38a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e38e:	d1f9      	bne.n	800e384 <memcpy+0xc>
 800e390:	bd10      	pop	{r4, pc}

0800e392 <memset>:
 800e392:	4402      	add	r2, r0
 800e394:	4603      	mov	r3, r0
 800e396:	4293      	cmp	r3, r2
 800e398:	d100      	bne.n	800e39c <memset+0xa>
 800e39a:	4770      	bx	lr
 800e39c:	f803 1b01 	strb.w	r1, [r3], #1
 800e3a0:	e7f9      	b.n	800e396 <memset+0x4>
	...

0800e3a4 <rand>:
 800e3a4:	4b16      	ldr	r3, [pc, #88]	; (800e400 <rand+0x5c>)
 800e3a6:	b510      	push	{r4, lr}
 800e3a8:	681c      	ldr	r4, [r3, #0]
 800e3aa:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800e3ac:	b9b3      	cbnz	r3, 800e3dc <rand+0x38>
 800e3ae:	2018      	movs	r0, #24
 800e3b0:	f000 f95a 	bl	800e668 <malloc>
 800e3b4:	63a0      	str	r0, [r4, #56]	; 0x38
 800e3b6:	b928      	cbnz	r0, 800e3c4 <rand+0x20>
 800e3b8:	4602      	mov	r2, r0
 800e3ba:	4b12      	ldr	r3, [pc, #72]	; (800e404 <rand+0x60>)
 800e3bc:	214e      	movs	r1, #78	; 0x4e
 800e3be:	4812      	ldr	r0, [pc, #72]	; (800e408 <rand+0x64>)
 800e3c0:	f000 f922 	bl	800e608 <__assert_func>
 800e3c4:	4a11      	ldr	r2, [pc, #68]	; (800e40c <rand+0x68>)
 800e3c6:	4b12      	ldr	r3, [pc, #72]	; (800e410 <rand+0x6c>)
 800e3c8:	e9c0 2300 	strd	r2, r3, [r0]
 800e3cc:	4b11      	ldr	r3, [pc, #68]	; (800e414 <rand+0x70>)
 800e3ce:	2201      	movs	r2, #1
 800e3d0:	6083      	str	r3, [r0, #8]
 800e3d2:	230b      	movs	r3, #11
 800e3d4:	8183      	strh	r3, [r0, #12]
 800e3d6:	2300      	movs	r3, #0
 800e3d8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800e3dc:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800e3de:	4a0e      	ldr	r2, [pc, #56]	; (800e418 <rand+0x74>)
 800e3e0:	6920      	ldr	r0, [r4, #16]
 800e3e2:	6963      	ldr	r3, [r4, #20]
 800e3e4:	490d      	ldr	r1, [pc, #52]	; (800e41c <rand+0x78>)
 800e3e6:	4342      	muls	r2, r0
 800e3e8:	fb01 2203 	mla	r2, r1, r3, r2
 800e3ec:	fba0 0101 	umull	r0, r1, r0, r1
 800e3f0:	1c43      	adds	r3, r0, #1
 800e3f2:	eb42 0001 	adc.w	r0, r2, r1
 800e3f6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800e3fa:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800e3fe:	bd10      	pop	{r4, pc}
 800e400:	20000010 	.word	0x20000010
 800e404:	08010e58 	.word	0x08010e58
 800e408:	08010e6f 	.word	0x08010e6f
 800e40c:	abcd330e 	.word	0xabcd330e
 800e410:	e66d1234 	.word	0xe66d1234
 800e414:	0005deec 	.word	0x0005deec
 800e418:	5851f42d 	.word	0x5851f42d
 800e41c:	4c957f2d 	.word	0x4c957f2d

0800e420 <sniprintf>:
 800e420:	b40c      	push	{r2, r3}
 800e422:	4b18      	ldr	r3, [pc, #96]	; (800e484 <sniprintf+0x64>)
 800e424:	b530      	push	{r4, r5, lr}
 800e426:	1e0c      	subs	r4, r1, #0
 800e428:	b09d      	sub	sp, #116	; 0x74
 800e42a:	681d      	ldr	r5, [r3, #0]
 800e42c:	da08      	bge.n	800e440 <sniprintf+0x20>
 800e42e:	238b      	movs	r3, #139	; 0x8b
 800e430:	f04f 30ff 	mov.w	r0, #4294967295
 800e434:	602b      	str	r3, [r5, #0]
 800e436:	b01d      	add	sp, #116	; 0x74
 800e438:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e43c:	b002      	add	sp, #8
 800e43e:	4770      	bx	lr
 800e440:	f44f 7302 	mov.w	r3, #520	; 0x208
 800e444:	9002      	str	r0, [sp, #8]
 800e446:	9006      	str	r0, [sp, #24]
 800e448:	a902      	add	r1, sp, #8
 800e44a:	f8ad 3014 	strh.w	r3, [sp, #20]
 800e44e:	bf14      	ite	ne
 800e450:	f104 33ff 	addne.w	r3, r4, #4294967295
 800e454:	4623      	moveq	r3, r4
 800e456:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800e458:	4628      	mov	r0, r5
 800e45a:	9304      	str	r3, [sp, #16]
 800e45c:	9307      	str	r3, [sp, #28]
 800e45e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800e462:	f8ad 3016 	strh.w	r3, [sp, #22]
 800e466:	ab21      	add	r3, sp, #132	; 0x84
 800e468:	9301      	str	r3, [sp, #4]
 800e46a:	f000 fa41 	bl	800e8f0 <_svfiprintf_r>
 800e46e:	1c43      	adds	r3, r0, #1
 800e470:	bfbc      	itt	lt
 800e472:	238b      	movlt	r3, #139	; 0x8b
 800e474:	602b      	strlt	r3, [r5, #0]
 800e476:	2c00      	cmp	r4, #0
 800e478:	d0dd      	beq.n	800e436 <sniprintf+0x16>
 800e47a:	9b02      	ldr	r3, [sp, #8]
 800e47c:	2200      	movs	r2, #0
 800e47e:	701a      	strb	r2, [r3, #0]
 800e480:	e7d9      	b.n	800e436 <sniprintf+0x16>
 800e482:	bf00      	nop
 800e484:	20000010 	.word	0x20000010

0800e488 <siprintf>:
 800e488:	b40e      	push	{r1, r2, r3}
 800e48a:	b500      	push	{lr}
 800e48c:	b09c      	sub	sp, #112	; 0x70
 800e48e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e492:	ab1d      	add	r3, sp, #116	; 0x74
 800e494:	9002      	str	r0, [sp, #8]
 800e496:	9006      	str	r0, [sp, #24]
 800e498:	9107      	str	r1, [sp, #28]
 800e49a:	9104      	str	r1, [sp, #16]
 800e49c:	4808      	ldr	r0, [pc, #32]	; (800e4c0 <siprintf+0x38>)
 800e49e:	4909      	ldr	r1, [pc, #36]	; (800e4c4 <siprintf+0x3c>)
 800e4a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800e4a4:	9105      	str	r1, [sp, #20]
 800e4a6:	a902      	add	r1, sp, #8
 800e4a8:	6800      	ldr	r0, [r0, #0]
 800e4aa:	9301      	str	r3, [sp, #4]
 800e4ac:	f000 fa20 	bl	800e8f0 <_svfiprintf_r>
 800e4b0:	9b02      	ldr	r3, [sp, #8]
 800e4b2:	2200      	movs	r2, #0
 800e4b4:	701a      	strb	r2, [r3, #0]
 800e4b6:	b01c      	add	sp, #112	; 0x70
 800e4b8:	f85d eb04 	ldr.w	lr, [sp], #4
 800e4bc:	b003      	add	sp, #12
 800e4be:	4770      	bx	lr
 800e4c0:	20000010 	.word	0x20000010
 800e4c4:	ffff0208 	.word	0xffff0208

0800e4c8 <strncmp>:
 800e4c8:	b510      	push	{r4, lr}
 800e4ca:	b17a      	cbz	r2, 800e4ec <strncmp+0x24>
 800e4cc:	4603      	mov	r3, r0
 800e4ce:	3901      	subs	r1, #1
 800e4d0:	1884      	adds	r4, r0, r2
 800e4d2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e4d6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e4da:	4290      	cmp	r0, r2
 800e4dc:	d101      	bne.n	800e4e2 <strncmp+0x1a>
 800e4de:	42a3      	cmp	r3, r4
 800e4e0:	d101      	bne.n	800e4e6 <strncmp+0x1e>
 800e4e2:	1a80      	subs	r0, r0, r2
 800e4e4:	bd10      	pop	{r4, pc}
 800e4e6:	2800      	cmp	r0, #0
 800e4e8:	d1f3      	bne.n	800e4d2 <strncmp+0xa>
 800e4ea:	e7fa      	b.n	800e4e2 <strncmp+0x1a>
 800e4ec:	4610      	mov	r0, r2
 800e4ee:	e7f9      	b.n	800e4e4 <strncmp+0x1c>

0800e4f0 <_strtol_l.constprop.0>:
 800e4f0:	2b01      	cmp	r3, #1
 800e4f2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e4f6:	d001      	beq.n	800e4fc <_strtol_l.constprop.0+0xc>
 800e4f8:	2b24      	cmp	r3, #36	; 0x24
 800e4fa:	d906      	bls.n	800e50a <_strtol_l.constprop.0+0x1a>
 800e4fc:	f7ff ff12 	bl	800e324 <__errno>
 800e500:	2316      	movs	r3, #22
 800e502:	6003      	str	r3, [r0, #0]
 800e504:	2000      	movs	r0, #0
 800e506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e50a:	460d      	mov	r5, r1
 800e50c:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800e5f0 <_strtol_l.constprop.0+0x100>
 800e510:	462e      	mov	r6, r5
 800e512:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e516:	f814 700c 	ldrb.w	r7, [r4, ip]
 800e51a:	f017 0708 	ands.w	r7, r7, #8
 800e51e:	d1f7      	bne.n	800e510 <_strtol_l.constprop.0+0x20>
 800e520:	2c2d      	cmp	r4, #45	; 0x2d
 800e522:	d132      	bne.n	800e58a <_strtol_l.constprop.0+0x9a>
 800e524:	782c      	ldrb	r4, [r5, #0]
 800e526:	2701      	movs	r7, #1
 800e528:	1cb5      	adds	r5, r6, #2
 800e52a:	2b00      	cmp	r3, #0
 800e52c:	d05b      	beq.n	800e5e6 <_strtol_l.constprop.0+0xf6>
 800e52e:	2b10      	cmp	r3, #16
 800e530:	d109      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e532:	2c30      	cmp	r4, #48	; 0x30
 800e534:	d107      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e536:	782c      	ldrb	r4, [r5, #0]
 800e538:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800e53c:	2c58      	cmp	r4, #88	; 0x58
 800e53e:	d14d      	bne.n	800e5dc <_strtol_l.constprop.0+0xec>
 800e540:	786c      	ldrb	r4, [r5, #1]
 800e542:	2310      	movs	r3, #16
 800e544:	3502      	adds	r5, #2
 800e546:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800e54a:	f04f 0c00 	mov.w	ip, #0
 800e54e:	f108 38ff 	add.w	r8, r8, #4294967295
 800e552:	4666      	mov	r6, ip
 800e554:	fbb8 f9f3 	udiv	r9, r8, r3
 800e558:	fb03 8a19 	mls	sl, r3, r9, r8
 800e55c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800e560:	f1be 0f09 	cmp.w	lr, #9
 800e564:	d816      	bhi.n	800e594 <_strtol_l.constprop.0+0xa4>
 800e566:	4674      	mov	r4, lr
 800e568:	42a3      	cmp	r3, r4
 800e56a:	dd24      	ble.n	800e5b6 <_strtol_l.constprop.0+0xc6>
 800e56c:	f1bc 0f00 	cmp.w	ip, #0
 800e570:	db1e      	blt.n	800e5b0 <_strtol_l.constprop.0+0xc0>
 800e572:	45b1      	cmp	r9, r6
 800e574:	d31c      	bcc.n	800e5b0 <_strtol_l.constprop.0+0xc0>
 800e576:	d101      	bne.n	800e57c <_strtol_l.constprop.0+0x8c>
 800e578:	45a2      	cmp	sl, r4
 800e57a:	db19      	blt.n	800e5b0 <_strtol_l.constprop.0+0xc0>
 800e57c:	fb06 4603 	mla	r6, r6, r3, r4
 800e580:	f04f 0c01 	mov.w	ip, #1
 800e584:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e588:	e7e8      	b.n	800e55c <_strtol_l.constprop.0+0x6c>
 800e58a:	2c2b      	cmp	r4, #43	; 0x2b
 800e58c:	bf04      	itt	eq
 800e58e:	782c      	ldrbeq	r4, [r5, #0]
 800e590:	1cb5      	addeq	r5, r6, #2
 800e592:	e7ca      	b.n	800e52a <_strtol_l.constprop.0+0x3a>
 800e594:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800e598:	f1be 0f19 	cmp.w	lr, #25
 800e59c:	d801      	bhi.n	800e5a2 <_strtol_l.constprop.0+0xb2>
 800e59e:	3c37      	subs	r4, #55	; 0x37
 800e5a0:	e7e2      	b.n	800e568 <_strtol_l.constprop.0+0x78>
 800e5a2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800e5a6:	f1be 0f19 	cmp.w	lr, #25
 800e5aa:	d804      	bhi.n	800e5b6 <_strtol_l.constprop.0+0xc6>
 800e5ac:	3c57      	subs	r4, #87	; 0x57
 800e5ae:	e7db      	b.n	800e568 <_strtol_l.constprop.0+0x78>
 800e5b0:	f04f 3cff 	mov.w	ip, #4294967295
 800e5b4:	e7e6      	b.n	800e584 <_strtol_l.constprop.0+0x94>
 800e5b6:	f1bc 0f00 	cmp.w	ip, #0
 800e5ba:	da05      	bge.n	800e5c8 <_strtol_l.constprop.0+0xd8>
 800e5bc:	2322      	movs	r3, #34	; 0x22
 800e5be:	4646      	mov	r6, r8
 800e5c0:	6003      	str	r3, [r0, #0]
 800e5c2:	b942      	cbnz	r2, 800e5d6 <_strtol_l.constprop.0+0xe6>
 800e5c4:	4630      	mov	r0, r6
 800e5c6:	e79e      	b.n	800e506 <_strtol_l.constprop.0+0x16>
 800e5c8:	b107      	cbz	r7, 800e5cc <_strtol_l.constprop.0+0xdc>
 800e5ca:	4276      	negs	r6, r6
 800e5cc:	2a00      	cmp	r2, #0
 800e5ce:	d0f9      	beq.n	800e5c4 <_strtol_l.constprop.0+0xd4>
 800e5d0:	f1bc 0f00 	cmp.w	ip, #0
 800e5d4:	d000      	beq.n	800e5d8 <_strtol_l.constprop.0+0xe8>
 800e5d6:	1e69      	subs	r1, r5, #1
 800e5d8:	6011      	str	r1, [r2, #0]
 800e5da:	e7f3      	b.n	800e5c4 <_strtol_l.constprop.0+0xd4>
 800e5dc:	2430      	movs	r4, #48	; 0x30
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d1b1      	bne.n	800e546 <_strtol_l.constprop.0+0x56>
 800e5e2:	2308      	movs	r3, #8
 800e5e4:	e7af      	b.n	800e546 <_strtol_l.constprop.0+0x56>
 800e5e6:	2c30      	cmp	r4, #48	; 0x30
 800e5e8:	d0a5      	beq.n	800e536 <_strtol_l.constprop.0+0x46>
 800e5ea:	230a      	movs	r3, #10
 800e5ec:	e7ab      	b.n	800e546 <_strtol_l.constprop.0+0x56>
 800e5ee:	bf00      	nop
 800e5f0:	08010d51 	.word	0x08010d51

0800e5f4 <strtol>:
 800e5f4:	4613      	mov	r3, r2
 800e5f6:	460a      	mov	r2, r1
 800e5f8:	4601      	mov	r1, r0
 800e5fa:	4802      	ldr	r0, [pc, #8]	; (800e604 <strtol+0x10>)
 800e5fc:	6800      	ldr	r0, [r0, #0]
 800e5fe:	f7ff bf77 	b.w	800e4f0 <_strtol_l.constprop.0>
 800e602:	bf00      	nop
 800e604:	20000010 	.word	0x20000010

0800e608 <__assert_func>:
 800e608:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e60a:	4614      	mov	r4, r2
 800e60c:	461a      	mov	r2, r3
 800e60e:	4b09      	ldr	r3, [pc, #36]	; (800e634 <__assert_func+0x2c>)
 800e610:	4605      	mov	r5, r0
 800e612:	681b      	ldr	r3, [r3, #0]
 800e614:	68d8      	ldr	r0, [r3, #12]
 800e616:	b14c      	cbz	r4, 800e62c <__assert_func+0x24>
 800e618:	4b07      	ldr	r3, [pc, #28]	; (800e638 <__assert_func+0x30>)
 800e61a:	9100      	str	r1, [sp, #0]
 800e61c:	4907      	ldr	r1, [pc, #28]	; (800e63c <__assert_func+0x34>)
 800e61e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e622:	462b      	mov	r3, r5
 800e624:	f000 f80e 	bl	800e644 <fiprintf>
 800e628:	f000 fe22 	bl	800f270 <abort>
 800e62c:	4b04      	ldr	r3, [pc, #16]	; (800e640 <__assert_func+0x38>)
 800e62e:	461c      	mov	r4, r3
 800e630:	e7f3      	b.n	800e61a <__assert_func+0x12>
 800e632:	bf00      	nop
 800e634:	20000010 	.word	0x20000010
 800e638:	08010eca 	.word	0x08010eca
 800e63c:	08010ed7 	.word	0x08010ed7
 800e640:	08010f05 	.word	0x08010f05

0800e644 <fiprintf>:
 800e644:	b40e      	push	{r1, r2, r3}
 800e646:	b503      	push	{r0, r1, lr}
 800e648:	ab03      	add	r3, sp, #12
 800e64a:	4601      	mov	r1, r0
 800e64c:	4805      	ldr	r0, [pc, #20]	; (800e664 <fiprintf+0x20>)
 800e64e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e652:	6800      	ldr	r0, [r0, #0]
 800e654:	9301      	str	r3, [sp, #4]
 800e656:	f000 fa75 	bl	800eb44 <_vfiprintf_r>
 800e65a:	b002      	add	sp, #8
 800e65c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e660:	b003      	add	sp, #12
 800e662:	4770      	bx	lr
 800e664:	20000010 	.word	0x20000010

0800e668 <malloc>:
 800e668:	4b02      	ldr	r3, [pc, #8]	; (800e674 <malloc+0xc>)
 800e66a:	4601      	mov	r1, r0
 800e66c:	6818      	ldr	r0, [r3, #0]
 800e66e:	f000 b86f 	b.w	800e750 <_malloc_r>
 800e672:	bf00      	nop
 800e674:	20000010 	.word	0x20000010

0800e678 <_free_r>:
 800e678:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e67a:	2900      	cmp	r1, #0
 800e67c:	d043      	beq.n	800e706 <_free_r+0x8e>
 800e67e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e682:	1f0c      	subs	r4, r1, #4
 800e684:	9001      	str	r0, [sp, #4]
 800e686:	2b00      	cmp	r3, #0
 800e688:	bfb8      	it	lt
 800e68a:	18e4      	addlt	r4, r4, r3
 800e68c:	f001 f83e 	bl	800f70c <__malloc_lock>
 800e690:	4a1e      	ldr	r2, [pc, #120]	; (800e70c <_free_r+0x94>)
 800e692:	9801      	ldr	r0, [sp, #4]
 800e694:	6813      	ldr	r3, [r2, #0]
 800e696:	b933      	cbnz	r3, 800e6a6 <_free_r+0x2e>
 800e698:	6063      	str	r3, [r4, #4]
 800e69a:	6014      	str	r4, [r2, #0]
 800e69c:	b003      	add	sp, #12
 800e69e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6a2:	f001 b839 	b.w	800f718 <__malloc_unlock>
 800e6a6:	42a3      	cmp	r3, r4
 800e6a8:	d908      	bls.n	800e6bc <_free_r+0x44>
 800e6aa:	6825      	ldr	r5, [r4, #0]
 800e6ac:	1961      	adds	r1, r4, r5
 800e6ae:	428b      	cmp	r3, r1
 800e6b0:	bf01      	itttt	eq
 800e6b2:	6819      	ldreq	r1, [r3, #0]
 800e6b4:	685b      	ldreq	r3, [r3, #4]
 800e6b6:	1949      	addeq	r1, r1, r5
 800e6b8:	6021      	streq	r1, [r4, #0]
 800e6ba:	e7ed      	b.n	800e698 <_free_r+0x20>
 800e6bc:	461a      	mov	r2, r3
 800e6be:	685b      	ldr	r3, [r3, #4]
 800e6c0:	b10b      	cbz	r3, 800e6c6 <_free_r+0x4e>
 800e6c2:	42a3      	cmp	r3, r4
 800e6c4:	d9fa      	bls.n	800e6bc <_free_r+0x44>
 800e6c6:	6811      	ldr	r1, [r2, #0]
 800e6c8:	1855      	adds	r5, r2, r1
 800e6ca:	42a5      	cmp	r5, r4
 800e6cc:	d10b      	bne.n	800e6e6 <_free_r+0x6e>
 800e6ce:	6824      	ldr	r4, [r4, #0]
 800e6d0:	4421      	add	r1, r4
 800e6d2:	1854      	adds	r4, r2, r1
 800e6d4:	6011      	str	r1, [r2, #0]
 800e6d6:	42a3      	cmp	r3, r4
 800e6d8:	d1e0      	bne.n	800e69c <_free_r+0x24>
 800e6da:	681c      	ldr	r4, [r3, #0]
 800e6dc:	685b      	ldr	r3, [r3, #4]
 800e6de:	4421      	add	r1, r4
 800e6e0:	6053      	str	r3, [r2, #4]
 800e6e2:	6011      	str	r1, [r2, #0]
 800e6e4:	e7da      	b.n	800e69c <_free_r+0x24>
 800e6e6:	d902      	bls.n	800e6ee <_free_r+0x76>
 800e6e8:	230c      	movs	r3, #12
 800e6ea:	6003      	str	r3, [r0, #0]
 800e6ec:	e7d6      	b.n	800e69c <_free_r+0x24>
 800e6ee:	6825      	ldr	r5, [r4, #0]
 800e6f0:	1961      	adds	r1, r4, r5
 800e6f2:	428b      	cmp	r3, r1
 800e6f4:	bf02      	ittt	eq
 800e6f6:	6819      	ldreq	r1, [r3, #0]
 800e6f8:	685b      	ldreq	r3, [r3, #4]
 800e6fa:	1949      	addeq	r1, r1, r5
 800e6fc:	6063      	str	r3, [r4, #4]
 800e6fe:	bf08      	it	eq
 800e700:	6021      	streq	r1, [r4, #0]
 800e702:	6054      	str	r4, [r2, #4]
 800e704:	e7ca      	b.n	800e69c <_free_r+0x24>
 800e706:	b003      	add	sp, #12
 800e708:	bd30      	pop	{r4, r5, pc}
 800e70a:	bf00      	nop
 800e70c:	20006410 	.word	0x20006410

0800e710 <sbrk_aligned>:
 800e710:	b570      	push	{r4, r5, r6, lr}
 800e712:	4e0e      	ldr	r6, [pc, #56]	; (800e74c <sbrk_aligned+0x3c>)
 800e714:	460c      	mov	r4, r1
 800e716:	4605      	mov	r5, r0
 800e718:	6831      	ldr	r1, [r6, #0]
 800e71a:	b911      	cbnz	r1, 800e722 <sbrk_aligned+0x12>
 800e71c:	f000 fcd8 	bl	800f0d0 <_sbrk_r>
 800e720:	6030      	str	r0, [r6, #0]
 800e722:	4621      	mov	r1, r4
 800e724:	4628      	mov	r0, r5
 800e726:	f000 fcd3 	bl	800f0d0 <_sbrk_r>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d00a      	beq.n	800e744 <sbrk_aligned+0x34>
 800e72e:	1cc4      	adds	r4, r0, #3
 800e730:	f024 0403 	bic.w	r4, r4, #3
 800e734:	42a0      	cmp	r0, r4
 800e736:	d007      	beq.n	800e748 <sbrk_aligned+0x38>
 800e738:	1a21      	subs	r1, r4, r0
 800e73a:	4628      	mov	r0, r5
 800e73c:	f000 fcc8 	bl	800f0d0 <_sbrk_r>
 800e740:	3001      	adds	r0, #1
 800e742:	d101      	bne.n	800e748 <sbrk_aligned+0x38>
 800e744:	f04f 34ff 	mov.w	r4, #4294967295
 800e748:	4620      	mov	r0, r4
 800e74a:	bd70      	pop	{r4, r5, r6, pc}
 800e74c:	20006414 	.word	0x20006414

0800e750 <_malloc_r>:
 800e750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e754:	1ccd      	adds	r5, r1, #3
 800e756:	4607      	mov	r7, r0
 800e758:	f025 0503 	bic.w	r5, r5, #3
 800e75c:	3508      	adds	r5, #8
 800e75e:	2d0c      	cmp	r5, #12
 800e760:	bf38      	it	cc
 800e762:	250c      	movcc	r5, #12
 800e764:	2d00      	cmp	r5, #0
 800e766:	db01      	blt.n	800e76c <_malloc_r+0x1c>
 800e768:	42a9      	cmp	r1, r5
 800e76a:	d905      	bls.n	800e778 <_malloc_r+0x28>
 800e76c:	230c      	movs	r3, #12
 800e76e:	2600      	movs	r6, #0
 800e770:	603b      	str	r3, [r7, #0]
 800e772:	4630      	mov	r0, r6
 800e774:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e778:	4e2e      	ldr	r6, [pc, #184]	; (800e834 <_malloc_r+0xe4>)
 800e77a:	f000 ffc7 	bl	800f70c <__malloc_lock>
 800e77e:	6833      	ldr	r3, [r6, #0]
 800e780:	461c      	mov	r4, r3
 800e782:	bb34      	cbnz	r4, 800e7d2 <_malloc_r+0x82>
 800e784:	4629      	mov	r1, r5
 800e786:	4638      	mov	r0, r7
 800e788:	f7ff ffc2 	bl	800e710 <sbrk_aligned>
 800e78c:	1c43      	adds	r3, r0, #1
 800e78e:	4604      	mov	r4, r0
 800e790:	d14d      	bne.n	800e82e <_malloc_r+0xde>
 800e792:	6834      	ldr	r4, [r6, #0]
 800e794:	4626      	mov	r6, r4
 800e796:	2e00      	cmp	r6, #0
 800e798:	d140      	bne.n	800e81c <_malloc_r+0xcc>
 800e79a:	6823      	ldr	r3, [r4, #0]
 800e79c:	4631      	mov	r1, r6
 800e79e:	4638      	mov	r0, r7
 800e7a0:	eb04 0803 	add.w	r8, r4, r3
 800e7a4:	f000 fc94 	bl	800f0d0 <_sbrk_r>
 800e7a8:	4580      	cmp	r8, r0
 800e7aa:	d13a      	bne.n	800e822 <_malloc_r+0xd2>
 800e7ac:	6821      	ldr	r1, [r4, #0]
 800e7ae:	3503      	adds	r5, #3
 800e7b0:	4638      	mov	r0, r7
 800e7b2:	1a6d      	subs	r5, r5, r1
 800e7b4:	f025 0503 	bic.w	r5, r5, #3
 800e7b8:	3508      	adds	r5, #8
 800e7ba:	2d0c      	cmp	r5, #12
 800e7bc:	bf38      	it	cc
 800e7be:	250c      	movcc	r5, #12
 800e7c0:	4629      	mov	r1, r5
 800e7c2:	f7ff ffa5 	bl	800e710 <sbrk_aligned>
 800e7c6:	3001      	adds	r0, #1
 800e7c8:	d02b      	beq.n	800e822 <_malloc_r+0xd2>
 800e7ca:	6823      	ldr	r3, [r4, #0]
 800e7cc:	442b      	add	r3, r5
 800e7ce:	6023      	str	r3, [r4, #0]
 800e7d0:	e00e      	b.n	800e7f0 <_malloc_r+0xa0>
 800e7d2:	6822      	ldr	r2, [r4, #0]
 800e7d4:	1b52      	subs	r2, r2, r5
 800e7d6:	d41e      	bmi.n	800e816 <_malloc_r+0xc6>
 800e7d8:	2a0b      	cmp	r2, #11
 800e7da:	d916      	bls.n	800e80a <_malloc_r+0xba>
 800e7dc:	1961      	adds	r1, r4, r5
 800e7de:	42a3      	cmp	r3, r4
 800e7e0:	6025      	str	r5, [r4, #0]
 800e7e2:	bf18      	it	ne
 800e7e4:	6059      	strne	r1, [r3, #4]
 800e7e6:	6863      	ldr	r3, [r4, #4]
 800e7e8:	bf08      	it	eq
 800e7ea:	6031      	streq	r1, [r6, #0]
 800e7ec:	5162      	str	r2, [r4, r5]
 800e7ee:	604b      	str	r3, [r1, #4]
 800e7f0:	f104 060b 	add.w	r6, r4, #11
 800e7f4:	4638      	mov	r0, r7
 800e7f6:	f000 ff8f 	bl	800f718 <__malloc_unlock>
 800e7fa:	1d23      	adds	r3, r4, #4
 800e7fc:	f026 0607 	bic.w	r6, r6, #7
 800e800:	1af2      	subs	r2, r6, r3
 800e802:	d0b6      	beq.n	800e772 <_malloc_r+0x22>
 800e804:	1b9b      	subs	r3, r3, r6
 800e806:	50a3      	str	r3, [r4, r2]
 800e808:	e7b3      	b.n	800e772 <_malloc_r+0x22>
 800e80a:	6862      	ldr	r2, [r4, #4]
 800e80c:	42a3      	cmp	r3, r4
 800e80e:	bf0c      	ite	eq
 800e810:	6032      	streq	r2, [r6, #0]
 800e812:	605a      	strne	r2, [r3, #4]
 800e814:	e7ec      	b.n	800e7f0 <_malloc_r+0xa0>
 800e816:	4623      	mov	r3, r4
 800e818:	6864      	ldr	r4, [r4, #4]
 800e81a:	e7b2      	b.n	800e782 <_malloc_r+0x32>
 800e81c:	4634      	mov	r4, r6
 800e81e:	6876      	ldr	r6, [r6, #4]
 800e820:	e7b9      	b.n	800e796 <_malloc_r+0x46>
 800e822:	230c      	movs	r3, #12
 800e824:	4638      	mov	r0, r7
 800e826:	603b      	str	r3, [r7, #0]
 800e828:	f000 ff76 	bl	800f718 <__malloc_unlock>
 800e82c:	e7a1      	b.n	800e772 <_malloc_r+0x22>
 800e82e:	6025      	str	r5, [r4, #0]
 800e830:	e7de      	b.n	800e7f0 <_malloc_r+0xa0>
 800e832:	bf00      	nop
 800e834:	20006410 	.word	0x20006410

0800e838 <__ssputs_r>:
 800e838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e83c:	688e      	ldr	r6, [r1, #8]
 800e83e:	4682      	mov	sl, r0
 800e840:	460c      	mov	r4, r1
 800e842:	4690      	mov	r8, r2
 800e844:	429e      	cmp	r6, r3
 800e846:	461f      	mov	r7, r3
 800e848:	d838      	bhi.n	800e8bc <__ssputs_r+0x84>
 800e84a:	898a      	ldrh	r2, [r1, #12]
 800e84c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e850:	d032      	beq.n	800e8b8 <__ssputs_r+0x80>
 800e852:	6825      	ldr	r5, [r4, #0]
 800e854:	3301      	adds	r3, #1
 800e856:	6909      	ldr	r1, [r1, #16]
 800e858:	eba5 0901 	sub.w	r9, r5, r1
 800e85c:	6965      	ldr	r5, [r4, #20]
 800e85e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e862:	444b      	add	r3, r9
 800e864:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e868:	106d      	asrs	r5, r5, #1
 800e86a:	429d      	cmp	r5, r3
 800e86c:	bf38      	it	cc
 800e86e:	461d      	movcc	r5, r3
 800e870:	0553      	lsls	r3, r2, #21
 800e872:	d531      	bpl.n	800e8d8 <__ssputs_r+0xa0>
 800e874:	4629      	mov	r1, r5
 800e876:	f7ff ff6b 	bl	800e750 <_malloc_r>
 800e87a:	4606      	mov	r6, r0
 800e87c:	b950      	cbnz	r0, 800e894 <__ssputs_r+0x5c>
 800e87e:	230c      	movs	r3, #12
 800e880:	f04f 30ff 	mov.w	r0, #4294967295
 800e884:	f8ca 3000 	str.w	r3, [sl]
 800e888:	89a3      	ldrh	r3, [r4, #12]
 800e88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e894:	464a      	mov	r2, r9
 800e896:	6921      	ldr	r1, [r4, #16]
 800e898:	f7ff fd6e 	bl	800e378 <memcpy>
 800e89c:	89a3      	ldrh	r3, [r4, #12]
 800e89e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8a6:	81a3      	strh	r3, [r4, #12]
 800e8a8:	6126      	str	r6, [r4, #16]
 800e8aa:	444e      	add	r6, r9
 800e8ac:	6165      	str	r5, [r4, #20]
 800e8ae:	eba5 0509 	sub.w	r5, r5, r9
 800e8b2:	6026      	str	r6, [r4, #0]
 800e8b4:	463e      	mov	r6, r7
 800e8b6:	60a5      	str	r5, [r4, #8]
 800e8b8:	42be      	cmp	r6, r7
 800e8ba:	d900      	bls.n	800e8be <__ssputs_r+0x86>
 800e8bc:	463e      	mov	r6, r7
 800e8be:	4632      	mov	r2, r6
 800e8c0:	4641      	mov	r1, r8
 800e8c2:	6820      	ldr	r0, [r4, #0]
 800e8c4:	f000 ff08 	bl	800f6d8 <memmove>
 800e8c8:	68a3      	ldr	r3, [r4, #8]
 800e8ca:	2000      	movs	r0, #0
 800e8cc:	1b9b      	subs	r3, r3, r6
 800e8ce:	60a3      	str	r3, [r4, #8]
 800e8d0:	6823      	ldr	r3, [r4, #0]
 800e8d2:	4433      	add	r3, r6
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	e7db      	b.n	800e890 <__ssputs_r+0x58>
 800e8d8:	462a      	mov	r2, r5
 800e8da:	f000 ff23 	bl	800f724 <_realloc_r>
 800e8de:	4606      	mov	r6, r0
 800e8e0:	2800      	cmp	r0, #0
 800e8e2:	d1e1      	bne.n	800e8a8 <__ssputs_r+0x70>
 800e8e4:	6921      	ldr	r1, [r4, #16]
 800e8e6:	4650      	mov	r0, sl
 800e8e8:	f7ff fec6 	bl	800e678 <_free_r>
 800e8ec:	e7c7      	b.n	800e87e <__ssputs_r+0x46>
	...

0800e8f0 <_svfiprintf_r>:
 800e8f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8f4:	4698      	mov	r8, r3
 800e8f6:	898b      	ldrh	r3, [r1, #12]
 800e8f8:	b09d      	sub	sp, #116	; 0x74
 800e8fa:	4607      	mov	r7, r0
 800e8fc:	061b      	lsls	r3, r3, #24
 800e8fe:	460d      	mov	r5, r1
 800e900:	4614      	mov	r4, r2
 800e902:	d50e      	bpl.n	800e922 <_svfiprintf_r+0x32>
 800e904:	690b      	ldr	r3, [r1, #16]
 800e906:	b963      	cbnz	r3, 800e922 <_svfiprintf_r+0x32>
 800e908:	2140      	movs	r1, #64	; 0x40
 800e90a:	f7ff ff21 	bl	800e750 <_malloc_r>
 800e90e:	6028      	str	r0, [r5, #0]
 800e910:	6128      	str	r0, [r5, #16]
 800e912:	b920      	cbnz	r0, 800e91e <_svfiprintf_r+0x2e>
 800e914:	230c      	movs	r3, #12
 800e916:	603b      	str	r3, [r7, #0]
 800e918:	f04f 30ff 	mov.w	r0, #4294967295
 800e91c:	e0d1      	b.n	800eac2 <_svfiprintf_r+0x1d2>
 800e91e:	2340      	movs	r3, #64	; 0x40
 800e920:	616b      	str	r3, [r5, #20]
 800e922:	2300      	movs	r3, #0
 800e924:	f8cd 800c 	str.w	r8, [sp, #12]
 800e928:	f04f 0901 	mov.w	r9, #1
 800e92c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 800eadc <_svfiprintf_r+0x1ec>
 800e930:	9309      	str	r3, [sp, #36]	; 0x24
 800e932:	2320      	movs	r3, #32
 800e934:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e938:	2330      	movs	r3, #48	; 0x30
 800e93a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e93e:	4623      	mov	r3, r4
 800e940:	469a      	mov	sl, r3
 800e942:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e946:	b10a      	cbz	r2, 800e94c <_svfiprintf_r+0x5c>
 800e948:	2a25      	cmp	r2, #37	; 0x25
 800e94a:	d1f9      	bne.n	800e940 <_svfiprintf_r+0x50>
 800e94c:	ebba 0b04 	subs.w	fp, sl, r4
 800e950:	d00b      	beq.n	800e96a <_svfiprintf_r+0x7a>
 800e952:	465b      	mov	r3, fp
 800e954:	4622      	mov	r2, r4
 800e956:	4629      	mov	r1, r5
 800e958:	4638      	mov	r0, r7
 800e95a:	f7ff ff6d 	bl	800e838 <__ssputs_r>
 800e95e:	3001      	adds	r0, #1
 800e960:	f000 80aa 	beq.w	800eab8 <_svfiprintf_r+0x1c8>
 800e964:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e966:	445a      	add	r2, fp
 800e968:	9209      	str	r2, [sp, #36]	; 0x24
 800e96a:	f89a 3000 	ldrb.w	r3, [sl]
 800e96e:	2b00      	cmp	r3, #0
 800e970:	f000 80a2 	beq.w	800eab8 <_svfiprintf_r+0x1c8>
 800e974:	2300      	movs	r3, #0
 800e976:	f04f 32ff 	mov.w	r2, #4294967295
 800e97a:	f10a 0a01 	add.w	sl, sl, #1
 800e97e:	9304      	str	r3, [sp, #16]
 800e980:	9307      	str	r3, [sp, #28]
 800e982:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e986:	931a      	str	r3, [sp, #104]	; 0x68
 800e988:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e98c:	4654      	mov	r4, sl
 800e98e:	2205      	movs	r2, #5
 800e990:	4852      	ldr	r0, [pc, #328]	; (800eadc <_svfiprintf_r+0x1ec>)
 800e992:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e996:	f000 fe91 	bl	800f6bc <memchr>
 800e99a:	9a04      	ldr	r2, [sp, #16]
 800e99c:	b9d8      	cbnz	r0, 800e9d6 <_svfiprintf_r+0xe6>
 800e99e:	06d0      	lsls	r0, r2, #27
 800e9a0:	bf44      	itt	mi
 800e9a2:	2320      	movmi	r3, #32
 800e9a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9a8:	0711      	lsls	r1, r2, #28
 800e9aa:	bf44      	itt	mi
 800e9ac:	232b      	movmi	r3, #43	; 0x2b
 800e9ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9b2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9b6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9b8:	d015      	beq.n	800e9e6 <_svfiprintf_r+0xf6>
 800e9ba:	9a07      	ldr	r2, [sp, #28]
 800e9bc:	4654      	mov	r4, sl
 800e9be:	2000      	movs	r0, #0
 800e9c0:	f04f 0c0a 	mov.w	ip, #10
 800e9c4:	4621      	mov	r1, r4
 800e9c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ca:	3b30      	subs	r3, #48	; 0x30
 800e9cc:	2b09      	cmp	r3, #9
 800e9ce:	d94e      	bls.n	800ea6e <_svfiprintf_r+0x17e>
 800e9d0:	b1b0      	cbz	r0, 800ea00 <_svfiprintf_r+0x110>
 800e9d2:	9207      	str	r2, [sp, #28]
 800e9d4:	e014      	b.n	800ea00 <_svfiprintf_r+0x110>
 800e9d6:	eba0 0308 	sub.w	r3, r0, r8
 800e9da:	46a2      	mov	sl, r4
 800e9dc:	fa09 f303 	lsl.w	r3, r9, r3
 800e9e0:	4313      	orrs	r3, r2
 800e9e2:	9304      	str	r3, [sp, #16]
 800e9e4:	e7d2      	b.n	800e98c <_svfiprintf_r+0x9c>
 800e9e6:	9b03      	ldr	r3, [sp, #12]
 800e9e8:	1d19      	adds	r1, r3, #4
 800e9ea:	681b      	ldr	r3, [r3, #0]
 800e9ec:	2b00      	cmp	r3, #0
 800e9ee:	9103      	str	r1, [sp, #12]
 800e9f0:	bfbb      	ittet	lt
 800e9f2:	425b      	neglt	r3, r3
 800e9f4:	f042 0202 	orrlt.w	r2, r2, #2
 800e9f8:	9307      	strge	r3, [sp, #28]
 800e9fa:	9307      	strlt	r3, [sp, #28]
 800e9fc:	bfb8      	it	lt
 800e9fe:	9204      	strlt	r2, [sp, #16]
 800ea00:	7823      	ldrb	r3, [r4, #0]
 800ea02:	2b2e      	cmp	r3, #46	; 0x2e
 800ea04:	d10c      	bne.n	800ea20 <_svfiprintf_r+0x130>
 800ea06:	7863      	ldrb	r3, [r4, #1]
 800ea08:	2b2a      	cmp	r3, #42	; 0x2a
 800ea0a:	d135      	bne.n	800ea78 <_svfiprintf_r+0x188>
 800ea0c:	9b03      	ldr	r3, [sp, #12]
 800ea0e:	3402      	adds	r4, #2
 800ea10:	1d1a      	adds	r2, r3, #4
 800ea12:	681b      	ldr	r3, [r3, #0]
 800ea14:	2b00      	cmp	r3, #0
 800ea16:	9203      	str	r2, [sp, #12]
 800ea18:	bfb8      	it	lt
 800ea1a:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea1e:	9305      	str	r3, [sp, #20]
 800ea20:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eaec <_svfiprintf_r+0x1fc>
 800ea24:	2203      	movs	r2, #3
 800ea26:	7821      	ldrb	r1, [r4, #0]
 800ea28:	4650      	mov	r0, sl
 800ea2a:	f000 fe47 	bl	800f6bc <memchr>
 800ea2e:	b140      	cbz	r0, 800ea42 <_svfiprintf_r+0x152>
 800ea30:	2340      	movs	r3, #64	; 0x40
 800ea32:	eba0 000a 	sub.w	r0, r0, sl
 800ea36:	3401      	adds	r4, #1
 800ea38:	fa03 f000 	lsl.w	r0, r3, r0
 800ea3c:	9b04      	ldr	r3, [sp, #16]
 800ea3e:	4303      	orrs	r3, r0
 800ea40:	9304      	str	r3, [sp, #16]
 800ea42:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea46:	2206      	movs	r2, #6
 800ea48:	4825      	ldr	r0, [pc, #148]	; (800eae0 <_svfiprintf_r+0x1f0>)
 800ea4a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea4e:	f000 fe35 	bl	800f6bc <memchr>
 800ea52:	2800      	cmp	r0, #0
 800ea54:	d038      	beq.n	800eac8 <_svfiprintf_r+0x1d8>
 800ea56:	4b23      	ldr	r3, [pc, #140]	; (800eae4 <_svfiprintf_r+0x1f4>)
 800ea58:	bb1b      	cbnz	r3, 800eaa2 <_svfiprintf_r+0x1b2>
 800ea5a:	9b03      	ldr	r3, [sp, #12]
 800ea5c:	3307      	adds	r3, #7
 800ea5e:	f023 0307 	bic.w	r3, r3, #7
 800ea62:	3308      	adds	r3, #8
 800ea64:	9303      	str	r3, [sp, #12]
 800ea66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea68:	4433      	add	r3, r6
 800ea6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea6c:	e767      	b.n	800e93e <_svfiprintf_r+0x4e>
 800ea6e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea72:	460c      	mov	r4, r1
 800ea74:	2001      	movs	r0, #1
 800ea76:	e7a5      	b.n	800e9c4 <_svfiprintf_r+0xd4>
 800ea78:	2300      	movs	r3, #0
 800ea7a:	3401      	adds	r4, #1
 800ea7c:	f04f 0c0a 	mov.w	ip, #10
 800ea80:	4619      	mov	r1, r3
 800ea82:	9305      	str	r3, [sp, #20]
 800ea84:	4620      	mov	r0, r4
 800ea86:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea8a:	3a30      	subs	r2, #48	; 0x30
 800ea8c:	2a09      	cmp	r2, #9
 800ea8e:	d903      	bls.n	800ea98 <_svfiprintf_r+0x1a8>
 800ea90:	2b00      	cmp	r3, #0
 800ea92:	d0c5      	beq.n	800ea20 <_svfiprintf_r+0x130>
 800ea94:	9105      	str	r1, [sp, #20]
 800ea96:	e7c3      	b.n	800ea20 <_svfiprintf_r+0x130>
 800ea98:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea9c:	4604      	mov	r4, r0
 800ea9e:	2301      	movs	r3, #1
 800eaa0:	e7f0      	b.n	800ea84 <_svfiprintf_r+0x194>
 800eaa2:	ab03      	add	r3, sp, #12
 800eaa4:	462a      	mov	r2, r5
 800eaa6:	a904      	add	r1, sp, #16
 800eaa8:	4638      	mov	r0, r7
 800eaaa:	9300      	str	r3, [sp, #0]
 800eaac:	4b0e      	ldr	r3, [pc, #56]	; (800eae8 <_svfiprintf_r+0x1f8>)
 800eaae:	e000      	b.n	800eab2 <_svfiprintf_r+0x1c2>
 800eab0:	bf00      	nop
 800eab2:	1c42      	adds	r2, r0, #1
 800eab4:	4606      	mov	r6, r0
 800eab6:	d1d6      	bne.n	800ea66 <_svfiprintf_r+0x176>
 800eab8:	89ab      	ldrh	r3, [r5, #12]
 800eaba:	065b      	lsls	r3, r3, #25
 800eabc:	f53f af2c 	bmi.w	800e918 <_svfiprintf_r+0x28>
 800eac0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eac2:	b01d      	add	sp, #116	; 0x74
 800eac4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac8:	ab03      	add	r3, sp, #12
 800eaca:	462a      	mov	r2, r5
 800eacc:	a904      	add	r1, sp, #16
 800eace:	4638      	mov	r0, r7
 800ead0:	9300      	str	r3, [sp, #0]
 800ead2:	4b05      	ldr	r3, [pc, #20]	; (800eae8 <_svfiprintf_r+0x1f8>)
 800ead4:	f000 f9d6 	bl	800ee84 <_printf_i>
 800ead8:	e7eb      	b.n	800eab2 <_svfiprintf_r+0x1c2>
 800eada:	bf00      	nop
 800eadc:	08010f06 	.word	0x08010f06
 800eae0:	08010f10 	.word	0x08010f10
 800eae4:	00000000 	.word	0x00000000
 800eae8:	0800e839 	.word	0x0800e839
 800eaec:	08010f0c 	.word	0x08010f0c

0800eaf0 <__sfputc_r>:
 800eaf0:	6893      	ldr	r3, [r2, #8]
 800eaf2:	3b01      	subs	r3, #1
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	6093      	str	r3, [r2, #8]
 800eaf8:	b410      	push	{r4}
 800eafa:	da08      	bge.n	800eb0e <__sfputc_r+0x1e>
 800eafc:	6994      	ldr	r4, [r2, #24]
 800eafe:	42a3      	cmp	r3, r4
 800eb00:	db01      	blt.n	800eb06 <__sfputc_r+0x16>
 800eb02:	290a      	cmp	r1, #10
 800eb04:	d103      	bne.n	800eb0e <__sfputc_r+0x1e>
 800eb06:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb0a:	f000 baf1 	b.w	800f0f0 <__swbuf_r>
 800eb0e:	6813      	ldr	r3, [r2, #0]
 800eb10:	1c58      	adds	r0, r3, #1
 800eb12:	6010      	str	r0, [r2, #0]
 800eb14:	4608      	mov	r0, r1
 800eb16:	7019      	strb	r1, [r3, #0]
 800eb18:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb1c:	4770      	bx	lr

0800eb1e <__sfputs_r>:
 800eb1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb20:	4606      	mov	r6, r0
 800eb22:	460f      	mov	r7, r1
 800eb24:	4614      	mov	r4, r2
 800eb26:	18d5      	adds	r5, r2, r3
 800eb28:	42ac      	cmp	r4, r5
 800eb2a:	d101      	bne.n	800eb30 <__sfputs_r+0x12>
 800eb2c:	2000      	movs	r0, #0
 800eb2e:	e007      	b.n	800eb40 <__sfputs_r+0x22>
 800eb30:	463a      	mov	r2, r7
 800eb32:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb36:	4630      	mov	r0, r6
 800eb38:	f7ff ffda 	bl	800eaf0 <__sfputc_r>
 800eb3c:	1c43      	adds	r3, r0, #1
 800eb3e:	d1f3      	bne.n	800eb28 <__sfputs_r+0xa>
 800eb40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb44 <_vfiprintf_r>:
 800eb44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb48:	460d      	mov	r5, r1
 800eb4a:	b09d      	sub	sp, #116	; 0x74
 800eb4c:	4614      	mov	r4, r2
 800eb4e:	4698      	mov	r8, r3
 800eb50:	4606      	mov	r6, r0
 800eb52:	b118      	cbz	r0, 800eb5c <_vfiprintf_r+0x18>
 800eb54:	6983      	ldr	r3, [r0, #24]
 800eb56:	b90b      	cbnz	r3, 800eb5c <_vfiprintf_r+0x18>
 800eb58:	f000 fcaa 	bl	800f4b0 <__sinit>
 800eb5c:	4b89      	ldr	r3, [pc, #548]	; (800ed84 <_vfiprintf_r+0x240>)
 800eb5e:	429d      	cmp	r5, r3
 800eb60:	d11b      	bne.n	800eb9a <_vfiprintf_r+0x56>
 800eb62:	6875      	ldr	r5, [r6, #4]
 800eb64:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb66:	07d9      	lsls	r1, r3, #31
 800eb68:	d405      	bmi.n	800eb76 <_vfiprintf_r+0x32>
 800eb6a:	89ab      	ldrh	r3, [r5, #12]
 800eb6c:	059a      	lsls	r2, r3, #22
 800eb6e:	d402      	bmi.n	800eb76 <_vfiprintf_r+0x32>
 800eb70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb72:	f000 fd3b 	bl	800f5ec <__retarget_lock_acquire_recursive>
 800eb76:	89ab      	ldrh	r3, [r5, #12]
 800eb78:	071b      	lsls	r3, r3, #28
 800eb7a:	d501      	bpl.n	800eb80 <_vfiprintf_r+0x3c>
 800eb7c:	692b      	ldr	r3, [r5, #16]
 800eb7e:	b9eb      	cbnz	r3, 800ebbc <_vfiprintf_r+0x78>
 800eb80:	4629      	mov	r1, r5
 800eb82:	4630      	mov	r0, r6
 800eb84:	f000 fb06 	bl	800f194 <__swsetup_r>
 800eb88:	b1c0      	cbz	r0, 800ebbc <_vfiprintf_r+0x78>
 800eb8a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb8c:	07dc      	lsls	r4, r3, #31
 800eb8e:	d50e      	bpl.n	800ebae <_vfiprintf_r+0x6a>
 800eb90:	f04f 30ff 	mov.w	r0, #4294967295
 800eb94:	b01d      	add	sp, #116	; 0x74
 800eb96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb9a:	4b7b      	ldr	r3, [pc, #492]	; (800ed88 <_vfiprintf_r+0x244>)
 800eb9c:	429d      	cmp	r5, r3
 800eb9e:	d101      	bne.n	800eba4 <_vfiprintf_r+0x60>
 800eba0:	68b5      	ldr	r5, [r6, #8]
 800eba2:	e7df      	b.n	800eb64 <_vfiprintf_r+0x20>
 800eba4:	4b79      	ldr	r3, [pc, #484]	; (800ed8c <_vfiprintf_r+0x248>)
 800eba6:	429d      	cmp	r5, r3
 800eba8:	bf08      	it	eq
 800ebaa:	68f5      	ldreq	r5, [r6, #12]
 800ebac:	e7da      	b.n	800eb64 <_vfiprintf_r+0x20>
 800ebae:	89ab      	ldrh	r3, [r5, #12]
 800ebb0:	0598      	lsls	r0, r3, #22
 800ebb2:	d4ed      	bmi.n	800eb90 <_vfiprintf_r+0x4c>
 800ebb4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebb6:	f000 fd1a 	bl	800f5ee <__retarget_lock_release_recursive>
 800ebba:	e7e9      	b.n	800eb90 <_vfiprintf_r+0x4c>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebc2:	f04f 0901 	mov.w	r9, #1
 800ebc6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 800ed90 <_vfiprintf_r+0x24c>
 800ebca:	9309      	str	r3, [sp, #36]	; 0x24
 800ebcc:	2320      	movs	r3, #32
 800ebce:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebd2:	2330      	movs	r3, #48	; 0x30
 800ebd4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebd8:	4623      	mov	r3, r4
 800ebda:	469a      	mov	sl, r3
 800ebdc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebe0:	b10a      	cbz	r2, 800ebe6 <_vfiprintf_r+0xa2>
 800ebe2:	2a25      	cmp	r2, #37	; 0x25
 800ebe4:	d1f9      	bne.n	800ebda <_vfiprintf_r+0x96>
 800ebe6:	ebba 0b04 	subs.w	fp, sl, r4
 800ebea:	d00b      	beq.n	800ec04 <_vfiprintf_r+0xc0>
 800ebec:	465b      	mov	r3, fp
 800ebee:	4622      	mov	r2, r4
 800ebf0:	4629      	mov	r1, r5
 800ebf2:	4630      	mov	r0, r6
 800ebf4:	f7ff ff93 	bl	800eb1e <__sfputs_r>
 800ebf8:	3001      	adds	r0, #1
 800ebfa:	f000 80aa 	beq.w	800ed52 <_vfiprintf_r+0x20e>
 800ebfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec00:	445a      	add	r2, fp
 800ec02:	9209      	str	r2, [sp, #36]	; 0x24
 800ec04:	f89a 3000 	ldrb.w	r3, [sl]
 800ec08:	2b00      	cmp	r3, #0
 800ec0a:	f000 80a2 	beq.w	800ed52 <_vfiprintf_r+0x20e>
 800ec0e:	2300      	movs	r3, #0
 800ec10:	f04f 32ff 	mov.w	r2, #4294967295
 800ec14:	f10a 0a01 	add.w	sl, sl, #1
 800ec18:	9304      	str	r3, [sp, #16]
 800ec1a:	9307      	str	r3, [sp, #28]
 800ec1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec20:	931a      	str	r3, [sp, #104]	; 0x68
 800ec22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec26:	4654      	mov	r4, sl
 800ec28:	2205      	movs	r2, #5
 800ec2a:	4859      	ldr	r0, [pc, #356]	; (800ed90 <_vfiprintf_r+0x24c>)
 800ec2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec30:	f000 fd44 	bl	800f6bc <memchr>
 800ec34:	9a04      	ldr	r2, [sp, #16]
 800ec36:	b9d8      	cbnz	r0, 800ec70 <_vfiprintf_r+0x12c>
 800ec38:	06d1      	lsls	r1, r2, #27
 800ec3a:	bf44      	itt	mi
 800ec3c:	2320      	movmi	r3, #32
 800ec3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec42:	0713      	lsls	r3, r2, #28
 800ec44:	bf44      	itt	mi
 800ec46:	232b      	movmi	r3, #43	; 0x2b
 800ec48:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec4c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec50:	2b2a      	cmp	r3, #42	; 0x2a
 800ec52:	d015      	beq.n	800ec80 <_vfiprintf_r+0x13c>
 800ec54:	9a07      	ldr	r2, [sp, #28]
 800ec56:	4654      	mov	r4, sl
 800ec58:	2000      	movs	r0, #0
 800ec5a:	f04f 0c0a 	mov.w	ip, #10
 800ec5e:	4621      	mov	r1, r4
 800ec60:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec64:	3b30      	subs	r3, #48	; 0x30
 800ec66:	2b09      	cmp	r3, #9
 800ec68:	d94e      	bls.n	800ed08 <_vfiprintf_r+0x1c4>
 800ec6a:	b1b0      	cbz	r0, 800ec9a <_vfiprintf_r+0x156>
 800ec6c:	9207      	str	r2, [sp, #28]
 800ec6e:	e014      	b.n	800ec9a <_vfiprintf_r+0x156>
 800ec70:	eba0 0308 	sub.w	r3, r0, r8
 800ec74:	46a2      	mov	sl, r4
 800ec76:	fa09 f303 	lsl.w	r3, r9, r3
 800ec7a:	4313      	orrs	r3, r2
 800ec7c:	9304      	str	r3, [sp, #16]
 800ec7e:	e7d2      	b.n	800ec26 <_vfiprintf_r+0xe2>
 800ec80:	9b03      	ldr	r3, [sp, #12]
 800ec82:	1d19      	adds	r1, r3, #4
 800ec84:	681b      	ldr	r3, [r3, #0]
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	9103      	str	r1, [sp, #12]
 800ec8a:	bfbb      	ittet	lt
 800ec8c:	425b      	neglt	r3, r3
 800ec8e:	f042 0202 	orrlt.w	r2, r2, #2
 800ec92:	9307      	strge	r3, [sp, #28]
 800ec94:	9307      	strlt	r3, [sp, #28]
 800ec96:	bfb8      	it	lt
 800ec98:	9204      	strlt	r2, [sp, #16]
 800ec9a:	7823      	ldrb	r3, [r4, #0]
 800ec9c:	2b2e      	cmp	r3, #46	; 0x2e
 800ec9e:	d10c      	bne.n	800ecba <_vfiprintf_r+0x176>
 800eca0:	7863      	ldrb	r3, [r4, #1]
 800eca2:	2b2a      	cmp	r3, #42	; 0x2a
 800eca4:	d135      	bne.n	800ed12 <_vfiprintf_r+0x1ce>
 800eca6:	9b03      	ldr	r3, [sp, #12]
 800eca8:	3402      	adds	r4, #2
 800ecaa:	1d1a      	adds	r2, r3, #4
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	9203      	str	r2, [sp, #12]
 800ecb2:	bfb8      	it	lt
 800ecb4:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecb8:	9305      	str	r3, [sp, #20]
 800ecba:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800eda0 <_vfiprintf_r+0x25c>
 800ecbe:	2203      	movs	r2, #3
 800ecc0:	7821      	ldrb	r1, [r4, #0]
 800ecc2:	4650      	mov	r0, sl
 800ecc4:	f000 fcfa 	bl	800f6bc <memchr>
 800ecc8:	b140      	cbz	r0, 800ecdc <_vfiprintf_r+0x198>
 800ecca:	2340      	movs	r3, #64	; 0x40
 800eccc:	eba0 000a 	sub.w	r0, r0, sl
 800ecd0:	3401      	adds	r4, #1
 800ecd2:	fa03 f000 	lsl.w	r0, r3, r0
 800ecd6:	9b04      	ldr	r3, [sp, #16]
 800ecd8:	4303      	orrs	r3, r0
 800ecda:	9304      	str	r3, [sp, #16]
 800ecdc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ece0:	2206      	movs	r2, #6
 800ece2:	482c      	ldr	r0, [pc, #176]	; (800ed94 <_vfiprintf_r+0x250>)
 800ece4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ece8:	f000 fce8 	bl	800f6bc <memchr>
 800ecec:	2800      	cmp	r0, #0
 800ecee:	d03f      	beq.n	800ed70 <_vfiprintf_r+0x22c>
 800ecf0:	4b29      	ldr	r3, [pc, #164]	; (800ed98 <_vfiprintf_r+0x254>)
 800ecf2:	bb1b      	cbnz	r3, 800ed3c <_vfiprintf_r+0x1f8>
 800ecf4:	9b03      	ldr	r3, [sp, #12]
 800ecf6:	3307      	adds	r3, #7
 800ecf8:	f023 0307 	bic.w	r3, r3, #7
 800ecfc:	3308      	adds	r3, #8
 800ecfe:	9303      	str	r3, [sp, #12]
 800ed00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed02:	443b      	add	r3, r7
 800ed04:	9309      	str	r3, [sp, #36]	; 0x24
 800ed06:	e767      	b.n	800ebd8 <_vfiprintf_r+0x94>
 800ed08:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed0c:	460c      	mov	r4, r1
 800ed0e:	2001      	movs	r0, #1
 800ed10:	e7a5      	b.n	800ec5e <_vfiprintf_r+0x11a>
 800ed12:	2300      	movs	r3, #0
 800ed14:	3401      	adds	r4, #1
 800ed16:	f04f 0c0a 	mov.w	ip, #10
 800ed1a:	4619      	mov	r1, r3
 800ed1c:	9305      	str	r3, [sp, #20]
 800ed1e:	4620      	mov	r0, r4
 800ed20:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed24:	3a30      	subs	r2, #48	; 0x30
 800ed26:	2a09      	cmp	r2, #9
 800ed28:	d903      	bls.n	800ed32 <_vfiprintf_r+0x1ee>
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d0c5      	beq.n	800ecba <_vfiprintf_r+0x176>
 800ed2e:	9105      	str	r1, [sp, #20]
 800ed30:	e7c3      	b.n	800ecba <_vfiprintf_r+0x176>
 800ed32:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed36:	4604      	mov	r4, r0
 800ed38:	2301      	movs	r3, #1
 800ed3a:	e7f0      	b.n	800ed1e <_vfiprintf_r+0x1da>
 800ed3c:	ab03      	add	r3, sp, #12
 800ed3e:	462a      	mov	r2, r5
 800ed40:	a904      	add	r1, sp, #16
 800ed42:	4630      	mov	r0, r6
 800ed44:	9300      	str	r3, [sp, #0]
 800ed46:	4b15      	ldr	r3, [pc, #84]	; (800ed9c <_vfiprintf_r+0x258>)
 800ed48:	e000      	b.n	800ed4c <_vfiprintf_r+0x208>
 800ed4a:	bf00      	nop
 800ed4c:	4607      	mov	r7, r0
 800ed4e:	1c78      	adds	r0, r7, #1
 800ed50:	d1d6      	bne.n	800ed00 <_vfiprintf_r+0x1bc>
 800ed52:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed54:	07d9      	lsls	r1, r3, #31
 800ed56:	d405      	bmi.n	800ed64 <_vfiprintf_r+0x220>
 800ed58:	89ab      	ldrh	r3, [r5, #12]
 800ed5a:	059a      	lsls	r2, r3, #22
 800ed5c:	d402      	bmi.n	800ed64 <_vfiprintf_r+0x220>
 800ed5e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed60:	f000 fc45 	bl	800f5ee <__retarget_lock_release_recursive>
 800ed64:	89ab      	ldrh	r3, [r5, #12]
 800ed66:	065b      	lsls	r3, r3, #25
 800ed68:	f53f af12 	bmi.w	800eb90 <_vfiprintf_r+0x4c>
 800ed6c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed6e:	e711      	b.n	800eb94 <_vfiprintf_r+0x50>
 800ed70:	ab03      	add	r3, sp, #12
 800ed72:	462a      	mov	r2, r5
 800ed74:	a904      	add	r1, sp, #16
 800ed76:	4630      	mov	r0, r6
 800ed78:	9300      	str	r3, [sp, #0]
 800ed7a:	4b08      	ldr	r3, [pc, #32]	; (800ed9c <_vfiprintf_r+0x258>)
 800ed7c:	f000 f882 	bl	800ee84 <_printf_i>
 800ed80:	e7e4      	b.n	800ed4c <_vfiprintf_r+0x208>
 800ed82:	bf00      	nop
 800ed84:	08010f5c 	.word	0x08010f5c
 800ed88:	08010f7c 	.word	0x08010f7c
 800ed8c:	08010f3c 	.word	0x08010f3c
 800ed90:	08010f06 	.word	0x08010f06
 800ed94:	08010f10 	.word	0x08010f10
 800ed98:	00000000 	.word	0x00000000
 800ed9c:	0800eb1f 	.word	0x0800eb1f
 800eda0:	08010f0c 	.word	0x08010f0c

0800eda4 <_printf_common>:
 800eda4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eda8:	4616      	mov	r6, r2
 800edaa:	4699      	mov	r9, r3
 800edac:	688a      	ldr	r2, [r1, #8]
 800edae:	4607      	mov	r7, r0
 800edb0:	690b      	ldr	r3, [r1, #16]
 800edb2:	460c      	mov	r4, r1
 800edb4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800edb8:	4293      	cmp	r3, r2
 800edba:	bfb8      	it	lt
 800edbc:	4613      	movlt	r3, r2
 800edbe:	6033      	str	r3, [r6, #0]
 800edc0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800edc4:	b10a      	cbz	r2, 800edca <_printf_common+0x26>
 800edc6:	3301      	adds	r3, #1
 800edc8:	6033      	str	r3, [r6, #0]
 800edca:	6823      	ldr	r3, [r4, #0]
 800edcc:	0699      	lsls	r1, r3, #26
 800edce:	bf42      	ittt	mi
 800edd0:	6833      	ldrmi	r3, [r6, #0]
 800edd2:	3302      	addmi	r3, #2
 800edd4:	6033      	strmi	r3, [r6, #0]
 800edd6:	6825      	ldr	r5, [r4, #0]
 800edd8:	f015 0506 	ands.w	r5, r5, #6
 800eddc:	d106      	bne.n	800edec <_printf_common+0x48>
 800edde:	f104 0a19 	add.w	sl, r4, #25
 800ede2:	68e3      	ldr	r3, [r4, #12]
 800ede4:	6832      	ldr	r2, [r6, #0]
 800ede6:	1a9b      	subs	r3, r3, r2
 800ede8:	42ab      	cmp	r3, r5
 800edea:	dc29      	bgt.n	800ee40 <_printf_common+0x9c>
 800edec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800edf0:	1e13      	subs	r3, r2, #0
 800edf2:	6822      	ldr	r2, [r4, #0]
 800edf4:	bf18      	it	ne
 800edf6:	2301      	movne	r3, #1
 800edf8:	0692      	lsls	r2, r2, #26
 800edfa:	d42e      	bmi.n	800ee5a <_printf_common+0xb6>
 800edfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ee00:	4649      	mov	r1, r9
 800ee02:	4638      	mov	r0, r7
 800ee04:	47c0      	blx	r8
 800ee06:	3001      	adds	r0, #1
 800ee08:	d021      	beq.n	800ee4e <_printf_common+0xaa>
 800ee0a:	6823      	ldr	r3, [r4, #0]
 800ee0c:	341a      	adds	r4, #26
 800ee0e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 800ee12:	f003 0306 	and.w	r3, r3, #6
 800ee16:	6832      	ldr	r2, [r6, #0]
 800ee18:	2600      	movs	r6, #0
 800ee1a:	2b04      	cmp	r3, #4
 800ee1c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800ee20:	bf08      	it	eq
 800ee22:	1aad      	subeq	r5, r5, r2
 800ee24:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 800ee28:	bf14      	ite	ne
 800ee2a:	2500      	movne	r5, #0
 800ee2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ee30:	4293      	cmp	r3, r2
 800ee32:	bfc4      	itt	gt
 800ee34:	1a9b      	subgt	r3, r3, r2
 800ee36:	18ed      	addgt	r5, r5, r3
 800ee38:	42b5      	cmp	r5, r6
 800ee3a:	d11a      	bne.n	800ee72 <_printf_common+0xce>
 800ee3c:	2000      	movs	r0, #0
 800ee3e:	e008      	b.n	800ee52 <_printf_common+0xae>
 800ee40:	2301      	movs	r3, #1
 800ee42:	4652      	mov	r2, sl
 800ee44:	4649      	mov	r1, r9
 800ee46:	4638      	mov	r0, r7
 800ee48:	47c0      	blx	r8
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	d103      	bne.n	800ee56 <_printf_common+0xb2>
 800ee4e:	f04f 30ff 	mov.w	r0, #4294967295
 800ee52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee56:	3501      	adds	r5, #1
 800ee58:	e7c3      	b.n	800ede2 <_printf_common+0x3e>
 800ee5a:	18e1      	adds	r1, r4, r3
 800ee5c:	1c5a      	adds	r2, r3, #1
 800ee5e:	2030      	movs	r0, #48	; 0x30
 800ee60:	3302      	adds	r3, #2
 800ee62:	4422      	add	r2, r4
 800ee64:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800ee68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800ee6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800ee70:	e7c4      	b.n	800edfc <_printf_common+0x58>
 800ee72:	2301      	movs	r3, #1
 800ee74:	4622      	mov	r2, r4
 800ee76:	4649      	mov	r1, r9
 800ee78:	4638      	mov	r0, r7
 800ee7a:	47c0      	blx	r8
 800ee7c:	3001      	adds	r0, #1
 800ee7e:	d0e6      	beq.n	800ee4e <_printf_common+0xaa>
 800ee80:	3601      	adds	r6, #1
 800ee82:	e7d9      	b.n	800ee38 <_printf_common+0x94>

0800ee84 <_printf_i>:
 800ee84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ee88:	7e0f      	ldrb	r7, [r1, #24]
 800ee8a:	4691      	mov	r9, r2
 800ee8c:	4680      	mov	r8, r0
 800ee8e:	460c      	mov	r4, r1
 800ee90:	2f78      	cmp	r7, #120	; 0x78
 800ee92:	469a      	mov	sl, r3
 800ee94:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800ee96:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800ee9a:	d807      	bhi.n	800eeac <_printf_i+0x28>
 800ee9c:	2f62      	cmp	r7, #98	; 0x62
 800ee9e:	d80a      	bhi.n	800eeb6 <_printf_i+0x32>
 800eea0:	2f00      	cmp	r7, #0
 800eea2:	f000 80d8 	beq.w	800f056 <_printf_i+0x1d2>
 800eea6:	2f58      	cmp	r7, #88	; 0x58
 800eea8:	f000 80a3 	beq.w	800eff2 <_printf_i+0x16e>
 800eeac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800eeb0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800eeb4:	e03a      	b.n	800ef2c <_printf_i+0xa8>
 800eeb6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800eeba:	2b15      	cmp	r3, #21
 800eebc:	d8f6      	bhi.n	800eeac <_printf_i+0x28>
 800eebe:	a101      	add	r1, pc, #4	; (adr r1, 800eec4 <_printf_i+0x40>)
 800eec0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800eec4:	0800ef1d 	.word	0x0800ef1d
 800eec8:	0800ef31 	.word	0x0800ef31
 800eecc:	0800eead 	.word	0x0800eead
 800eed0:	0800eead 	.word	0x0800eead
 800eed4:	0800eead 	.word	0x0800eead
 800eed8:	0800eead 	.word	0x0800eead
 800eedc:	0800ef31 	.word	0x0800ef31
 800eee0:	0800eead 	.word	0x0800eead
 800eee4:	0800eead 	.word	0x0800eead
 800eee8:	0800eead 	.word	0x0800eead
 800eeec:	0800eead 	.word	0x0800eead
 800eef0:	0800f03d 	.word	0x0800f03d
 800eef4:	0800ef61 	.word	0x0800ef61
 800eef8:	0800f01f 	.word	0x0800f01f
 800eefc:	0800eead 	.word	0x0800eead
 800ef00:	0800eead 	.word	0x0800eead
 800ef04:	0800f05f 	.word	0x0800f05f
 800ef08:	0800eead 	.word	0x0800eead
 800ef0c:	0800ef61 	.word	0x0800ef61
 800ef10:	0800eead 	.word	0x0800eead
 800ef14:	0800eead 	.word	0x0800eead
 800ef18:	0800f027 	.word	0x0800f027
 800ef1c:	682b      	ldr	r3, [r5, #0]
 800ef1e:	1d1a      	adds	r2, r3, #4
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	602a      	str	r2, [r5, #0]
 800ef24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800ef28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800ef2c:	2301      	movs	r3, #1
 800ef2e:	e0a3      	b.n	800f078 <_printf_i+0x1f4>
 800ef30:	6820      	ldr	r0, [r4, #0]
 800ef32:	6829      	ldr	r1, [r5, #0]
 800ef34:	0606      	lsls	r6, r0, #24
 800ef36:	f101 0304 	add.w	r3, r1, #4
 800ef3a:	d50a      	bpl.n	800ef52 <_printf_i+0xce>
 800ef3c:	680e      	ldr	r6, [r1, #0]
 800ef3e:	602b      	str	r3, [r5, #0]
 800ef40:	2e00      	cmp	r6, #0
 800ef42:	da03      	bge.n	800ef4c <_printf_i+0xc8>
 800ef44:	232d      	movs	r3, #45	; 0x2d
 800ef46:	4276      	negs	r6, r6
 800ef48:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ef4c:	485e      	ldr	r0, [pc, #376]	; (800f0c8 <_printf_i+0x244>)
 800ef4e:	230a      	movs	r3, #10
 800ef50:	e019      	b.n	800ef86 <_printf_i+0x102>
 800ef52:	680e      	ldr	r6, [r1, #0]
 800ef54:	f010 0f40 	tst.w	r0, #64	; 0x40
 800ef58:	602b      	str	r3, [r5, #0]
 800ef5a:	bf18      	it	ne
 800ef5c:	b236      	sxthne	r6, r6
 800ef5e:	e7ef      	b.n	800ef40 <_printf_i+0xbc>
 800ef60:	682b      	ldr	r3, [r5, #0]
 800ef62:	6820      	ldr	r0, [r4, #0]
 800ef64:	1d19      	adds	r1, r3, #4
 800ef66:	6029      	str	r1, [r5, #0]
 800ef68:	0601      	lsls	r1, r0, #24
 800ef6a:	d501      	bpl.n	800ef70 <_printf_i+0xec>
 800ef6c:	681e      	ldr	r6, [r3, #0]
 800ef6e:	e002      	b.n	800ef76 <_printf_i+0xf2>
 800ef70:	0646      	lsls	r6, r0, #25
 800ef72:	d5fb      	bpl.n	800ef6c <_printf_i+0xe8>
 800ef74:	881e      	ldrh	r6, [r3, #0]
 800ef76:	2f6f      	cmp	r7, #111	; 0x6f
 800ef78:	4853      	ldr	r0, [pc, #332]	; (800f0c8 <_printf_i+0x244>)
 800ef7a:	bf0c      	ite	eq
 800ef7c:	2308      	moveq	r3, #8
 800ef7e:	230a      	movne	r3, #10
 800ef80:	2100      	movs	r1, #0
 800ef82:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ef86:	6865      	ldr	r5, [r4, #4]
 800ef88:	2d00      	cmp	r5, #0
 800ef8a:	60a5      	str	r5, [r4, #8]
 800ef8c:	bfa2      	ittt	ge
 800ef8e:	6821      	ldrge	r1, [r4, #0]
 800ef90:	f021 0104 	bicge.w	r1, r1, #4
 800ef94:	6021      	strge	r1, [r4, #0]
 800ef96:	b90e      	cbnz	r6, 800ef9c <_printf_i+0x118>
 800ef98:	2d00      	cmp	r5, #0
 800ef9a:	d04d      	beq.n	800f038 <_printf_i+0x1b4>
 800ef9c:	4615      	mov	r5, r2
 800ef9e:	fbb6 f1f3 	udiv	r1, r6, r3
 800efa2:	fb03 6711 	mls	r7, r3, r1, r6
 800efa6:	5dc7      	ldrb	r7, [r0, r7]
 800efa8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800efac:	4637      	mov	r7, r6
 800efae:	460e      	mov	r6, r1
 800efb0:	42bb      	cmp	r3, r7
 800efb2:	d9f4      	bls.n	800ef9e <_printf_i+0x11a>
 800efb4:	2b08      	cmp	r3, #8
 800efb6:	d10b      	bne.n	800efd0 <_printf_i+0x14c>
 800efb8:	6823      	ldr	r3, [r4, #0]
 800efba:	07de      	lsls	r6, r3, #31
 800efbc:	d508      	bpl.n	800efd0 <_printf_i+0x14c>
 800efbe:	6923      	ldr	r3, [r4, #16]
 800efc0:	6861      	ldr	r1, [r4, #4]
 800efc2:	4299      	cmp	r1, r3
 800efc4:	bfde      	ittt	le
 800efc6:	2330      	movle	r3, #48	; 0x30
 800efc8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800efcc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800efd0:	1b52      	subs	r2, r2, r5
 800efd2:	6122      	str	r2, [r4, #16]
 800efd4:	464b      	mov	r3, r9
 800efd6:	aa03      	add	r2, sp, #12
 800efd8:	4621      	mov	r1, r4
 800efda:	4640      	mov	r0, r8
 800efdc:	f8cd a000 	str.w	sl, [sp]
 800efe0:	f7ff fee0 	bl	800eda4 <_printf_common>
 800efe4:	3001      	adds	r0, #1
 800efe6:	d14c      	bne.n	800f082 <_printf_i+0x1fe>
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295
 800efec:	b004      	add	sp, #16
 800efee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800eff2:	4835      	ldr	r0, [pc, #212]	; (800f0c8 <_printf_i+0x244>)
 800eff4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800eff8:	6829      	ldr	r1, [r5, #0]
 800effa:	6823      	ldr	r3, [r4, #0]
 800effc:	f851 6b04 	ldr.w	r6, [r1], #4
 800f000:	6029      	str	r1, [r5, #0]
 800f002:	061d      	lsls	r5, r3, #24
 800f004:	d514      	bpl.n	800f030 <_printf_i+0x1ac>
 800f006:	07df      	lsls	r7, r3, #31
 800f008:	bf44      	itt	mi
 800f00a:	f043 0320 	orrmi.w	r3, r3, #32
 800f00e:	6023      	strmi	r3, [r4, #0]
 800f010:	b91e      	cbnz	r6, 800f01a <_printf_i+0x196>
 800f012:	6823      	ldr	r3, [r4, #0]
 800f014:	f023 0320 	bic.w	r3, r3, #32
 800f018:	6023      	str	r3, [r4, #0]
 800f01a:	2310      	movs	r3, #16
 800f01c:	e7b0      	b.n	800ef80 <_printf_i+0xfc>
 800f01e:	6823      	ldr	r3, [r4, #0]
 800f020:	f043 0320 	orr.w	r3, r3, #32
 800f024:	6023      	str	r3, [r4, #0]
 800f026:	2378      	movs	r3, #120	; 0x78
 800f028:	4828      	ldr	r0, [pc, #160]	; (800f0cc <_printf_i+0x248>)
 800f02a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f02e:	e7e3      	b.n	800eff8 <_printf_i+0x174>
 800f030:	0659      	lsls	r1, r3, #25
 800f032:	bf48      	it	mi
 800f034:	b2b6      	uxthmi	r6, r6
 800f036:	e7e6      	b.n	800f006 <_printf_i+0x182>
 800f038:	4615      	mov	r5, r2
 800f03a:	e7bb      	b.n	800efb4 <_printf_i+0x130>
 800f03c:	682b      	ldr	r3, [r5, #0]
 800f03e:	6826      	ldr	r6, [r4, #0]
 800f040:	1d18      	adds	r0, r3, #4
 800f042:	6961      	ldr	r1, [r4, #20]
 800f044:	6028      	str	r0, [r5, #0]
 800f046:	0635      	lsls	r5, r6, #24
 800f048:	681b      	ldr	r3, [r3, #0]
 800f04a:	d501      	bpl.n	800f050 <_printf_i+0x1cc>
 800f04c:	6019      	str	r1, [r3, #0]
 800f04e:	e002      	b.n	800f056 <_printf_i+0x1d2>
 800f050:	0670      	lsls	r0, r6, #25
 800f052:	d5fb      	bpl.n	800f04c <_printf_i+0x1c8>
 800f054:	8019      	strh	r1, [r3, #0]
 800f056:	2300      	movs	r3, #0
 800f058:	4615      	mov	r5, r2
 800f05a:	6123      	str	r3, [r4, #16]
 800f05c:	e7ba      	b.n	800efd4 <_printf_i+0x150>
 800f05e:	682b      	ldr	r3, [r5, #0]
 800f060:	2100      	movs	r1, #0
 800f062:	1d1a      	adds	r2, r3, #4
 800f064:	602a      	str	r2, [r5, #0]
 800f066:	681d      	ldr	r5, [r3, #0]
 800f068:	6862      	ldr	r2, [r4, #4]
 800f06a:	4628      	mov	r0, r5
 800f06c:	f000 fb26 	bl	800f6bc <memchr>
 800f070:	b108      	cbz	r0, 800f076 <_printf_i+0x1f2>
 800f072:	1b40      	subs	r0, r0, r5
 800f074:	6060      	str	r0, [r4, #4]
 800f076:	6863      	ldr	r3, [r4, #4]
 800f078:	6123      	str	r3, [r4, #16]
 800f07a:	2300      	movs	r3, #0
 800f07c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f080:	e7a8      	b.n	800efd4 <_printf_i+0x150>
 800f082:	6923      	ldr	r3, [r4, #16]
 800f084:	462a      	mov	r2, r5
 800f086:	4649      	mov	r1, r9
 800f088:	4640      	mov	r0, r8
 800f08a:	47d0      	blx	sl
 800f08c:	3001      	adds	r0, #1
 800f08e:	d0ab      	beq.n	800efe8 <_printf_i+0x164>
 800f090:	6823      	ldr	r3, [r4, #0]
 800f092:	079b      	lsls	r3, r3, #30
 800f094:	d413      	bmi.n	800f0be <_printf_i+0x23a>
 800f096:	68e0      	ldr	r0, [r4, #12]
 800f098:	9b03      	ldr	r3, [sp, #12]
 800f09a:	4298      	cmp	r0, r3
 800f09c:	bfb8      	it	lt
 800f09e:	4618      	movlt	r0, r3
 800f0a0:	e7a4      	b.n	800efec <_printf_i+0x168>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	4632      	mov	r2, r6
 800f0a6:	4649      	mov	r1, r9
 800f0a8:	4640      	mov	r0, r8
 800f0aa:	47d0      	blx	sl
 800f0ac:	3001      	adds	r0, #1
 800f0ae:	d09b      	beq.n	800efe8 <_printf_i+0x164>
 800f0b0:	3501      	adds	r5, #1
 800f0b2:	68e3      	ldr	r3, [r4, #12]
 800f0b4:	9903      	ldr	r1, [sp, #12]
 800f0b6:	1a5b      	subs	r3, r3, r1
 800f0b8:	42ab      	cmp	r3, r5
 800f0ba:	dcf2      	bgt.n	800f0a2 <_printf_i+0x21e>
 800f0bc:	e7eb      	b.n	800f096 <_printf_i+0x212>
 800f0be:	2500      	movs	r5, #0
 800f0c0:	f104 0619 	add.w	r6, r4, #25
 800f0c4:	e7f5      	b.n	800f0b2 <_printf_i+0x22e>
 800f0c6:	bf00      	nop
 800f0c8:	08010f17 	.word	0x08010f17
 800f0cc:	08010f28 	.word	0x08010f28

0800f0d0 <_sbrk_r>:
 800f0d0:	b538      	push	{r3, r4, r5, lr}
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	4d05      	ldr	r5, [pc, #20]	; (800f0ec <_sbrk_r+0x1c>)
 800f0d6:	4604      	mov	r4, r0
 800f0d8:	4608      	mov	r0, r1
 800f0da:	602b      	str	r3, [r5, #0]
 800f0dc:	f7f4 fe14 	bl	8003d08 <_sbrk>
 800f0e0:	1c43      	adds	r3, r0, #1
 800f0e2:	d102      	bne.n	800f0ea <_sbrk_r+0x1a>
 800f0e4:	682b      	ldr	r3, [r5, #0]
 800f0e6:	b103      	cbz	r3, 800f0ea <_sbrk_r+0x1a>
 800f0e8:	6023      	str	r3, [r4, #0]
 800f0ea:	bd38      	pop	{r3, r4, r5, pc}
 800f0ec:	2000641c 	.word	0x2000641c

0800f0f0 <__swbuf_r>:
 800f0f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f0f2:	460e      	mov	r6, r1
 800f0f4:	4614      	mov	r4, r2
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	b118      	cbz	r0, 800f102 <__swbuf_r+0x12>
 800f0fa:	6983      	ldr	r3, [r0, #24]
 800f0fc:	b90b      	cbnz	r3, 800f102 <__swbuf_r+0x12>
 800f0fe:	f000 f9d7 	bl	800f4b0 <__sinit>
 800f102:	4b21      	ldr	r3, [pc, #132]	; (800f188 <__swbuf_r+0x98>)
 800f104:	429c      	cmp	r4, r3
 800f106:	d12b      	bne.n	800f160 <__swbuf_r+0x70>
 800f108:	686c      	ldr	r4, [r5, #4]
 800f10a:	69a3      	ldr	r3, [r4, #24]
 800f10c:	60a3      	str	r3, [r4, #8]
 800f10e:	89a3      	ldrh	r3, [r4, #12]
 800f110:	071a      	lsls	r2, r3, #28
 800f112:	d52f      	bpl.n	800f174 <__swbuf_r+0x84>
 800f114:	6923      	ldr	r3, [r4, #16]
 800f116:	b36b      	cbz	r3, 800f174 <__swbuf_r+0x84>
 800f118:	6923      	ldr	r3, [r4, #16]
 800f11a:	b2f6      	uxtb	r6, r6
 800f11c:	6820      	ldr	r0, [r4, #0]
 800f11e:	4637      	mov	r7, r6
 800f120:	1ac0      	subs	r0, r0, r3
 800f122:	6963      	ldr	r3, [r4, #20]
 800f124:	4283      	cmp	r3, r0
 800f126:	dc04      	bgt.n	800f132 <__swbuf_r+0x42>
 800f128:	4621      	mov	r1, r4
 800f12a:	4628      	mov	r0, r5
 800f12c:	f000 f92c 	bl	800f388 <_fflush_r>
 800f130:	bb30      	cbnz	r0, 800f180 <__swbuf_r+0x90>
 800f132:	68a3      	ldr	r3, [r4, #8]
 800f134:	3001      	adds	r0, #1
 800f136:	3b01      	subs	r3, #1
 800f138:	60a3      	str	r3, [r4, #8]
 800f13a:	6823      	ldr	r3, [r4, #0]
 800f13c:	1c5a      	adds	r2, r3, #1
 800f13e:	6022      	str	r2, [r4, #0]
 800f140:	701e      	strb	r6, [r3, #0]
 800f142:	6963      	ldr	r3, [r4, #20]
 800f144:	4283      	cmp	r3, r0
 800f146:	d004      	beq.n	800f152 <__swbuf_r+0x62>
 800f148:	89a3      	ldrh	r3, [r4, #12]
 800f14a:	07db      	lsls	r3, r3, #31
 800f14c:	d506      	bpl.n	800f15c <__swbuf_r+0x6c>
 800f14e:	2e0a      	cmp	r6, #10
 800f150:	d104      	bne.n	800f15c <__swbuf_r+0x6c>
 800f152:	4621      	mov	r1, r4
 800f154:	4628      	mov	r0, r5
 800f156:	f000 f917 	bl	800f388 <_fflush_r>
 800f15a:	b988      	cbnz	r0, 800f180 <__swbuf_r+0x90>
 800f15c:	4638      	mov	r0, r7
 800f15e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f160:	4b0a      	ldr	r3, [pc, #40]	; (800f18c <__swbuf_r+0x9c>)
 800f162:	429c      	cmp	r4, r3
 800f164:	d101      	bne.n	800f16a <__swbuf_r+0x7a>
 800f166:	68ac      	ldr	r4, [r5, #8]
 800f168:	e7cf      	b.n	800f10a <__swbuf_r+0x1a>
 800f16a:	4b09      	ldr	r3, [pc, #36]	; (800f190 <__swbuf_r+0xa0>)
 800f16c:	429c      	cmp	r4, r3
 800f16e:	bf08      	it	eq
 800f170:	68ec      	ldreq	r4, [r5, #12]
 800f172:	e7ca      	b.n	800f10a <__swbuf_r+0x1a>
 800f174:	4621      	mov	r1, r4
 800f176:	4628      	mov	r0, r5
 800f178:	f000 f80c 	bl	800f194 <__swsetup_r>
 800f17c:	2800      	cmp	r0, #0
 800f17e:	d0cb      	beq.n	800f118 <__swbuf_r+0x28>
 800f180:	f04f 37ff 	mov.w	r7, #4294967295
 800f184:	e7ea      	b.n	800f15c <__swbuf_r+0x6c>
 800f186:	bf00      	nop
 800f188:	08010f5c 	.word	0x08010f5c
 800f18c:	08010f7c 	.word	0x08010f7c
 800f190:	08010f3c 	.word	0x08010f3c

0800f194 <__swsetup_r>:
 800f194:	4b32      	ldr	r3, [pc, #200]	; (800f260 <__swsetup_r+0xcc>)
 800f196:	b570      	push	{r4, r5, r6, lr}
 800f198:	681d      	ldr	r5, [r3, #0]
 800f19a:	4606      	mov	r6, r0
 800f19c:	460c      	mov	r4, r1
 800f19e:	b125      	cbz	r5, 800f1aa <__swsetup_r+0x16>
 800f1a0:	69ab      	ldr	r3, [r5, #24]
 800f1a2:	b913      	cbnz	r3, 800f1aa <__swsetup_r+0x16>
 800f1a4:	4628      	mov	r0, r5
 800f1a6:	f000 f983 	bl	800f4b0 <__sinit>
 800f1aa:	4b2e      	ldr	r3, [pc, #184]	; (800f264 <__swsetup_r+0xd0>)
 800f1ac:	429c      	cmp	r4, r3
 800f1ae:	d10f      	bne.n	800f1d0 <__swsetup_r+0x3c>
 800f1b0:	686c      	ldr	r4, [r5, #4]
 800f1b2:	89a3      	ldrh	r3, [r4, #12]
 800f1b4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f1b8:	0719      	lsls	r1, r3, #28
 800f1ba:	d42c      	bmi.n	800f216 <__swsetup_r+0x82>
 800f1bc:	06dd      	lsls	r5, r3, #27
 800f1be:	d411      	bmi.n	800f1e4 <__swsetup_r+0x50>
 800f1c0:	2309      	movs	r3, #9
 800f1c2:	6033      	str	r3, [r6, #0]
 800f1c4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800f1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800f1cc:	81a3      	strh	r3, [r4, #12]
 800f1ce:	e03e      	b.n	800f24e <__swsetup_r+0xba>
 800f1d0:	4b25      	ldr	r3, [pc, #148]	; (800f268 <__swsetup_r+0xd4>)
 800f1d2:	429c      	cmp	r4, r3
 800f1d4:	d101      	bne.n	800f1da <__swsetup_r+0x46>
 800f1d6:	68ac      	ldr	r4, [r5, #8]
 800f1d8:	e7eb      	b.n	800f1b2 <__swsetup_r+0x1e>
 800f1da:	4b24      	ldr	r3, [pc, #144]	; (800f26c <__swsetup_r+0xd8>)
 800f1dc:	429c      	cmp	r4, r3
 800f1de:	bf08      	it	eq
 800f1e0:	68ec      	ldreq	r4, [r5, #12]
 800f1e2:	e7e6      	b.n	800f1b2 <__swsetup_r+0x1e>
 800f1e4:	0758      	lsls	r0, r3, #29
 800f1e6:	d512      	bpl.n	800f20e <__swsetup_r+0x7a>
 800f1e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f1ea:	b141      	cbz	r1, 800f1fe <__swsetup_r+0x6a>
 800f1ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f1f0:	4299      	cmp	r1, r3
 800f1f2:	d002      	beq.n	800f1fa <__swsetup_r+0x66>
 800f1f4:	4630      	mov	r0, r6
 800f1f6:	f7ff fa3f 	bl	800e678 <_free_r>
 800f1fa:	2300      	movs	r3, #0
 800f1fc:	6363      	str	r3, [r4, #52]	; 0x34
 800f1fe:	89a3      	ldrh	r3, [r4, #12]
 800f200:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800f204:	81a3      	strh	r3, [r4, #12]
 800f206:	2300      	movs	r3, #0
 800f208:	6063      	str	r3, [r4, #4]
 800f20a:	6923      	ldr	r3, [r4, #16]
 800f20c:	6023      	str	r3, [r4, #0]
 800f20e:	89a3      	ldrh	r3, [r4, #12]
 800f210:	f043 0308 	orr.w	r3, r3, #8
 800f214:	81a3      	strh	r3, [r4, #12]
 800f216:	6923      	ldr	r3, [r4, #16]
 800f218:	b94b      	cbnz	r3, 800f22e <__swsetup_r+0x9a>
 800f21a:	89a3      	ldrh	r3, [r4, #12]
 800f21c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800f220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800f224:	d003      	beq.n	800f22e <__swsetup_r+0x9a>
 800f226:	4621      	mov	r1, r4
 800f228:	4630      	mov	r0, r6
 800f22a:	f000 fa07 	bl	800f63c <__smakebuf_r>
 800f22e:	89a0      	ldrh	r0, [r4, #12]
 800f230:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800f234:	f010 0301 	ands.w	r3, r0, #1
 800f238:	d00a      	beq.n	800f250 <__swsetup_r+0xbc>
 800f23a:	2300      	movs	r3, #0
 800f23c:	60a3      	str	r3, [r4, #8]
 800f23e:	6963      	ldr	r3, [r4, #20]
 800f240:	425b      	negs	r3, r3
 800f242:	61a3      	str	r3, [r4, #24]
 800f244:	6923      	ldr	r3, [r4, #16]
 800f246:	b943      	cbnz	r3, 800f25a <__swsetup_r+0xc6>
 800f248:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800f24c:	d1ba      	bne.n	800f1c4 <__swsetup_r+0x30>
 800f24e:	bd70      	pop	{r4, r5, r6, pc}
 800f250:	0781      	lsls	r1, r0, #30
 800f252:	bf58      	it	pl
 800f254:	6963      	ldrpl	r3, [r4, #20]
 800f256:	60a3      	str	r3, [r4, #8]
 800f258:	e7f4      	b.n	800f244 <__swsetup_r+0xb0>
 800f25a:	2000      	movs	r0, #0
 800f25c:	e7f7      	b.n	800f24e <__swsetup_r+0xba>
 800f25e:	bf00      	nop
 800f260:	20000010 	.word	0x20000010
 800f264:	08010f5c 	.word	0x08010f5c
 800f268:	08010f7c 	.word	0x08010f7c
 800f26c:	08010f3c 	.word	0x08010f3c

0800f270 <abort>:
 800f270:	2006      	movs	r0, #6
 800f272:	b508      	push	{r3, lr}
 800f274:	f000 faae 	bl	800f7d4 <raise>
 800f278:	2001      	movs	r0, #1
 800f27a:	f7f4 fccd 	bl	8003c18 <_exit>
	...

0800f280 <__sflush_r>:
 800f280:	898a      	ldrh	r2, [r1, #12]
 800f282:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f286:	4605      	mov	r5, r0
 800f288:	0710      	lsls	r0, r2, #28
 800f28a:	460c      	mov	r4, r1
 800f28c:	d458      	bmi.n	800f340 <__sflush_r+0xc0>
 800f28e:	684b      	ldr	r3, [r1, #4]
 800f290:	2b00      	cmp	r3, #0
 800f292:	dc05      	bgt.n	800f2a0 <__sflush_r+0x20>
 800f294:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800f296:	2b00      	cmp	r3, #0
 800f298:	dc02      	bgt.n	800f2a0 <__sflush_r+0x20>
 800f29a:	2000      	movs	r0, #0
 800f29c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f2a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2a2:	2e00      	cmp	r6, #0
 800f2a4:	d0f9      	beq.n	800f29a <__sflush_r+0x1a>
 800f2a6:	2300      	movs	r3, #0
 800f2a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800f2ac:	682f      	ldr	r7, [r5, #0]
 800f2ae:	602b      	str	r3, [r5, #0]
 800f2b0:	d032      	beq.n	800f318 <__sflush_r+0x98>
 800f2b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f2b4:	89a3      	ldrh	r3, [r4, #12]
 800f2b6:	075a      	lsls	r2, r3, #29
 800f2b8:	d505      	bpl.n	800f2c6 <__sflush_r+0x46>
 800f2ba:	6863      	ldr	r3, [r4, #4]
 800f2bc:	1ac0      	subs	r0, r0, r3
 800f2be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f2c0:	b10b      	cbz	r3, 800f2c6 <__sflush_r+0x46>
 800f2c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f2c4:	1ac0      	subs	r0, r0, r3
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	4602      	mov	r2, r0
 800f2ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f2cc:	4628      	mov	r0, r5
 800f2ce:	6a21      	ldr	r1, [r4, #32]
 800f2d0:	47b0      	blx	r6
 800f2d2:	1c43      	adds	r3, r0, #1
 800f2d4:	89a3      	ldrh	r3, [r4, #12]
 800f2d6:	d106      	bne.n	800f2e6 <__sflush_r+0x66>
 800f2d8:	6829      	ldr	r1, [r5, #0]
 800f2da:	291d      	cmp	r1, #29
 800f2dc:	d82c      	bhi.n	800f338 <__sflush_r+0xb8>
 800f2de:	4a29      	ldr	r2, [pc, #164]	; (800f384 <__sflush_r+0x104>)
 800f2e0:	40ca      	lsrs	r2, r1
 800f2e2:	07d6      	lsls	r6, r2, #31
 800f2e4:	d528      	bpl.n	800f338 <__sflush_r+0xb8>
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	04d9      	lsls	r1, r3, #19
 800f2ea:	6062      	str	r2, [r4, #4]
 800f2ec:	6922      	ldr	r2, [r4, #16]
 800f2ee:	6022      	str	r2, [r4, #0]
 800f2f0:	d504      	bpl.n	800f2fc <__sflush_r+0x7c>
 800f2f2:	1c42      	adds	r2, r0, #1
 800f2f4:	d101      	bne.n	800f2fa <__sflush_r+0x7a>
 800f2f6:	682b      	ldr	r3, [r5, #0]
 800f2f8:	b903      	cbnz	r3, 800f2fc <__sflush_r+0x7c>
 800f2fa:	6560      	str	r0, [r4, #84]	; 0x54
 800f2fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f2fe:	602f      	str	r7, [r5, #0]
 800f300:	2900      	cmp	r1, #0
 800f302:	d0ca      	beq.n	800f29a <__sflush_r+0x1a>
 800f304:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f308:	4299      	cmp	r1, r3
 800f30a:	d002      	beq.n	800f312 <__sflush_r+0x92>
 800f30c:	4628      	mov	r0, r5
 800f30e:	f7ff f9b3 	bl	800e678 <_free_r>
 800f312:	2000      	movs	r0, #0
 800f314:	6360      	str	r0, [r4, #52]	; 0x34
 800f316:	e7c1      	b.n	800f29c <__sflush_r+0x1c>
 800f318:	6a21      	ldr	r1, [r4, #32]
 800f31a:	2301      	movs	r3, #1
 800f31c:	4628      	mov	r0, r5
 800f31e:	47b0      	blx	r6
 800f320:	1c41      	adds	r1, r0, #1
 800f322:	d1c7      	bne.n	800f2b4 <__sflush_r+0x34>
 800f324:	682b      	ldr	r3, [r5, #0]
 800f326:	2b00      	cmp	r3, #0
 800f328:	d0c4      	beq.n	800f2b4 <__sflush_r+0x34>
 800f32a:	2b1d      	cmp	r3, #29
 800f32c:	d001      	beq.n	800f332 <__sflush_r+0xb2>
 800f32e:	2b16      	cmp	r3, #22
 800f330:	d101      	bne.n	800f336 <__sflush_r+0xb6>
 800f332:	602f      	str	r7, [r5, #0]
 800f334:	e7b1      	b.n	800f29a <__sflush_r+0x1a>
 800f336:	89a3      	ldrh	r3, [r4, #12]
 800f338:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f33c:	81a3      	strh	r3, [r4, #12]
 800f33e:	e7ad      	b.n	800f29c <__sflush_r+0x1c>
 800f340:	690f      	ldr	r7, [r1, #16]
 800f342:	2f00      	cmp	r7, #0
 800f344:	d0a9      	beq.n	800f29a <__sflush_r+0x1a>
 800f346:	0793      	lsls	r3, r2, #30
 800f348:	680e      	ldr	r6, [r1, #0]
 800f34a:	600f      	str	r7, [r1, #0]
 800f34c:	bf0c      	ite	eq
 800f34e:	694b      	ldreq	r3, [r1, #20]
 800f350:	2300      	movne	r3, #0
 800f352:	eba6 0807 	sub.w	r8, r6, r7
 800f356:	608b      	str	r3, [r1, #8]
 800f358:	f1b8 0f00 	cmp.w	r8, #0
 800f35c:	dd9d      	ble.n	800f29a <__sflush_r+0x1a>
 800f35e:	4643      	mov	r3, r8
 800f360:	463a      	mov	r2, r7
 800f362:	6a21      	ldr	r1, [r4, #32]
 800f364:	4628      	mov	r0, r5
 800f366:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f368:	47b0      	blx	r6
 800f36a:	2800      	cmp	r0, #0
 800f36c:	dc06      	bgt.n	800f37c <__sflush_r+0xfc>
 800f36e:	89a3      	ldrh	r3, [r4, #12]
 800f370:	f04f 30ff 	mov.w	r0, #4294967295
 800f374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f378:	81a3      	strh	r3, [r4, #12]
 800f37a:	e78f      	b.n	800f29c <__sflush_r+0x1c>
 800f37c:	4407      	add	r7, r0
 800f37e:	eba8 0800 	sub.w	r8, r8, r0
 800f382:	e7e9      	b.n	800f358 <__sflush_r+0xd8>
 800f384:	20400001 	.word	0x20400001

0800f388 <_fflush_r>:
 800f388:	b538      	push	{r3, r4, r5, lr}
 800f38a:	690b      	ldr	r3, [r1, #16]
 800f38c:	4605      	mov	r5, r0
 800f38e:	460c      	mov	r4, r1
 800f390:	b913      	cbnz	r3, 800f398 <_fflush_r+0x10>
 800f392:	2500      	movs	r5, #0
 800f394:	4628      	mov	r0, r5
 800f396:	bd38      	pop	{r3, r4, r5, pc}
 800f398:	b118      	cbz	r0, 800f3a2 <_fflush_r+0x1a>
 800f39a:	6983      	ldr	r3, [r0, #24]
 800f39c:	b90b      	cbnz	r3, 800f3a2 <_fflush_r+0x1a>
 800f39e:	f000 f887 	bl	800f4b0 <__sinit>
 800f3a2:	4b14      	ldr	r3, [pc, #80]	; (800f3f4 <_fflush_r+0x6c>)
 800f3a4:	429c      	cmp	r4, r3
 800f3a6:	d11b      	bne.n	800f3e0 <_fflush_r+0x58>
 800f3a8:	686c      	ldr	r4, [r5, #4]
 800f3aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d0ef      	beq.n	800f392 <_fflush_r+0xa>
 800f3b2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f3b4:	07d0      	lsls	r0, r2, #31
 800f3b6:	d404      	bmi.n	800f3c2 <_fflush_r+0x3a>
 800f3b8:	0599      	lsls	r1, r3, #22
 800f3ba:	d402      	bmi.n	800f3c2 <_fflush_r+0x3a>
 800f3bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3be:	f000 f915 	bl	800f5ec <__retarget_lock_acquire_recursive>
 800f3c2:	4628      	mov	r0, r5
 800f3c4:	4621      	mov	r1, r4
 800f3c6:	f7ff ff5b 	bl	800f280 <__sflush_r>
 800f3ca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f3cc:	4605      	mov	r5, r0
 800f3ce:	07da      	lsls	r2, r3, #31
 800f3d0:	d4e0      	bmi.n	800f394 <_fflush_r+0xc>
 800f3d2:	89a3      	ldrh	r3, [r4, #12]
 800f3d4:	059b      	lsls	r3, r3, #22
 800f3d6:	d4dd      	bmi.n	800f394 <_fflush_r+0xc>
 800f3d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f3da:	f000 f908 	bl	800f5ee <__retarget_lock_release_recursive>
 800f3de:	e7d9      	b.n	800f394 <_fflush_r+0xc>
 800f3e0:	4b05      	ldr	r3, [pc, #20]	; (800f3f8 <_fflush_r+0x70>)
 800f3e2:	429c      	cmp	r4, r3
 800f3e4:	d101      	bne.n	800f3ea <_fflush_r+0x62>
 800f3e6:	68ac      	ldr	r4, [r5, #8]
 800f3e8:	e7df      	b.n	800f3aa <_fflush_r+0x22>
 800f3ea:	4b04      	ldr	r3, [pc, #16]	; (800f3fc <_fflush_r+0x74>)
 800f3ec:	429c      	cmp	r4, r3
 800f3ee:	bf08      	it	eq
 800f3f0:	68ec      	ldreq	r4, [r5, #12]
 800f3f2:	e7da      	b.n	800f3aa <_fflush_r+0x22>
 800f3f4:	08010f5c 	.word	0x08010f5c
 800f3f8:	08010f7c 	.word	0x08010f7c
 800f3fc:	08010f3c 	.word	0x08010f3c

0800f400 <std>:
 800f400:	2300      	movs	r3, #0
 800f402:	b510      	push	{r4, lr}
 800f404:	4604      	mov	r4, r0
 800f406:	6083      	str	r3, [r0, #8]
 800f408:	8181      	strh	r1, [r0, #12]
 800f40a:	4619      	mov	r1, r3
 800f40c:	6643      	str	r3, [r0, #100]	; 0x64
 800f40e:	81c2      	strh	r2, [r0, #14]
 800f410:	2208      	movs	r2, #8
 800f412:	6183      	str	r3, [r0, #24]
 800f414:	e9c0 3300 	strd	r3, r3, [r0]
 800f418:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f41c:	305c      	adds	r0, #92	; 0x5c
 800f41e:	f7fe ffb8 	bl	800e392 <memset>
 800f422:	4b05      	ldr	r3, [pc, #20]	; (800f438 <std+0x38>)
 800f424:	6224      	str	r4, [r4, #32]
 800f426:	6263      	str	r3, [r4, #36]	; 0x24
 800f428:	4b04      	ldr	r3, [pc, #16]	; (800f43c <std+0x3c>)
 800f42a:	62a3      	str	r3, [r4, #40]	; 0x28
 800f42c:	4b04      	ldr	r3, [pc, #16]	; (800f440 <std+0x40>)
 800f42e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f430:	4b04      	ldr	r3, [pc, #16]	; (800f444 <std+0x44>)
 800f432:	6323      	str	r3, [r4, #48]	; 0x30
 800f434:	bd10      	pop	{r4, pc}
 800f436:	bf00      	nop
 800f438:	0800f80d 	.word	0x0800f80d
 800f43c:	0800f82f 	.word	0x0800f82f
 800f440:	0800f867 	.word	0x0800f867
 800f444:	0800f88b 	.word	0x0800f88b

0800f448 <_cleanup_r>:
 800f448:	4901      	ldr	r1, [pc, #4]	; (800f450 <_cleanup_r+0x8>)
 800f44a:	f000 b8af 	b.w	800f5ac <_fwalk_reent>
 800f44e:	bf00      	nop
 800f450:	0800f389 	.word	0x0800f389

0800f454 <__sfmoreglue>:
 800f454:	b570      	push	{r4, r5, r6, lr}
 800f456:	2268      	movs	r2, #104	; 0x68
 800f458:	1e4d      	subs	r5, r1, #1
 800f45a:	460e      	mov	r6, r1
 800f45c:	4355      	muls	r5, r2
 800f45e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f462:	f7ff f975 	bl	800e750 <_malloc_r>
 800f466:	4604      	mov	r4, r0
 800f468:	b140      	cbz	r0, 800f47c <__sfmoreglue+0x28>
 800f46a:	2100      	movs	r1, #0
 800f46c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f470:	e9c0 1600 	strd	r1, r6, [r0]
 800f474:	300c      	adds	r0, #12
 800f476:	60a0      	str	r0, [r4, #8]
 800f478:	f7fe ff8b 	bl	800e392 <memset>
 800f47c:	4620      	mov	r0, r4
 800f47e:	bd70      	pop	{r4, r5, r6, pc}

0800f480 <__sfp_lock_acquire>:
 800f480:	4801      	ldr	r0, [pc, #4]	; (800f488 <__sfp_lock_acquire+0x8>)
 800f482:	f000 b8b3 	b.w	800f5ec <__retarget_lock_acquire_recursive>
 800f486:	bf00      	nop
 800f488:	20006419 	.word	0x20006419

0800f48c <__sfp_lock_release>:
 800f48c:	4801      	ldr	r0, [pc, #4]	; (800f494 <__sfp_lock_release+0x8>)
 800f48e:	f000 b8ae 	b.w	800f5ee <__retarget_lock_release_recursive>
 800f492:	bf00      	nop
 800f494:	20006419 	.word	0x20006419

0800f498 <__sinit_lock_acquire>:
 800f498:	4801      	ldr	r0, [pc, #4]	; (800f4a0 <__sinit_lock_acquire+0x8>)
 800f49a:	f000 b8a7 	b.w	800f5ec <__retarget_lock_acquire_recursive>
 800f49e:	bf00      	nop
 800f4a0:	2000641a 	.word	0x2000641a

0800f4a4 <__sinit_lock_release>:
 800f4a4:	4801      	ldr	r0, [pc, #4]	; (800f4ac <__sinit_lock_release+0x8>)
 800f4a6:	f000 b8a2 	b.w	800f5ee <__retarget_lock_release_recursive>
 800f4aa:	bf00      	nop
 800f4ac:	2000641a 	.word	0x2000641a

0800f4b0 <__sinit>:
 800f4b0:	b510      	push	{r4, lr}
 800f4b2:	4604      	mov	r4, r0
 800f4b4:	f7ff fff0 	bl	800f498 <__sinit_lock_acquire>
 800f4b8:	69a3      	ldr	r3, [r4, #24]
 800f4ba:	b11b      	cbz	r3, 800f4c4 <__sinit+0x14>
 800f4bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f4c0:	f7ff bff0 	b.w	800f4a4 <__sinit_lock_release>
 800f4c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f4c8:	6523      	str	r3, [r4, #80]	; 0x50
 800f4ca:	4620      	mov	r0, r4
 800f4cc:	4b12      	ldr	r3, [pc, #72]	; (800f518 <__sinit+0x68>)
 800f4ce:	4a13      	ldr	r2, [pc, #76]	; (800f51c <__sinit+0x6c>)
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	62a2      	str	r2, [r4, #40]	; 0x28
 800f4d4:	42a3      	cmp	r3, r4
 800f4d6:	bf04      	itt	eq
 800f4d8:	2301      	moveq	r3, #1
 800f4da:	61a3      	streq	r3, [r4, #24]
 800f4dc:	f000 f820 	bl	800f520 <__sfp>
 800f4e0:	6060      	str	r0, [r4, #4]
 800f4e2:	4620      	mov	r0, r4
 800f4e4:	f000 f81c 	bl	800f520 <__sfp>
 800f4e8:	60a0      	str	r0, [r4, #8]
 800f4ea:	4620      	mov	r0, r4
 800f4ec:	f000 f818 	bl	800f520 <__sfp>
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	2104      	movs	r1, #4
 800f4f4:	60e0      	str	r0, [r4, #12]
 800f4f6:	6860      	ldr	r0, [r4, #4]
 800f4f8:	f7ff ff82 	bl	800f400 <std>
 800f4fc:	2201      	movs	r2, #1
 800f4fe:	2109      	movs	r1, #9
 800f500:	68a0      	ldr	r0, [r4, #8]
 800f502:	f7ff ff7d 	bl	800f400 <std>
 800f506:	2202      	movs	r2, #2
 800f508:	2112      	movs	r1, #18
 800f50a:	68e0      	ldr	r0, [r4, #12]
 800f50c:	f7ff ff78 	bl	800f400 <std>
 800f510:	2301      	movs	r3, #1
 800f512:	61a3      	str	r3, [r4, #24]
 800f514:	e7d2      	b.n	800f4bc <__sinit+0xc>
 800f516:	bf00      	nop
 800f518:	08010e54 	.word	0x08010e54
 800f51c:	0800f449 	.word	0x0800f449

0800f520 <__sfp>:
 800f520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f522:	4607      	mov	r7, r0
 800f524:	f7ff ffac 	bl	800f480 <__sfp_lock_acquire>
 800f528:	4b1e      	ldr	r3, [pc, #120]	; (800f5a4 <__sfp+0x84>)
 800f52a:	681e      	ldr	r6, [r3, #0]
 800f52c:	69b3      	ldr	r3, [r6, #24]
 800f52e:	b913      	cbnz	r3, 800f536 <__sfp+0x16>
 800f530:	4630      	mov	r0, r6
 800f532:	f7ff ffbd 	bl	800f4b0 <__sinit>
 800f536:	3648      	adds	r6, #72	; 0x48
 800f538:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f53c:	3b01      	subs	r3, #1
 800f53e:	d503      	bpl.n	800f548 <__sfp+0x28>
 800f540:	6833      	ldr	r3, [r6, #0]
 800f542:	b30b      	cbz	r3, 800f588 <__sfp+0x68>
 800f544:	6836      	ldr	r6, [r6, #0]
 800f546:	e7f7      	b.n	800f538 <__sfp+0x18>
 800f548:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f54c:	b9d5      	cbnz	r5, 800f584 <__sfp+0x64>
 800f54e:	4b16      	ldr	r3, [pc, #88]	; (800f5a8 <__sfp+0x88>)
 800f550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f554:	6665      	str	r5, [r4, #100]	; 0x64
 800f556:	60e3      	str	r3, [r4, #12]
 800f558:	f000 f847 	bl	800f5ea <__retarget_lock_init_recursive>
 800f55c:	f7ff ff96 	bl	800f48c <__sfp_lock_release>
 800f560:	2208      	movs	r2, #8
 800f562:	4629      	mov	r1, r5
 800f564:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f568:	6025      	str	r5, [r4, #0]
 800f56a:	61a5      	str	r5, [r4, #24]
 800f56c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f570:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f574:	f7fe ff0d 	bl	800e392 <memset>
 800f578:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f57c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f580:	4620      	mov	r0, r4
 800f582:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f584:	3468      	adds	r4, #104	; 0x68
 800f586:	e7d9      	b.n	800f53c <__sfp+0x1c>
 800f588:	2104      	movs	r1, #4
 800f58a:	4638      	mov	r0, r7
 800f58c:	f7ff ff62 	bl	800f454 <__sfmoreglue>
 800f590:	4604      	mov	r4, r0
 800f592:	6030      	str	r0, [r6, #0]
 800f594:	2800      	cmp	r0, #0
 800f596:	d1d5      	bne.n	800f544 <__sfp+0x24>
 800f598:	f7ff ff78 	bl	800f48c <__sfp_lock_release>
 800f59c:	230c      	movs	r3, #12
 800f59e:	603b      	str	r3, [r7, #0]
 800f5a0:	e7ee      	b.n	800f580 <__sfp+0x60>
 800f5a2:	bf00      	nop
 800f5a4:	08010e54 	.word	0x08010e54
 800f5a8:	ffff0001 	.word	0xffff0001

0800f5ac <_fwalk_reent>:
 800f5ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f5b0:	4606      	mov	r6, r0
 800f5b2:	4688      	mov	r8, r1
 800f5b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f5b8:	2700      	movs	r7, #0
 800f5ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f5be:	f1b9 0901 	subs.w	r9, r9, #1
 800f5c2:	d505      	bpl.n	800f5d0 <_fwalk_reent+0x24>
 800f5c4:	6824      	ldr	r4, [r4, #0]
 800f5c6:	2c00      	cmp	r4, #0
 800f5c8:	d1f7      	bne.n	800f5ba <_fwalk_reent+0xe>
 800f5ca:	4638      	mov	r0, r7
 800f5cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f5d0:	89ab      	ldrh	r3, [r5, #12]
 800f5d2:	2b01      	cmp	r3, #1
 800f5d4:	d907      	bls.n	800f5e6 <_fwalk_reent+0x3a>
 800f5d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f5da:	3301      	adds	r3, #1
 800f5dc:	d003      	beq.n	800f5e6 <_fwalk_reent+0x3a>
 800f5de:	4629      	mov	r1, r5
 800f5e0:	4630      	mov	r0, r6
 800f5e2:	47c0      	blx	r8
 800f5e4:	4307      	orrs	r7, r0
 800f5e6:	3568      	adds	r5, #104	; 0x68
 800f5e8:	e7e9      	b.n	800f5be <_fwalk_reent+0x12>

0800f5ea <__retarget_lock_init_recursive>:
 800f5ea:	4770      	bx	lr

0800f5ec <__retarget_lock_acquire_recursive>:
 800f5ec:	4770      	bx	lr

0800f5ee <__retarget_lock_release_recursive>:
 800f5ee:	4770      	bx	lr

0800f5f0 <__swhatbuf_r>:
 800f5f0:	b570      	push	{r4, r5, r6, lr}
 800f5f2:	460e      	mov	r6, r1
 800f5f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5f8:	b096      	sub	sp, #88	; 0x58
 800f5fa:	4614      	mov	r4, r2
 800f5fc:	2900      	cmp	r1, #0
 800f5fe:	461d      	mov	r5, r3
 800f600:	da08      	bge.n	800f614 <__swhatbuf_r+0x24>
 800f602:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f606:	2200      	movs	r2, #0
 800f608:	602a      	str	r2, [r5, #0]
 800f60a:	061a      	lsls	r2, r3, #24
 800f60c:	d410      	bmi.n	800f630 <__swhatbuf_r+0x40>
 800f60e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f612:	e00e      	b.n	800f632 <__swhatbuf_r+0x42>
 800f614:	466a      	mov	r2, sp
 800f616:	f000 f95f 	bl	800f8d8 <_fstat_r>
 800f61a:	2800      	cmp	r0, #0
 800f61c:	dbf1      	blt.n	800f602 <__swhatbuf_r+0x12>
 800f61e:	9a01      	ldr	r2, [sp, #4]
 800f620:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f624:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f628:	425a      	negs	r2, r3
 800f62a:	415a      	adcs	r2, r3
 800f62c:	602a      	str	r2, [r5, #0]
 800f62e:	e7ee      	b.n	800f60e <__swhatbuf_r+0x1e>
 800f630:	2340      	movs	r3, #64	; 0x40
 800f632:	2000      	movs	r0, #0
 800f634:	6023      	str	r3, [r4, #0]
 800f636:	b016      	add	sp, #88	; 0x58
 800f638:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f63c <__smakebuf_r>:
 800f63c:	898b      	ldrh	r3, [r1, #12]
 800f63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f640:	079d      	lsls	r5, r3, #30
 800f642:	4606      	mov	r6, r0
 800f644:	460c      	mov	r4, r1
 800f646:	d507      	bpl.n	800f658 <__smakebuf_r+0x1c>
 800f648:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f64c:	6023      	str	r3, [r4, #0]
 800f64e:	6123      	str	r3, [r4, #16]
 800f650:	2301      	movs	r3, #1
 800f652:	6163      	str	r3, [r4, #20]
 800f654:	b002      	add	sp, #8
 800f656:	bd70      	pop	{r4, r5, r6, pc}
 800f658:	ab01      	add	r3, sp, #4
 800f65a:	466a      	mov	r2, sp
 800f65c:	f7ff ffc8 	bl	800f5f0 <__swhatbuf_r>
 800f660:	9900      	ldr	r1, [sp, #0]
 800f662:	4605      	mov	r5, r0
 800f664:	4630      	mov	r0, r6
 800f666:	f7ff f873 	bl	800e750 <_malloc_r>
 800f66a:	b948      	cbnz	r0, 800f680 <__smakebuf_r+0x44>
 800f66c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f670:	059a      	lsls	r2, r3, #22
 800f672:	d4ef      	bmi.n	800f654 <__smakebuf_r+0x18>
 800f674:	f023 0303 	bic.w	r3, r3, #3
 800f678:	f043 0302 	orr.w	r3, r3, #2
 800f67c:	81a3      	strh	r3, [r4, #12]
 800f67e:	e7e3      	b.n	800f648 <__smakebuf_r+0xc>
 800f680:	4b0d      	ldr	r3, [pc, #52]	; (800f6b8 <__smakebuf_r+0x7c>)
 800f682:	62b3      	str	r3, [r6, #40]	; 0x28
 800f684:	89a3      	ldrh	r3, [r4, #12]
 800f686:	6020      	str	r0, [r4, #0]
 800f688:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f68c:	6120      	str	r0, [r4, #16]
 800f68e:	81a3      	strh	r3, [r4, #12]
 800f690:	9b00      	ldr	r3, [sp, #0]
 800f692:	6163      	str	r3, [r4, #20]
 800f694:	9b01      	ldr	r3, [sp, #4]
 800f696:	b15b      	cbz	r3, 800f6b0 <__smakebuf_r+0x74>
 800f698:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f69c:	4630      	mov	r0, r6
 800f69e:	f000 f92d 	bl	800f8fc <_isatty_r>
 800f6a2:	b128      	cbz	r0, 800f6b0 <__smakebuf_r+0x74>
 800f6a4:	89a3      	ldrh	r3, [r4, #12]
 800f6a6:	f023 0303 	bic.w	r3, r3, #3
 800f6aa:	f043 0301 	orr.w	r3, r3, #1
 800f6ae:	81a3      	strh	r3, [r4, #12]
 800f6b0:	89a0      	ldrh	r0, [r4, #12]
 800f6b2:	4305      	orrs	r5, r0
 800f6b4:	81a5      	strh	r5, [r4, #12]
 800f6b6:	e7cd      	b.n	800f654 <__smakebuf_r+0x18>
 800f6b8:	0800f449 	.word	0x0800f449

0800f6bc <memchr>:
 800f6bc:	b2c9      	uxtb	r1, r1
 800f6be:	4402      	add	r2, r0
 800f6c0:	b510      	push	{r4, lr}
 800f6c2:	4290      	cmp	r0, r2
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	d101      	bne.n	800f6cc <memchr+0x10>
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	e003      	b.n	800f6d4 <memchr+0x18>
 800f6cc:	781c      	ldrb	r4, [r3, #0]
 800f6ce:	3001      	adds	r0, #1
 800f6d0:	428c      	cmp	r4, r1
 800f6d2:	d1f6      	bne.n	800f6c2 <memchr+0x6>
 800f6d4:	4618      	mov	r0, r3
 800f6d6:	bd10      	pop	{r4, pc}

0800f6d8 <memmove>:
 800f6d8:	4288      	cmp	r0, r1
 800f6da:	b510      	push	{r4, lr}
 800f6dc:	eb01 0402 	add.w	r4, r1, r2
 800f6e0:	d902      	bls.n	800f6e8 <memmove+0x10>
 800f6e2:	4284      	cmp	r4, r0
 800f6e4:	4623      	mov	r3, r4
 800f6e6:	d807      	bhi.n	800f6f8 <memmove+0x20>
 800f6e8:	1e43      	subs	r3, r0, #1
 800f6ea:	42a1      	cmp	r1, r4
 800f6ec:	d008      	beq.n	800f700 <memmove+0x28>
 800f6ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f6f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f6f6:	e7f8      	b.n	800f6ea <memmove+0x12>
 800f6f8:	4402      	add	r2, r0
 800f6fa:	4601      	mov	r1, r0
 800f6fc:	428a      	cmp	r2, r1
 800f6fe:	d100      	bne.n	800f702 <memmove+0x2a>
 800f700:	bd10      	pop	{r4, pc}
 800f702:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f706:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f70a:	e7f7      	b.n	800f6fc <memmove+0x24>

0800f70c <__malloc_lock>:
 800f70c:	4801      	ldr	r0, [pc, #4]	; (800f714 <__malloc_lock+0x8>)
 800f70e:	f7ff bf6d 	b.w	800f5ec <__retarget_lock_acquire_recursive>
 800f712:	bf00      	nop
 800f714:	20006418 	.word	0x20006418

0800f718 <__malloc_unlock>:
 800f718:	4801      	ldr	r0, [pc, #4]	; (800f720 <__malloc_unlock+0x8>)
 800f71a:	f7ff bf68 	b.w	800f5ee <__retarget_lock_release_recursive>
 800f71e:	bf00      	nop
 800f720:	20006418 	.word	0x20006418

0800f724 <_realloc_r>:
 800f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f728:	4680      	mov	r8, r0
 800f72a:	4614      	mov	r4, r2
 800f72c:	460e      	mov	r6, r1
 800f72e:	b921      	cbnz	r1, 800f73a <_realloc_r+0x16>
 800f730:	4611      	mov	r1, r2
 800f732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f736:	f7ff b80b 	b.w	800e750 <_malloc_r>
 800f73a:	b92a      	cbnz	r2, 800f748 <_realloc_r+0x24>
 800f73c:	4625      	mov	r5, r4
 800f73e:	f7fe ff9b 	bl	800e678 <_free_r>
 800f742:	4628      	mov	r0, r5
 800f744:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f748:	f000 f8fa 	bl	800f940 <_malloc_usable_size_r>
 800f74c:	4284      	cmp	r4, r0
 800f74e:	4607      	mov	r7, r0
 800f750:	d802      	bhi.n	800f758 <_realloc_r+0x34>
 800f752:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f756:	d812      	bhi.n	800f77e <_realloc_r+0x5a>
 800f758:	4621      	mov	r1, r4
 800f75a:	4640      	mov	r0, r8
 800f75c:	f7fe fff8 	bl	800e750 <_malloc_r>
 800f760:	4605      	mov	r5, r0
 800f762:	2800      	cmp	r0, #0
 800f764:	d0ed      	beq.n	800f742 <_realloc_r+0x1e>
 800f766:	42bc      	cmp	r4, r7
 800f768:	4622      	mov	r2, r4
 800f76a:	4631      	mov	r1, r6
 800f76c:	bf28      	it	cs
 800f76e:	463a      	movcs	r2, r7
 800f770:	f7fe fe02 	bl	800e378 <memcpy>
 800f774:	4631      	mov	r1, r6
 800f776:	4640      	mov	r0, r8
 800f778:	f7fe ff7e 	bl	800e678 <_free_r>
 800f77c:	e7e1      	b.n	800f742 <_realloc_r+0x1e>
 800f77e:	4635      	mov	r5, r6
 800f780:	e7df      	b.n	800f742 <_realloc_r+0x1e>

0800f782 <_raise_r>:
 800f782:	291f      	cmp	r1, #31
 800f784:	b538      	push	{r3, r4, r5, lr}
 800f786:	4604      	mov	r4, r0
 800f788:	460d      	mov	r5, r1
 800f78a:	d904      	bls.n	800f796 <_raise_r+0x14>
 800f78c:	2316      	movs	r3, #22
 800f78e:	6003      	str	r3, [r0, #0]
 800f790:	f04f 30ff 	mov.w	r0, #4294967295
 800f794:	bd38      	pop	{r3, r4, r5, pc}
 800f796:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f798:	b112      	cbz	r2, 800f7a0 <_raise_r+0x1e>
 800f79a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f79e:	b94b      	cbnz	r3, 800f7b4 <_raise_r+0x32>
 800f7a0:	4620      	mov	r0, r4
 800f7a2:	f000 f831 	bl	800f808 <_getpid_r>
 800f7a6:	462a      	mov	r2, r5
 800f7a8:	4601      	mov	r1, r0
 800f7aa:	4620      	mov	r0, r4
 800f7ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f7b0:	f000 b818 	b.w	800f7e4 <_kill_r>
 800f7b4:	2b01      	cmp	r3, #1
 800f7b6:	d00a      	beq.n	800f7ce <_raise_r+0x4c>
 800f7b8:	1c59      	adds	r1, r3, #1
 800f7ba:	d103      	bne.n	800f7c4 <_raise_r+0x42>
 800f7bc:	2316      	movs	r3, #22
 800f7be:	6003      	str	r3, [r0, #0]
 800f7c0:	2001      	movs	r0, #1
 800f7c2:	e7e7      	b.n	800f794 <_raise_r+0x12>
 800f7c4:	2400      	movs	r4, #0
 800f7c6:	4628      	mov	r0, r5
 800f7c8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f7cc:	4798      	blx	r3
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e7e0      	b.n	800f794 <_raise_r+0x12>
	...

0800f7d4 <raise>:
 800f7d4:	4b02      	ldr	r3, [pc, #8]	; (800f7e0 <raise+0xc>)
 800f7d6:	4601      	mov	r1, r0
 800f7d8:	6818      	ldr	r0, [r3, #0]
 800f7da:	f7ff bfd2 	b.w	800f782 <_raise_r>
 800f7de:	bf00      	nop
 800f7e0:	20000010 	.word	0x20000010

0800f7e4 <_kill_r>:
 800f7e4:	b538      	push	{r3, r4, r5, lr}
 800f7e6:	2300      	movs	r3, #0
 800f7e8:	4d06      	ldr	r5, [pc, #24]	; (800f804 <_kill_r+0x20>)
 800f7ea:	4604      	mov	r4, r0
 800f7ec:	4608      	mov	r0, r1
 800f7ee:	4611      	mov	r1, r2
 800f7f0:	602b      	str	r3, [r5, #0]
 800f7f2:	f7f4 fa01 	bl	8003bf8 <_kill>
 800f7f6:	1c43      	adds	r3, r0, #1
 800f7f8:	d102      	bne.n	800f800 <_kill_r+0x1c>
 800f7fa:	682b      	ldr	r3, [r5, #0]
 800f7fc:	b103      	cbz	r3, 800f800 <_kill_r+0x1c>
 800f7fe:	6023      	str	r3, [r4, #0]
 800f800:	bd38      	pop	{r3, r4, r5, pc}
 800f802:	bf00      	nop
 800f804:	2000641c 	.word	0x2000641c

0800f808 <_getpid_r>:
 800f808:	f7f4 b9ee 	b.w	8003be8 <_getpid>

0800f80c <__sread>:
 800f80c:	b510      	push	{r4, lr}
 800f80e:	460c      	mov	r4, r1
 800f810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f814:	f000 f89c 	bl	800f950 <_read_r>
 800f818:	2800      	cmp	r0, #0
 800f81a:	bfab      	itete	ge
 800f81c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f81e:	89a3      	ldrhlt	r3, [r4, #12]
 800f820:	181b      	addge	r3, r3, r0
 800f822:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f826:	bfac      	ite	ge
 800f828:	6563      	strge	r3, [r4, #84]	; 0x54
 800f82a:	81a3      	strhlt	r3, [r4, #12]
 800f82c:	bd10      	pop	{r4, pc}

0800f82e <__swrite>:
 800f82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f832:	461f      	mov	r7, r3
 800f834:	898b      	ldrh	r3, [r1, #12]
 800f836:	4605      	mov	r5, r0
 800f838:	460c      	mov	r4, r1
 800f83a:	05db      	lsls	r3, r3, #23
 800f83c:	4616      	mov	r6, r2
 800f83e:	d505      	bpl.n	800f84c <__swrite+0x1e>
 800f840:	2302      	movs	r3, #2
 800f842:	2200      	movs	r2, #0
 800f844:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f848:	f000 f868 	bl	800f91c <_lseek_r>
 800f84c:	89a3      	ldrh	r3, [r4, #12]
 800f84e:	4632      	mov	r2, r6
 800f850:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f854:	4628      	mov	r0, r5
 800f856:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f85a:	81a3      	strh	r3, [r4, #12]
 800f85c:	463b      	mov	r3, r7
 800f85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f862:	f000 b817 	b.w	800f894 <_write_r>

0800f866 <__sseek>:
 800f866:	b510      	push	{r4, lr}
 800f868:	460c      	mov	r4, r1
 800f86a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f86e:	f000 f855 	bl	800f91c <_lseek_r>
 800f872:	1c43      	adds	r3, r0, #1
 800f874:	89a3      	ldrh	r3, [r4, #12]
 800f876:	bf15      	itete	ne
 800f878:	6560      	strne	r0, [r4, #84]	; 0x54
 800f87a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f87e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f882:	81a3      	strheq	r3, [r4, #12]
 800f884:	bf18      	it	ne
 800f886:	81a3      	strhne	r3, [r4, #12]
 800f888:	bd10      	pop	{r4, pc}

0800f88a <__sclose>:
 800f88a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f88e:	f000 b813 	b.w	800f8b8 <_close_r>
	...

0800f894 <_write_r>:
 800f894:	b538      	push	{r3, r4, r5, lr}
 800f896:	4604      	mov	r4, r0
 800f898:	4d06      	ldr	r5, [pc, #24]	; (800f8b4 <_write_r+0x20>)
 800f89a:	4608      	mov	r0, r1
 800f89c:	4611      	mov	r1, r2
 800f89e:	2200      	movs	r2, #0
 800f8a0:	602a      	str	r2, [r5, #0]
 800f8a2:	461a      	mov	r2, r3
 800f8a4:	f7f4 f9df 	bl	8003c66 <_write>
 800f8a8:	1c43      	adds	r3, r0, #1
 800f8aa:	d102      	bne.n	800f8b2 <_write_r+0x1e>
 800f8ac:	682b      	ldr	r3, [r5, #0]
 800f8ae:	b103      	cbz	r3, 800f8b2 <_write_r+0x1e>
 800f8b0:	6023      	str	r3, [r4, #0]
 800f8b2:	bd38      	pop	{r3, r4, r5, pc}
 800f8b4:	2000641c 	.word	0x2000641c

0800f8b8 <_close_r>:
 800f8b8:	b538      	push	{r3, r4, r5, lr}
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	4d05      	ldr	r5, [pc, #20]	; (800f8d4 <_close_r+0x1c>)
 800f8be:	4604      	mov	r4, r0
 800f8c0:	4608      	mov	r0, r1
 800f8c2:	602b      	str	r3, [r5, #0]
 800f8c4:	f7f4 f9eb 	bl	8003c9e <_close>
 800f8c8:	1c43      	adds	r3, r0, #1
 800f8ca:	d102      	bne.n	800f8d2 <_close_r+0x1a>
 800f8cc:	682b      	ldr	r3, [r5, #0]
 800f8ce:	b103      	cbz	r3, 800f8d2 <_close_r+0x1a>
 800f8d0:	6023      	str	r3, [r4, #0]
 800f8d2:	bd38      	pop	{r3, r4, r5, pc}
 800f8d4:	2000641c 	.word	0x2000641c

0800f8d8 <_fstat_r>:
 800f8d8:	b538      	push	{r3, r4, r5, lr}
 800f8da:	2300      	movs	r3, #0
 800f8dc:	4d06      	ldr	r5, [pc, #24]	; (800f8f8 <_fstat_r+0x20>)
 800f8de:	4604      	mov	r4, r0
 800f8e0:	4608      	mov	r0, r1
 800f8e2:	4611      	mov	r1, r2
 800f8e4:	602b      	str	r3, [r5, #0]
 800f8e6:	f7f4 f9e6 	bl	8003cb6 <_fstat>
 800f8ea:	1c43      	adds	r3, r0, #1
 800f8ec:	d102      	bne.n	800f8f4 <_fstat_r+0x1c>
 800f8ee:	682b      	ldr	r3, [r5, #0]
 800f8f0:	b103      	cbz	r3, 800f8f4 <_fstat_r+0x1c>
 800f8f2:	6023      	str	r3, [r4, #0]
 800f8f4:	bd38      	pop	{r3, r4, r5, pc}
 800f8f6:	bf00      	nop
 800f8f8:	2000641c 	.word	0x2000641c

0800f8fc <_isatty_r>:
 800f8fc:	b538      	push	{r3, r4, r5, lr}
 800f8fe:	2300      	movs	r3, #0
 800f900:	4d05      	ldr	r5, [pc, #20]	; (800f918 <_isatty_r+0x1c>)
 800f902:	4604      	mov	r4, r0
 800f904:	4608      	mov	r0, r1
 800f906:	602b      	str	r3, [r5, #0]
 800f908:	f7f4 f9e5 	bl	8003cd6 <_isatty>
 800f90c:	1c43      	adds	r3, r0, #1
 800f90e:	d102      	bne.n	800f916 <_isatty_r+0x1a>
 800f910:	682b      	ldr	r3, [r5, #0]
 800f912:	b103      	cbz	r3, 800f916 <_isatty_r+0x1a>
 800f914:	6023      	str	r3, [r4, #0]
 800f916:	bd38      	pop	{r3, r4, r5, pc}
 800f918:	2000641c 	.word	0x2000641c

0800f91c <_lseek_r>:
 800f91c:	b538      	push	{r3, r4, r5, lr}
 800f91e:	4604      	mov	r4, r0
 800f920:	4d06      	ldr	r5, [pc, #24]	; (800f93c <_lseek_r+0x20>)
 800f922:	4608      	mov	r0, r1
 800f924:	4611      	mov	r1, r2
 800f926:	2200      	movs	r2, #0
 800f928:	602a      	str	r2, [r5, #0]
 800f92a:	461a      	mov	r2, r3
 800f92c:	f7f4 f9de 	bl	8003cec <_lseek>
 800f930:	1c43      	adds	r3, r0, #1
 800f932:	d102      	bne.n	800f93a <_lseek_r+0x1e>
 800f934:	682b      	ldr	r3, [r5, #0]
 800f936:	b103      	cbz	r3, 800f93a <_lseek_r+0x1e>
 800f938:	6023      	str	r3, [r4, #0]
 800f93a:	bd38      	pop	{r3, r4, r5, pc}
 800f93c:	2000641c 	.word	0x2000641c

0800f940 <_malloc_usable_size_r>:
 800f940:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f944:	1f18      	subs	r0, r3, #4
 800f946:	2b00      	cmp	r3, #0
 800f948:	bfbc      	itt	lt
 800f94a:	580b      	ldrlt	r3, [r1, r0]
 800f94c:	18c0      	addlt	r0, r0, r3
 800f94e:	4770      	bx	lr

0800f950 <_read_r>:
 800f950:	b538      	push	{r3, r4, r5, lr}
 800f952:	4604      	mov	r4, r0
 800f954:	4d06      	ldr	r5, [pc, #24]	; (800f970 <_read_r+0x20>)
 800f956:	4608      	mov	r0, r1
 800f958:	4611      	mov	r1, r2
 800f95a:	2200      	movs	r2, #0
 800f95c:	602a      	str	r2, [r5, #0]
 800f95e:	461a      	mov	r2, r3
 800f960:	f7f4 f964 	bl	8003c2c <_read>
 800f964:	1c43      	adds	r3, r0, #1
 800f966:	d102      	bne.n	800f96e <_read_r+0x1e>
 800f968:	682b      	ldr	r3, [r5, #0]
 800f96a:	b103      	cbz	r3, 800f96e <_read_r+0x1e>
 800f96c:	6023      	str	r3, [r4, #0]
 800f96e:	bd38      	pop	{r3, r4, r5, pc}
 800f970:	2000641c 	.word	0x2000641c
 800f974:	00000000 	.word	0x00000000

0800f978 <sin>:
 800f978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f97a:	ec53 2b10 	vmov	r2, r3, d0
 800f97e:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f982:	4827      	ldr	r0, [pc, #156]	; (800fa20 <sin+0xa8>)
 800f984:	4281      	cmp	r1, r0
 800f986:	dc07      	bgt.n	800f998 <sin+0x20>
 800f988:	2000      	movs	r0, #0
 800f98a:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800fa18 <sin+0xa0>
 800f98e:	b005      	add	sp, #20
 800f990:	f85d eb04 	ldr.w	lr, [sp], #4
 800f994:	f000 be6c 	b.w	8010670 <__kernel_sin>
 800f998:	4822      	ldr	r0, [pc, #136]	; (800fa24 <sin+0xac>)
 800f99a:	4281      	cmp	r1, r0
 800f99c:	dd09      	ble.n	800f9b2 <sin+0x3a>
 800f99e:	ee10 0a10 	vmov	r0, s0
 800f9a2:	4619      	mov	r1, r3
 800f9a4:	f7f0 fda4 	bl	80004f0 <__aeabi_dsub>
 800f9a8:	ec41 0b10 	vmov	d0, r0, r1
 800f9ac:	b005      	add	sp, #20
 800f9ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9b2:	4668      	mov	r0, sp
 800f9b4:	f000 f838 	bl	800fa28 <__ieee754_rem_pio2>
 800f9b8:	f000 0003 	and.w	r0, r0, #3
 800f9bc:	2801      	cmp	r0, #1
 800f9be:	d00c      	beq.n	800f9da <sin+0x62>
 800f9c0:	2802      	cmp	r0, #2
 800f9c2:	d011      	beq.n	800f9e8 <sin+0x70>
 800f9c4:	b9f0      	cbnz	r0, 800fa04 <sin+0x8c>
 800f9c6:	2001      	movs	r0, #1
 800f9c8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9cc:	ed9d 0b00 	vldr	d0, [sp]
 800f9d0:	f000 fe4e 	bl	8010670 <__kernel_sin>
 800f9d4:	ec51 0b10 	vmov	r0, r1, d0
 800f9d8:	e7e6      	b.n	800f9a8 <sin+0x30>
 800f9da:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9de:	ed9d 0b00 	vldr	d0, [sp]
 800f9e2:	f000 fa2d 	bl	800fe40 <__kernel_cos>
 800f9e6:	e7f5      	b.n	800f9d4 <sin+0x5c>
 800f9e8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9ec:	ed9d 0b00 	vldr	d0, [sp]
 800f9f0:	2001      	movs	r0, #1
 800f9f2:	f000 fe3d 	bl	8010670 <__kernel_sin>
 800f9f6:	ee10 0a10 	vmov	r0, s0
 800f9fa:	ec53 2b10 	vmov	r2, r3, d0
 800f9fe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa02:	e7d1      	b.n	800f9a8 <sin+0x30>
 800fa04:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa08:	ed9d 0b00 	vldr	d0, [sp]
 800fa0c:	f000 fa18 	bl	800fe40 <__kernel_cos>
 800fa10:	e7f1      	b.n	800f9f6 <sin+0x7e>
 800fa12:	bf00      	nop
 800fa14:	f3af 8000 	nop.w
	...
 800fa20:	3fe921fb 	.word	0x3fe921fb
 800fa24:	7fefffff 	.word	0x7fefffff

0800fa28 <__ieee754_rem_pio2>:
 800fa28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fa2c:	ec55 4b10 	vmov	r4, r5, d0
 800fa30:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800fa34:	4bca      	ldr	r3, [pc, #808]	; (800fd60 <__ieee754_rem_pio2+0x338>)
 800fa36:	4682      	mov	sl, r0
 800fa38:	4598      	cmp	r8, r3
 800fa3a:	ed2d 8b02 	vpush	{d8}
 800fa3e:	b08b      	sub	sp, #44	; 0x2c
 800fa40:	9502      	str	r5, [sp, #8]
 800fa42:	dc08      	bgt.n	800fa56 <__ieee754_rem_pio2+0x2e>
 800fa44:	2200      	movs	r2, #0
 800fa46:	2300      	movs	r3, #0
 800fa48:	ed80 0b00 	vstr	d0, [r0]
 800fa4c:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fa50:	f04f 0b00 	mov.w	fp, #0
 800fa54:	e028      	b.n	800faa8 <__ieee754_rem_pio2+0x80>
 800fa56:	4bc3      	ldr	r3, [pc, #780]	; (800fd64 <__ieee754_rem_pio2+0x33c>)
 800fa58:	4598      	cmp	r8, r3
 800fa5a:	dc78      	bgt.n	800fb4e <__ieee754_rem_pio2+0x126>
 800fa5c:	9b02      	ldr	r3, [sp, #8]
 800fa5e:	ee10 0a10 	vmov	r0, s0
 800fa62:	4ec1      	ldr	r6, [pc, #772]	; (800fd68 <__ieee754_rem_pio2+0x340>)
 800fa64:	4629      	mov	r1, r5
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	a3af      	add	r3, pc, #700	; (adr r3, 800fd28 <__ieee754_rem_pio2+0x300>)
 800fa6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa6e:	dd39      	ble.n	800fae4 <__ieee754_rem_pio2+0xbc>
 800fa70:	f7f0 fd3e 	bl	80004f0 <__aeabi_dsub>
 800fa74:	45b0      	cmp	r8, r6
 800fa76:	4604      	mov	r4, r0
 800fa78:	460d      	mov	r5, r1
 800fa7a:	d01b      	beq.n	800fab4 <__ieee754_rem_pio2+0x8c>
 800fa7c:	a3ac      	add	r3, pc, #688	; (adr r3, 800fd30 <__ieee754_rem_pio2+0x308>)
 800fa7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa82:	f7f0 fd35 	bl	80004f0 <__aeabi_dsub>
 800fa86:	4602      	mov	r2, r0
 800fa88:	460b      	mov	r3, r1
 800fa8a:	4620      	mov	r0, r4
 800fa8c:	4629      	mov	r1, r5
 800fa8e:	e9ca 2300 	strd	r2, r3, [sl]
 800fa92:	f7f0 fd2d 	bl	80004f0 <__aeabi_dsub>
 800fa96:	a3a6      	add	r3, pc, #664	; (adr r3, 800fd30 <__ieee754_rem_pio2+0x308>)
 800fa98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa9c:	f04f 0b01 	mov.w	fp, #1
 800faa0:	f7f0 fd26 	bl	80004f0 <__aeabi_dsub>
 800faa4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800faa8:	4658      	mov	r0, fp
 800faaa:	b00b      	add	sp, #44	; 0x2c
 800faac:	ecbd 8b02 	vpop	{d8}
 800fab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fab4:	a3a0      	add	r3, pc, #640	; (adr r3, 800fd38 <__ieee754_rem_pio2+0x310>)
 800fab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faba:	f7f0 fd19 	bl	80004f0 <__aeabi_dsub>
 800fabe:	4604      	mov	r4, r0
 800fac0:	460d      	mov	r5, r1
 800fac2:	a39f      	add	r3, pc, #636	; (adr r3, 800fd40 <__ieee754_rem_pio2+0x318>)
 800fac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fac8:	f7f0 fd12 	bl	80004f0 <__aeabi_dsub>
 800facc:	4602      	mov	r2, r0
 800face:	460b      	mov	r3, r1
 800fad0:	4620      	mov	r0, r4
 800fad2:	4629      	mov	r1, r5
 800fad4:	e9ca 2300 	strd	r2, r3, [sl]
 800fad8:	f7f0 fd0a 	bl	80004f0 <__aeabi_dsub>
 800fadc:	a398      	add	r3, pc, #608	; (adr r3, 800fd40 <__ieee754_rem_pio2+0x318>)
 800fade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fae2:	e7db      	b.n	800fa9c <__ieee754_rem_pio2+0x74>
 800fae4:	f7f0 fd06 	bl	80004f4 <__adddf3>
 800fae8:	45b0      	cmp	r8, r6
 800faea:	4604      	mov	r4, r0
 800faec:	460d      	mov	r5, r1
 800faee:	d016      	beq.n	800fb1e <__ieee754_rem_pio2+0xf6>
 800faf0:	a38f      	add	r3, pc, #572	; (adr r3, 800fd30 <__ieee754_rem_pio2+0x308>)
 800faf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800faf6:	f7f0 fcfd 	bl	80004f4 <__adddf3>
 800fafa:	4602      	mov	r2, r0
 800fafc:	460b      	mov	r3, r1
 800fafe:	4620      	mov	r0, r4
 800fb00:	4629      	mov	r1, r5
 800fb02:	e9ca 2300 	strd	r2, r3, [sl]
 800fb06:	f7f0 fcf3 	bl	80004f0 <__aeabi_dsub>
 800fb0a:	a389      	add	r3, pc, #548	; (adr r3, 800fd30 <__ieee754_rem_pio2+0x308>)
 800fb0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb10:	f7f0 fcf0 	bl	80004f4 <__adddf3>
 800fb14:	f04f 3bff 	mov.w	fp, #4294967295
 800fb18:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fb1c:	e7c4      	b.n	800faa8 <__ieee754_rem_pio2+0x80>
 800fb1e:	a386      	add	r3, pc, #536	; (adr r3, 800fd38 <__ieee754_rem_pio2+0x310>)
 800fb20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb24:	f7f0 fce6 	bl	80004f4 <__adddf3>
 800fb28:	4604      	mov	r4, r0
 800fb2a:	460d      	mov	r5, r1
 800fb2c:	a384      	add	r3, pc, #528	; (adr r3, 800fd40 <__ieee754_rem_pio2+0x318>)
 800fb2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb32:	f7f0 fcdf 	bl	80004f4 <__adddf3>
 800fb36:	4602      	mov	r2, r0
 800fb38:	460b      	mov	r3, r1
 800fb3a:	4620      	mov	r0, r4
 800fb3c:	4629      	mov	r1, r5
 800fb3e:	e9ca 2300 	strd	r2, r3, [sl]
 800fb42:	f7f0 fcd5 	bl	80004f0 <__aeabi_dsub>
 800fb46:	a37e      	add	r3, pc, #504	; (adr r3, 800fd40 <__ieee754_rem_pio2+0x318>)
 800fb48:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4c:	e7e0      	b.n	800fb10 <__ieee754_rem_pio2+0xe8>
 800fb4e:	4b87      	ldr	r3, [pc, #540]	; (800fd6c <__ieee754_rem_pio2+0x344>)
 800fb50:	4598      	cmp	r8, r3
 800fb52:	f300 80d9 	bgt.w	800fd08 <__ieee754_rem_pio2+0x2e0>
 800fb56:	f000 fe49 	bl	80107ec <fabs>
 800fb5a:	ee10 0a10 	vmov	r0, s0
 800fb5e:	ec55 4b10 	vmov	r4, r5, d0
 800fb62:	a379      	add	r3, pc, #484	; (adr r3, 800fd48 <__ieee754_rem_pio2+0x320>)
 800fb64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb68:	4629      	mov	r1, r5
 800fb6a:	f7f0 fe79 	bl	8000860 <__aeabi_dmul>
 800fb6e:	2200      	movs	r2, #0
 800fb70:	4b7f      	ldr	r3, [pc, #508]	; (800fd70 <__ieee754_rem_pio2+0x348>)
 800fb72:	f7f0 fcbf 	bl	80004f4 <__adddf3>
 800fb76:	f7f1 f90d 	bl	8000d94 <__aeabi_d2iz>
 800fb7a:	4683      	mov	fp, r0
 800fb7c:	f7f0 fe06 	bl	800078c <__aeabi_i2d>
 800fb80:	4602      	mov	r2, r0
 800fb82:	460b      	mov	r3, r1
 800fb84:	ec43 2b18 	vmov	d8, r2, r3
 800fb88:	a367      	add	r3, pc, #412	; (adr r3, 800fd28 <__ieee754_rem_pio2+0x300>)
 800fb8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb8e:	f7f0 fe67 	bl	8000860 <__aeabi_dmul>
 800fb92:	4602      	mov	r2, r0
 800fb94:	460b      	mov	r3, r1
 800fb96:	4620      	mov	r0, r4
 800fb98:	4629      	mov	r1, r5
 800fb9a:	f7f0 fca9 	bl	80004f0 <__aeabi_dsub>
 800fb9e:	4606      	mov	r6, r0
 800fba0:	460f      	mov	r7, r1
 800fba2:	a363      	add	r3, pc, #396	; (adr r3, 800fd30 <__ieee754_rem_pio2+0x308>)
 800fba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba8:	ec51 0b18 	vmov	r0, r1, d8
 800fbac:	f7f0 fe58 	bl	8000860 <__aeabi_dmul>
 800fbb0:	f1bb 0f1f 	cmp.w	fp, #31
 800fbb4:	4604      	mov	r4, r0
 800fbb6:	460d      	mov	r5, r1
 800fbb8:	dc0d      	bgt.n	800fbd6 <__ieee754_rem_pio2+0x1ae>
 800fbba:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fbbe:	4b6d      	ldr	r3, [pc, #436]	; (800fd74 <__ieee754_rem_pio2+0x34c>)
 800fbc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fbc4:	4543      	cmp	r3, r8
 800fbc6:	d006      	beq.n	800fbd6 <__ieee754_rem_pio2+0x1ae>
 800fbc8:	4622      	mov	r2, r4
 800fbca:	462b      	mov	r3, r5
 800fbcc:	4630      	mov	r0, r6
 800fbce:	4639      	mov	r1, r7
 800fbd0:	f7f0 fc8e 	bl	80004f0 <__aeabi_dsub>
 800fbd4:	e00f      	b.n	800fbf6 <__ieee754_rem_pio2+0x1ce>
 800fbd6:	462b      	mov	r3, r5
 800fbd8:	4622      	mov	r2, r4
 800fbda:	4630      	mov	r0, r6
 800fbdc:	4639      	mov	r1, r7
 800fbde:	f7f0 fc87 	bl	80004f0 <__aeabi_dsub>
 800fbe2:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fbe6:	9303      	str	r3, [sp, #12]
 800fbe8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fbec:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fbf0:	f1b8 0f10 	cmp.w	r8, #16
 800fbf4:	dc02      	bgt.n	800fbfc <__ieee754_rem_pio2+0x1d4>
 800fbf6:	e9ca 0100 	strd	r0, r1, [sl]
 800fbfa:	e039      	b.n	800fc70 <__ieee754_rem_pio2+0x248>
 800fbfc:	a34e      	add	r3, pc, #312	; (adr r3, 800fd38 <__ieee754_rem_pio2+0x310>)
 800fbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc02:	ec51 0b18 	vmov	r0, r1, d8
 800fc06:	f7f0 fe2b 	bl	8000860 <__aeabi_dmul>
 800fc0a:	4604      	mov	r4, r0
 800fc0c:	460d      	mov	r5, r1
 800fc0e:	4602      	mov	r2, r0
 800fc10:	460b      	mov	r3, r1
 800fc12:	4630      	mov	r0, r6
 800fc14:	4639      	mov	r1, r7
 800fc16:	f7f0 fc6b 	bl	80004f0 <__aeabi_dsub>
 800fc1a:	4602      	mov	r2, r0
 800fc1c:	460b      	mov	r3, r1
 800fc1e:	4680      	mov	r8, r0
 800fc20:	4689      	mov	r9, r1
 800fc22:	4630      	mov	r0, r6
 800fc24:	4639      	mov	r1, r7
 800fc26:	f7f0 fc63 	bl	80004f0 <__aeabi_dsub>
 800fc2a:	4622      	mov	r2, r4
 800fc2c:	462b      	mov	r3, r5
 800fc2e:	f7f0 fc5f 	bl	80004f0 <__aeabi_dsub>
 800fc32:	4604      	mov	r4, r0
 800fc34:	460d      	mov	r5, r1
 800fc36:	a342      	add	r3, pc, #264	; (adr r3, 800fd40 <__ieee754_rem_pio2+0x318>)
 800fc38:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc3c:	ec51 0b18 	vmov	r0, r1, d8
 800fc40:	f7f0 fe0e 	bl	8000860 <__aeabi_dmul>
 800fc44:	4622      	mov	r2, r4
 800fc46:	462b      	mov	r3, r5
 800fc48:	f7f0 fc52 	bl	80004f0 <__aeabi_dsub>
 800fc4c:	4602      	mov	r2, r0
 800fc4e:	460b      	mov	r3, r1
 800fc50:	4604      	mov	r4, r0
 800fc52:	460d      	mov	r5, r1
 800fc54:	4640      	mov	r0, r8
 800fc56:	4649      	mov	r1, r9
 800fc58:	f7f0 fc4a 	bl	80004f0 <__aeabi_dsub>
 800fc5c:	9a03      	ldr	r2, [sp, #12]
 800fc5e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc62:	1ad3      	subs	r3, r2, r3
 800fc64:	2b31      	cmp	r3, #49	; 0x31
 800fc66:	dc24      	bgt.n	800fcb2 <__ieee754_rem_pio2+0x28a>
 800fc68:	4646      	mov	r6, r8
 800fc6a:	464f      	mov	r7, r9
 800fc6c:	e9ca 0100 	strd	r0, r1, [sl]
 800fc70:	e9da 8900 	ldrd	r8, r9, [sl]
 800fc74:	4630      	mov	r0, r6
 800fc76:	4639      	mov	r1, r7
 800fc78:	4642      	mov	r2, r8
 800fc7a:	464b      	mov	r3, r9
 800fc7c:	f7f0 fc38 	bl	80004f0 <__aeabi_dsub>
 800fc80:	462b      	mov	r3, r5
 800fc82:	4622      	mov	r2, r4
 800fc84:	f7f0 fc34 	bl	80004f0 <__aeabi_dsub>
 800fc88:	9b02      	ldr	r3, [sp, #8]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fc90:	f6bf af0a 	bge.w	800faa8 <__ieee754_rem_pio2+0x80>
 800fc94:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fc98:	f8ca 8000 	str.w	r8, [sl]
 800fc9c:	f8ca 0008 	str.w	r0, [sl, #8]
 800fca0:	f8ca 3004 	str.w	r3, [sl, #4]
 800fca4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fca8:	f8ca 300c 	str.w	r3, [sl, #12]
 800fcac:	f1cb 0b00 	rsb	fp, fp, #0
 800fcb0:	e6fa      	b.n	800faa8 <__ieee754_rem_pio2+0x80>
 800fcb2:	a327      	add	r3, pc, #156	; (adr r3, 800fd50 <__ieee754_rem_pio2+0x328>)
 800fcb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcb8:	ec51 0b18 	vmov	r0, r1, d8
 800fcbc:	f7f0 fdd0 	bl	8000860 <__aeabi_dmul>
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	460d      	mov	r5, r1
 800fcc4:	4602      	mov	r2, r0
 800fcc6:	460b      	mov	r3, r1
 800fcc8:	4640      	mov	r0, r8
 800fcca:	4649      	mov	r1, r9
 800fccc:	f7f0 fc10 	bl	80004f0 <__aeabi_dsub>
 800fcd0:	4602      	mov	r2, r0
 800fcd2:	460b      	mov	r3, r1
 800fcd4:	4606      	mov	r6, r0
 800fcd6:	460f      	mov	r7, r1
 800fcd8:	4640      	mov	r0, r8
 800fcda:	4649      	mov	r1, r9
 800fcdc:	f7f0 fc08 	bl	80004f0 <__aeabi_dsub>
 800fce0:	4622      	mov	r2, r4
 800fce2:	462b      	mov	r3, r5
 800fce4:	f7f0 fc04 	bl	80004f0 <__aeabi_dsub>
 800fce8:	4604      	mov	r4, r0
 800fcea:	460d      	mov	r5, r1
 800fcec:	a31a      	add	r3, pc, #104	; (adr r3, 800fd58 <__ieee754_rem_pio2+0x330>)
 800fcee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcf2:	ec51 0b18 	vmov	r0, r1, d8
 800fcf6:	f7f0 fdb3 	bl	8000860 <__aeabi_dmul>
 800fcfa:	4622      	mov	r2, r4
 800fcfc:	462b      	mov	r3, r5
 800fcfe:	f7f0 fbf7 	bl	80004f0 <__aeabi_dsub>
 800fd02:	4604      	mov	r4, r0
 800fd04:	460d      	mov	r5, r1
 800fd06:	e75f      	b.n	800fbc8 <__ieee754_rem_pio2+0x1a0>
 800fd08:	4b1b      	ldr	r3, [pc, #108]	; (800fd78 <__ieee754_rem_pio2+0x350>)
 800fd0a:	4598      	cmp	r8, r3
 800fd0c:	dd36      	ble.n	800fd7c <__ieee754_rem_pio2+0x354>
 800fd0e:	ee10 2a10 	vmov	r2, s0
 800fd12:	462b      	mov	r3, r5
 800fd14:	4620      	mov	r0, r4
 800fd16:	4629      	mov	r1, r5
 800fd18:	f7f0 fbea 	bl	80004f0 <__aeabi_dsub>
 800fd1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd20:	e9ca 0100 	strd	r0, r1, [sl]
 800fd24:	e694      	b.n	800fa50 <__ieee754_rem_pio2+0x28>
 800fd26:	bf00      	nop
 800fd28:	54400000 	.word	0x54400000
 800fd2c:	3ff921fb 	.word	0x3ff921fb
 800fd30:	1a626331 	.word	0x1a626331
 800fd34:	3dd0b461 	.word	0x3dd0b461
 800fd38:	1a600000 	.word	0x1a600000
 800fd3c:	3dd0b461 	.word	0x3dd0b461
 800fd40:	2e037073 	.word	0x2e037073
 800fd44:	3ba3198a 	.word	0x3ba3198a
 800fd48:	6dc9c883 	.word	0x6dc9c883
 800fd4c:	3fe45f30 	.word	0x3fe45f30
 800fd50:	2e000000 	.word	0x2e000000
 800fd54:	3ba3198a 	.word	0x3ba3198a
 800fd58:	252049c1 	.word	0x252049c1
 800fd5c:	397b839a 	.word	0x397b839a
 800fd60:	3fe921fb 	.word	0x3fe921fb
 800fd64:	4002d97b 	.word	0x4002d97b
 800fd68:	3ff921fb 	.word	0x3ff921fb
 800fd6c:	413921fb 	.word	0x413921fb
 800fd70:	3fe00000 	.word	0x3fe00000
 800fd74:	08010f9c 	.word	0x08010f9c
 800fd78:	7fefffff 	.word	0x7fefffff
 800fd7c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fd80:	ee10 0a10 	vmov	r0, s0
 800fd84:	ee10 6a10 	vmov	r6, s0
 800fd88:	ad04      	add	r5, sp, #16
 800fd8a:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fd8e:	46a9      	mov	r9, r5
 800fd90:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fd94:	f04f 0803 	mov.w	r8, #3
 800fd98:	460f      	mov	r7, r1
 800fd9a:	f7f0 fffb 	bl	8000d94 <__aeabi_d2iz>
 800fd9e:	f7f0 fcf5 	bl	800078c <__aeabi_i2d>
 800fda2:	4602      	mov	r2, r0
 800fda4:	460b      	mov	r3, r1
 800fda6:	4630      	mov	r0, r6
 800fda8:	4639      	mov	r1, r7
 800fdaa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fdae:	f7f0 fb9f 	bl	80004f0 <__aeabi_dsub>
 800fdb2:	2200      	movs	r2, #0
 800fdb4:	4b20      	ldr	r3, [pc, #128]	; (800fe38 <__ieee754_rem_pio2+0x410>)
 800fdb6:	f7f0 fd53 	bl	8000860 <__aeabi_dmul>
 800fdba:	460f      	mov	r7, r1
 800fdbc:	4606      	mov	r6, r0
 800fdbe:	f7f0 ffe9 	bl	8000d94 <__aeabi_d2iz>
 800fdc2:	f7f0 fce3 	bl	800078c <__aeabi_i2d>
 800fdc6:	4602      	mov	r2, r0
 800fdc8:	460b      	mov	r3, r1
 800fdca:	4630      	mov	r0, r6
 800fdcc:	4639      	mov	r1, r7
 800fdce:	2600      	movs	r6, #0
 800fdd0:	2700      	movs	r7, #0
 800fdd2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fdd6:	f7f0 fb8b 	bl	80004f0 <__aeabi_dsub>
 800fdda:	2200      	movs	r2, #0
 800fddc:	4b16      	ldr	r3, [pc, #88]	; (800fe38 <__ieee754_rem_pio2+0x410>)
 800fdde:	f7f0 fd3f 	bl	8000860 <__aeabi_dmul>
 800fde2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fde6:	4632      	mov	r2, r6
 800fde8:	463b      	mov	r3, r7
 800fdea:	46c3      	mov	fp, r8
 800fdec:	3d08      	subs	r5, #8
 800fdee:	f108 38ff 	add.w	r8, r8, #4294967295
 800fdf2:	e9d5 0106 	ldrd	r0, r1, [r5, #24]
 800fdf6:	f7f0 ff9b 	bl	8000d30 <__aeabi_dcmpeq>
 800fdfa:	2800      	cmp	r0, #0
 800fdfc:	d1f3      	bne.n	800fde6 <__ieee754_rem_pio2+0x3be>
 800fdfe:	4b0f      	ldr	r3, [pc, #60]	; (800fe3c <__ieee754_rem_pio2+0x414>)
 800fe00:	4622      	mov	r2, r4
 800fe02:	4651      	mov	r1, sl
 800fe04:	4648      	mov	r0, r9
 800fe06:	9301      	str	r3, [sp, #4]
 800fe08:	2302      	movs	r3, #2
 800fe0a:	9300      	str	r3, [sp, #0]
 800fe0c:	465b      	mov	r3, fp
 800fe0e:	f000 f8df 	bl	800ffd0 <__kernel_rem_pio2>
 800fe12:	9b02      	ldr	r3, [sp, #8]
 800fe14:	4683      	mov	fp, r0
 800fe16:	2b00      	cmp	r3, #0
 800fe18:	f6bf ae46 	bge.w	800faa8 <__ieee754_rem_pio2+0x80>
 800fe1c:	e9da 2100 	ldrd	r2, r1, [sl]
 800fe20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe24:	e9ca 2300 	strd	r2, r3, [sl]
 800fe28:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800fe2c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fe30:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800fe34:	e73a      	b.n	800fcac <__ieee754_rem_pio2+0x284>
 800fe36:	bf00      	nop
 800fe38:	41700000 	.word	0x41700000
 800fe3c:	0801101c 	.word	0x0801101c

0800fe40 <__kernel_cos>:
 800fe40:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe44:	ec57 6b10 	vmov	r6, r7, d0
 800fe48:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fe4c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fe50:	ed8d 1b00 	vstr	d1, [sp]
 800fe54:	da07      	bge.n	800fe66 <__kernel_cos+0x26>
 800fe56:	ee10 0a10 	vmov	r0, s0
 800fe5a:	4639      	mov	r1, r7
 800fe5c:	f7f0 ff9a 	bl	8000d94 <__aeabi_d2iz>
 800fe60:	2800      	cmp	r0, #0
 800fe62:	f000 8088 	beq.w	800ff76 <__kernel_cos+0x136>
 800fe66:	4632      	mov	r2, r6
 800fe68:	463b      	mov	r3, r7
 800fe6a:	4630      	mov	r0, r6
 800fe6c:	4639      	mov	r1, r7
 800fe6e:	f7f0 fcf7 	bl	8000860 <__aeabi_dmul>
 800fe72:	4604      	mov	r4, r0
 800fe74:	460d      	mov	r5, r1
 800fe76:	2200      	movs	r2, #0
 800fe78:	4b4f      	ldr	r3, [pc, #316]	; (800ffb8 <__kernel_cos+0x178>)
 800fe7a:	f7f0 fcf1 	bl	8000860 <__aeabi_dmul>
 800fe7e:	4682      	mov	sl, r0
 800fe80:	468b      	mov	fp, r1
 800fe82:	4620      	mov	r0, r4
 800fe84:	4629      	mov	r1, r5
 800fe86:	a33e      	add	r3, pc, #248	; (adr r3, 800ff80 <__kernel_cos+0x140>)
 800fe88:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe8c:	f7f0 fce8 	bl	8000860 <__aeabi_dmul>
 800fe90:	a33d      	add	r3, pc, #244	; (adr r3, 800ff88 <__kernel_cos+0x148>)
 800fe92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe96:	f7f0 fb2d 	bl	80004f4 <__adddf3>
 800fe9a:	4622      	mov	r2, r4
 800fe9c:	462b      	mov	r3, r5
 800fe9e:	f7f0 fcdf 	bl	8000860 <__aeabi_dmul>
 800fea2:	a33b      	add	r3, pc, #236	; (adr r3, 800ff90 <__kernel_cos+0x150>)
 800fea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fea8:	f7f0 fb22 	bl	80004f0 <__aeabi_dsub>
 800feac:	4622      	mov	r2, r4
 800feae:	462b      	mov	r3, r5
 800feb0:	f7f0 fcd6 	bl	8000860 <__aeabi_dmul>
 800feb4:	a338      	add	r3, pc, #224	; (adr r3, 800ff98 <__kernel_cos+0x158>)
 800feb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feba:	f7f0 fb1b 	bl	80004f4 <__adddf3>
 800febe:	4622      	mov	r2, r4
 800fec0:	462b      	mov	r3, r5
 800fec2:	f7f0 fccd 	bl	8000860 <__aeabi_dmul>
 800fec6:	a336      	add	r3, pc, #216	; (adr r3, 800ffa0 <__kernel_cos+0x160>)
 800fec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fecc:	f7f0 fb10 	bl	80004f0 <__aeabi_dsub>
 800fed0:	4622      	mov	r2, r4
 800fed2:	462b      	mov	r3, r5
 800fed4:	f7f0 fcc4 	bl	8000860 <__aeabi_dmul>
 800fed8:	a333      	add	r3, pc, #204	; (adr r3, 800ffa8 <__kernel_cos+0x168>)
 800feda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fede:	f7f0 fb09 	bl	80004f4 <__adddf3>
 800fee2:	4622      	mov	r2, r4
 800fee4:	462b      	mov	r3, r5
 800fee6:	f7f0 fcbb 	bl	8000860 <__aeabi_dmul>
 800feea:	4622      	mov	r2, r4
 800feec:	462b      	mov	r3, r5
 800feee:	f7f0 fcb7 	bl	8000860 <__aeabi_dmul>
 800fef2:	4604      	mov	r4, r0
 800fef4:	460d      	mov	r5, r1
 800fef6:	4630      	mov	r0, r6
 800fef8:	4639      	mov	r1, r7
 800fefa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fefe:	f7f0 fcaf 	bl	8000860 <__aeabi_dmul>
 800ff02:	460b      	mov	r3, r1
 800ff04:	4602      	mov	r2, r0
 800ff06:	4629      	mov	r1, r5
 800ff08:	4620      	mov	r0, r4
 800ff0a:	f7f0 faf1 	bl	80004f0 <__aeabi_dsub>
 800ff0e:	4b2b      	ldr	r3, [pc, #172]	; (800ffbc <__kernel_cos+0x17c>)
 800ff10:	4606      	mov	r6, r0
 800ff12:	460f      	mov	r7, r1
 800ff14:	4598      	cmp	r8, r3
 800ff16:	dc10      	bgt.n	800ff3a <__kernel_cos+0xfa>
 800ff18:	4602      	mov	r2, r0
 800ff1a:	460b      	mov	r3, r1
 800ff1c:	4650      	mov	r0, sl
 800ff1e:	4659      	mov	r1, fp
 800ff20:	f7f0 fae6 	bl	80004f0 <__aeabi_dsub>
 800ff24:	4602      	mov	r2, r0
 800ff26:	460b      	mov	r3, r1
 800ff28:	2000      	movs	r0, #0
 800ff2a:	4925      	ldr	r1, [pc, #148]	; (800ffc0 <__kernel_cos+0x180>)
 800ff2c:	f7f0 fae0 	bl	80004f0 <__aeabi_dsub>
 800ff30:	ec41 0b10 	vmov	d0, r0, r1
 800ff34:	b003      	add	sp, #12
 800ff36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff3a:	4b22      	ldr	r3, [pc, #136]	; (800ffc4 <__kernel_cos+0x184>)
 800ff3c:	2400      	movs	r4, #0
 800ff3e:	2000      	movs	r0, #0
 800ff40:	491f      	ldr	r1, [pc, #124]	; (800ffc0 <__kernel_cos+0x180>)
 800ff42:	4598      	cmp	r8, r3
 800ff44:	4622      	mov	r2, r4
 800ff46:	bfd4      	ite	le
 800ff48:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ff4c:	4d1e      	ldrgt	r5, [pc, #120]	; (800ffc8 <__kernel_cos+0x188>)
 800ff4e:	462b      	mov	r3, r5
 800ff50:	f7f0 face 	bl	80004f0 <__aeabi_dsub>
 800ff54:	4622      	mov	r2, r4
 800ff56:	4680      	mov	r8, r0
 800ff58:	4689      	mov	r9, r1
 800ff5a:	462b      	mov	r3, r5
 800ff5c:	4650      	mov	r0, sl
 800ff5e:	4659      	mov	r1, fp
 800ff60:	f7f0 fac6 	bl	80004f0 <__aeabi_dsub>
 800ff64:	4632      	mov	r2, r6
 800ff66:	463b      	mov	r3, r7
 800ff68:	f7f0 fac2 	bl	80004f0 <__aeabi_dsub>
 800ff6c:	4602      	mov	r2, r0
 800ff6e:	460b      	mov	r3, r1
 800ff70:	4640      	mov	r0, r8
 800ff72:	4649      	mov	r1, r9
 800ff74:	e7da      	b.n	800ff2c <__kernel_cos+0xec>
 800ff76:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800ffb0 <__kernel_cos+0x170>
 800ff7a:	e7db      	b.n	800ff34 <__kernel_cos+0xf4>
 800ff7c:	f3af 8000 	nop.w
 800ff80:	be8838d4 	.word	0xbe8838d4
 800ff84:	bda8fae9 	.word	0xbda8fae9
 800ff88:	bdb4b1c4 	.word	0xbdb4b1c4
 800ff8c:	3e21ee9e 	.word	0x3e21ee9e
 800ff90:	809c52ad 	.word	0x809c52ad
 800ff94:	3e927e4f 	.word	0x3e927e4f
 800ff98:	19cb1590 	.word	0x19cb1590
 800ff9c:	3efa01a0 	.word	0x3efa01a0
 800ffa0:	16c15177 	.word	0x16c15177
 800ffa4:	3f56c16c 	.word	0x3f56c16c
 800ffa8:	5555554c 	.word	0x5555554c
 800ffac:	3fa55555 	.word	0x3fa55555
 800ffb0:	00000000 	.word	0x00000000
 800ffb4:	3ff00000 	.word	0x3ff00000
 800ffb8:	3fe00000 	.word	0x3fe00000
 800ffbc:	3fd33332 	.word	0x3fd33332
 800ffc0:	3ff00000 	.word	0x3ff00000
 800ffc4:	3fe90000 	.word	0x3fe90000
 800ffc8:	3fd20000 	.word	0x3fd20000
 800ffcc:	00000000 	.word	0x00000000

0800ffd0 <__kernel_rem_pio2>:
 800ffd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ffd4:	ed2d 8b02 	vpush	{d8}
 800ffd8:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800ffdc:	f112 0f14 	cmn.w	r2, #20
 800ffe0:	f04f 0500 	mov.w	r5, #0
 800ffe4:	9308      	str	r3, [sp, #32]
 800ffe6:	bfa8      	it	ge
 800ffe8:	1ed4      	subge	r4, r2, #3
 800ffea:	4bc3      	ldr	r3, [pc, #780]	; (80102f8 <__kernel_rem_pio2+0x328>)
 800ffec:	bfb8      	it	lt
 800ffee:	2400      	movlt	r4, #0
 800fff0:	9101      	str	r1, [sp, #4]
 800fff2:	ae22      	add	r6, sp, #136	; 0x88
 800fff4:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fff6:	900b      	str	r0, [sp, #44]	; 0x2c
 800fff8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fffc:	9302      	str	r3, [sp, #8]
 800fffe:	9b08      	ldr	r3, [sp, #32]
 8010000:	f103 33ff 	add.w	r3, r3, #4294967295
 8010004:	9306      	str	r3, [sp, #24]
 8010006:	bfa4      	itt	ge
 8010008:	2318      	movge	r3, #24
 801000a:	fb94 f4f3 	sdivge	r4, r4, r3
 801000e:	f06f 0317 	mvn.w	r3, #23
 8010012:	fb04 3303 	mla	r3, r4, r3, r3
 8010016:	eb03 0a02 	add.w	sl, r3, r2
 801001a:	9b02      	ldr	r3, [sp, #8]
 801001c:	9a06      	ldr	r2, [sp, #24]
 801001e:	eb03 0802 	add.w	r8, r3, r2
 8010022:	1aa7      	subs	r7, r4, r2
 8010024:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8010026:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 80102e8 <__kernel_rem_pio2+0x318>
 801002a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 801002e:	4545      	cmp	r5, r8
 8010030:	dd13      	ble.n	801005a <__kernel_rem_pio2+0x8a>
 8010032:	aa22      	add	r2, sp, #136	; 0x88
 8010034:	9b08      	ldr	r3, [sp, #32]
 8010036:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 801003a:	f04f 0800 	mov.w	r8, #0
 801003e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8010042:	ed9f 8ba9 	vldr	d8, [pc, #676]	; 80102e8 <__kernel_rem_pio2+0x318>
 8010046:	9b02      	ldr	r3, [sp, #8]
 8010048:	4598      	cmp	r8, r3
 801004a:	dc2e      	bgt.n	80100aa <__kernel_rem_pio2+0xda>
 801004c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8010050:	462f      	mov	r7, r5
 8010052:	2600      	movs	r6, #0
 8010054:	ed8d 8b04 	vstr	d8, [sp, #16]
 8010058:	e01b      	b.n	8010092 <__kernel_rem_pio2+0xc2>
 801005a:	42ef      	cmn	r7, r5
 801005c:	d407      	bmi.n	801006e <__kernel_rem_pio2+0x9e>
 801005e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8010062:	f7f0 fb93 	bl	800078c <__aeabi_i2d>
 8010066:	3501      	adds	r5, #1
 8010068:	e8e6 0102 	strd	r0, r1, [r6], #8
 801006c:	e7df      	b.n	801002e <__kernel_rem_pio2+0x5e>
 801006e:	ec51 0b18 	vmov	r0, r1, d8
 8010072:	e7f8      	b.n	8010066 <__kernel_rem_pio2+0x96>
 8010074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8010078:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 801007c:	3601      	adds	r6, #1
 801007e:	f7f0 fbef 	bl	8000860 <__aeabi_dmul>
 8010082:	4602      	mov	r2, r0
 8010084:	460b      	mov	r3, r1
 8010086:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 801008a:	f7f0 fa33 	bl	80004f4 <__adddf3>
 801008e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010092:	9b06      	ldr	r3, [sp, #24]
 8010094:	3f08      	subs	r7, #8
 8010096:	429e      	cmp	r6, r3
 8010098:	ddec      	ble.n	8010074 <__kernel_rem_pio2+0xa4>
 801009a:	f108 0801 	add.w	r8, r8, #1
 801009e:	3508      	adds	r5, #8
 80100a0:	ed9d 7b04 	vldr	d7, [sp, #16]
 80100a4:	ecab 7b02 	vstmia	fp!, {d7}
 80100a8:	e7cd      	b.n	8010046 <__kernel_rem_pio2+0x76>
 80100aa:	9b02      	ldr	r3, [sp, #8]
 80100ac:	aa0e      	add	r2, sp, #56	; 0x38
 80100ae:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80100b2:	930d      	str	r3, [sp, #52]	; 0x34
 80100b4:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80100b6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80100ba:	9c02      	ldr	r4, [sp, #8]
 80100bc:	930c      	str	r3, [sp, #48]	; 0x30
 80100be:	00e3      	lsls	r3, r4, #3
 80100c0:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 80100c4:	46a1      	mov	r9, r4
 80100c6:	930a      	str	r3, [sp, #40]	; 0x28
 80100c8:	ab9a      	add	r3, sp, #616	; 0x268
 80100ca:	46c3      	mov	fp, r8
 80100cc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80100d0:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80100d4:	ab72      	add	r3, sp, #456	; 0x1c8
 80100d6:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80100da:	f1b9 0f00 	cmp.w	r9, #0
 80100de:	f1a5 0508 	sub.w	r5, r5, #8
 80100e2:	dc77      	bgt.n	80101d4 <__kernel_rem_pio2+0x204>
 80100e4:	4650      	mov	r0, sl
 80100e6:	ec47 6b10 	vmov	d0, r6, r7
 80100ea:	f000 fc0d 	bl	8010908 <scalbn>
 80100ee:	2200      	movs	r2, #0
 80100f0:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80100f4:	ee10 0a10 	vmov	r0, s0
 80100f8:	ec57 6b10 	vmov	r6, r7, d0
 80100fc:	4639      	mov	r1, r7
 80100fe:	f7f0 fbaf 	bl	8000860 <__aeabi_dmul>
 8010102:	ec41 0b10 	vmov	d0, r0, r1
 8010106:	f000 fb7b 	bl	8010800 <floor>
 801010a:	2200      	movs	r2, #0
 801010c:	4b7b      	ldr	r3, [pc, #492]	; (80102fc <__kernel_rem_pio2+0x32c>)
 801010e:	ec51 0b10 	vmov	r0, r1, d0
 8010112:	f7f0 fba5 	bl	8000860 <__aeabi_dmul>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	4630      	mov	r0, r6
 801011c:	4639      	mov	r1, r7
 801011e:	f7f0 f9e7 	bl	80004f0 <__aeabi_dsub>
 8010122:	460f      	mov	r7, r1
 8010124:	4606      	mov	r6, r0
 8010126:	f7f0 fe35 	bl	8000d94 <__aeabi_d2iz>
 801012a:	9004      	str	r0, [sp, #16]
 801012c:	f7f0 fb2e 	bl	800078c <__aeabi_i2d>
 8010130:	4602      	mov	r2, r0
 8010132:	460b      	mov	r3, r1
 8010134:	4630      	mov	r0, r6
 8010136:	4639      	mov	r1, r7
 8010138:	f7f0 f9da 	bl	80004f0 <__aeabi_dsub>
 801013c:	f1ba 0f00 	cmp.w	sl, #0
 8010140:	4606      	mov	r6, r0
 8010142:	460f      	mov	r7, r1
 8010144:	dd6d      	ble.n	8010222 <__kernel_rem_pio2+0x252>
 8010146:	1e62      	subs	r2, r4, #1
 8010148:	ab0e      	add	r3, sp, #56	; 0x38
 801014a:	f1ca 0118 	rsb	r1, sl, #24
 801014e:	9d04      	ldr	r5, [sp, #16]
 8010150:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8010154:	fa40 f301 	asr.w	r3, r0, r1
 8010158:	441d      	add	r5, r3
 801015a:	408b      	lsls	r3, r1
 801015c:	1ac0      	subs	r0, r0, r3
 801015e:	ab0e      	add	r3, sp, #56	; 0x38
 8010160:	9504      	str	r5, [sp, #16]
 8010162:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8010166:	f1ca 0317 	rsb	r3, sl, #23
 801016a:	fa40 fb03 	asr.w	fp, r0, r3
 801016e:	f1bb 0f00 	cmp.w	fp, #0
 8010172:	dd65      	ble.n	8010240 <__kernel_rem_pio2+0x270>
 8010174:	9b04      	ldr	r3, [sp, #16]
 8010176:	2200      	movs	r2, #0
 8010178:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801017c:	3301      	adds	r3, #1
 801017e:	4615      	mov	r5, r2
 8010180:	9304      	str	r3, [sp, #16]
 8010182:	4294      	cmp	r4, r2
 8010184:	f300 809c 	bgt.w	80102c0 <__kernel_rem_pio2+0x2f0>
 8010188:	f1ba 0f00 	cmp.w	sl, #0
 801018c:	dd07      	ble.n	801019e <__kernel_rem_pio2+0x1ce>
 801018e:	f1ba 0f01 	cmp.w	sl, #1
 8010192:	f000 80bf 	beq.w	8010314 <__kernel_rem_pio2+0x344>
 8010196:	f1ba 0f02 	cmp.w	sl, #2
 801019a:	f000 80c5 	beq.w	8010328 <__kernel_rem_pio2+0x358>
 801019e:	f1bb 0f02 	cmp.w	fp, #2
 80101a2:	d14d      	bne.n	8010240 <__kernel_rem_pio2+0x270>
 80101a4:	4632      	mov	r2, r6
 80101a6:	463b      	mov	r3, r7
 80101a8:	2000      	movs	r0, #0
 80101aa:	4955      	ldr	r1, [pc, #340]	; (8010300 <__kernel_rem_pio2+0x330>)
 80101ac:	f7f0 f9a0 	bl	80004f0 <__aeabi_dsub>
 80101b0:	4606      	mov	r6, r0
 80101b2:	460f      	mov	r7, r1
 80101b4:	2d00      	cmp	r5, #0
 80101b6:	d043      	beq.n	8010240 <__kernel_rem_pio2+0x270>
 80101b8:	4650      	mov	r0, sl
 80101ba:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 80102f0 <__kernel_rem_pio2+0x320>
 80101be:	f000 fba3 	bl	8010908 <scalbn>
 80101c2:	4630      	mov	r0, r6
 80101c4:	4639      	mov	r1, r7
 80101c6:	ec53 2b10 	vmov	r2, r3, d0
 80101ca:	f7f0 f991 	bl	80004f0 <__aeabi_dsub>
 80101ce:	4606      	mov	r6, r0
 80101d0:	460f      	mov	r7, r1
 80101d2:	e035      	b.n	8010240 <__kernel_rem_pio2+0x270>
 80101d4:	2200      	movs	r2, #0
 80101d6:	4b4b      	ldr	r3, [pc, #300]	; (8010304 <__kernel_rem_pio2+0x334>)
 80101d8:	4630      	mov	r0, r6
 80101da:	4639      	mov	r1, r7
 80101dc:	f7f0 fb40 	bl	8000860 <__aeabi_dmul>
 80101e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80101e4:	f7f0 fdd6 	bl	8000d94 <__aeabi_d2iz>
 80101e8:	f7f0 fad0 	bl	800078c <__aeabi_i2d>
 80101ec:	4602      	mov	r2, r0
 80101ee:	460b      	mov	r3, r1
 80101f0:	ec43 2b18 	vmov	d8, r2, r3
 80101f4:	2200      	movs	r2, #0
 80101f6:	4b44      	ldr	r3, [pc, #272]	; (8010308 <__kernel_rem_pio2+0x338>)
 80101f8:	f7f0 fb32 	bl	8000860 <__aeabi_dmul>
 80101fc:	4602      	mov	r2, r0
 80101fe:	460b      	mov	r3, r1
 8010200:	4630      	mov	r0, r6
 8010202:	4639      	mov	r1, r7
 8010204:	f7f0 f974 	bl	80004f0 <__aeabi_dsub>
 8010208:	f7f0 fdc4 	bl	8000d94 <__aeabi_d2iz>
 801020c:	f84b 0b04 	str.w	r0, [fp], #4
 8010210:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010214:	ec51 0b18 	vmov	r0, r1, d8
 8010218:	f7f0 f96c 	bl	80004f4 <__adddf3>
 801021c:	4606      	mov	r6, r0
 801021e:	460f      	mov	r7, r1
 8010220:	e75b      	b.n	80100da <__kernel_rem_pio2+0x10a>
 8010222:	d106      	bne.n	8010232 <__kernel_rem_pio2+0x262>
 8010224:	1e63      	subs	r3, r4, #1
 8010226:	aa0e      	add	r2, sp, #56	; 0x38
 8010228:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801022c:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8010230:	e79d      	b.n	801016e <__kernel_rem_pio2+0x19e>
 8010232:	2200      	movs	r2, #0
 8010234:	4b35      	ldr	r3, [pc, #212]	; (801030c <__kernel_rem_pio2+0x33c>)
 8010236:	f7f0 fd99 	bl	8000d6c <__aeabi_dcmpge>
 801023a:	2800      	cmp	r0, #0
 801023c:	d13d      	bne.n	80102ba <__kernel_rem_pio2+0x2ea>
 801023e:	4683      	mov	fp, r0
 8010240:	2200      	movs	r2, #0
 8010242:	2300      	movs	r3, #0
 8010244:	4630      	mov	r0, r6
 8010246:	4639      	mov	r1, r7
 8010248:	f7f0 fd72 	bl	8000d30 <__aeabi_dcmpeq>
 801024c:	2800      	cmp	r0, #0
 801024e:	f000 80bf 	beq.w	80103d0 <__kernel_rem_pio2+0x400>
 8010252:	1e65      	subs	r5, r4, #1
 8010254:	2200      	movs	r2, #0
 8010256:	462b      	mov	r3, r5
 8010258:	9902      	ldr	r1, [sp, #8]
 801025a:	428b      	cmp	r3, r1
 801025c:	da6b      	bge.n	8010336 <__kernel_rem_pio2+0x366>
 801025e:	2a00      	cmp	r2, #0
 8010260:	f000 8088 	beq.w	8010374 <__kernel_rem_pio2+0x3a4>
 8010264:	ab0e      	add	r3, sp, #56	; 0x38
 8010266:	f1aa 0a18 	sub.w	sl, sl, #24
 801026a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 801026e:	2b00      	cmp	r3, #0
 8010270:	f000 80ac 	beq.w	80103cc <__kernel_rem_pio2+0x3fc>
 8010274:	4650      	mov	r0, sl
 8010276:	00ec      	lsls	r4, r5, #3
 8010278:	46aa      	mov	sl, r5
 801027a:	ed9f 0b1d 	vldr	d0, [pc, #116]	; 80102f0 <__kernel_rem_pio2+0x320>
 801027e:	f000 fb43 	bl	8010908 <scalbn>
 8010282:	ab9a      	add	r3, sp, #616	; 0x268
 8010284:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8010288:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 801028c:	ec57 6b10 	vmov	r6, r7, d0
 8010290:	f1ba 0f00 	cmp.w	sl, #0
 8010294:	f280 80d5 	bge.w	8010442 <__kernel_rem_pio2+0x472>
 8010298:	462e      	mov	r6, r5
 801029a:	ed9f 8b13 	vldr	d8, [pc, #76]	; 80102e8 <__kernel_rem_pio2+0x318>
 801029e:	2e00      	cmp	r6, #0
 80102a0:	f2c0 8103 	blt.w	80104aa <__kernel_rem_pio2+0x4da>
 80102a4:	ab72      	add	r3, sp, #456	; 0x1c8
 80102a6:	f8df a068 	ldr.w	sl, [pc, #104]	; 8010310 <__kernel_rem_pio2+0x340>
 80102aa:	f04f 0800 	mov.w	r8, #0
 80102ae:	1baf      	subs	r7, r5, r6
 80102b0:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 80102b4:	ed8d 8b06 	vstr	d8, [sp, #24]
 80102b8:	e0e9      	b.n	801048e <__kernel_rem_pio2+0x4be>
 80102ba:	f04f 0b02 	mov.w	fp, #2
 80102be:	e759      	b.n	8010174 <__kernel_rem_pio2+0x1a4>
 80102c0:	f8d8 3000 	ldr.w	r3, [r8]
 80102c4:	b955      	cbnz	r5, 80102dc <__kernel_rem_pio2+0x30c>
 80102c6:	b123      	cbz	r3, 80102d2 <__kernel_rem_pio2+0x302>
 80102c8:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80102cc:	f8c8 3000 	str.w	r3, [r8]
 80102d0:	2301      	movs	r3, #1
 80102d2:	3201      	adds	r2, #1
 80102d4:	f108 0804 	add.w	r8, r8, #4
 80102d8:	461d      	mov	r5, r3
 80102da:	e752      	b.n	8010182 <__kernel_rem_pio2+0x1b2>
 80102dc:	1acb      	subs	r3, r1, r3
 80102de:	f8c8 3000 	str.w	r3, [r8]
 80102e2:	462b      	mov	r3, r5
 80102e4:	e7f5      	b.n	80102d2 <__kernel_rem_pio2+0x302>
 80102e6:	bf00      	nop
	...
 80102f4:	3ff00000 	.word	0x3ff00000
 80102f8:	08011168 	.word	0x08011168
 80102fc:	40200000 	.word	0x40200000
 8010300:	3ff00000 	.word	0x3ff00000
 8010304:	3e700000 	.word	0x3e700000
 8010308:	41700000 	.word	0x41700000
 801030c:	3fe00000 	.word	0x3fe00000
 8010310:	08011128 	.word	0x08011128
 8010314:	1e62      	subs	r2, r4, #1
 8010316:	ab0e      	add	r3, sp, #56	; 0x38
 8010318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801031c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010320:	a90e      	add	r1, sp, #56	; 0x38
 8010322:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8010326:	e73a      	b.n	801019e <__kernel_rem_pio2+0x1ce>
 8010328:	1e62      	subs	r2, r4, #1
 801032a:	ab0e      	add	r3, sp, #56	; 0x38
 801032c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010330:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8010334:	e7f4      	b.n	8010320 <__kernel_rem_pio2+0x350>
 8010336:	a90e      	add	r1, sp, #56	; 0x38
 8010338:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801033c:	3b01      	subs	r3, #1
 801033e:	430a      	orrs	r2, r1
 8010340:	e78a      	b.n	8010258 <__kernel_rem_pio2+0x288>
 8010342:	3301      	adds	r3, #1
 8010344:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8010348:	2900      	cmp	r1, #0
 801034a:	d0fa      	beq.n	8010342 <__kernel_rem_pio2+0x372>
 801034c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801034e:	18e3      	adds	r3, r4, r3
 8010350:	f104 0801 	add.w	r8, r4, #1
 8010354:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8010358:	9304      	str	r3, [sp, #16]
 801035a:	446a      	add	r2, sp
 801035c:	3a98      	subs	r2, #152	; 0x98
 801035e:	920a      	str	r2, [sp, #40]	; 0x28
 8010360:	9a08      	ldr	r2, [sp, #32]
 8010362:	18a5      	adds	r5, r4, r2
 8010364:	aa22      	add	r2, sp, #136	; 0x88
 8010366:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 801036a:	9b04      	ldr	r3, [sp, #16]
 801036c:	4543      	cmp	r3, r8
 801036e:	da04      	bge.n	801037a <__kernel_rem_pio2+0x3aa>
 8010370:	461c      	mov	r4, r3
 8010372:	e6a4      	b.n	80100be <__kernel_rem_pio2+0xee>
 8010374:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8010376:	2301      	movs	r3, #1
 8010378:	e7e4      	b.n	8010344 <__kernel_rem_pio2+0x374>
 801037a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801037c:	f04f 0900 	mov.w	r9, #0
 8010380:	2600      	movs	r6, #0
 8010382:	2700      	movs	r7, #0
 8010384:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8010388:	f7f0 fa00 	bl	800078c <__aeabi_i2d>
 801038c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801038e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8010392:	461c      	mov	r4, r3
 8010394:	46ab      	mov	fp, r5
 8010396:	9b06      	ldr	r3, [sp, #24]
 8010398:	4599      	cmp	r9, r3
 801039a:	dd06      	ble.n	80103aa <__kernel_rem_pio2+0x3da>
 801039c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801039e:	f108 0801 	add.w	r8, r8, #1
 80103a2:	e8e3 6702 	strd	r6, r7, [r3], #8
 80103a6:	930a      	str	r3, [sp, #40]	; 0x28
 80103a8:	e7df      	b.n	801036a <__kernel_rem_pio2+0x39a>
 80103aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80103ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 80103b2:	f7f0 fa55 	bl	8000860 <__aeabi_dmul>
 80103b6:	4602      	mov	r2, r0
 80103b8:	460b      	mov	r3, r1
 80103ba:	4630      	mov	r0, r6
 80103bc:	4639      	mov	r1, r7
 80103be:	f109 0901 	add.w	r9, r9, #1
 80103c2:	f7f0 f897 	bl	80004f4 <__adddf3>
 80103c6:	4606      	mov	r6, r0
 80103c8:	460f      	mov	r7, r1
 80103ca:	e7e4      	b.n	8010396 <__kernel_rem_pio2+0x3c6>
 80103cc:	3d01      	subs	r5, #1
 80103ce:	e749      	b.n	8010264 <__kernel_rem_pio2+0x294>
 80103d0:	f1ca 0000 	rsb	r0, sl, #0
 80103d4:	ec47 6b10 	vmov	d0, r6, r7
 80103d8:	f000 fa96 	bl	8010908 <scalbn>
 80103dc:	2200      	movs	r2, #0
 80103de:	4ba1      	ldr	r3, [pc, #644]	; (8010664 <__kernel_rem_pio2+0x694>)
 80103e0:	ee10 0a10 	vmov	r0, s0
 80103e4:	ec57 6b10 	vmov	r6, r7, d0
 80103e8:	4639      	mov	r1, r7
 80103ea:	f7f0 fcbf 	bl	8000d6c <__aeabi_dcmpge>
 80103ee:	b1f8      	cbz	r0, 8010430 <__kernel_rem_pio2+0x460>
 80103f0:	2200      	movs	r2, #0
 80103f2:	4b9d      	ldr	r3, [pc, #628]	; (8010668 <__kernel_rem_pio2+0x698>)
 80103f4:	4630      	mov	r0, r6
 80103f6:	4639      	mov	r1, r7
 80103f8:	f7f0 fa32 	bl	8000860 <__aeabi_dmul>
 80103fc:	1c65      	adds	r5, r4, #1
 80103fe:	f7f0 fcc9 	bl	8000d94 <__aeabi_d2iz>
 8010402:	4680      	mov	r8, r0
 8010404:	f7f0 f9c2 	bl	800078c <__aeabi_i2d>
 8010408:	2200      	movs	r2, #0
 801040a:	4b96      	ldr	r3, [pc, #600]	; (8010664 <__kernel_rem_pio2+0x694>)
 801040c:	f10a 0a18 	add.w	sl, sl, #24
 8010410:	f7f0 fa26 	bl	8000860 <__aeabi_dmul>
 8010414:	460b      	mov	r3, r1
 8010416:	4602      	mov	r2, r0
 8010418:	4639      	mov	r1, r7
 801041a:	4630      	mov	r0, r6
 801041c:	f7f0 f868 	bl	80004f0 <__aeabi_dsub>
 8010420:	f7f0 fcb8 	bl	8000d94 <__aeabi_d2iz>
 8010424:	ab0e      	add	r3, sp, #56	; 0x38
 8010426:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801042a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801042e:	e721      	b.n	8010274 <__kernel_rem_pio2+0x2a4>
 8010430:	4630      	mov	r0, r6
 8010432:	4639      	mov	r1, r7
 8010434:	f7f0 fcae 	bl	8000d94 <__aeabi_d2iz>
 8010438:	ab0e      	add	r3, sp, #56	; 0x38
 801043a:	4625      	mov	r5, r4
 801043c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8010440:	e718      	b.n	8010274 <__kernel_rem_pio2+0x2a4>
 8010442:	ab0e      	add	r3, sp, #56	; 0x38
 8010444:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8010448:	f10a 3aff 	add.w	sl, sl, #4294967295
 801044c:	f7f0 f99e 	bl	800078c <__aeabi_i2d>
 8010450:	4632      	mov	r2, r6
 8010452:	463b      	mov	r3, r7
 8010454:	f7f0 fa04 	bl	8000860 <__aeabi_dmul>
 8010458:	2200      	movs	r2, #0
 801045a:	4b83      	ldr	r3, [pc, #524]	; (8010668 <__kernel_rem_pio2+0x698>)
 801045c:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8010460:	4630      	mov	r0, r6
 8010462:	4639      	mov	r1, r7
 8010464:	f7f0 f9fc 	bl	8000860 <__aeabi_dmul>
 8010468:	4606      	mov	r6, r0
 801046a:	460f      	mov	r7, r1
 801046c:	e710      	b.n	8010290 <__kernel_rem_pio2+0x2c0>
 801046e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8010472:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8010476:	f108 0801 	add.w	r8, r8, #1
 801047a:	f7f0 f9f1 	bl	8000860 <__aeabi_dmul>
 801047e:	4602      	mov	r2, r0
 8010480:	460b      	mov	r3, r1
 8010482:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8010486:	f7f0 f835 	bl	80004f4 <__adddf3>
 801048a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801048e:	9b02      	ldr	r3, [sp, #8]
 8010490:	4598      	cmp	r8, r3
 8010492:	dc01      	bgt.n	8010498 <__kernel_rem_pio2+0x4c8>
 8010494:	45b8      	cmp	r8, r7
 8010496:	ddea      	ble.n	801046e <__kernel_rem_pio2+0x49e>
 8010498:	ab4a      	add	r3, sp, #296	; 0x128
 801049a:	3e01      	subs	r6, #1
 801049c:	ed9d 7b06 	vldr	d7, [sp, #24]
 80104a0:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80104a4:	ed87 7b00 	vstr	d7, [r7]
 80104a8:	e6f9      	b.n	801029e <__kernel_rem_pio2+0x2ce>
 80104aa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80104ac:	2b02      	cmp	r3, #2
 80104ae:	dc0b      	bgt.n	80104c8 <__kernel_rem_pio2+0x4f8>
 80104b0:	2b00      	cmp	r3, #0
 80104b2:	dc35      	bgt.n	8010520 <__kernel_rem_pio2+0x550>
 80104b4:	d059      	beq.n	801056a <__kernel_rem_pio2+0x59a>
 80104b6:	9b04      	ldr	r3, [sp, #16]
 80104b8:	f003 0007 	and.w	r0, r3, #7
 80104bc:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 80104c0:	ecbd 8b02 	vpop	{d8}
 80104c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80104c8:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80104ca:	2b03      	cmp	r3, #3
 80104cc:	d1f3      	bne.n	80104b6 <__kernel_rem_pio2+0x4e6>
 80104ce:	ab4a      	add	r3, sp, #296	; 0x128
 80104d0:	9502      	str	r5, [sp, #8]
 80104d2:	4423      	add	r3, r4
 80104d4:	461c      	mov	r4, r3
 80104d6:	469a      	mov	sl, r3
 80104d8:	9306      	str	r3, [sp, #24]
 80104da:	9b02      	ldr	r3, [sp, #8]
 80104dc:	f1aa 0a08 	sub.w	sl, sl, #8
 80104e0:	2b00      	cmp	r3, #0
 80104e2:	dc6b      	bgt.n	80105bc <__kernel_rem_pio2+0x5ec>
 80104e4:	46aa      	mov	sl, r5
 80104e6:	f1ba 0f01 	cmp.w	sl, #1
 80104ea:	f1a4 0408 	sub.w	r4, r4, #8
 80104ee:	f300 8085 	bgt.w	80105fc <__kernel_rem_pio2+0x62c>
 80104f2:	9c06      	ldr	r4, [sp, #24]
 80104f4:	2000      	movs	r0, #0
 80104f6:	2100      	movs	r1, #0
 80104f8:	3408      	adds	r4, #8
 80104fa:	2d01      	cmp	r5, #1
 80104fc:	f300 809d 	bgt.w	801063a <__kernel_rem_pio2+0x66a>
 8010500:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8010504:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010508:	f1bb 0f00 	cmp.w	fp, #0
 801050c:	f040 809b 	bne.w	8010646 <__kernel_rem_pio2+0x676>
 8010510:	9b01      	ldr	r3, [sp, #4]
 8010512:	e9c3 5600 	strd	r5, r6, [r3]
 8010516:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801051a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801051e:	e7ca      	b.n	80104b6 <__kernel_rem_pio2+0x4e6>
 8010520:	3408      	adds	r4, #8
 8010522:	ab4a      	add	r3, sp, #296	; 0x128
 8010524:	462e      	mov	r6, r5
 8010526:	2000      	movs	r0, #0
 8010528:	441c      	add	r4, r3
 801052a:	2100      	movs	r1, #0
 801052c:	2e00      	cmp	r6, #0
 801052e:	da36      	bge.n	801059e <__kernel_rem_pio2+0x5ce>
 8010530:	f1bb 0f00 	cmp.w	fp, #0
 8010534:	d039      	beq.n	80105aa <__kernel_rem_pio2+0x5da>
 8010536:	4602      	mov	r2, r0
 8010538:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801053c:	9c01      	ldr	r4, [sp, #4]
 801053e:	ae4c      	add	r6, sp, #304	; 0x130
 8010540:	e9c4 2300 	strd	r2, r3, [r4]
 8010544:	2401      	movs	r4, #1
 8010546:	4602      	mov	r2, r0
 8010548:	460b      	mov	r3, r1
 801054a:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801054e:	f7ef ffcf 	bl	80004f0 <__aeabi_dsub>
 8010552:	42a5      	cmp	r5, r4
 8010554:	da2c      	bge.n	80105b0 <__kernel_rem_pio2+0x5e0>
 8010556:	f1bb 0f00 	cmp.w	fp, #0
 801055a:	d002      	beq.n	8010562 <__kernel_rem_pio2+0x592>
 801055c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010560:	4619      	mov	r1, r3
 8010562:	9b01      	ldr	r3, [sp, #4]
 8010564:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010568:	e7a5      	b.n	80104b6 <__kernel_rem_pio2+0x4e6>
 801056a:	f504 731a 	add.w	r3, r4, #616	; 0x268
 801056e:	2000      	movs	r0, #0
 8010570:	2100      	movs	r1, #0
 8010572:	eb0d 0403 	add.w	r4, sp, r3
 8010576:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801057a:	2d00      	cmp	r5, #0
 801057c:	da09      	bge.n	8010592 <__kernel_rem_pio2+0x5c2>
 801057e:	f1bb 0f00 	cmp.w	fp, #0
 8010582:	d002      	beq.n	801058a <__kernel_rem_pio2+0x5ba>
 8010584:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010588:	4619      	mov	r1, r3
 801058a:	9b01      	ldr	r3, [sp, #4]
 801058c:	e9c3 0100 	strd	r0, r1, [r3]
 8010590:	e791      	b.n	80104b6 <__kernel_rem_pio2+0x4e6>
 8010592:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010596:	3d01      	subs	r5, #1
 8010598:	f7ef ffac 	bl	80004f4 <__adddf3>
 801059c:	e7ed      	b.n	801057a <__kernel_rem_pio2+0x5aa>
 801059e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80105a2:	3e01      	subs	r6, #1
 80105a4:	f7ef ffa6 	bl	80004f4 <__adddf3>
 80105a8:	e7c0      	b.n	801052c <__kernel_rem_pio2+0x55c>
 80105aa:	4602      	mov	r2, r0
 80105ac:	460b      	mov	r3, r1
 80105ae:	e7c5      	b.n	801053c <__kernel_rem_pio2+0x56c>
 80105b0:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80105b4:	3401      	adds	r4, #1
 80105b6:	f7ef ff9d 	bl	80004f4 <__adddf3>
 80105ba:	e7ca      	b.n	8010552 <__kernel_rem_pio2+0x582>
 80105bc:	9b02      	ldr	r3, [sp, #8]
 80105be:	e9da 8900 	ldrd	r8, r9, [sl]
 80105c2:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80105c6:	3b01      	subs	r3, #1
 80105c8:	4640      	mov	r0, r8
 80105ca:	4632      	mov	r2, r6
 80105cc:	4649      	mov	r1, r9
 80105ce:	9302      	str	r3, [sp, #8]
 80105d0:	463b      	mov	r3, r7
 80105d2:	f7ef ff8f 	bl	80004f4 <__adddf3>
 80105d6:	4602      	mov	r2, r0
 80105d8:	460b      	mov	r3, r1
 80105da:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80105de:	4640      	mov	r0, r8
 80105e0:	4649      	mov	r1, r9
 80105e2:	f7ef ff85 	bl	80004f0 <__aeabi_dsub>
 80105e6:	4632      	mov	r2, r6
 80105e8:	463b      	mov	r3, r7
 80105ea:	f7ef ff83 	bl	80004f4 <__adddf3>
 80105ee:	ed9d 7b08 	vldr	d7, [sp, #32]
 80105f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80105f6:	ed8a 7b00 	vstr	d7, [sl]
 80105fa:	e76e      	b.n	80104da <__kernel_rem_pio2+0x50a>
 80105fc:	e9d4 8900 	ldrd	r8, r9, [r4]
 8010600:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8010604:	4640      	mov	r0, r8
 8010606:	4649      	mov	r1, r9
 8010608:	4632      	mov	r2, r6
 801060a:	463b      	mov	r3, r7
 801060c:	f7ef ff72 	bl	80004f4 <__adddf3>
 8010610:	4602      	mov	r2, r0
 8010612:	460b      	mov	r3, r1
 8010614:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010618:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801061c:	4640      	mov	r0, r8
 801061e:	4649      	mov	r1, r9
 8010620:	f7ef ff66 	bl	80004f0 <__aeabi_dsub>
 8010624:	4632      	mov	r2, r6
 8010626:	463b      	mov	r3, r7
 8010628:	f7ef ff64 	bl	80004f4 <__adddf3>
 801062c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010630:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010634:	ed84 7b00 	vstr	d7, [r4]
 8010638:	e755      	b.n	80104e6 <__kernel_rem_pio2+0x516>
 801063a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801063e:	3d01      	subs	r5, #1
 8010640:	f7ef ff58 	bl	80004f4 <__adddf3>
 8010644:	e759      	b.n	80104fa <__kernel_rem_pio2+0x52a>
 8010646:	9b01      	ldr	r3, [sp, #4]
 8010648:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801064c:	9a01      	ldr	r2, [sp, #4]
 801064e:	601d      	str	r5, [r3, #0]
 8010650:	605c      	str	r4, [r3, #4]
 8010652:	609f      	str	r7, [r3, #8]
 8010654:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010658:	6110      	str	r0, [r2, #16]
 801065a:	60d3      	str	r3, [r2, #12]
 801065c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010660:	6153      	str	r3, [r2, #20]
 8010662:	e728      	b.n	80104b6 <__kernel_rem_pio2+0x4e6>
 8010664:	41700000 	.word	0x41700000
 8010668:	3e700000 	.word	0x3e700000
 801066c:	00000000 	.word	0x00000000

08010670 <__kernel_sin>:
 8010670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010674:	ec55 4b10 	vmov	r4, r5, d0
 8010678:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801067c:	ed2d 8b04 	vpush	{d8-d9}
 8010680:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010684:	b083      	sub	sp, #12
 8010686:	eeb0 8a41 	vmov.f32	s16, s2
 801068a:	eef0 8a61 	vmov.f32	s17, s3
 801068e:	9001      	str	r0, [sp, #4]
 8010690:	da06      	bge.n	80106a0 <__kernel_sin+0x30>
 8010692:	ee10 0a10 	vmov	r0, s0
 8010696:	4629      	mov	r1, r5
 8010698:	f7f0 fb7c 	bl	8000d94 <__aeabi_d2iz>
 801069c:	2800      	cmp	r0, #0
 801069e:	d051      	beq.n	8010744 <__kernel_sin+0xd4>
 80106a0:	4622      	mov	r2, r4
 80106a2:	462b      	mov	r3, r5
 80106a4:	4620      	mov	r0, r4
 80106a6:	4629      	mov	r1, r5
 80106a8:	f7f0 f8da 	bl	8000860 <__aeabi_dmul>
 80106ac:	4682      	mov	sl, r0
 80106ae:	468b      	mov	fp, r1
 80106b0:	4602      	mov	r2, r0
 80106b2:	460b      	mov	r3, r1
 80106b4:	4620      	mov	r0, r4
 80106b6:	4629      	mov	r1, r5
 80106b8:	f7f0 f8d2 	bl	8000860 <__aeabi_dmul>
 80106bc:	4680      	mov	r8, r0
 80106be:	4689      	mov	r9, r1
 80106c0:	4650      	mov	r0, sl
 80106c2:	4659      	mov	r1, fp
 80106c4:	a33f      	add	r3, pc, #252	; (adr r3, 80107c4 <__kernel_sin+0x154>)
 80106c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ca:	f7f0 f8c9 	bl	8000860 <__aeabi_dmul>
 80106ce:	a33f      	add	r3, pc, #252	; (adr r3, 80107cc <__kernel_sin+0x15c>)
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f7ef ff0c 	bl	80004f0 <__aeabi_dsub>
 80106d8:	4652      	mov	r2, sl
 80106da:	465b      	mov	r3, fp
 80106dc:	f7f0 f8c0 	bl	8000860 <__aeabi_dmul>
 80106e0:	a33c      	add	r3, pc, #240	; (adr r3, 80107d4 <__kernel_sin+0x164>)
 80106e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106e6:	f7ef ff05 	bl	80004f4 <__adddf3>
 80106ea:	4652      	mov	r2, sl
 80106ec:	465b      	mov	r3, fp
 80106ee:	f7f0 f8b7 	bl	8000860 <__aeabi_dmul>
 80106f2:	a33a      	add	r3, pc, #232	; (adr r3, 80107dc <__kernel_sin+0x16c>)
 80106f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106f8:	f7ef fefa 	bl	80004f0 <__aeabi_dsub>
 80106fc:	4652      	mov	r2, sl
 80106fe:	465b      	mov	r3, fp
 8010700:	f7f0 f8ae 	bl	8000860 <__aeabi_dmul>
 8010704:	a337      	add	r3, pc, #220	; (adr r3, 80107e4 <__kernel_sin+0x174>)
 8010706:	e9d3 2300 	ldrd	r2, r3, [r3]
 801070a:	f7ef fef3 	bl	80004f4 <__adddf3>
 801070e:	9b01      	ldr	r3, [sp, #4]
 8010710:	4606      	mov	r6, r0
 8010712:	460f      	mov	r7, r1
 8010714:	b9eb      	cbnz	r3, 8010752 <__kernel_sin+0xe2>
 8010716:	4602      	mov	r2, r0
 8010718:	460b      	mov	r3, r1
 801071a:	4650      	mov	r0, sl
 801071c:	4659      	mov	r1, fp
 801071e:	f7f0 f89f 	bl	8000860 <__aeabi_dmul>
 8010722:	a325      	add	r3, pc, #148	; (adr r3, 80107b8 <__kernel_sin+0x148>)
 8010724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010728:	f7ef fee2 	bl	80004f0 <__aeabi_dsub>
 801072c:	4642      	mov	r2, r8
 801072e:	464b      	mov	r3, r9
 8010730:	f7f0 f896 	bl	8000860 <__aeabi_dmul>
 8010734:	4602      	mov	r2, r0
 8010736:	460b      	mov	r3, r1
 8010738:	4620      	mov	r0, r4
 801073a:	4629      	mov	r1, r5
 801073c:	f7ef feda 	bl	80004f4 <__adddf3>
 8010740:	4604      	mov	r4, r0
 8010742:	460d      	mov	r5, r1
 8010744:	ec45 4b10 	vmov	d0, r4, r5
 8010748:	b003      	add	sp, #12
 801074a:	ecbd 8b04 	vpop	{d8-d9}
 801074e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010752:	2200      	movs	r2, #0
 8010754:	4b1a      	ldr	r3, [pc, #104]	; (80107c0 <__kernel_sin+0x150>)
 8010756:	ec51 0b18 	vmov	r0, r1, d8
 801075a:	f7f0 f881 	bl	8000860 <__aeabi_dmul>
 801075e:	4632      	mov	r2, r6
 8010760:	463b      	mov	r3, r7
 8010762:	ec41 0b19 	vmov	d9, r0, r1
 8010766:	4640      	mov	r0, r8
 8010768:	4649      	mov	r1, r9
 801076a:	f7f0 f879 	bl	8000860 <__aeabi_dmul>
 801076e:	4602      	mov	r2, r0
 8010770:	460b      	mov	r3, r1
 8010772:	ec51 0b19 	vmov	r0, r1, d9
 8010776:	f7ef febb 	bl	80004f0 <__aeabi_dsub>
 801077a:	4652      	mov	r2, sl
 801077c:	465b      	mov	r3, fp
 801077e:	f7f0 f86f 	bl	8000860 <__aeabi_dmul>
 8010782:	ec53 2b18 	vmov	r2, r3, d8
 8010786:	f7ef feb3 	bl	80004f0 <__aeabi_dsub>
 801078a:	4606      	mov	r6, r0
 801078c:	460f      	mov	r7, r1
 801078e:	4640      	mov	r0, r8
 8010790:	4649      	mov	r1, r9
 8010792:	a309      	add	r3, pc, #36	; (adr r3, 80107b8 <__kernel_sin+0x148>)
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	f7f0 f862 	bl	8000860 <__aeabi_dmul>
 801079c:	4602      	mov	r2, r0
 801079e:	460b      	mov	r3, r1
 80107a0:	4630      	mov	r0, r6
 80107a2:	4639      	mov	r1, r7
 80107a4:	f7ef fea6 	bl	80004f4 <__adddf3>
 80107a8:	4602      	mov	r2, r0
 80107aa:	460b      	mov	r3, r1
 80107ac:	4620      	mov	r0, r4
 80107ae:	4629      	mov	r1, r5
 80107b0:	f7ef fe9e 	bl	80004f0 <__aeabi_dsub>
 80107b4:	e7c4      	b.n	8010740 <__kernel_sin+0xd0>
 80107b6:	bf00      	nop
 80107b8:	55555549 	.word	0x55555549
 80107bc:	3fc55555 	.word	0x3fc55555
 80107c0:	3fe00000 	.word	0x3fe00000
 80107c4:	5acfd57c 	.word	0x5acfd57c
 80107c8:	3de5d93a 	.word	0x3de5d93a
 80107cc:	8a2b9ceb 	.word	0x8a2b9ceb
 80107d0:	3e5ae5e6 	.word	0x3e5ae5e6
 80107d4:	57b1fe7d 	.word	0x57b1fe7d
 80107d8:	3ec71de3 	.word	0x3ec71de3
 80107dc:	19c161d5 	.word	0x19c161d5
 80107e0:	3f2a01a0 	.word	0x3f2a01a0
 80107e4:	1110f8a6 	.word	0x1110f8a6
 80107e8:	3f811111 	.word	0x3f811111

080107ec <fabs>:
 80107ec:	ec51 0b10 	vmov	r0, r1, d0
 80107f0:	ee10 2a10 	vmov	r2, s0
 80107f4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80107f8:	ec43 2b10 	vmov	d0, r2, r3
 80107fc:	4770      	bx	lr
	...

08010800 <floor>:
 8010800:	ec51 0b10 	vmov	r0, r1, d0
 8010804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010808:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801080c:	460c      	mov	r4, r1
 801080e:	ee10 5a10 	vmov	r5, s0
 8010812:	ee10 8a10 	vmov	r8, s0
 8010816:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 801081a:	2e13      	cmp	r6, #19
 801081c:	dc33      	bgt.n	8010886 <floor+0x86>
 801081e:	2e00      	cmp	r6, #0
 8010820:	da14      	bge.n	801084c <floor+0x4c>
 8010822:	a335      	add	r3, pc, #212	; (adr r3, 80108f8 <floor+0xf8>)
 8010824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010828:	f7ef fe64 	bl	80004f4 <__adddf3>
 801082c:	2200      	movs	r2, #0
 801082e:	2300      	movs	r3, #0
 8010830:	f7f0 faa6 	bl	8000d80 <__aeabi_dcmpgt>
 8010834:	b138      	cbz	r0, 8010846 <floor+0x46>
 8010836:	2c00      	cmp	r4, #0
 8010838:	da58      	bge.n	80108ec <floor+0xec>
 801083a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801083e:	431d      	orrs	r5, r3
 8010840:	d001      	beq.n	8010846 <floor+0x46>
 8010842:	2500      	movs	r5, #0
 8010844:	4c2e      	ldr	r4, [pc, #184]	; (8010900 <floor+0x100>)
 8010846:	4621      	mov	r1, r4
 8010848:	4628      	mov	r0, r5
 801084a:	e026      	b.n	801089a <floor+0x9a>
 801084c:	4f2d      	ldr	r7, [pc, #180]	; (8010904 <floor+0x104>)
 801084e:	4137      	asrs	r7, r6
 8010850:	ea01 0307 	and.w	r3, r1, r7
 8010854:	4303      	orrs	r3, r0
 8010856:	d020      	beq.n	801089a <floor+0x9a>
 8010858:	a327      	add	r3, pc, #156	; (adr r3, 80108f8 <floor+0xf8>)
 801085a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801085e:	f7ef fe49 	bl	80004f4 <__adddf3>
 8010862:	2200      	movs	r2, #0
 8010864:	2300      	movs	r3, #0
 8010866:	f7f0 fa8b 	bl	8000d80 <__aeabi_dcmpgt>
 801086a:	2800      	cmp	r0, #0
 801086c:	d0eb      	beq.n	8010846 <floor+0x46>
 801086e:	2c00      	cmp	r4, #0
 8010870:	f04f 0500 	mov.w	r5, #0
 8010874:	bfbe      	ittt	lt
 8010876:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801087a:	fa43 f606 	asrlt.w	r6, r3, r6
 801087e:	19a4      	addlt	r4, r4, r6
 8010880:	ea24 0407 	bic.w	r4, r4, r7
 8010884:	e7df      	b.n	8010846 <floor+0x46>
 8010886:	2e33      	cmp	r6, #51	; 0x33
 8010888:	dd0b      	ble.n	80108a2 <floor+0xa2>
 801088a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801088e:	d104      	bne.n	801089a <floor+0x9a>
 8010890:	ee10 2a10 	vmov	r2, s0
 8010894:	460b      	mov	r3, r1
 8010896:	f7ef fe2d 	bl	80004f4 <__adddf3>
 801089a:	ec41 0b10 	vmov	d0, r0, r1
 801089e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80108a2:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80108a6:	f04f 33ff 	mov.w	r3, #4294967295
 80108aa:	fa23 f707 	lsr.w	r7, r3, r7
 80108ae:	4207      	tst	r7, r0
 80108b0:	d0f3      	beq.n	801089a <floor+0x9a>
 80108b2:	a311      	add	r3, pc, #68	; (adr r3, 80108f8 <floor+0xf8>)
 80108b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108b8:	f7ef fe1c 	bl	80004f4 <__adddf3>
 80108bc:	2200      	movs	r2, #0
 80108be:	2300      	movs	r3, #0
 80108c0:	f7f0 fa5e 	bl	8000d80 <__aeabi_dcmpgt>
 80108c4:	2800      	cmp	r0, #0
 80108c6:	d0be      	beq.n	8010846 <floor+0x46>
 80108c8:	2c00      	cmp	r4, #0
 80108ca:	da02      	bge.n	80108d2 <floor+0xd2>
 80108cc:	2e14      	cmp	r6, #20
 80108ce:	d103      	bne.n	80108d8 <floor+0xd8>
 80108d0:	3401      	adds	r4, #1
 80108d2:	ea25 0507 	bic.w	r5, r5, r7
 80108d6:	e7b6      	b.n	8010846 <floor+0x46>
 80108d8:	2301      	movs	r3, #1
 80108da:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80108de:	fa03 f606 	lsl.w	r6, r3, r6
 80108e2:	4435      	add	r5, r6
 80108e4:	4545      	cmp	r5, r8
 80108e6:	bf38      	it	cc
 80108e8:	18e4      	addcc	r4, r4, r3
 80108ea:	e7f2      	b.n	80108d2 <floor+0xd2>
 80108ec:	2500      	movs	r5, #0
 80108ee:	462c      	mov	r4, r5
 80108f0:	e7a9      	b.n	8010846 <floor+0x46>
 80108f2:	bf00      	nop
 80108f4:	f3af 8000 	nop.w
 80108f8:	8800759c 	.word	0x8800759c
 80108fc:	7e37e43c 	.word	0x7e37e43c
 8010900:	bff00000 	.word	0xbff00000
 8010904:	000fffff 	.word	0x000fffff

08010908 <scalbn>:
 8010908:	b570      	push	{r4, r5, r6, lr}
 801090a:	ec55 4b10 	vmov	r4, r5, d0
 801090e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010912:	4606      	mov	r6, r0
 8010914:	462b      	mov	r3, r5
 8010916:	b99a      	cbnz	r2, 8010940 <scalbn+0x38>
 8010918:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801091c:	4323      	orrs	r3, r4
 801091e:	d036      	beq.n	801098e <scalbn+0x86>
 8010920:	4b39      	ldr	r3, [pc, #228]	; (8010a08 <scalbn+0x100>)
 8010922:	4629      	mov	r1, r5
 8010924:	2200      	movs	r2, #0
 8010926:	ee10 0a10 	vmov	r0, s0
 801092a:	f7ef ff99 	bl	8000860 <__aeabi_dmul>
 801092e:	4b37      	ldr	r3, [pc, #220]	; (8010a0c <scalbn+0x104>)
 8010930:	4604      	mov	r4, r0
 8010932:	460d      	mov	r5, r1
 8010934:	429e      	cmp	r6, r3
 8010936:	da10      	bge.n	801095a <scalbn+0x52>
 8010938:	a32b      	add	r3, pc, #172	; (adr r3, 80109e8 <scalbn+0xe0>)
 801093a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801093e:	e03a      	b.n	80109b6 <scalbn+0xae>
 8010940:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010944:	428a      	cmp	r2, r1
 8010946:	d10c      	bne.n	8010962 <scalbn+0x5a>
 8010948:	ee10 2a10 	vmov	r2, s0
 801094c:	4620      	mov	r0, r4
 801094e:	4629      	mov	r1, r5
 8010950:	f7ef fdd0 	bl	80004f4 <__adddf3>
 8010954:	4604      	mov	r4, r0
 8010956:	460d      	mov	r5, r1
 8010958:	e019      	b.n	801098e <scalbn+0x86>
 801095a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801095e:	460b      	mov	r3, r1
 8010960:	3a36      	subs	r2, #54	; 0x36
 8010962:	4432      	add	r2, r6
 8010964:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010968:	428a      	cmp	r2, r1
 801096a:	dd08      	ble.n	801097e <scalbn+0x76>
 801096c:	2d00      	cmp	r5, #0
 801096e:	a120      	add	r1, pc, #128	; (adr r1, 80109f0 <scalbn+0xe8>)
 8010970:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010974:	da1c      	bge.n	80109b0 <scalbn+0xa8>
 8010976:	a120      	add	r1, pc, #128	; (adr r1, 80109f8 <scalbn+0xf0>)
 8010978:	e9d1 0100 	ldrd	r0, r1, [r1]
 801097c:	e018      	b.n	80109b0 <scalbn+0xa8>
 801097e:	2a00      	cmp	r2, #0
 8010980:	dd08      	ble.n	8010994 <scalbn+0x8c>
 8010982:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010986:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801098a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801098e:	ec45 4b10 	vmov	d0, r4, r5
 8010992:	bd70      	pop	{r4, r5, r6, pc}
 8010994:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010998:	da19      	bge.n	80109ce <scalbn+0xc6>
 801099a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801099e:	429e      	cmp	r6, r3
 80109a0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80109a4:	dd0a      	ble.n	80109bc <scalbn+0xb4>
 80109a6:	a112      	add	r1, pc, #72	; (adr r1, 80109f0 <scalbn+0xe8>)
 80109a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109ac:	2b00      	cmp	r3, #0
 80109ae:	d1e2      	bne.n	8010976 <scalbn+0x6e>
 80109b0:	a30f      	add	r3, pc, #60	; (adr r3, 80109f0 <scalbn+0xe8>)
 80109b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109b6:	f7ef ff53 	bl	8000860 <__aeabi_dmul>
 80109ba:	e7cb      	b.n	8010954 <scalbn+0x4c>
 80109bc:	a10a      	add	r1, pc, #40	; (adr r1, 80109e8 <scalbn+0xe0>)
 80109be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d0b8      	beq.n	8010938 <scalbn+0x30>
 80109c6:	a10e      	add	r1, pc, #56	; (adr r1, 8010a00 <scalbn+0xf8>)
 80109c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109cc:	e7b4      	b.n	8010938 <scalbn+0x30>
 80109ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109d2:	3236      	adds	r2, #54	; 0x36
 80109d4:	4620      	mov	r0, r4
 80109d6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80109da:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80109de:	2200      	movs	r2, #0
 80109e0:	4b0b      	ldr	r3, [pc, #44]	; (8010a10 <scalbn+0x108>)
 80109e2:	e7e8      	b.n	80109b6 <scalbn+0xae>
 80109e4:	f3af 8000 	nop.w
 80109e8:	c2f8f359 	.word	0xc2f8f359
 80109ec:	01a56e1f 	.word	0x01a56e1f
 80109f0:	8800759c 	.word	0x8800759c
 80109f4:	7e37e43c 	.word	0x7e37e43c
 80109f8:	8800759c 	.word	0x8800759c
 80109fc:	fe37e43c 	.word	0xfe37e43c
 8010a00:	c2f8f359 	.word	0xc2f8f359
 8010a04:	81a56e1f 	.word	0x81a56e1f
 8010a08:	43500000 	.word	0x43500000
 8010a0c:	ffff3cb0 	.word	0xffff3cb0
 8010a10:	3c900000 	.word	0x3c900000

08010a14 <_init>:
 8010a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a16:	bf00      	nop
 8010a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a1a:	bc08      	pop	{r3}
 8010a1c:	469e      	mov	lr, r3
 8010a1e:	4770      	bx	lr

08010a20 <_fini>:
 8010a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a22:	bf00      	nop
 8010a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a26:	bc08      	pop	{r3}
 8010a28:	469e      	mov	lr, r3
 8010a2a:	4770      	bx	lr
